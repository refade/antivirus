if (!Object.keys) {
  Object.keys = (function () {
    var hasOwnProperty = Object.prototype.hasOwnProperty,
        hasDontEnumBug = !({toString: null}).propertyIsEnumerable('toString'),
        dontEnums = [
          'toString',
          'toLocaleString',
          'valueOf',
          'hasOwnProperty',
          'isPrototypeOf',
          'propertyIsEnumerable',
          'constructor'
        ],
        dontEnumsLength = dontEnums.length

    return function (obj) {
      if (typeof obj !== 'object' && typeof obj !== 'function' || obj === null) throw new TypeError('Object.keys called on non-object')

      var result = []

      for (var prop in obj) {
        if (hasOwnProperty.call(obj, prop)) result.push(prop)
      }

      if (hasDontEnumBug) {
        for (var i=0; i < dontEnumsLength; i++) {
          if (hasOwnProperty.call(obj, dontEnums[i])) result.push(dontEnums[i])
        }
      }
      return result
    }
  })()
};/*
 A JavaScript implementation of the SHA family of hashes, as
 defined in FIPS PUB 180-4 and FIPS PUB 202, as well as the corresponding
 HMAC implementation as defined in FIPS PUB 198a

 Copyright Brian Turek 2008-2017
 Distributed under the BSD License
 See http://caligatio.github.com/jsSHA/ for more information

 Several functions taken from Paul Johnston
*/
'use strict';(function(I){function w(c,a,d){var l=0,b=[],g=0,f,n,k,e,h,q,y,p,m=!1,t=[],r=[],u,z=!1;d=d||{};f=d.encoding||"UTF8";u=d.numRounds||1;if(u!==parseInt(u,10)||1>u)throw Error("numRounds must a integer >= 1");if(0===c.lastIndexOf("SHA-",0))if(q=function(b,a){return A(b,a,c)},y=function(b,a,l,f){var g,e;if("SHA-224"===c||"SHA-256"===c)g=(a+65>>>9<<4)+15,e=16;else throw Error("Unexpected error in SHA-2 implementation");for(;b.length<=g;)b.push(0);b[a>>>5]|=128<<24-a%32;a=a+l;b[g]=a&4294967295;
b[g-1]=a/4294967296|0;l=b.length;for(a=0;a<l;a+=e)f=A(b.slice(a,a+e),f,c);if("SHA-224"===c)b=[f[0],f[1],f[2],f[3],f[4],f[5],f[6]];else if("SHA-256"===c)b=f;else throw Error("Unexpected error in SHA-2 implementation");return b},p=function(b){return b.slice()},"SHA-224"===c)h=512,e=224;else if("SHA-256"===c)h=512,e=256;else throw Error("Chosen SHA variant is not supported");else throw Error("Chosen SHA variant is not supported");k=B(a,f);n=x(c);this.setHMACKey=function(b,a,g){var e;if(!0===m)throw Error("HMAC key already set");
if(!0===z)throw Error("Cannot set HMAC key after calling update");f=(g||{}).encoding||"UTF8";a=B(a,f)(b);b=a.binLen;a=a.value;e=h>>>3;g=e/4-1;if(e<b/8){for(a=y(a,b,0,x(c));a.length<=g;)a.push(0);a[g]&=4294967040}else if(e>b/8){for(;a.length<=g;)a.push(0);a[g]&=4294967040}for(b=0;b<=g;b+=1)t[b]=a[b]^909522486,r[b]=a[b]^1549556828;n=q(t,n);l=h;m=!0};this.update=function(a){var c,f,e,d=0,p=h>>>5;c=k(a,b,g);a=c.binLen;f=c.value;c=a>>>5;for(e=0;e<c;e+=p)d+h<=a&&(n=q(f.slice(e,e+p),n),d+=h);l+=d;b=f.slice(d>>>
5);g=a%h;z=!0};this.getHash=function(a,f){var d,h,k,q;if(!0===m)throw Error("Cannot call getHash after setting HMAC key");k=C(f);switch(a){case "HEX":d=function(a){return D(a,e,k)};break;case "B64":d=function(a){return E(a,e,k)};break;case "BYTES":d=function(a){return F(a,e)};break;case "ARRAYBUFFER":try{h=new ArrayBuffer(0)}catch(v){throw Error("ARRAYBUFFER not supported by this environment");}d=function(a){return G(a,e)};break;default:throw Error("format must be HEX, B64, BYTES, or ARRAYBUFFER");
}q=y(b.slice(),g,l,p(n));for(h=1;h<u;h+=1)q=y(q,e,0,x(c));return d(q)};this.getHMAC=function(a,f){var d,k,t,u;if(!1===m)throw Error("Cannot call getHMAC without first setting HMAC key");t=C(f);switch(a){case "HEX":d=function(a){return D(a,e,t)};break;case "B64":d=function(a){return E(a,e,t)};break;case "BYTES":d=function(a){return F(a,e)};break;case "ARRAYBUFFER":try{d=new ArrayBuffer(0)}catch(v){throw Error("ARRAYBUFFER not supported by this environment");}d=function(a){return G(a,e)};break;default:throw Error("outputFormat must be HEX, B64, BYTES, or ARRAYBUFFER");
}k=y(b.slice(),g,l,p(n));u=q(r,x(c));u=y(k,e,h,u);return d(u)}}function m(){}function D(c,a,d){var l="";a/=8;var b,g;for(b=0;b<a;b+=1)g=c[b>>>2]>>>8*(3+b%4*-1),l+="0123456789abcdef".charAt(g>>>4&15)+"0123456789abcdef".charAt(g&15);return d.outputUpper?l.toUpperCase():l}function E(c,a,d){var l="",b=a/8,g,f,n;for(g=0;g<b;g+=3)for(f=g+1<b?c[g+1>>>2]:0,n=g+2<b?c[g+2>>>2]:0,n=(c[g>>>2]>>>8*(3+g%4*-1)&255)<<16|(f>>>8*(3+(g+1)%4*-1)&255)<<8|n>>>8*(3+(g+2)%4*-1)&255,f=0;4>f;f+=1)8*g+6*f<=a?l+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(n>>>
6*(3-f)&63):l+=d.b64Pad;return l}function F(c,a){var d="",l=a/8,b,g;for(b=0;b<l;b+=1)g=c[b>>>2]>>>8*(3+b%4*-1)&255,d+=String.fromCharCode(g);return d}function G(c,a){var d=a/8,l,b=new ArrayBuffer(d),g;g=new Uint8Array(b);for(l=0;l<d;l+=1)g[l]=c[l>>>2]>>>8*(3+l%4*-1)&255;return b}function C(c){var a={outputUpper:!1,b64Pad:"=",shakeLen:-1};c=c||{};a.outputUpper=c.outputUpper||!1;!0===c.hasOwnProperty("b64Pad")&&(a.b64Pad=c.b64Pad);if("boolean"!==typeof a.outputUpper)throw Error("Invalid outputUpper formatting option");
if("string"!==typeof a.b64Pad)throw Error("Invalid b64Pad formatting option");return a}function B(c,a){var d;switch(a){case "UTF8":case "UTF16BE":case "UTF16LE":break;default:throw Error("encoding must be UTF8, UTF16BE, or UTF16LE");}switch(c){case "HEX":d=function(a,b,c){var f=a.length,d,k,e,h,q;if(0!==f%2)throw Error("String of HEX type must be in byte increments");b=b||[0];c=c||0;q=c>>>3;for(d=0;d<f;d+=2){k=parseInt(a.substr(d,2),16);if(isNaN(k))throw Error("String of HEX type contains invalid characters");
h=(d>>>1)+q;for(e=h>>>2;b.length<=e;)b.push(0);b[e]|=k<<8*(3+h%4*-1)}return{value:b,binLen:4*f+c}};break;case "TEXT":d=function(c,b,d){var f,n,k=0,e,h,q,m,p,r;b=b||[0];d=d||0;q=d>>>3;if("UTF8"===a)for(r=3,e=0;e<c.length;e+=1)for(f=c.charCodeAt(e),n=[],128>f?n.push(f):2048>f?(n.push(192|f>>>6),n.push(128|f&63)):55296>f||57344<=f?n.push(224|f>>>12,128|f>>>6&63,128|f&63):(e+=1,f=65536+((f&1023)<<10|c.charCodeAt(e)&1023),n.push(240|f>>>18,128|f>>>12&63,128|f>>>6&63,128|f&63)),h=0;h<n.length;h+=1){p=k+
q;for(m=p>>>2;b.length<=m;)b.push(0);b[m]|=n[h]<<8*(r+p%4*-1);k+=1}else if("UTF16BE"===a||"UTF16LE"===a)for(r=2,n="UTF16LE"===a&&!0||"UTF16LE"!==a&&!1,e=0;e<c.length;e+=1){f=c.charCodeAt(e);!0===n&&(h=f&255,f=h<<8|f>>>8);p=k+q;for(m=p>>>2;b.length<=m;)b.push(0);b[m]|=f<<8*(r+p%4*-1);k+=2}return{value:b,binLen:8*k+d}};break;case "B64":d=function(a,b,c){var f=0,d,k,e,h,q,m,p;if(-1===a.search(/^[a-zA-Z0-9=+\/]+$/))throw Error("Invalid character in base-64 string");k=a.indexOf("=");a=a.replace(/\=/g,
"");if(-1!==k&&k<a.length)throw Error("Invalid '=' found in base-64 string");b=b||[0];c=c||0;m=c>>>3;for(k=0;k<a.length;k+=4){q=a.substr(k,4);for(e=h=0;e<q.length;e+=1)d="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(q[e]),h|=d<<18-6*e;for(e=0;e<q.length-1;e+=1){p=f+m;for(d=p>>>2;b.length<=d;)b.push(0);b[d]|=(h>>>16-8*e&255)<<8*(3+p%4*-1);f+=1}}return{value:b,binLen:8*f+c}};break;case "BYTES":d=function(a,b,c){var d,n,k,e,h;b=b||[0];c=c||0;k=c>>>3;for(n=0;n<a.length;n+=
1)d=a.charCodeAt(n),h=n+k,e=h>>>2,b.length<=e&&b.push(0),b[e]|=d<<8*(3+h%4*-1);return{value:b,binLen:8*a.length+c}};break;case "ARRAYBUFFER":try{d=new ArrayBuffer(0)}catch(l){throw Error("ARRAYBUFFER not supported by this environment");}d=function(a,b,c){var d,n,k,e,h;b=b||[0];c=c||0;n=c>>>3;h=new Uint8Array(a);for(d=0;d<a.byteLength;d+=1)e=d+n,k=e>>>2,b.length<=k&&b.push(0),b[k]|=h[d]<<8*(3+e%4*-1);return{value:b,binLen:8*a.byteLength+c}};break;default:throw Error("format must be HEX, TEXT, B64, BYTES, or ARRAYBUFFER");
}return d}function r(c,a){return c>>>a|c<<32-a}function J(c,a,d){return c&a^~c&d}function K(c,a,d){return c&a^c&d^a&d}function L(c){return r(c,2)^r(c,13)^r(c,22)}function M(c){return r(c,6)^r(c,11)^r(c,25)}function N(c){return r(c,7)^r(c,18)^c>>>3}function O(c){return r(c,17)^r(c,19)^c>>>10}function P(c,a){var d=(c&65535)+(a&65535);return((c>>>16)+(a>>>16)+(d>>>16)&65535)<<16|d&65535}function Q(c,a,d,l){var b=(c&65535)+(a&65535)+(d&65535)+(l&65535);return((c>>>16)+(a>>>16)+(d>>>16)+(l>>>16)+(b>>>
16)&65535)<<16|b&65535}function R(c,a,d,l,b){var g=(c&65535)+(a&65535)+(d&65535)+(l&65535)+(b&65535);return((c>>>16)+(a>>>16)+(d>>>16)+(l>>>16)+(b>>>16)+(g>>>16)&65535)<<16|g&65535}function x(c){var a=[],d;if(0===c.lastIndexOf("SHA-",0))switch(a=[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428],d=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],c){case "SHA-224":break;case "SHA-256":a=d;break;case "SHA-384":a=[new m,new m,
new m,new m,new m,new m,new m,new m];break;case "SHA-512":a=[new m,new m,new m,new m,new m,new m,new m,new m];break;default:throw Error("Unknown SHA variant");}else throw Error("No SHA variants supported");return a}function A(c,a,d){var l,b,g,f,n,k,e,h,m,r,p,w,t,x,u,z,A,B,C,D,E,F,v=[],G;if("SHA-224"===d||"SHA-256"===d)r=64,w=1,F=Number,t=P,x=Q,u=R,z=N,A=O,B=L,C=M,E=K,D=J,G=H;else throw Error("Unexpected error in SHA-2 implementation");d=a[0];l=a[1];b=a[2];g=a[3];f=a[4];n=a[5];k=a[6];e=a[7];for(p=
0;p<r;p+=1)16>p?(m=p*w,h=c.length<=m?0:c[m],m=c.length<=m+1?0:c[m+1],v[p]=new F(h,m)):v[p]=x(A(v[p-2]),v[p-7],z(v[p-15]),v[p-16]),h=u(e,C(f),D(f,n,k),G[p],v[p]),m=t(B(d),E(d,l,b)),e=k,k=n,n=f,f=t(g,h),g=b,b=l,l=d,d=t(h,m);a[0]=t(d,a[0]);a[1]=t(l,a[1]);a[2]=t(b,a[2]);a[3]=t(g,a[3]);a[4]=t(f,a[4]);a[5]=t(n,a[5]);a[6]=t(k,a[6]);a[7]=t(e,a[7]);return a}var H;H=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,
2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,
2756734187,3204031479,3329325298];"function"===typeof define&&define.amd?define(function(){return w}):"undefined"!==typeof exports?("undefined"!==typeof module&&module.exports&&(module.exports=w),exports=w):I.jsSHA=w})(this);
function VANAY_CALLBACK() {}

// define indexOf method
// reference: https://developer.mozilla.org/ja/docs/JavaScript/Reference/Global_Objects/Array/indexOf
if (!Array.prototype.indexOf) {
    Array.prototype.indexOf = function(searchElement /*, fromIndex */ ) {
        "use strict";

        if (this == null) {
            throw new TypeError();
        }

        var t = Object(this);
        var len = t.length >>> 0;

        if (len === 0) {
            return -1;
        }

        var n = 0;

        if (arguments.length > 0) {
            n = Number(arguments[1]);
            if (n != n) { // shortcut for verifying if it's NaN
                n = 0;
            } else if (n != 0 && n != Infinity && n != -Infinity) {
                n = (n > 0 || -1) * Math.floor(Math.abs(n));
            }
        }

        if (n >= len) {
            return -1;
        }

        var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);

        for (; k < len; k++) {
            if (k in t && t[k] === searchElement) {
                return k;
            }
        }
        return -1;
    }
}

/******
 * Analytics.js class
 * 
 ******/


var Analytics_t3;
Analytics_t3 = (function() {

    function Analytics_t3(flag) {
        this.init();
    }


    Analytics_t3.getDomain = function() {
        var arr_uri = location.hostname.match(/^(.*?)([a-z0-9][a-z0-9\-]{1,63}\.[a-z\.]{2,6})$/i);
        if (arr_uri == null) return ".localhost";
        arr_uri[2] = "." + arr_uri[2];
        return arr_uri[2];
    };
    Analytics_t3.prototype.setBaseURL = function(value) {
        this._baseURL = value;
    }
    Analytics_t3.prototype.getBaseURL = function() {
        return this._baseURL;
    };
    Analytics_t3.prototype.getVc = function() {
        return this._vc;
    };
    Analytics_t3.prototype.setVc = function(value) {
        this._vc = value;
    };
    Analytics_t3.prototype.getSelf = function() {
        return this._self;
    };
    Analytics_t3.prototype.setSelf = function(value) {
        this._self = value;
    };
    Analytics_t3.prototype.getCid = function() {
        return this._cid;
    };
    Analytics_t3.prototype.setCid = function(value) {
        this._cid = value;
    };
    Analytics_t3.prototype.getSid = function() {
        return this._sid;
    };
    Analytics_t3.prototype.setSid = function(value) {
        this._sid = value;
    };

    // set from external
    Analytics_t3.prototype.getUrl = function() {
        return this._url;
    };
    Analytics_t3.prototype.setUrl = function(value) {
        this._url = value;
    };
    Analytics_t3.prototype.getRef = function() {
        return this._ref;
    };
    Analytics_t3.prototype.setRef = function(value) {
        this._ref = value;
    };
    Analytics_t3.prototype.getSvcid = function() {
        return this._svcid;
    };
    Analytics_t3.prototype.setSvcid = function(value) {
        this._svcid = value;
    };
    Analytics_t3.prototype.getVid = function() {
        return this._vid;
    };
    Analytics_t3.prototype.setVid = function(value) {
        this._vid = value;
    };
    Analytics_t3.prototype.getUid = function() {
        return this._uid;
    };
    Analytics_t3.prototype.setUid = function(value) {
        this._uid = value;
    };
    Analytics_t3.prototype.getTotal = function() {
        return this._total;
    };
    Analytics_t3.prototype.setTotal = function(value) {
        this._total = value;
    };
    Analytics_t3.prototype.getPid = function() {
        return this._pid;
    };
    Analytics_t3.prototype.setPid = function(value) {
        this._pid = value;
    };

    Analytics_t3.prototype.getTagType = function() {
        return this._tagType;
    };
    Analytics_t3.prototype.setTagType = function(value) {
        this._tagType = value;
    };

    Analytics_t3.prototype.getObject = function() {
        return this._object;
    }
    Analytics_t3.prototype.setObject = function(value) {
        this._object = value;
    }
    Analytics_t3.prototype.getHistory = function() {
        return this._history;
    }
    Analytics_t3.prototype.setHistory = function(value) {
        this._history = value;
    }
    Analytics_t3.prototype.getPlid = function() {
        return this._plid;
    }
    Analytics_t3.prototype.setPlid = function(value) {
        this._plid = value;
    }


    Analytics_t3.prototype.requestUpdate = function(req) {
        this.requestExec(req);
    };

    Analytics_t3.prototype.lastBeacon = "";
    Analytics_t3.prototype.request = function(obj) {
        if (this.lastBeacon == obj.stat) {
            return;
        }
        this.lastBeacon = obj.stat;
        this.requestExec(obj);
    };
    Analytics_t3.prototype.request2 = function(obj) {
        if (this.lastBeacon == obj.stat) {
            return;
        }
        this.lastBeacon = obj.stat;
        this.requestExec(obj);
    };

    Analytics_t3.prototype.requestExec = function(obj) {

            var urlstr = this.genURL(obj);
            if (urlstr != "")
                this.send(urlstr);
        }
        /**
         * actual sending process
         * @param urlstr URL(beacon)
         */
    Analytics_t3.prototype.send = function(urlstr) {
        var target = document.createElement("script");
        target.src = urlstr;
        document.body.appendChild(target);
        document.body.removeChild(target);
    };
    /**
     * setup beacon url
     * @param dataobj beacon object
     */
    Analytics_t3.prototype.genURL = function(dataobj) {
        jstream_t3.utils.Logger.stateLog({
            time: dataobj.playhead,
            va: dataobj.stat
        });
        jstream_t3.utils.Logger.log(dataobj.stat, ",,,");
        // set mandatory values
        var res = this.getBaseURL();
        if (this.getSvcid() === undefined || this.getSvcid() === null || this.getSvcid() === "") return "";
        res += "?sv=" + encodeURIComponent(this.getSvcid());
        if (dataobj.playhead === undefined || dataobj.playhead === null || dataobj.playhead === "") return "";
        res += "&s=" + encodeURIComponent(dataobj.playhead);
        if (dataobj.stat === undefined || dataobj.stat === null || dataobj.stat === "") return "";
        res += "&e=" + encodeURIComponent(dataobj.stat);
        if (this.getVid() === undefined || this.getVid() === null || this.getVid() === "") return "";
        res += "&v=" + encodeURIComponent(this.getVid());
        res += "&lt=" + encodeURIComponent(new Date().getTime());

        if (this.getVc()) { res += "&vc=" + encodeURIComponent(this.getVc()); }
        if (this.getSid()) { res += "&sd=" + encodeURIComponent(this.getSid()); }
        if (this.getUid()) { res += "&u=" + encodeURIComponent(this.getUid()); }
        if (this.getPid()) { res += "&p=" + encodeURIComponent(this.getPid()); }

        if (this.getCid()) { res += "&cd=" + encodeURIComponent(this.getCid()); }
        if (this.getRef()) { res += "&rf=" + encodeURIComponent(this.getRef()); }
        if (this.getSelf()) { res += "&url=" + encodeURIComponent(this.getSelf()); }
        if (this.getObject()) { res += "&o=" + encodeURIComponent(this.getObject()); }
        if (this.getPlid()) { res += "&plid=" + encodeURIComponent(this.getPlid()); }
        if (this.getTagType()) { res += "&tagtype=" + encodeURIComponent(this.getTagType()); }


        res += "&t=" + encodeURIComponent(this.getTotal());

        // set the rest of values
        var excludeParams = ["playhead", "stat"];
        for (var key in dataobj) {
            var isExcludeParam = excludeParams.indexOf(key);
            if (isExcludeParam < 0) {
                res += "&" + key + "=" + encodeURIComponent(dataobj[key]);
            }
        }

        return res;
    };

    Analytics_t3.prototype.setEvents = function(playerAPI) {
        var _this = this;
        var history = this.getHistory();
        //_this.api = playerAPI;
        playerAPI.addEventListener("change_state", function(e) {

            var req = {
                playhead: playerAPI.getCurrentTime(),
                stat: playerAPI.state
            };
            if (/iP(hone|od|ad)/.test(navigator.platform)) {
                var appVersion = window.navigator.appVersion.toLowerCase();
                var v = (navigator.appVersion).match(/OS (\d+)_(\d+)_?(\d+)?/);
                var iosVersion = [parseInt(v[1], 10), parseInt(v[2], 10), parseInt((v[3] || "0"), 10)];
                if (iosVersion[0] < 8) {
                    if (req.stat == "paused" && req.playhead <= 0) {
                        req.playhead = playerAPI.last2Time;
                    }
                    if (req.stat == "playing" && playerAPI.video_event == "pause" && req.playhead <= 0) {
                        req.playhead = playerAPI.last2Time;
                    }
                }
            }
            var enviroment = playerAPI.model.getEnvironmentType();
            if (enviroment == jstream_t3.EnviromentKind.PC_PROGRESSIVE || enviroment == jstream_t3.EnviromentKind.HLSJS) {
                if (req.stat == "seek_start" || req.stat == "paused") {
                    req.playhead = playerAPI.lastTime;
                }
            }
            if (history.length >= 5) {
                return;
            }
            if (history.length == 0) {
                setInterval(function() {
                    history = new Array();
                    _this.setHistory = history;
                }, 1000)
            }
            switch (playerAPI.state) {
                case "landing":
                    _this.request(req);
                    break;
                case "playing":
                    // playing
                    history.push(playerAPI.state);
                    _this.request(req);
                    break;
                case "paused":
                    // stopping
                    history.push(playerAPI.state);
                    _this.request(req);
                    break;
                case "seek_start":
                    // start seeking
                    history.push(playerAPI.state);
                    req.stat = "paused";
                    _this.request(req);
                    break;
                case "complete":
                    // complete
                    req.playhead = 0;
                    _this.request(req);
                    break;
                case "exit":
                    // exit
                    req.stat = "exit"
                    _this.request(req);
                    break;
            }
        });

        playerAPI.addEventListener("update", function(e) {
            var req = {
                playhead: playerAPI.getCurrentTime(),
                stat: "updated"
            };
            _this.requestUpdate(req);
        });

        playerAPI.addEventListener("exit", function() {
            var req = {
                playhead: playerAPI.getCurrentTime(),
                stat: "exit"
            };
            _this.request(req);
        })
    };

    Analytics_t3.prototype.sendClickBeacon = function(type, time) {
        // click beacon
        var clickReq = {
            playhead: time,
            c: type,
            stat: "click"
        };
        if (clickReq.c == "replay") {
            clickReq.playhead = 0;
        }
        this.requestUpdate(clickReq);
    };

    /**
     * initializing
     * set values that Analytics_t3 class generates itself.
     */
    Analytics_t3.prototype.init = function() {
        // initializing value
        this.setSelf(encodeURIComponent(document.location.href));
        this.setVc(Analytics_t3.random(4));

        // get from url
        var cid = this.getQuerystring("cid", "");
        var sid = this.getQuerystring("eqplsid", "");

        // the case cannot get from url
        if (cid == "") {
            this.setCid(Analytics_t3.createCid());
        } else {
            this.setCid(cid);
        }
        if (sid == "") {
            this.setSid(Analytics_t3.createSid());
        } else {
            this.setSid(sid);
        }
        this.setHistory(new Array());
        // set baseURL
        this.initBaseURL();
    };
    /**
     * set beacon url
     */
    Analytics_t3.prototype.initBaseURL = function() {
        var protocol = "http";
        if (location.href.indexOf("https://") == 0) {
            protocol = "https";
        }
        this._baseURL = protocol + '://eq-beacon.stream.co.jp/va/';
    };

    /**
     * get value from url query
     * @param key 
     * @param default_ 
     */
    Analytics_t3.prototype.getQuerystring = function(key, default_) {
        if (default_ == null) default_ = "";
        key = key.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
        var regex = new RegExp("[\\?&]" + key + "=([^&#]*)");
        var qs = regex.exec(window.location.href);
        if (qs == null)
            return default_;
        else
            return qs[1];
    };

    return Analytics_t3;
})();

// static
Analytics_t3.setCookieSID = function(sid) {
    var tmp = 'VA_SESSION_ID=' + sid + ';';
    tmp += ' path=/;';
    if (Analytics_t3._domain) tmp += ' domain=' + Analytics_t3._domain + ';';
    document.cookie = tmp;
};
Analytics_t3.createSid = function() {
    if (document.cookie) {
        // retrieve from cookie
        var cookies = document.cookie.split("; ");
        for (var i = 0; i < cookies.length; i++) {
            var str = cookies[i].split("=");
            if (str[0] == 'VA_SESSION_ID') {
                return str[1];
            }
        }
    }

    var sid = Analytics_t3.random(32);
    Analytics_t3.setCookieSID(sid);
    return sid;
};

// set value to cookie
Analytics_t3.setCookieCID = function(cid) {
    var dt = new Date();
    dt.setFullYear(dt.getFullYear() + 1);
    var tmp = 'VA_CONV_ID=' + cid + ';';
    tmp += ' path=/;';
    tmp += ' expires=' + dt.toGMTString() + ';';
    if (Analytics_t3._domain) tmp += ' domain=' + Analytics_t3._domain + ';';
    document.cookie = tmp;
};
Analytics_t3.createCid = function() {
    Analytics_t3._domain = this.getDomain();
    if (document.cookie) {
        var cookies = document.cookie.split("; ");
        for (var i = 0; i < cookies.length; i++) {
            var str = cookies[i].split("=");
            if (str[0] == 'VA_CONV_ID') {
                var _VANAY_CID = str[1];

                Analytics_t3.setCookieCID(_VANAY_CID);
                return str[1];
            }
        }
    }

    var cid = Analytics_t3.random(32);
    Analytics_t3.setCookieCID(cid);

    return cid;
};
/**
 * VANAY_RANDOM
 */
Analytics_t3.random = function(n) {
    var seed = 'abcdefghijklmnopqrstuvwxyz' +
        'ABCDEFGHIJKLMNOPQRSTUVWXYZ' +
        '0123456789';
    seed = seed.split('');
    var s = '';
    for (var i = 0; i < n; i++) {
        s += seed[Math.floor(Math.random() * seed.length)];
    }
    return s;
};

Analytics_t3.prototype.resetLastBecon = function() {
    this.lastBeacon = "";
};var JMCPlayer;

if (typeof JMCPlayer === "undefined" || JMCPlayer === null) {
	JMCPlayer = function(id, params) {
	if(this.isT3(params)){
		this.flashVars = params || new jstream_t3.model.EQPlayerMode();
			this.targetElementID = "eq-"+id;
	    this.fieldID = "eqField-"+id;
	    this.isMobile = jstream_t3.utils.Util.isMobileList();
	    this.accessor = jstream_t3.EQPlayerAccessAPIBuilder.create(this);

	    
	    this.objectID = this.accessor.objectID;
	    if(JMCPlayer.kinds == null) {
	      JMCPlayer.kinds = new jstream_t3.resource.LanguageResource().kinds;
	    }
	}else{
		this.flashVars = params || new jstream.model.EQPlayerMode();
			this.targetElementID = "eq-"+id;
	    this.fieldID = "eqField-"+id;
	    this.isMobile = jstream.utils.Util.isMobileList();
	    this.accessor = jstream.EQPlayerAccessAPIBuilder.create(this);

	    
	    this.objectID = this.accessor.objectID;
	    if(JMCPlayer.kinds == null) {
	      JMCPlayer.kinds = new jstream.resource.LanguageResource().kinds;
	    }
	}
    
		JMCPlayer.instance = this;
	};
	
	JMCPlayer.browserLanguage = function(obj) {
		if(obj === "v3"){
			return jstream_t3.utils.Util.browserLanguage();
		}else{
			return jstream.utils.Util.browserLanguage();
		}
	}

	JMCPlayer.getStartTime = function (){
		return location.hash.replace( /^#/, '' ); 
	}
  JMCPlayer.prototype.fieldID = "eqFieldID";
  JMCPlayer.prototype.targetElementID= "";
  JMCPlayer.prototype.flashVars= null;
  JMCPlayer.prototype.metaData= {};
  JMCPlayer.prototype.playerSetting= {};
  JMCPlayer.prototype.flashVarsList= [];

  JMCPlayer.prototype.create = function() {
    this.accessor.createPlayer();
  };


  JMCPlayer.prototype.getFlashVarsLength = function() {
    return this.flashVarsList.length;
  };

  JMCPlayer.prototype.getFlashVarsAt = function(index) {
    if(typeof(jstream_t3)!="undefined"){
		return jstream_t3.utils.Util.escapeObject(this.flashVarsList[index]);
    }else{
    	return jstream.utils.Util.escapeObject(this.flashVarsList[index]);
    }

  };
  
  JMCPlayer.prototype.getFlashVars = function() {
    return this.flashVars;
  };
  
  JMCPlayer.prototype.isT3 = function(params, i) {
  	var len;
	if(typeof(params.stype) == "undefined"){
		return false;
	}
	var majorVer=params.tagType.split("_")[1];
	if((params.stype == "s1" || params.stype == "s2")){
		if(params.tagType=="player_2_0_0beta_syn"){
			return false
		}
  		if(Number(majorVer) < 2){
			return false;
		}
  	}
  	//v3タグを使わないバージョンを列挙
  	var arr = ["player_1_0_0", "player_1_12_2", "player_1_12_3", "player_1_12_4", "player_1_15_0_syn"];
  	len = arr.length;
	i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;
  	for ( ; i < len; i++ ) {
		// Skip accessing in sparse arrays
		if ( i in arr && arr[ i ] === params.tagType ) {
			return false;
		}
	}
	
	
	return true;
  };
 }/**
*	imba_t3.js ライブラリ
*
*	@author	いしかわ裕一郎
*	@version 0.10
*	@copyright Copyright (c) 2012 Alquimista Inc.
*	2013/07/04 kametani修正
*/
// charset="UTF-8"
(function(window)
{
	var	imba_t3 = {};
	var document = window.document;
	var _cb_on_init = [];
	var	_isReady = false;

	imba_t3.VERSION_TEXT = 'imba_t3.js version 0,10   Copyright 2012 Alquimista Inc.';

	/**
	*	この関数で登録した関数は、DOMが利用できるようになったら呼び出されます
	*/
	imba_t3.set_init_callback = function( fx_init )
	{
		if( _isReady ){
			fx_init() ;
		}
		else{
			_cb_on_init[_cb_on_init.length] = fx_init ;
		}
	}

	imba_t3._init_on_ready = function()
	{
		// kill the timer
		if (_timer) clearInterval(_timer);
		// quit if this function has already been called
		if( arguments.callee.done ) return;
		// flag this function so we don't do the same thing twice
		arguments.callee.done = true;
		// do stuff
		_isReady = true;

		for( var i = 0 ; i < _cb_on_init.length ; i ++ ){
			if( _cb_on_init[i] !== undefined ){
				_cb_on_init[i]();
				delete _cb_on_init[i];
			}
		}
	};

	if( document.addEventListener ){
		document.addEventListener("DOMContentLoaded", imba_t3._init_on_ready, false);
	}
	
	if( /WebKit/i.test(navigator.userAgent) ){
		var _timer = setInterval(	function()
									{
										if( /loaded|complete/.test(document.readyState) ){
											clearInterval(_timer);
											imba_t3._init_on_ready();
										}
									}, 
									10);
	}
	//window.onload = _init_on_ready;

	//////////////////////////////////////////////////////////////////////////////////
	//ユーティリティ関数
	imba_t3.util =
	{
		/**
		*	<を&lt;に、>を&gt;に置換します
		*	@param	string	src
		*	@return string
		*/
		sanitize:
			function( src )
			{
				return ( typeof src === 'string' ) ?
								src.toString().replace(/</g,'&lt;').replace(/>/g,'&gt;') :
								src ;
			}
	};	//imba.util
	//////////////////////////////////////////////////////////////////////////////////
	//node
	//DOMノードに関する各種作業
	//imba.nodeオブジェクトは、newでインスタンス化しません。
	//※imba.node.one/imba.node.allを呼び出して利用します。
	imba_t3.node = function( dom_node )
	{
		if( !dom_node ) throw( 'Illegal DOM node!' );
		//DOM node
		this.dom_node = dom_node ;
		//ユーザデータ（プログラマが自由に利用できます　see. setData/getData）
		this._data = {};
		//イベントcallback関数（こちらのリスナがすべて受けて、こちらから呼び出します）
		this._event_callbacks = {};
		//インスタンス化したノードは、保存しておく(DOM node から逆引きするため)
		if( !imba_t3.node.lookup( dom_node ) ){
			imba_t3.node._local_nodes[imba_t3.node._local_nodes.length] = this;
		}
	}

	/**
	*	オブジェクト名
	*	※toStringで返却される名前
	*/
	imba_t3.node._OBJECT_NAME = '[object imba_t3.node]';
	imba_t3.node.isImbaNode = function( _node )
	{
		if( _node && 
			_node.toString() == imba_t3.node._OBJECT_NAME ){
			return true ;
		}
		return false ;
	}

	/**
	*	document以下のノードを抽出
	*	
	*
	*/
	imba_t3.node.all = function( selector )
	{
		var rst = [];
		if( document.querySelectorAll ){
			var _nodes = document.querySelectorAll( selector );
			for( var i = 0 ; i < _nodes.length; i ++ ){
				rst[rst.length] = imba_t3.node.one( _nodes[i] );
			}
		}
		return rst ;
	}
	/**
	*	この関数でインスタンスを取得してください
	*	
	*/
	imba_t3.node.one = function( selector )
	{
		var _node = null ;
		if( selector ){
			if( imba_t3.node.isImbaNode( selector ) ) return selector ;
			
			if( selector.nodeType ){		//DOMNode
				_node = selector ;
			}
			else if( typeof selector === "string" ){	//文字列
				if( document.querySelector ){
					_node = document.querySelector( selector );	//セレクタでnodeを取得できる便利メソッド
				}
				else if( selector.match( /^#/ ) ){
					//querySelectorが定義されていないブラウザでは、Idによる取得のみ
					_node = document.getElementById( selector.substr( 1 ) );
				}
			}
		}
		if( _node ){
			var node = imba_t3.node.lookup( _node );
			if( node ){
				
				return node;
			}
			else{
				return new imba_t3.node( _node );
			}
		}
		return null;
	}

	imba_t3.node.remove = function( imbaNode )
	{
		if( imbaNode ){
			for( var i = 0 ; i < imba_t3.node._local_nodes.length ; i ++ ){
				if( imba_t3.node._local_nodes[i] &&
					imba_t3.node._local_nodes[i].DOMNode() == imbaNode ){
					delete imba_t3.node._local_nodes[i];
					delete imbaNode;
				}
			}
		}
	}

	imba_t3.node._local_nodes = [];	//imba.nodeでインスタンス化されているノード
	/**
	*	@param	object<DOMelement>	domNode	DOMのエレメント
	*	@return	imba.node		インスタンス化されていない場合にはnull
	*/
	imba_t3.node.lookup = function( domNode )
	{
		if( domNode ){
			for( var i = 0 ; i < imba_t3.node._local_nodes.length ; i ++ ){
				if( imba_t3.node._local_nodes[i] &&
					imba_t3.node._local_nodes[i].DOMNode() == domNode ){
					return imba_t3.node._local_nodes[i];
				}
			}
		}
		return null;
	}
	//imba.nodeのイベント用のハンドラ関数
	imba_t3.node._event_listener = function( e )
	{
		var node = imba_t3.node.lookup( this );
		if( node ){
			if( node._event_callbacks && node._event_callbacks[e.type] !== undefined){
				node._event_callbacks[e.type].call(node, new imba_t3.event(e) );

			}
		}
	}

	/**
	*	DOMノードを作成します
	*	※tagにclassを設定する場合、attributeのプロパティ名はclassNameとしてください
	*	@param	string	tag			HTMLタグ
	*	@param	object	attribute	このオブジェクトのプロパティをアトリビュートとしてセットします
	*	@param	string	inner_html	内部のHTML
	*/
	imba_t3.node.create = function( tag, attribute, inner_html )
	{
		var _node = document.createElement( tag );
		if( _node ){
			for( var _prop in attribute ){
				_node[_prop] = attribute[_prop];
			}
			if( inner_html ){
			    try {
                        _node.innerHTML = inner_html ;
				}
				catch( e ){
					//readOnly
					alert( inner_html );
				}
			}
		}
		return ( _node ) ?
					imba_t3.node.one( _node ) :
					null ;
	}

	//指定されたhtmlのタグを取得します
	imba_t3.node._extract_tag = function( text_html )
	{
		var rst = '';
		if( typeof text_html === 'string' ){
			var tag = text_html.match( /<([a-z]+)/i );
			if( tag && tag[1] ) rst = tag[1];
		}
		return rst ;
	}

	/**
	*	新しいノードを作成します
	*	@param string text_html		作成するHTMLテキスト
	*	@return object imba.node
	*/
	imba_t3.node.create2 = function( text_html )
	{
		var _tag = imba_t3.node._extract_tag( text_html );
		if( !_tag ) return null;
		
		var _inner = '';
		//divエレメントのinnerHTMLで使用できないものがあるので、それに関しては
		//fullで作成して、一部を抜き出す。
		//特に問題ないものは、そのまま使用する。
		switch( _tag.toLowerCase() )
		{
			case	'option':	//2番目に挿入する
				_inner = '<select><option></option>'+text_html+'</select>';
				break ;
			case	'tr':
				_inner = '<table><tbody>'+text_html+'</tbody></table>';
				break ;
			case	'td':
				_inner = '<table><tbody><tr>'+text_html+'</tr></tbody></table>';
				break ;
			case	'tbody':
			case	'thead':
				_inner = '<table>'+text_html+'</table>';
				break ;
			default:
				_inner = text_html;
				break ;
		}
		//div作成
		var _div = document.createElement( 'div' );
		try{
			_div.innerHTML = _inner ;
			var _children = _div.querySelectorAll( _tag );
			var rst = null ;
			if( _tag.toLowerCase() == 'option' ){//optionの場合は1つ目はdummyなので2つ目から取得する
				if( _children.length == 2 ) rst = imba_t3.node.one( _children[1] );
				else if( _children.length > 2 ){
					rst = [];
					for( var i = 1 ; i < _children.length ; i ++ ){
						rst[rst.length] = imba_t3.node.one( _children[i] );
					}
				}
			}
			else{
				if( _children.length == 1 ) rst = imba_t3.node.one( _children[0] );
				else if( _children.length > 1 ){
					rst = [];
					for( var i = 0 ; i < _children.length ; i ++ ){
						rst[rst.length] = imba_t3.node.one( _children[i] );
					}
				}
			}
		}
		catch(e){
			throw( 'Could no create['+e+']' );
		}
		return rst ;
	}

	//共通の内部関数(各インスタンスが共有する関数)
	//	※privateにしたい場合には、コンストラクタでthisのプロパティとして定義する
	imba_t3.node.prototype =
	{
		toString:
			function()
			{
				return imba_t3.node._OBJECT_NAME;
			},
		on:
			function( type, fx_callback )
			{
				if( this.dom_node ){
					this._event_callbacks[type] = fx_callback;
					if( this.dom_node.addEventListener ){
						this.dom_node.addEventListener( type, imba_t3.node._event_listener );
					}
					else if( this.dom_node.attachEvent ){	//for IE
						this.dom_node.attachEvent( type, imba_t3.node._event_listener );
					}
					else{
						throw( 'no EventListenerMethod' );
					}
				}
			},
		//ユーザデータ入出力
		setData:
			function( name, value )
			{
				if( this._data ){
					this._data[name] = value ;
				}
			},
		getData:
			function( name )
			{
				return ( this._data && this._data[name] !== undefined ) ?
												this._data[name] :
												null ;
			},
		setInner:
			function( inner_html )
			{
				this.set( 'innerHTML', inner_html );
			},
		getInner:
			function( sanitize )
			{
				var rst = this.get( 'innerHTML' );
				if( rst && sanitize ){
					rst = imba_t3.util.sanitize( rst );
				}
				return rst ;
			},
		getOuter:
			function( sanitize )
			{
				var rst = this.get( 'outerHTML' );
				if( rst && sanitize ){
					rst = imba_t3.util.sanitize( rst );
				}
				return rst ;
			},
		//DOM検索
		one:
			function( selector )
			{
				var rst = null ;
				if( this.dom_node && this.dom_node.querySelector ){
					var _node = this.dom_node.querySelector( selector );	//セレクタでnodeを取得できる便利メソッド
					if( _node != null ){
						rst = imba_t3.node.one( _node );
					}
				}
				return rst;
			},
		all:
			function( selector )
			{
				var rst = [];
				if( this.dom_node && this.dom_node.querySelectorAll ){
					var _nodes = this.dom_node.querySelectorAll( selector );
					for( var i = 0 ; i < _nodes.length; i ++ ){
						rst[rst.length] = imba_t3.node.one( _nodes[i] );
					}
				}
				return rst ;
			},
		//プロパティの入出力
		set:
			function( name, value )
			{
				if( this.dom_node ){
					this.dom_node[name] = value ;
				}
			},
		get:
			function( name )
			{
				if( this.dom_node ){
					return this.dom_node[name] ;
				}
				return undefined;
			},
		//スタイル関連の操作
		setStyle:
			function( name, value )
			{
				if( this.dom_node && this.dom_node.style ){
					this.dom_node.style[name] = value ;
				}
			},
		getStyle:
			function( name )
			{
				if( this.dom_node && this.dom_node.style ){
					return this.dom_node.style[name] ;
				}
				return undefined;
			},
		//nodeの階層操作
		appendChild:
			function( child )
			{
				if( this.dom_node && child.DOMNode ){
					this.dom_node.appendChild( child.DOMNode() );
				}
			},
		appendChilds:
			function( children )
			{
				//appendChildの配列対応（複数imba.node追加対応）
				if( this.dom_node ){
					if( typeof( children ) == 'object' && ( children instanceof Array ) ){
						for( var i = 0 ; i < children.length ; i ++ ){
							this.appendChild( children[i] );
						}
					}
					else{
						this.appendChild( children );
					}
				}
			},
		insertBefore:
			function( child, node_basis )
			{
				if( this.dom_node && child.DOMNode && node_basis.DOMNode ){
					this.dom_node.insertBefore( child.DOMNode(), node_basis.DOMNode() );
				}
			},
		removeChild:
			function( child )
			{
				if( this.dom_node && child.DOMNode ){
					this.dom_node.removeChild( child.DOMNode() );
				}
			},
		removeAllChild:
			function()
			{
				if( this.dom_node ){
					var childs = this.dom_node.childNodes ;
					for( var i = 0 ; i < childs.length ; i ++ ){
						this.dom_node.removeChild( childs[i] );
					}
				}
			},
		//class関連
		appendClass:
			function( cls )
			{
				if( !this.hasClass( cls ) ){
					if( this.dom_node ){
						if( !this.dom_node.className ){
							this.dom_node.className = cls ;
						}
						else{
							var tokens = this.dom_node.className.split( " " );
							tokens[tokens.length] = cls;
							this.dom_node.className = tokens.join(" ");
						}
					}
				}
			},
		removeClass:
			function( cls )
			{
				if( this.dom_node && this.dom_node.className ){
					var tokens = this.dom_node.className.split( " " );
					for( var i = 0 ; i < tokens.length ; i ++ ){
						if( tokens[i] == cls ){
							delete tokens[i];
							this.dom_node.className = tokens.join(" ");
							break;
						}
					}
				}
			},
		toggleClass:
			function( cls )
			{
				if( this.hasClass( cls ) ){
					this.removeClass( cls );
				}
				else{
					this.appendClass( cls );
				}
			},
		hasClass:
			function( cls )
			{
				var rst = false ;
				if( this.dom_node ){
					if( !this.dom_node.className ) this.dom_node.className = '';
					var tokens = this.dom_node.className.split( " " );
					for( var i = 0 ; i < tokens.length ; i ++ ){
						if( tokens[i] == cls ){
							rst = true ;
							break ;
						}
					}
				}
				return rst ;
			},
		DOMNode:
			function()
			{
				return this.dom_node;
			}

	};	//imba.node.prototype

	////////////////////////////////////////////////////////////////////////////////
	//event wrapper
	imba_t3.event = function( _event )
	{
		this._event = _event;
	}
	imba_t3.event._OBJECT_NAME = '[object imba_t3.event]';
	imba_t3.event.isImbaEvent = function( obj )
	{
		return (obj && 
				obj.toString() == imba_t3.event._OBJECT_NAME);
	}
	imba_t3.event.prototype = 
	{
		toString:
			function()
			{
				return imba_t3.event._OBJECT_NAME;
			},
		//プロパティの入出力
		set:
			function( name, value )
			{
				if( this._event ){
					this._event[name] = value ;
				}
			},
		get:
			function( name )
			{
				if( this._event ){
					return this._event[name] ;
				}
				return undefined;
			},
		//これ以上のバブリングをやめる
		stopBubble:
			function()
			{
				//イベントのこれ以上のバブルを禁止
				if( this._event ){
					if( this._event.stopPropagation ) this._event.stopPropagation();
					else this._event.cancelBubble = true ;	//for IE
				}
			},
		//デフォルトの処理をやめる
		stopDefault:
			function()
			{
				//このイベントに対するデフォルトの挙動を抑制
				if( this._event ){
					if( this._event.preventDefault ) this._event.preventDefault();
					else this._event.returnValue = false;		//for IE
				}
			},
		//targetをimba.nodeで取得します	
		getTarget:
			function()
			{
				return ( this._event && this._event.target ) ?
												imba_t3.node.one( this._event.target ) :
												null ;
			},
		//currentTargetをimba.nodeで取得します	
		getCurrentTarget:
			function()
			{
				return ( this._event && this._event.currentTarget ) ?
												imba_t3.node.one( this._event.currentTarget ) :
												null ;
			},
		getEvent:
			function()
			{
				return this._event;
			}

	};

	////////////////////////////////////////////////////////////////////////////////
	//imbaライブラリをwindowにセット
	window.imba_t3 = imba_t3;

})(window);
/**
	mekaライブラリ.
	2013/07/04
*/
(function(window) {
    var meka_t3 = {};
    var document = window.document;

    meka_t3.set_nodeStyleSize = function(node, width, height) {
        if (width >= 0) node.setStyle('width', width + "px");
        if (height >= 0) node.setStyle('height', height + "px");
    }

    meka_t3.set_nodeStylePosition = function(node, left, top) {
        node.setStyle('left', left + "px");
        node.setStyle('top', top + "px");
    }

    meka_t3.set_nodeStyleBox = function(node, top, left, width, height) {
        meka_t3.set_nodeStylePosition(node, top, left);
        meka_t3.set_nodeStyleSize(node, width, height);
    }

    /**
     *	スライダの生成
     *	@param object	config	スライダプロパティ
     *			プロパティ
     *					skin: 		string		スキン名(ユニークID）			default 'normal'
     *					parent: 	node		ハウジングするノード
     *					dir: 		string		方向							'horizontal'か'vertical'
     *					width: 		string		幅(横スライダのときに利用)		default '200px'
     *					height: 	string		高さ(縦スライダのときに利用)	default '200px'
     *					minValue: 	numeric		最小値
     *					maxValue: 	numeric		最大値
     *					init_value: numeric		初期値
     *					prefix:		string		設定するIDの接頭詞				default''
     *
     */
    meka_t3.range = function(config) {
        this.prop = {
            skin: 'normal',
            parent: null, //imba.node
            dir: 'horizontal', //or vertical
            width: '200px', //horizontalのときに使用(スライダの表示サイズ)
            height: '200px', //verticalのときに使用(スライダの表示サイズ)
            minValue: 0, //最小値
            maxValue: 100, //最大値
            init_value: 0, //初期値
            value: 50,
            prefix: ''
        };

        // デフォルト値を指定値に入替
        if (config) {
            for (var _prop in config) {
                this.prop[_prop] = config[_prop];
            }
        }

        // 初期値設定
        this.value = this.prop.init_value;

        // スライダーノードの生成
        this.node_slider_rail = this._createNode();

        // ノードの登録
        this.prop.parent.appendChild(this.node_slider_rail);

        // ノードの詳細保存
        this.node_slider_rail = document.getElementById(this.prop.prefix + this._getBaseClassName() + '_rail');
        this.node_slider_thumb = document.getElementById(this.prop.prefix + this._getBaseClassName() + '_thumb');
        this.node_slider_dist = document.getElementById(this.prop.prefix + this._getBaseClassName() + '_dist');
        this.node_slider_area = this.prop.parent.parentElement.parentElement.childNodes[0];

        //サイズセット
        if (this.isHorizontal()) this.node_slider_rail.style['width'] = this.prop.width;
        else this.node_slider_rail.style['height'] = this.prop.height;

        this.fx_update_callback = null; //更新通知関数
        //initial update

        var ctx = this;
        setTimeout(function() { meka_t3.range._initial_update.call(ctx); }, 10);

        // イベント登録
        if (this.node_slider_rail.addEventListener) {
            var ua = window.navigator.userAgent.toLowerCase();
            if ((ua.indexOf('iphone') > 0 ||
                    ua.indexOf('ipad') > 0 ||
                    (ua.indexOf('android') > 0) ||
                    ua.indexOf('windows phone') > 0)) {
                this.node_slider_rail.addEventListener('touchstart', _handle_touch, false);
                this.node_slider_rail.addEventListener('touchmove', _handle_touch, false);
                if (this.prop.skin == "movie") {
                    this.node_slider_area.addEventListener('touchstart', _handle_touch, false);
                    this.node_slider_area.addEventListener('touchmove', _handle_touch, false);
                }
            } else {
                //PC対応
                this.node_slider_rail.addEventListener('dragend', _handle_dragend, false);
                this.node_slider_rail.addEventListener('mousedown', _handle_mousedown, false);
                //this.node_slider_rail.addEventListener('mouseup', _handle_mouseup, false);
                if (this.prop.skin == "movie") {
                    this.node_slider_area.addEventListener('dragend', _handle_dragend, false);
                    this.node_slider_area.addEventListener('mousedown', _handle_mousedown, false);
                }
                document.addEventListener("mousemove", MouseMoveFunc);
            }
        } else {
            this.node_slider_rail.attachEvent('ontouchstart', _handle_touch, false);
            this.node_slider_rail.attachEvent('ontouchmove', _handle_touch, false);

            //PC対応
            //this.node_slider_rail.attachEvent('drag', _handle_mouse, false);
            this.node_slider_rail.attachEvent('ondragend', _handle_dragend, false);
            this.node_slider_rail.attachEvent('onmousedown', _handle_mousedown, false);
            this.node_slider_rail.attachEvent('onmouseup', _handle_mouseup, false);
            if (this.prop.skin == "movie") {
                this.node_slider_area.attachEvent('ontouchstart', _handle_touch, false);
                this.node_slider_area.attachEvent('ontouchmove', _handle_touch, false);
                this.node_slider_area.attachEvent('ondragend', _handle_dragend, false);
                this.node_slider_area.attachEvent('onmousedown', _handle_mousedown, false);
                this.node_slider_area.attachEvent('onmouseup', _handle_mouseup, false);
            }
            document.attachEvent('onmouseup', _handle_mouseup, false);
            document.attachEvent("onmousemove", MouseMoveFunc);
        }

        this.node_slider_rail.style["draggable"] = "false";
        this.node_slider_rail.style["cursor"] = "pointer";
        ctx.paint();
        var mouse_x;
        var mouse_y;
        var timer;
        var val

        function MouseMoveFunc(e) {

            mouse_x = e.clientX;
            mouse_y = e.clientY;
        }

        function _handle_mousedown(event) {
            clearInterval(timer);
            _handle_mouse()
            timer = setInterval(_handle_mouse, 100);
            document.addEventListener('mouseup', _handle_mouseup, false);
            ua = navigator.userAgent.toLowerCase();
            if (ua.match(/msie/) || ua.match(/trident/) || !!ua.match(/mozilla\/.+windows nt 10\.[0-9].+chrome.+safari.+edge\/[0-9\.]+/i)) {
                document.body.addEventListener('mouseleave', _handle_mouseup, false);
            }
            //console.log("mousedown");
        }

        function _handle_mouseup(event) {
            clearInterval(timer);
            document.removeEventListener('mouseup', _handle_mouseup, false);
            ua = navigator.userAgent.toLowerCase();
            if (ua.match(/msie/) || ua.match(/trident/) || !!ua.match(/mozilla\/.+windows nt 10\.[0-9].+chrome.+safari.+edge\/[0-9\.]+/i)) {
                document.body.removeEventListener('mouseleave', _handle_mouseup, false);
            }
            ctx.fx_update_callback(ctx._dp2lp(val));
            //console.log("mouseup");
        }

        function _handle_dragend(event) {
            clearInterval(timer);
            document.removeEventListener('mouseup', _handle_mouseup, false);
            //console.log("dragend");
        }

        function _handle_touch(event) {
            event.preventDefault();
            ev = event.touches[0];

            thumb = document.getElementById(ctx.prop.prefix + ctx._getBaseClassName() + '_thumb');
            obj = document.getElementById(ctx.prop.prefix + ctx._getBaseClassName() + '_rail');
            dist = document.getElementById(ctx.prop.prefix + ctx._getBaseClassName() + '_dist');

            palRect = ctx.node_slider_rail.getBoundingClientRect();
            thumbRect = ctx.node_slider_thumb.getBoundingClientRect();
            _value = 0;
            thumb.style.opacity = 0.5;

            if (ctx.isHorizontal()) { // 横
                // 親オブジェクトのサイズ
                w = ctx.node_slider_rail.clientWidth;
                // スライダーのサイズ
                tw = ctx.node_slider_thumb.clientWidth;

                // スクリーンスクロール考慮
                var scrL = document.documentElement.scrollLeft || document.body.scrollLeft;
                // 親オブジェクト基準の新座標
                mx = parseInt(ev.pageX, 10) - palRect['left'] - scrL;
                //				mx = parseInt(ev.pageX,10) - ctx.node_slider_rail.offsetLeft ;
                if (mx < 0) mx = 0;
                if (mx > w) mx = w;

                // 座標更新
                _value = mx;
                ctx.node_slider_thumb.style.left = (mx - tw / 2) + "px";

                // distの幅も更新
                ctx.node_slider_dist.style.width = mx + "px";
            } else {
                // 縦
                // 親オブジェクトのサイズ
                h = ctx.node_slider_rail.clientHeight;

                // スライダーのサイズ
                th = ctx.node_slider_thumb.clientHeight;

                // スクリーンスクロール考慮
                var scrT = document.documentElement.scrollTop || document.body.scrollTop;

                // 親オブジェクト基準の新座標
                my = parseInt(ev.pageY, 10) - palRect['top'] - scrT;
                //				my = parseInt(ev.pageY,10) - ctx.node_slider_rail.offsetTop;
                if (my < 0) my = 0;
                if (my > h) my = h;

                // distの幅も更新
                dist.style['top'] = my + "px";
                dist.style['height'] = (h - my) + "px";

                // 座標更新
                _value = my;

                // 座標更新
                _value = my;
                ctx.node_slider_thumb.style.top = (my - th / 2) + "px";

                // distの幅/高さも更新
                ctx.node_slider_dist.style.top = my + "px";
                ctx.node_slider_dist.style.height = (h - my) + "px";
            }
            thumb.style.opacity = 1;

            ctx.fx_update_callback(ctx._dp2lp(_value));
        }

        function _handle_mouse() {
            //console.log(mouse_x + "," + mouse_y);
            //event.preventDefault();
            //ev = event.touches[0];
            //ev = event;

            thumb = document.getElementById(ctx.prop.prefix + ctx._getBaseClassName() + '_thumb');
            obj = document.getElementById(ctx.prop.prefix + ctx._getBaseClassName() + '_rail');
            dist = document.getElementById(ctx.prop.prefix + ctx._getBaseClassName() + '_dist');

            palRect = ctx.node_slider_rail.getBoundingClientRect();
            thumbRect = ctx.node_slider_thumb.getBoundingClientRect();
            _value = 0;
            thumb.style.opacity = 0.5;

            if (ctx.isHorizontal()) { // 横
                // 親オブジェクトのサイズ
                w = ctx.node_slider_rail.clientWidth;
                // スライダーのサイズ
                tw = ctx.node_slider_thumb.clientWidth;

                // スクリーンスクロール考慮
                var scrL = document.documentElement.scrollLeft || document.body.scrollLeft;
                // 親オブジェクト基準の新座標
                mx = parseInt(mouse_x, 10) - palRect['left'] - scrL;
                //				mx = parseInt(ev.pageX,10) - ctx.node_slider_rail.offsetLeft ;
                if (mx < 0) mx = 0;
                if (mx > w) mx = w;

                // 座標更新
                _value = mx;
                ctx.node_slider_thumb.style.left = (mx - tw / 2) + "px";

                // distの幅も更新
                ctx.node_slider_dist.style.width = mx + "px";
            } else {
                // 縦
                // 親オブジェクトのサイズ
                h = ctx.node_slider_rail.clientHeight;

                // スライダーのサイズ
                th = ctx.node_slider_thumb.clientHeight;

                // スクリーンスクロール考慮
                var scrT = document.documentElement.scrollTop || document.body.scrollTop;

                // 親オブジェクト基準の新座標
                my = parseInt(mouse_x, 10) - palRect['top'] - scrT;
                //				my = parseInt(ev.pageY,10) - ctx.node_slider_rail.offsetTop;
                if (my < 0) my = 0;
                if (my > h) my = h;

                // distの幅も更新
                dist.style['top'] = my + "px";
                dist.style['height'] = (h - my) + "px";

                // 座標更新
                _value = my;

                // 座標更新
                _value = my;
                ctx.node_slider_thumb.style.top = (my - th / 2) + "px";

                // distの幅/高さも更新
                ctx.node_slider_dist.style.top = my + "px";
                ctx.node_slider_dist.style.height = (h - my) + "px";
            }
            thumb.style.opacity = 1;

            val = _value
                //ctx.fx_update_callback( ctx._dp2lp(_value));
        }

    }


    meka_t3.range.prototype = {
        _getBaseClassName: function() {
            var rst = '';
            try {
                rst = 'slider-' + this.prop.skin + '-' + (this.isHorizontal() ? 'h' : 'v');
            } catch (e) {
                rst = '';
            }
            return rst;
        },
        _createNode: function() {
            cls_name = this._getBaseClassName();
            node = document.createElement('div');
            node.innerHTML = '<div id="' + this.prop.prefix + cls_name + '_dist" class="' + cls_name + '_dist" ></div><div id="' + this.prop.prefix + cls_name + '_thumb" class="' + cls_name + '_thumb"></div>';
            node['id'] = this.prop.prefix + cls_name + "_rail";
            node['className'] = cls_name + "_rail";
            return node;
        },

        //値をピクセルに変更します(指定値が表示上どの位置なのかを取得)
        _lp2dp: function(logical_pos) {
            var device_range = this.getMotionRange();
            var dp = (logical_pos - this.prop.minValue) * device_range / (this.prop.maxValue - this.prop.minValue);
            return (this.isHorizontal()) ?
                dp :
                (device_range - dp);

        },
        //ピクセルを値に変更します(表示位置に対する値を取得します)
        _dp2lp: function(device_pos) {
            var device_range = this.getMotionRange();
            var lp = device_pos * (this.prop.maxValue - this.prop.minValue) * 1 / device_range + this.prop.minValue;
            return (this.isHorizontal()) ?
                lp :
                ((this.prop.maxValue - this.prop.minValue) - lp);
        },

        //コントロールのスクリーン上の可動範囲(幅)(pixel数)を取得します
        getMotionRange: function() {
            var rail_size = 0;
            if (this.isHorizontal()) {
                rail_size = this.node_slider_rail.clientWidth;
            } else {
                rail_size = this.node_slider_rail.clientHeight;
            }
            return rail_size;
        },
        /**
         *	再描画します
         */
        paint: function() {
            var pos = this._lp2dp(this.value);

            if (this.isHorizontal()) {
                this.node_slider_thumb.style['left'] = (pos - (this.node_slider_thumb.clientWidth) / 2) + 'px';
                this.node_slider_dist.style['width'] = pos + 'px';
            } else {
                this.node_slider_thumb.style['top'] = (pos + (this.node_slider_thumb.clientWidth) / 2) + 'px';
                this.node_slider_dist.style['top'] = pos + 'px';
                this.node_slider_dist.style['height'] = (this.node_slider_rail.clientHeight - pos) + 'px';
            }
        },
        /**
         *	値をセットします
         *	@param	numeric	value		値  (minValue～maxValueの範囲外の場合は、範囲内に丸められます)
         *	@param	boolean	no_redraw	true..再描画しない　※つまみがドラッグされたときなどは、再描画する必要はありません
         *	@param	boolean	do_callback	true..値をセットした後に更新コールバックが呼び出されます
         */
        setValue: function(value, no_redraw, do_callback) {
            if (this.prop.maxValue < value) this.value = this.prop.maxValue;
            else if (this.prop.minValue > value) this.value = this.prop.minValue;
            else this.value = value;

            if (!no_redraw) this.paint();
            if (do_callback &&
                this.fx_update_callback) {
                this.fx_update_callback.call(this, this.value);
            }
        },
        /**
         *	値を取得します
         */
        getValue: function() {
            return this.value;
        },
        /**
         *	更新コールバックのセット
         *	@param function(numeric)	fx_callback		setValueのdo_callbackをtrueにしたときのオペレーションで呼び出される関数
         */
        setUpdateCallback: function(fx_callback) {
            this.fx_update_callback = fx_callback;
        },
        //横スライダ？
        isHorizontal: function() {
            return (this.prop && this.prop.dir && (this.prop.dir == 'horizontal'));
        },
        //縦スライダ？
        isVertical: function() {
            return (this.prop && this.prop.dir && (this.prop.dir == 'vertical'));
        },
        // 最大値更新
        setLimitValue: function(minValue, maxValue) {
            this.prop.maxValue = maxValue;
            this.prop.minValue = minValue;
        }
    }

    /**
     *	初回更新
     *	※表示位置やサイズが確定した段階で、描画して終了
     */
    meka_t3.range._initial_update = function() {
        var ctx = this;
        if (meka_t3.range.prototype.getMotionRange.call(ctx) == 0) {
            setTimeout(function() { meka_t3.range._initial_update.call(ctx); }, 10);
        }

        meka_t3.range.prototype.paint.call(ctx);
    }

    window.meka_t3 = meka_t3;

})(window);"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Date.now || (Date.now = function () { return +new Date; });
(function () {
    if (typeof window.CustomEvent === "function")
        return false;
    function CustomEvent(event, params) {
        params = params || { bubbles: false, cancelable: false, detail: undefined };
        var evt = document.createEvent('CustomEvent');
        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
        return evt;
    }
    CustomEvent.prototype = window.Event.prototype;
    window.CustomEvent = CustomEvent;
})();
var HTML5Player_t3 = (function () {
    function HTML5Player_t3(jmcPlayer, videoID) {
        var _this = this;
        this.PLAYER_WIDTH_MINIMUM = 240;
        this.PLAYER_WIDTH_SMALL_MID = 320;
        this.PLAYER_WIDTH_SMALL = 480;
        this.PLAYER_WIDTH_NOMAL = 1440;
        this.PLAYER_HEIGHT_MINIMUM = 135;
        this.PLAYER_HEIGHT_SMALL_MID = 180;
        this.PLAYER_HEIGHT_SMALL = 270;
        this.PLAYER_HEIGHT_NOMAL = 810;
        this.PLAYER_WIDTH_LANDSCAPE = 480;
        this.PLAYER_WIDTH_LANDSCAPE_SMALL = 360;
        this.PLAYER_HEIGHT_LANDSCAPE = 270;
        this.PLAYER_HEIGHT_LANDSCAPE_SMALL = 202.5;
        this.FOOTER_WIDTH_FULL = 580;
        this.WIDTH_TYPE_MINIMUM = 1;
        this.WIDTH_TYPE_SMALL = 2;
        this.WIDTH_TYPE_NOMAL = 3;
        this.WIDTH_TYPE_FULL = 4;
        this.SEEK_BTN_TIME = 10;
        this.FOOTER_SLOT_1_NORMAL = 38;
        this.FOOTER_SLOT_2_NORMAL = 91;
        this.FOOTER_SLOT_3_NORMAL = 146;
        this.FOOTER_SLOT_4_NORMAL = 200;
        this.FOOTER_SLOT_1_SMALL_MID = 20.5;
        this.FOOTER_SLOT_2_SMALL_MID = 57.5;
        this.FOOTER_SLOT_3_SMALL_MID = 94.5;
        this.FOOTER_SLOT_4_SMALL_MID = 131.5;
        this.KEY_SPACE = 32;
        this.KEY_TAB = 9;
        this.KEY_ENTER = 13;
        this.KEY_ARROW_UP = 38;
        this.KEY_ARROW_RIGHT = 39;
        this.KEY_ARROW_DOWN = 40;
        this.KEY_ARROW_LEFT = 37;
        this.playerStatusTimer = null;
        this.linkset = [];
        this.movie_list = [];
        this.movie_index = 0;
        this.playbackrateIndex = 0;
        this.playbackrateList = [];
        this.captionIndex = 1;
        this.captionList = [];
        this.playlist = [];
        this.playerWidth = 0;
        this.playerHeight = 0;
        this.preMuteVolume = null;
        this.playbackRate = 1;
        this.mousemoveCount = 0;
        this.preSeekState = "";
        this.preOpenState = "";
        this.useMultibitrate = true;
        this.useClosedCaption = false;
        this.useMovies = true;
        this.useExLink = true;
        this.useSns = true;
        this.canPlayHls = false;
        this.isHls = true;
        this.isFirstPlay = true;
        this.isFullscreen = false;
        this.isDebug = true;
        this.onMouseSound = false;
        this.isSoundOperating = false;
        this.isControllerVisible = true;
        this.isLoading = false;
        this.isStall = false;
        this.isShowSelectMenu = false;
        this.isLiveStop = false;
        this.isLive = false;
        this.videoID = videoID;
        this.playerInstans = jmcPlayer;
        this.platform = this.playerInstans.accessor.model.platform;
        this.isLive = this.playerInstans.accessor.model.isLive;
        var lang = "ja";
        if (window.jstream_t3.utils.Util.browserLanguage() != "ja") {
            lang = "en";
        }
        this.languageResource = new window.jstream_t3.resource.LanguageResource(this.playerInstans.flashVars["language_resource_" + lang]);
        if (this.isMobile()) {
            this.initElementMobile();
            this.setPlayerSettingMobile();
            this.setStyleMobile();
            this.setEventMobile();
            this.updatePlayerStatusMobile();
            this.setPlayerStatusTimer(true);
        }
        else {
            this.initElement();
            this.setPlayerSetting();
            this.setStyle();
            this.setEvent();
            this.updatePlayerStatus();
            this.setPlayerStatusTimer(true);
        }
        if (this.video.isHls && this.platform["os"]["name"] != "iOS" && !(this.platform["os"]["name"] == "Macintosh" && this.platform["isSafari"]) && !this.playerInstans.accessor.model.isAuthEnable()) {
            this.waitHlsTimer = setInterval(function () {
                _this.waitHlsLoading();
            }, 100);
        }
        this.dispatchReady();
    }
    HTML5Player_t3.prototype.initElement = function () {
        var _this = this;
        this.parent = document.getElementById(this.playerInstans.fieldID);
        this.player = this.parent.getElementsByClassName("eq-h5_player")[0];
        var vid = document.createElement("video");
        vid.preload = "metadata";
        vid.style.position = "absolute";
        vid.style.width = "100%";
        vid.style.height = "100%";
        this.player.insertBefore(vid, this.player.firstChild);
        this.video = new EQPlayer_parts.video(vid);
        this.video.node.id = this.videoID;
        this.cover = new EQPlayer_parts.cover(this.player.getElementsByClassName("eq-video_cover")[0]);
        this.subContainer = new EQPlayer_parts.subContainer(this.player.getElementsByClassName("eq-sub-container")[0]);
        this.overlayContainer = new EQPlayer_parts.overlayContainer(this.player.getElementsByClassName("overlay-container")[0]);
        this.centerContainer = new EQPlayer_parts.centerContainer(this.player.getElementsByClassName("eq-area-center")[0]);
        this.header = new EQPlayer_parts.header(this.player.getElementsByClassName("eq-header")[0]);
        this.footer = new EQPlayer_parts.footer(this.player.getElementsByClassName("eq-footer")[0]);
        this.seekbar = new EQPlayer_parts.seekbar(this.player.getElementsByClassName("eq-box-seekbar")[0]);
        this.seekbar.balloon = new EQPlayer_parts.seekBalloon(this.player.getElementsByClassName("eq-balloon-seek")[0]);
        this.soundballoon = new EQPlayer_parts.soundballoon(this.player.getElementsByClassName("eq-balloon-sound")[0]);
        this.telopballoon = new EQPlayer_parts.telopballoon(this.player.getElementsByClassName("eq-balloon-telop")[0]);
        this.resolutionballoon = new EQPlayer_parts.resolutionballoon(this.player.getElementsByClassName("eq-balloon-resolution")[0]);
        this.speedballoon = new EQPlayer_parts.speedballoon(this.player.getElementsByClassName("eq-balloon-speed")[0]);
        this.captionContainer = new EQPlayer_parts.captionContainer(this.player.getElementsByClassName("eq-caption_area")[0], this.playerInstans.accessor.model.isLightbox);
        if (this.playerInstans.accessor.model.isLive && this.playerInstans.accessor.model.livemark_use != "off") {
            this.liveMark = this.parent.getElementsByClassName("eq-livemark")[0];
        }
        this.centerContainer.play.style.display = "block";
        this.centerContainer.prev.style.display = "none";
        this.centerContainer.next.style.display = "none";
        this.centerContainer.replay.style.display = "none";
        if (this.platform["isFirefox"]) {
            this.seekbar.node.setAttribute("draggable", true);
            this.soundballoon.node.setAttribute("draggable", true);
        }
        if (this.playerInstans.accessor.model.isAuthEnable()) {
            this.authCover = this.player.getElementsByClassName("eq-auth-cover")[0];
            this.authCover.style.display = "block";
            this.authCover.addEventListener("click", function () {
                _this.overlayContainer.auth.open();
                _this.authCover.style.display = "none";
            });
            this.overlayContainer.auth.title.innerText = this.languageResource.kinds.AUTH;
            this.overlayContainer.auth.inputBtn.children[1].innerText = this.languageResource.kinds.PLAY;
        }
    };
    HTML5Player_t3.prototype.initElementMobile = function () {
        var _this = this;
        this.parent = document.getElementById(this.playerInstans.fieldID);
        this.player = this.parent.getElementsByClassName("eq-h5_player")[0];
        var vid = document.createElement("video");
        vid.preload = "metadata";
        if (!this.playerInstans.accessor.model.isLightbox) {
            vid.setAttribute("playsinline", "");
        }
        vid.style.position = "absolute";
        vid.style.width = "100%";
        vid.style.height = "100%";
        this.player.insertBefore(vid, this.player.firstChild);
        this.video = new EQPlayer_parts.video(vid);
        this.video.node.id = this.videoID;
        this.cover = new EQPlayer_parts.cover(this.player.getElementsByClassName("eq-video_cover")[0]);
        this.subContainer = new EQPlayer_parts.subContainer(this.player.getElementsByClassName("eq-sub-container")[0]);
        this.overlayContainer = new EQPlayer_parts.overlayContainer(this.player.getElementsByClassName("overlay-container")[0]);
        this.centerContainer = new EQPlayer_parts.centerContainer(this.player.getElementsByClassName("eq-area-center")[0], true);
        this.header = new EQPlayer_parts.header(this.player.getElementsByClassName("eq-header")[0]);
        this.seekbar = new EQPlayer_parts.seekbar(this.player.getElementsByClassName("eq-box-seekbar")[0]);
        this.seekbar.balloon = new EQPlayer_parts.seekBalloon(this.player.getElementsByClassName("eq-balloon-seek")[0]);
        this.captionContainer = new EQPlayer_parts.captionContainer(this.player.getElementsByClassName("eq-caption_area")[0], this.playerInstans.accessor.model.isLightbox);
        this.footer = new EQPlayer_parts.footer(this.player.getElementsByClassName("eq-footer")[0], true);
        this.timeBox = new EQPlayer_parts.timeBox(this.player.getElementsByClassName("eq-box-time")[0]);
        this.selectTelop = new EQPlayer_parts.selectTelop(this.player.getElementsByClassName("eq-select-telop")[0]);
        this.selectResolution = new EQPlayer_parts.selectResolution(this.player.getElementsByClassName("eq-select-resolution")[0]);
        this.selectSpeed = new EQPlayer_parts.selectSpeed(this.player.getElementsByClassName("eq-select-speed")[0]);
        if (this.playerInstans.accessor.model.isLive && this.playerInstans.accessor.model.livemark_use != "off") {
            this.liveMark = this.parent.getElementsByClassName("eq-livemark")[0];
        }
        if (this.playerInstans.accessor.model.isAuthEnable()) {
            this.authCover = this.player.getElementsByClassName("eq-auth-cover")[0];
            this.authCover.style.display = "block";
            this.authCover.addEventListener("click", function () {
                _this.overlayContainer.auth.open();
                _this.authCover.style.display = "none";
            });
            this.overlayContainer.auth.title.innerText = this.languageResource.kinds.AUTH;
            this.overlayContainer.auth.inputBtn.children[1].innerText = this.languageResource.kinds.PLAY;
        }
    };
    HTML5Player_t3.prototype.setStyle = function () {
        var model = this.playerInstans.accessor.model;
        if (this.player.clientWidth < this.PLAYER_WIDTH_SMALL_MID || this.player.clientHeight < this.PLAYER_HEIGHT_SMALL_MID) {
            this.player.className = "eq-h5_player";
            this.player.classList.add("small_mid");
            this.centerContainer.node.classList.remove("small");
            this.footer_slot1 = this.FOOTER_SLOT_1_SMALL_MID;
            this.footer_slot2 = this.FOOTER_SLOT_2_SMALL_MID;
            this.footer_slot3 = this.FOOTER_SLOT_3_SMALL_MID;
            this.footer_slot4 = this.FOOTER_SLOT_4_SMALL_MID;
            this.widthType = "small_mid";
            this.subContainer.enable = true;
            this.overlayContainer.enable = true;
            if (model.watermark_use == "on") {
                this.centerContainer.enable = true;
            }
            if (model.title_use == "on") {
                this.header.enable = true;
            }
            if (model.controlbar_use == "on") {
                this.footer.enable = true;
                if (model.seak_use == "on") {
                    this.seekbar.enable = true;
                    this.footer.prev.node.style.display = "none";
                    this.footer.next.node.style.display = "none";
                }
                if (model.play_use == "on") {
                    this.soundballoon.node.style.left = "45px";
                }
                else {
                    this.footer.sound.node.style.marginLeft = "0px";
                    this.soundballoon.node.style.left = "7px";
                }
                this.footer.time.visible = false;
            }
            this.overlayContainer.auth.node.classList.remove("mini");
            this.overlayContainer.auth.node.classList.add("small");
        }
        else if (this.player.clientWidth < this.PLAYER_WIDTH_SMALL || this.player.clientHeight < this.PLAYER_HEIGHT_SMALL) {
            this.player.className = "eq-h5_player";
            this.player.classList.add("small");
            this.centerContainer.node.classList.remove("small");
            this.footer_slot1 = this.FOOTER_SLOT_1_SMALL_MID;
            this.footer_slot2 = this.FOOTER_SLOT_2_SMALL_MID;
            this.footer_slot3 = this.FOOTER_SLOT_3_SMALL_MID;
            this.footer_slot4 = this.FOOTER_SLOT_4_SMALL_MID;
            this.widthType = "small";
            this.subContainer.enable = true;
            this.overlayContainer.enable = true;
            if (model.watermark_use == "on") {
                this.centerContainer.enable = true;
            }
            if (model.title_use == "on") {
                this.header.enable = true;
            }
            if (model.controlbar_use == "on") {
                this.footer.enable = true;
                if (model.seak_use == "on") {
                    this.seekbar.enable = true;
                    this.footer.prev.node.style.display = "none";
                    this.footer.next.node.style.display = "none";
                }
                if (model.play_use == "on") {
                    this.soundballoon.node.style.left = "45px";
                }
                else {
                    this.footer.sound.node.style.marginLeft = "0px";
                    this.soundballoon.node.style.left = "7px";
                }
                this.footer.time.visible = true;
            }
            this.overlayContainer.auth.node.classList.remove("mini");
            this.overlayContainer.auth.node.classList.add("small");
        }
        else if (this.player.clientWidth < this.PLAYER_WIDTH_NOMAL || this.player.clientHeight < this.PLAYER_HEIGHT_NOMAL) {
            this.player.className = "eq-h5_player";
            this.widthType = "nomal";
            this.centerContainer.node.classList.remove("small");
            if (this.player.clientWidth < this.FOOTER_WIDTH_FULL) {
                this.centerContainer.node.classList.add("small");
            }
            this.footer_slot1 = this.FOOTER_SLOT_1_SMALL_MID;
            this.footer_slot2 = this.FOOTER_SLOT_2_SMALL_MID;
            this.footer_slot3 = this.FOOTER_SLOT_3_SMALL_MID;
            this.footer_slot4 = this.FOOTER_SLOT_4_SMALL_MID;
            this.subContainer.enable = true;
            this.overlayContainer.enable = true;
            if (model.watermark_use == "on") {
                this.centerContainer.enable = true;
            }
            if (model.title_use == "on") {
                this.header.enable = true;
            }
            if (model.controlbar_use == "on") {
                this.footer.enable = true;
                this.footer.time.visible = true;
                if (model.seak_use == "on") {
                    this.seekbar.enable = true;
                    if (this.player.clientWidth < this.FOOTER_WIDTH_FULL) {
                        this.footer.prev.node.style.display = "block";
                        this.footer.next.node.style.display = "block";
                        if (model.play_use == "on") {
                            this.soundballoon.node.style.left = "125px";
                        }
                        else {
                            this.footer.prev.node.style.marginLeft = "0px";
                            this.soundballoon.node.style.left = "95px";
                        }
                    }
                    else {
                        this.footer.prev.node.style.display = "block";
                        this.footer.next.node.style.display = "block";
                        if (model.play_use == "on") {
                            this.soundballoon.node.style.left = "125px";
                        }
                        else {
                            this.footer.prev.node.style.marginLeft = "0px";
                            this.soundballoon.node.style.left = "95px";
                        }
                    }
                }
                else {
                    if (model.play_use == "on") {
                        this.soundballoon.node.style.left = "45px";
                    }
                    else {
                        this.footer.sound.node.style.marginLeft = "0px";
                        this.soundballoon.node.style.left = "7px";
                    }
                }
            }
            this.overlayContainer.auth.node.classList.remove("mini");
            this.overlayContainer.auth.node.classList.remove("small");
        }
        else {
            this.player.className = "eq-h5_player";
            this.widthType = "full";
            this.centerContainer.node.classList.remove("small");
            this.footer_slot1 = this.FOOTER_SLOT_1_SMALL_MID;
            this.footer_slot2 = this.FOOTER_SLOT_2_SMALL_MID;
            this.footer_slot3 = this.FOOTER_SLOT_3_SMALL_MID;
            this.footer_slot4 = this.FOOTER_SLOT_4_SMALL_MID;
            this.subContainer.enable = true;
            this.overlayContainer.enable = true;
            if (model.watermark_use == "on") {
                this.centerContainer.enable = true;
            }
            if (model.title_use == "on") {
                this.header.enable = true;
            }
            if (model.controlbar_use == "on") {
                this.footer.enable = true;
                this.footer.time.visible = true;
                if (model.seak_use == "on") {
                    this.seekbar.enable = true;
                    if (this.player.clientWidth < this.FOOTER_WIDTH_FULL) {
                        this.footer.prev.node.style.display = "block";
                        this.footer.next.node.style.display = "block";
                        if (model.play_use == "on") {
                            this.soundballoon.node.style.left = "125px";
                        }
                        else {
                            this.footer.prev.node.style.marginLeft = "0px";
                            this.soundballoon.node.style.left = "95px";
                        }
                    }
                    else {
                        this.footer.prev.node.style.display = "block";
                        this.footer.next.node.style.display = "block";
                        if (model.play_use == "on") {
                            this.soundballoon.node.style.left = "125px";
                        }
                        else {
                            this.footer.prev.node.style.marginLeft = "0px";
                            this.soundballoon.node.style.left = "95px";
                        }
                    }
                }
                else {
                    if (model.play_use == "on") {
                        this.soundballoon.node.style.left = "45px";
                    }
                    else {
                        this.footer.sound.node.style.marginLeft = "0px";
                        this.soundballoon.node.style.left = "7px";
                    }
                }
            }
            this.overlayContainer.auth.node.classList.remove("mini");
            this.overlayContainer.auth.node.classList.remove("small");
        }
        if (model.title_use == "on") {
            this.header.enable = true;
            if ((this.player.clientWidth < this.PLAYER_WIDTH_SMALL || this.player.clientHeight < this.PLAYER_HEIGHT_SMALL) && this.subContainer.enable) {
                var margin = 0;
                if (this.subContainer.movies.style.display != "none") {
                    margin += 34;
                }
                if (this.subContainer.links.style.display != "none") {
                    margin += 34;
                }
                if (this.subContainer.share.style.display != "none") {
                    margin += 34;
                }
                this.header.title.style.width = (this.player.clientWidth - margin - 6 - 8).toString() + "px";
            }
            else {
                this.header.title.style.width = "auto";
            }
        }
        this.captionContainer.setFontSize(this.player.clientWidth, false);
    };
    HTML5Player_t3.prototype.setStyleMobile = function () {
        var playerWidth = this.player.clientWidth;
        var playerHeight = this.player.clientHeight;
        var model = this.playerInstans.accessor.model;
        if (playerWidth >= this.PLAYER_WIDTH_LANDSCAPE_SMALL && playerHeight >= this.PLAYER_HEIGHT_LANDSCAPE_SMALL) {
            this.player.className = "eq-h5_player";
            if (playerWidth < this.PLAYER_WIDTH_LANDSCAPE || playerHeight < this.PLAYER_HEIGHT_LANDSCAPE) {
                this.player.classList.add("ls-small");
            }
            this.subContainer.enable = true;
            this.overlayContainer.enable = true;
            this.overlayContainer.visible = true;
            this.centerContainer.enable = true;
            this.centerContainer.play_p.enable = false;
            if (model.watermark_use == "on") {
                this.centerContainer.play.style.display = "block";
                if (model.seak_use == "on") {
                    this.centerContainer.prev.style.display = "block";
                    this.centerContainer.next.style.display = "block";
                }
                else {
                    this.centerContainer.prev.style.display = "none";
                    this.centerContainer.next.style.display = "none";
                    this.centerContainer.play.style.margin = "0";
                }
            }
            else {
                this.centerContainer.play.style.display = "none";
                this.centerContainer.prev.style.display = "none";
                this.centerContainer.next.style.display = "none";
            }
            if (model.volume_use == "on") {
                this.centerContainer.sound.enable = true;
            }
            else {
                this.centerContainer.sound.enable = false;
            }
            if (this.useClosedCaption) {
                this.centerContainer.telop.enable = true;
            }
            else {
                this.centerContainer.telop.enable = false;
            }
            if (this.useMultibitrate) {
                this.centerContainer.resolution.enable = true;
            }
            else {
                this.centerContainer.resolution.enable = false;
            }
            if (model.playbackRate && model.playbackRate.length > 0) {
                this.centerContainer.speed.enable = true;
            }
            else {
                this.centerContainer.speed.enable = false;
            }
            if (model.fullscreen_use == "on") {
                this.centerContainer.fullscreen.enable = true;
            }
            else {
                this.centerContainer.fullscreen.enable = false;
            }
            if (model.title_use == "on") {
                this.header.enable = true;
            }
            else {
                this.header.enable = false;
            }
            if (model.seak_use == "on") {
                this.seekbar.enable = true;
            }
            else {
                this.seekbar.enable = false;
            }
            if (model.time_use == "on") {
                var timeboxVisible = this.timeBox.visible;
                this.timeBox.enable = true;
                this.timeBox.visible = timeboxVisible;
            }
            this.overlayContainer.movies.node.classList.add("eq-landscape");
            this.overlayContainer.movies.node.classList.remove("eq-portlate");
            this.overlayContainer.links.node.classList.add("eq-landscape");
            this.overlayContainer.links.node.classList.remove("eq-portlate");
            this.overlayContainer.share.node.classList.add("eq-landscape");
            this.overlayContainer.share.node.classList.remove("eq-portlate");
            this.selectTelop.node.classList.remove("eq-portlate");
            this.selectResolution.node.classList.remove("eq-portlate");
            this.selectSpeed.node.classList.remove("eq-portlate");
            this.overlayContainer.auth.node.classList.remove("small");
        }
        else {
            this.player.className = "eq-h5_player";
            this.player.classList.add("eq-pr");
            this.subContainer.enable = true;
            this.overlayContainer.enable = true;
            this.overlayContainer.visible = true;
            this.overlayContainer.movies.node.classList.remove("eq-landscape");
            this.overlayContainer.movies.node.classList.add("eq-portlate");
            this.overlayContainer.links.node.classList.remove("eq-landscape");
            this.overlayContainer.links.node.classList.add("eq-portlate");
            this.overlayContainer.share.node.classList.remove("eq-landscape");
            this.overlayContainer.share.node.classList.add("eq-portlate");
            this.centerContainer.enable = true;
            this.centerContainer.play_p.enable = true;
            this.centerContainer.play.style.display = "none";
            this.centerContainer.prev.style.display = "none";
            this.centerContainer.next.style.display = "none";
            this.centerContainer.resolution.enable = false;
            this.selectTelop.node.classList.add("eq-portlate");
            this.selectResolution.node.classList.add("eq-portlate");
            this.selectSpeed.node.classList.add("eq-portlate");
            this.overlayContainer.auth.node.classList.add("small");
            if (model.watermark_use == "on") {
                this.centerContainer.play_p.enable = true;
            }
            else {
                this.centerContainer.play_p.enable = false;
            }
            if (this.useClosedCaption) {
                this.centerContainer.telop.enable = true;
            }
            else {
                this.centerContainer.telop.enable = false;
            }
            if (model.volume_use == "on") {
                this.centerContainer.sound.enable = true;
            }
            else {
                this.centerContainer.sound.enable = false;
            }
            if (model.playbackRate && model.playbackRate.length > 0) {
                this.centerContainer.speed.enable = true;
            }
            else {
                this.centerContainer.speed.enable = false;
            }
            if (model.fullscreen_use == "on") {
                this.centerContainer.fullscreen.enable = true;
            }
            else {
                this.centerContainer.fullscreen.enable = false;
            }
            if (model.title_use == "on") {
                this.header.enable = true;
            }
            else {
                this.header.enable = false;
            }
            if (model.seak_use == "on") {
                this.seekbar.enable = true;
            }
            else {
                this.seekbar.enable = false;
            }
            if (model.time_use == "on") {
                var timeboxVisible = this.timeBox.visible;
                this.timeBox.enable = true;
                this.timeBox.visible = timeboxVisible;
            }
        }
        if (model.title_use == "on") {
            this.header.enable = true;
            if ((this.player.clientWidth < this.PLAYER_WIDTH_LANDSCAPE || this.player.clientHeight < this.PLAYER_HEIGHT_LANDSCAPE) && this.subContainer.enable) {
                var margin = 0;
                if (this.subContainer.movies.style.display != "none") {
                    margin += 45;
                }
                if (this.subContainer.links.style.display != "none") {
                    margin += 45;
                }
                if (this.subContainer.share.style.display != "none") {
                    margin += 45;
                }
                this.header.title.style.width = (this.player.clientWidth - margin - 5 - 8).toString() + "px";
            }
            else {
                this.header.title.style.width = "auto";
            }
        }
        else {
            this.header.enable = false;
        }
        if (model.seak_use == "on") {
            this.seekbar.node.style.width = this.player.clientWidth - 60 + "px";
            this.seekbar.node.style.marginLeft = "30px";
        }
        this.captionContainer.setFontSize(this.player.clientWidth, true);
    };
    HTML5Player_t3.prototype.setPlayerSetting = function () {
        var model = this.playerInstans.accessor.model;
        if (model.responsive != "on" && model.responsive != "fit" && model.isFooder()) {
            this.player.style.width = (model.width) + "px";
            this.player.style.height = (model.height - 20) + "px";
        }
        if (this.platform["isIE"] && Number(this.platform["browser"]["version"]) == 10) {
            model.fullscreen_use = "off";
        }
        this.video.node.crossOrigin = "Anonymous";
        this.isHls = this.playerInstans.accessor.hls;
        this.video.src = model.movie_url;
        this.movie_list = model.movie_list;
        if (!this.movie_list || this.movie_list.length <= 0) {
            this.useMultibitrate = false;
            this.movie_list = [];
        }
        this.movie_index = Number(model.default_quality);
        this.playbackrateIndex = model.playbackRate_index;
        this.playbackrateList = model.playbackRate_list;
        if (!this.playbackrateList || this.playbackrateList.length < 2) {
            this.footer.speed.enable = false;
        }
        else {
            this.footer.speed.enable = true;
            this.speedballoon.setList(this.playbackrateList, this);
            this.speedballoon.title.innerHTML = this.languageResource.kinds.Speed;
            this.changePlaybackRate(this.playbackrateList[this.playbackrateIndex]);
        }
        this.captionList = model.subtitles;
        if (!model.subtitles || model.subtitles.length < 3) {
            this.footer.telop.enable = false;
            this.useClosedCaption = false;
        }
        else {
            this.footer.telop.enable = true;
            this.useClosedCaption = true;
            this.captionIndex = model.sb_default;
            this.telopballoon.setList(this.captionList, this);
            this.telopballoon.setFocus(this.captionList[this.captionIndex]);
            this.captionContainer.init_subtitles(this.captionList);
            this.captionContainer.index = this.captionIndex;
            this.telopballoon.title.innerHTML = this.languageResource.kinds.Caption;
        }
        this.playlist = model.playlist;
        if (!model.playlist || model.playlist.length < 1) {
            this.subContainer.movies.style.display = "none";
            this.useMovies = false;
        }
        else {
            this.subContainer.movies.style.display = "block";
            this.overlayContainer.movies.setList(this.playlist, this);
            this.overlayContainer.movies.title.innerText = this.languageResource.kinds.MOVIES;
            this.useMovies = true;
        }
        if (model.fullscreen_use == "on") {
            this.footer.fullscreen.enable = true;
        }
        else {
            this.footer.fullscreen.enable = false;
        }
        if (model.title_use == "on") {
            this.header.enable = true;
            this.header.setTitle(model.title);
        }
        else {
            this.header.enable = false;
        }
        if (model.exlink_use == "on") {
            if (!model.exlink || model.exlink.length < 1) {
                this.subContainer.links.style.display = "none";
                this.useExLink = false;
            }
            else {
                this.subContainer.links.style.display = "block";
                this.overlayContainer.links.setList(model.exlink, this);
                this.overlayContainer.links.title.innerText = this.languageResource.kinds.LINKS;
            }
        }
        else {
            this.useExLink = false;
            this.subContainer.links.style.display = "none";
        }
        if (!model.sns_id_list || model.sns_id_list < 1) {
            this.useSns = false;
        }
        if (model.sns_use != "on" && model.tag_use != "on") {
            this.useSns = false;
            this.subContainer.share.style.display = "none";
        }
        else {
            this.subContainer.share.style.display = "block";
            if (model.sns_use == "on") {
                this.overlayContainer.share.setList(model.sns_id_list, this);
                this.overlayContainer.share.shareTitle.innerHTML = this.languageResource.kinds.SHARE_MOVIE;
            }
            else {
                this.useSns = false;
                this.overlayContainer.share.showShare(false);
            }
            if (model.tag_use == "on") {
                this.overlayContainer.share.viralForm.children[0].value = model.tag_text;
                this.overlayContainer.share.viralTitle.innerHTML = this.languageResource.kinds.VIRALTAG_TITLE;
            }
            else {
                this.overlayContainer.share.showViral(false);
            }
        }
        if (model.controlbar_use == "on") {
            this.footer.enable = true;
            if (this.player.clientWidth < this.PLAYER_WIDTH_NOMAL) {
                this.captionContainer.node.style.bottom = "40px";
            }
            else {
                this.captionContainer.node.style.bottom = "70px";
            }
        }
        else {
            this.footer.enable = false;
            this.captionContainer.node.style.bottom = "10px";
        }
        if (model.multibitrate_use == "on") {
            this.footer.resolution.enable = true;
            this.resolutionballoon.setList(this.movie_list, this);
            this.resolutionballoon.setFocus(this.video.src);
            var text = "Auto";
            for (var i = 0; i < this.movie_list.length; i++) {
                if (this.movie_list[i].url == this.video.src) {
                    text = this.movie_list[i].text;
                    break;
                }
            }
            this.footer.resolution.node.children[0].children[0].innerText = this.changeQualityLabel(text);
            this.resolutionballoon.title.innerHTML = this.languageResource.kinds.Quality;
        }
        else {
            this.footer.resolution.enable = false;
        }
        if (model.play_use == "on") {
            this.footer.play.enable = true;
        }
        else {
            this.footer.play.enable = false;
        }
        if (model.seak_use == "on" && this.footer.enable) {
            this.seekbar.enable = true;
            this.seekbar.balloon.duration = model.duration;
        }
        else {
            this.seekbar.enable = false;
            this.centerContainer.prev.style.display = "none";
            this.centerContainer.next.style.display = "none";
            this.footer.next.enable = false;
            this.footer.prev.enable = false;
        }
        if (model.time_use == "on") {
            this.footer.time.enable = true;
        }
        else {
            this.footer.time.enable = false;
        }
        if (model.replay_use == "on") {
        }
        if (model.watermark_use == "on") {
            this.centerContainer.enable = true;
        }
        else {
            this.centerContainer.enable = false;
        }
        if (model.volume_use == "on") {
            this.footer.sound.enable = true;
        }
        else {
            this.footer.sound.enable = false;
        }
        this.cover.thumbnail = this.playerInstans.accessor.model.thumbnail_url;
        this.cover.showThumbnail(true);
    };
    HTML5Player_t3.prototype.setPlayerSettingMobile = function () {
        var model = this.playerInstans.accessor.model;
        if (this.platform["isIE"] && Number(this.platform["browser"]["version"]) == 10) {
            model.fullscreen_use = "off";
        }
        if (model.responsive != "on" && model.responsive != "fit" && model.isFooder()) {
            this.player.style.width = (model.width) + "px";
            this.player.style.height = (model.height - 20) + "px";
        }
        this.isHls = this.playerInstans.accessor.hls;
        this.video.src = model.movie_url;
        this.movie_list = model.movie_list;
        this.movie_index = model.default_quality;
        if (!this.movie_list || this.movie_list.length <= 0) {
            this.useMultibitrate = false;
            this.centerContainer.resolution.enable = false;
            this.movie_list = [];
        }
        this.movie_index = Number(model.default_quality);
        this.playbackrateIndex = model.playbackRate_index;
        this.playbackrateList = model.playbackRate_list;
        if (!this.playbackrateList || this.playbackrateList.length < 2) {
            this.centerContainer.speed.enable = false;
        }
        else {
            this.centerContainer.speed.enable = true;
            this.selectSpeed.setList(this.playbackrateList, this);
            this.selectSpeed.title.innerHTML = this.languageResource.kinds.Speed;
            this.changePlaybackRate(this.playbackrateList[this.playbackrateIndex]);
        }
        this.captionList = model.subtitles;
        if (!model.subtitles || model.subtitles.length < 3) {
            this.centerContainer.telop.enable = false;
            this.useClosedCaption = false;
        }
        else {
            this.centerContainer.telop.enable = true;
            this.useClosedCaption = true;
            this.captionIndex = model.sb_default;
            this.selectTelop.setList(this.captionList, this);
            this.selectTelop.setFocus(this.captionList[this.captionIndex]);
            this.selectTelop.title.innerHTML = this.languageResource.kinds.Caption;
            this.captionContainer.video = this.video.node;
            this.captionContainer.init_subtitles(this.captionList);
            this.captionContainer.index = this.captionIndex;
        }
        if (model.fullscreen_use == "on") {
            this.centerContainer.fullscreen.enable = true;
        }
        else {
            this.centerContainer.fullscreen.enable = false;
        }
        if (model.title_use == "on") {
            this.header.enable = true;
            this.header.setTitle(model.title);
        }
        else {
            this.header.enable = false;
        }
        if (model.exlink_use == "on") {
            if (!model.exlink || model.exlink.length < 1) {
                this.subContainer.links.style.display = "none";
                this.useExLink = false;
            }
            else {
                this.subContainer.links.style.display = "block";
                this.overlayContainer.links.setList(model.exlink, this);
                this.overlayContainer.links.title.innerHTML = this.languageResource.kinds.LINKS;
            }
        }
        else {
            this.subContainer.links.style.display = "none";
            this.useExLink = false;
        }
        model.tag_use = "off";
        if (!model.sns_id_list || model.sns_id_list < 1) {
            this.useSns = false;
        }
        if (model.sns_use != "on" && model.tag_use != "on") {
            this.subContainer.share.style.display = "none";
            this.useSns = false;
        }
        else {
            this.subContainer.share.style.display = "block";
            if (model.sns_use == "on") {
                this.overlayContainer.share.setList(model.sns_id_list, this);
                this.overlayContainer.share.shareTitle.innerHTML = this.languageResource.kinds.SHARE_MOVIE;
            }
            else {
                this.useSns = false;
                this.overlayContainer.share.showShare(false);
            }
        }
        this.playlist = model.playlist;
        if (!model.playlist || model.playlist.length < 1) {
            this.subContainer.movies.style.display = "none";
            this.useMovies = false;
        }
        else {
            this.subContainer.movies.style.display = "block";
            this.overlayContainer.movies.setList(this.playlist, this);
            this.overlayContainer.movies.title.innerText = this.languageResource.kinds.MOVIES;
            this.useMovies = true;
        }
        if (model.multibitrate_use == "on") {
            this.centerContainer.resolution.enable = true;
            this.selectResolution.setList(this.movie_list, this);
            this.selectResolution.setFocus(this.video.src);
            this.selectResolution.title.innerHTML = this.languageResource.kinds.Quality;
            var text = "Auto";
            for (var i = 0; i < this.movie_list.length; i++) {
                if (this.movie_list[i].url == this.video.src) {
                    text = this.movie_list[i].text;
                    break;
                }
            }
            this.centerContainer.resolution.node.children[0].children[0].innerText = this.changeQualityLabel(text);
        }
        else {
            this.centerContainer.resolution.enable = false;
            this.useMultibitrate = false;
        }
        if (model.seak_use == "on" && this.footer.enable) {
            this.seekbar.enable = true;
            this.seekbar.balloon.duration = model.duration;
        }
        else {
            this.seekbar.enable = false;
            this.centerContainer.prev.style.display = "none";
            this.centerContainer.next.style.display = "none";
        }
        if (model.time_use == "on") {
            this.timeBox.enable = true;
        }
        else {
            this.timeBox.enable = false;
        }
        if (model.replay_use == "on") {
        }
        if (model.volume_use == "on") {
            this.centerContainer.sound.enable = true;
        }
        else {
            this.centerContainer.sound.enable = false;
        }
        if (model.watermark_use == "on") {
            this.centerContainer.enable = true;
            this.centerContainer.play_p.enable = true;
        }
        else {
            this.centerContainer.enable = true;
            this.centerContainer.prev.style.display = "none";
            this.centerContainer.play.style.display = "none";
            this.centerContainer.next.style.display = "none";
            this.centerContainer.play_p.enable = false;
        }
        if (model.controlbar_use == "on") {
            this.footer.enable = true;
            this.captionContainer.node.style.bottom = "50px";
        }
        else {
            this.footer.enable = false;
            model.time_use = "off";
            this.timeBox.enable = false;
            model.volume_use = "off";
            this.centerContainer.sound.enable = false;
            this.useClosedCaption = false;
            this.centerContainer.telop.enable = false;
            this.useMultibitrate = false;
            this.centerContainer.resolution.enable = false;
            model.playbackRate = null;
            this.centerContainer.speed.enable = false;
            model.fullscreen_use = "off";
            this.centerContainer.fullscreen.enable = false;
            this.captionContainer.node.style.bottom = "10px";
        }
        this.cover.thumbnail = this.playerInstans.accessor.model.thumbnail_url;
        this.cover.showThumbnail(true);
    };
    HTML5Player_t3.prototype.setEvent = function () {
        var _this = this;
        window.addEventListener("resize", function () {
            _this.telopballoon.visible = false;
            _this.speedballoon.visible = false;
            _this.resolutionballoon.visible = false;
            _this.closeSelectMenu();
        });
        this.player.addEventListener("mouseleave", function (e) {
            if (_this.isSeeking || _this.isLoading) {
                return;
            }
            if (!!e.toElement) {
                for (var i = 0; i < _this.player.children.length; i++) {
                    if (e.toElement == _this.player.children[i]) {
                        return;
                    }
                }
                if (e.toElement == _this.seekbar.container) {
                    return;
                }
            }
            if (_this.video.state == "playing") {
                _this.showController(false);
            }
            else if (_this.video.state == "pause") {
                _this.showController(false);
            }
        });
        this.player.addEventListener("mousemove", function (e) {
            if (_this.isSeeking || _this.isLoading) {
                return;
            }
            _this.showController(true);
        });
        this.cover.node.addEventListener("click", function () {
            if (_this.video.state == "playing") {
                _this.pause();
            }
            else {
                _this.play();
            }
        });
        var footer = this.footer;
        footer.play.node.addEventListener("click", function () {
            if (_this.video.state == "playing") {
                _this.pause();
            }
            else {
                _this.play();
            }
        });
        footer.fullscreen.node.addEventListener("click", function () {
            _this.changeFullscreen();
        });
        footer.telop.node.addEventListener("click", function () {
            if (_this.telopballoon.visible) {
                _this.telopballoon.visible = false;
                _this.telopballoon.ul.style.overflowY = "visible";
                _this.closeSelectMenu();
            }
            else {
                clearTimeout(_this.controllerVisibleTimer);
                _this.telopballoon.visible = true;
                var currentHeight = _this.telopballoon.node.clientHeight;
                if (currentHeight < _this.telopballoon.node.scrollHeight) {
                    currentHeight = _this.telopballoon.node.scrollHeight;
                }
                if (currentHeight + 50 > _this.player.clientHeight) {
                    _this.telopballoon.ul.style.display = "block";
                    _this.telopballoon.ul.style.overflowY = "scroll";
                    _this.telopballoon.ul.style.height = _this.player.clientHeight - 46 - 24 - 10 + "px";
                }
                else {
                    _this.telopballoon.ul.style.display = "table";
                    _this.telopballoon.ul.style.overflowY = "hidden";
                    _this.telopballoon.ul.style.height = "100%";
                }
                var slot = -1;
                var balloonRight = 0;
                var balloonPinRight = 0;
                var model = _this.playerInstans.accessor.model;
                if (_this.useClosedCaption && footer.telop.visible) {
                    slot = 4;
                    if (!_this.useMultibitrate || !footer.resolution.visible) {
                        slot -= 1;
                    }
                    if (!model.playbackRate || !footer.speed.visible) {
                        slot -= 1;
                    }
                    if (model.fullscreen_use == "off" || !footer.fullscreen.visible) {
                        slot -= 1;
                    }
                    switch (slot) {
                        case 1:
                            balloonRight = (_this.footer_slot1 - (_this.telopballoon.node.clientWidth / 2));
                            if (balloonRight <= 0) {
                                balloonPinRight = 20;
                            }
                            break;
                        case 2:
                            balloonRight = (_this.footer_slot2 - (_this.telopballoon.node.clientWidth / 2));
                            if (balloonRight <= 0) {
                                balloonPinRight = 55;
                            }
                            break;
                        case 3:
                            balloonRight = (_this.footer_slot3 - (_this.telopballoon.node.clientWidth / 2));
                            if (balloonRight <= 0) {
                                balloonPinRight = 90;
                            }
                            break;
                        case 4:
                            balloonRight = (_this.footer_slot4 - (_this.telopballoon.node.clientWidth / 2));
                            if (balloonRight <= 0) {
                                balloonPinRight = 122;
                            }
                            break;
                    }
                    if (balloonRight < 0) {
                        balloonRight = 0;
                        _this.telopballoon.pin.style.right = balloonPinRight.toString() + "px";
                    }
                    else {
                        _this.telopballoon.pin.className = "eq-pin";
                    }
                    _this.telopballoon.node.style.right = balloonRight.toString() + "px";
                }
            }
            _this.resolutionballoon.visible = false;
            _this.resolutionballoon.ul.style.overflowY = "visible";
            _this.speedballoon.visible = false;
            _this.speedballoon.ul.style.overflowY = "visible";
        });
        footer.resolution.node.addEventListener("click", function () {
            _this.telopballoon.visible = false;
            if (_this.resolutionballoon.visible) {
                _this.resolutionballoon.visible = false;
                _this.resolutionballoon.ul.style.overflowY = "visible";
                _this.closeSelectMenu();
            }
            else {
                clearTimeout(_this.controllerVisibleTimer);
                _this.resolutionballoon.visible = true;
                var currentHeight = _this.resolutionballoon.node.clientHeight;
                if (currentHeight < _this.resolutionballoon.node.scrollHeight) {
                    currentHeight = _this.resolutionballoon.node.scrollHeight;
                }
                if (currentHeight + 50 > _this.player.clientHeight) {
                    _this.resolutionballoon.ul.style.display = "block";
                    _this.resolutionballoon.ul.style.overflowY = "scroll";
                    _this.resolutionballoon.ul.style.height = _this.player.clientHeight - 49 - 24 - 10 + "px";
                }
                else {
                    _this.resolutionballoon.ul.style.display = "table";
                    _this.resolutionballoon.ul.style.overflowY = "hidden";
                    _this.resolutionballoon.ul.style.height = "100%";
                }
                var slot = -1;
                var balloonRight = 0;
                var balloonPinRight = 0;
                var model = _this.playerInstans.accessor.model;
                if (_this.useMultibitrate && footer.resolution.visible) {
                    slot = 3;
                    if (!model.playbackRate || !footer.speed.visible) {
                        slot -= 1;
                    }
                    if (model.fullscreen_use == "off" || !footer.fullscreen.visible) {
                        slot -= 1;
                    }
                    switch (slot) {
                        case 1:
                            balloonRight = (_this.footer_slot1 - (_this.resolutionballoon.node.clientWidth / 2));
                            if (balloonRight <= 0) {
                                balloonPinRight = 20;
                            }
                            break;
                        case 2:
                            balloonRight = (_this.footer_slot2 - (_this.resolutionballoon.node.clientWidth / 2));
                            if (balloonRight <= 0) {
                                balloonPinRight = 55;
                            }
                            break;
                        case 3:
                            balloonRight = (_this.footer_slot3 - (_this.resolutionballoon.node.clientWidth / 2));
                            if (balloonRight <= 0) {
                                balloonPinRight = 90;
                            }
                            break;
                    }
                    if (balloonRight < 0) {
                        balloonRight = 0;
                        _this.resolutionballoon.pin.style.right = balloonPinRight.toString() + "px";
                    }
                    else {
                        _this.resolutionballoon.pin.className = "eq-pin";
                    }
                    _this.resolutionballoon.node.style.right = balloonRight.toString() + "px";
                }
            }
            _this.telopballoon.visible = false;
            _this.telopballoon.ul.style.overflowY = "visible";
            _this.speedballoon.visible = false;
            _this.speedballoon.ul.style.overflowY = "visible";
        });
        footer.speed.node.addEventListener("click", function () {
            _this.telopballoon.visible = false;
            _this.telopballoon.ul.style.overflowY = "visible";
            _this.resolutionballoon.visible = false;
            _this.resolutionballoon.ul.style.overflowY = "visible";
            if (_this.speedballoon.visible) {
                _this.speedballoon.visible = false;
                _this.speedballoon.ul.style.overflowY = "visible";
                _this.closeSelectMenu();
            }
            else {
                clearTimeout(_this.controllerVisibleTimer);
                _this.speedballoon.visible = true;
                var currentHeight = _this.speedballoon.node.clientHeight;
                if (currentHeight < _this.speedballoon.node.scrollHeight) {
                    currentHeight = _this.speedballoon.node.scrollHeight;
                }
                if (currentHeight + 50 > _this.player.clientHeight) {
                    _this.speedballoon.ul.style.display = "block";
                    _this.speedballoon.ul.style.overflowY = "scroll";
                    _this.speedballoon.ul.style.height = _this.player.clientHeight - 46 - 24 - 10 + "px";
                }
                else {
                    _this.speedballoon.ul.style.display = "table";
                    _this.speedballoon.ul.style.overflowY = "hidden";
                    _this.speedballoon.ul.style.height = "100%";
                }
                var model = _this.playerInstans.accessor.model;
                var slot = -1;
                var balloonRight = 0;
                var balloonPinRight = 0;
                slot = 2;
                if (model.fullscreen_use == "off" || !footer.fullscreen.visible) {
                    slot -= 1;
                }
                switch (slot) {
                    case 1:
                        balloonRight = (_this.footer_slot1 - (_this.speedballoon.node.clientWidth / 2));
                        if (balloonRight <= 0) {
                            balloonPinRight = 20;
                        }
                        break;
                    case 2:
                        balloonRight = (_this.footer_slot2 - (_this.speedballoon.node.clientWidth / 2));
                        if (balloonRight <= 0) {
                            balloonPinRight = 55;
                        }
                        break;
                }
                if (balloonRight < 0) {
                    balloonRight = 0;
                    _this.speedballoon.pin.style.right = balloonPinRight.toString() + "px";
                }
                else {
                    _this.speedballoon.pin.className = "eq-pin";
                }
                _this.speedballoon.node.style.right = balloonRight.toString() + "px";
            }
        });
        footer.sound.node.addEventListener("click", function () {
            _this.setMute(!_this.video.node.muted);
            _this.telopballoon.visible = false;
            _this.resolutionballoon.visible = false;
            _this.speedballoon.visible = false;
            _this.closeSelectMenu();
        });
        footer.sound.node.addEventListener("mouseover", function () {
            if (!_this.isSeeking) {
                _this.soundballoon.visible = true;
                _this.onMouseSound = true;
            }
        });
        footer.sound.node.addEventListener("mouseout", function () {
            _this.onMouseSound = false;
            setTimeout(function () {
                if (!_this.onMouseSound) {
                    _this.soundballoon.visible = false;
                }
            }, 500);
        });
        footer.prev.node.addEventListener("click", function () {
            var time = 0;
            time = _this.getCurrentTime();
            _this.setCurrentTime(time - _this.SEEK_BTN_TIME);
        });
        footer.next.node.addEventListener("click", function () {
            var time = 0;
            time = _this.getCurrentTime();
            _this.setCurrentTime(time + _this.SEEK_BTN_TIME);
        });
        this.soundballoon.node.addEventListener("mouseover", function () {
            _this.soundballoon.visible = true;
            _this.onMouseSound = true;
        });
        this.soundballoon.node.addEventListener("mouseout", function () {
            _this.onMouseSound = false;
            setTimeout(function () {
                if (!_this.onMouseSound) {
                    _this.soundballoon.visible = false;
                }
            }, 500);
        });
        var subContainer = this.subContainer;
        var overlayContainer = this.overlayContainer;
        subContainer.movies.addEventListener("click", function () {
            _this.preOpenState = _this.video.state;
            if (_this.player.clientWidth >= _this.PLAYER_WIDTH_SMALL && _this.player.clientHeight >= _this.PLAYER_HEIGHT_SMALL) {
                overlayContainer.movies.closeBtn.style.top = "30px";
            }
            overlayContainer.movies.open();
            overlayContainer.links.visible = false;
            overlayContainer.share.visible = false;
            _this.telopballoon.visible = false;
            _this.speedballoon.visible = false;
            _this.resolutionballoon.visible = false;
            _this.pause();
        });
        subContainer.links.addEventListener("click", function () {
            _this.preOpenState = _this.video.state;
            if (_this.player.clientWidth >= _this.PLAYER_WIDTH_SMALL && _this.player.clientHeight >= _this.PLAYER_HEIGHT_SMALL) {
                overlayContainer.links.closeBtn.style.top = "30px";
            }
            overlayContainer.movies.visible = false;
            overlayContainer.links.open(_this.player.clientWidth);
            overlayContainer.share.visible = false;
            _this.telopballoon.visible = false;
            _this.speedballoon.visible = false;
            _this.resolutionballoon.visible = false;
            _this.pause();
        });
        subContainer.share.addEventListener("click", function () {
            _this.preOpenState = _this.video.state;
            if (_this.player.clientWidth >= _this.PLAYER_WIDTH_SMALL && _this.player.clientHeight >= _this.PLAYER_HEIGHT_SMALL) {
                overlayContainer.share.closeBtn.style.top = "30px";
            }
            overlayContainer.movies.visible = false;
            overlayContainer.links.visible = false;
            overlayContainer.share.visible = true;
            _this.telopballoon.visible = false;
            _this.speedballoon.visible = false;
            _this.resolutionballoon.visible = false;
            overlayContainer.share.node.children[0].children[3].children[0].select();
            _this.pause();
        });
        this.centerContainer.node.addEventListener("click", function (e) {
            if (e.target.classList.contains("eq-area-center")) {
                if (_this.video.state == "playing") {
                    _this.pause();
                }
                else {
                    _this.play();
                }
            }
        });
        this.centerContainer.play.addEventListener("click", function () {
            if (_this.video.state == "playing") {
                _this.pause();
            }
            else {
                _this.play();
            }
        });
        this.centerContainer.prev.addEventListener("click", function () {
            var time = 0;
            time = _this.getCurrentTime();
            _this.setCurrentTime(time - _this.SEEK_BTN_TIME);
        });
        this.centerContainer.next.addEventListener("click", function () {
            var time = 0;
            time = _this.getCurrentTime();
            _this.setCurrentTime(time + _this.SEEK_BTN_TIME);
        });
        this.centerContainer.replay.addEventListener("click", function () {
            _this.replay();
        });
        this.playerInstans.accessor.addEventListener("canPlayHls", function () {
            _this.canPlayHls = true;
        });
        document.addEventListener("seek_operation_start", function () {
            _this.isSeeking = true;
            _this.preSeekState = _this.video.state;
            _this.pause();
        });
        document.addEventListener("seek_operation_end", function () {
            var setTime = _this.getDuration() * (_this.seekbar.value / 100);
            _this.setCurrentTime(setTime);
            if (_this.preSeekState == "playing") {
                _this.play();
            }
            _this.isSeeking = false;
        });
        document.addEventListener("sound_operation_start", function () {
            _this.isSoundOperating = true;
        });
        document.addEventListener("sound_operation_end", function () {
            _this.setVolume(_this.soundballoon.value / 100);
            setTimeout(function () {
                _this.isSoundOperating = false;
            }, 500);
        });
        document.addEventListener("closeOverlay", function () {
            if (_this.preOpenState == "playing") {
                _this.play();
            }
        });
        this.video.node.addEventListener("playing", function () {
            _this.video.node.playbackRate = _this.playbackRate;
            setTimeout(function () {
                if (_this.video.node.playbackRate != _this.playbackRate) {
                    _this.video.node.playbackRate = _this.playbackRate;
                }
            }, 500);
            _this.showLoading(false);
        });
        this.video.node.addEventListener("seeked", function () {
            if (_this.preSeekState == "playing") {
                _this.showLoading(false);
            }
        });
        this.video.node.addEventListener("ended", function () {
            try {
                if (_this.subContainer.enable) {
                    var model = _this.playerInstans.accessor.model;
                    if (_this.useMovies) {
                        _this.overlayContainer.movies.open();
                    }
                    else if (_this.useExLink) {
                        _this.overlayContainer.links.open(_this.player.clientWidth);
                    }
                    else if (_this.useSns || model.tag_use != "off") {
                        _this.overlayContainer.share.visible = true;
                        if (_this.overlayContainer.share.node.children[0].children[3].children[0]) {
                            _this.overlayContainer.share.node.children[0].children[3].children[0].select();
                        }
                    }
                }
            }
            catch (e) {
            }
        });
        this.video.node.addEventListener("error", function (e) {
            _this.set_info_error(e.target.error.code);
        });
        this.overlayContainer.auth.inputBtn.addEventListener("click", function () {
            _this.overlayContainer.auth.close();
            var values = _this.overlayContainer.auth.getValue();
            _this.playerInstans.accessor.login(values["id"], values["pass"]);
        });
        this.overlayContainer.auth.idBox.addEventListener("keydown", function (e) {
            var values = _this.overlayContainer.auth.getValue();
            if (e.keyCode == 13 && values["id"] && values["pass"]) {
                _this.overlayContainer.auth.close();
                _this.playerInstans.accessor.login(values["id"], values["pass"]);
            }
        });
        this.overlayContainer.auth.passwordBox.addEventListener("keydown", function (e) {
            var values = _this.overlayContainer.auth.getValue();
            if (e.keyCode == 13 && values["id"] && values["pass"]) {
                _this.overlayContainer.auth.close();
                _this.playerInstans.accessor.login(values["id"], values["pass"]);
            }
        });
        document.addEventListener("closeSelectMenu", function () {
            _this.controllerVisibleTimer = setTimeout(function () {
                if (_this.video.state == "playing") {
                    _this.showController(false);
                }
            }, 3000);
        });
    };
    HTML5Player_t3.prototype.setEventMobile = function () {
        var _this = this;
        window.addEventListener("resize", function () {
            _this.setStyleMobile();
        });
        this.cover.node.addEventListener("click", function () {
            if (_this.selectTelop.visible) {
                _this.selectTelop.visible = false;
                _this.showSelectList(false);
                _this.controllerVisibleTimer = setTimeout(function () {
                    _this.showController(false);
                }, 3000);
                return;
            }
            if (_this.selectResolution.visible) {
                _this.selectResolution.visible = false;
                _this.showSelectList(false);
                _this.controllerVisibleTimer = setTimeout(function () {
                    _this.showController(false);
                }, 3000);
                return;
            }
            if (_this.selectSpeed.visible) {
                _this.selectSpeed.visible = false;
                _this.showSelectList(false);
                _this.controllerVisibleTimer = setTimeout(function () {
                    _this.showController(false);
                }, 3000);
                return;
            }
            if (_this.isControllerVisible) {
                if (_this.video.state == "playing") {
                    _this.pause();
                }
                else {
                    _this.play();
                }
            }
            else {
                _this.showController(true);
            }
        });
        var subContainer = this.subContainer;
        var overlayContainer = this.overlayContainer;
        subContainer.movies.addEventListener("click", function () {
            _this.preOpenState = _this.video.state;
            overlayContainer.movies.open();
            overlayContainer.links.visible = false;
            overlayContainer.share.visible = false;
            _this.pause();
        });
        subContainer.links.addEventListener("click", function () {
            _this.preOpenState = _this.video.state;
            overlayContainer.movies.visible = false;
            overlayContainer.links.open(_this.player.clientWidth);
            overlayContainer.share.visible = false;
            _this.pause();
        });
        subContainer.share.addEventListener("click", function () {
            _this.preOpenState = _this.video.state;
            overlayContainer.movies.visible = false;
            overlayContainer.links.visible = false;
            overlayContainer.share.visible = true;
            _this.pause();
        });
        var centerContainer = this.centerContainer;
        centerContainer.node.addEventListener("click", function (e) {
            if (e.target.classList.contains("eq-area-center")) {
                if (_this.video.state == "playing") {
                    _this.pause();
                }
                else {
                    _this.play();
                }
            }
        });
        centerContainer.play.addEventListener("click", function () {
            if (_this.video.state == "playing") {
                _this.pause();
            }
            else {
                _this.play();
            }
        });
        centerContainer.prev.addEventListener("click", function () {
            var time = 0;
            time = _this.getCurrentTime();
            _this.setCurrentTime(time - _this.SEEK_BTN_TIME);
        });
        centerContainer.next.addEventListener("click", function () {
            var time = 0;
            time = _this.getCurrentTime();
            _this.setCurrentTime(time + _this.SEEK_BTN_TIME);
        });
        centerContainer.replay.addEventListener("click", function () {
            _this.replay();
        });
        centerContainer.play_p.node.addEventListener("click", function () {
            var target = event.target;
            if (target.parentElement.classList.contains("eq-icon-replay")) {
                _this.replay();
            }
            else if (_this.video.state == "playing") {
                _this.pause();
            }
            else {
                _this.play();
            }
        });
        centerContainer.fullscreen.node.addEventListener("click", function () {
            _this.changeFullscreen();
        });
        centerContainer.telop.node.addEventListener("click", function () {
            if (_this.selectTelop.visible) {
                _this.selectTelop.visible = false;
                _this.showSelectList(false);
                _this.controllerVisibleTimer = setTimeout(function () {
                    _this.showController(false);
                }, 3000);
            }
            else {
                _this.showSelectList(true);
                _this.selectTelop.visible = true;
                clearInterval(_this.controllerVisibleTimer);
            }
            _this.selectResolution.visible = false;
            _this.selectSpeed.visible = false;
        });
        centerContainer.resolution.node.addEventListener("click", function () {
            _this.selectTelop.visible = false;
            if (_this.selectResolution.visible) {
                _this.selectResolution.visible = false;
                _this.showSelectList(false);
                _this.controllerVisibleTimer = setTimeout(function () {
                    _this.showController(false);
                }, 3000);
            }
            else {
                _this.showSelectList(true);
                _this.selectResolution.visible = true;
                clearInterval(_this.controllerVisibleTimer);
            }
            _this.selectSpeed.visible = false;
        });
        centerContainer.speed.node.addEventListener("click", function () {
            _this.selectTelop.visible = false;
            _this.selectResolution.visible = false;
            if (_this.selectSpeed.visible) {
                _this.selectSpeed.visible = false;
                _this.showSelectList(false);
                _this.controllerVisibleTimer = setTimeout(function () {
                    _this.showController(false);
                }, 3000);
            }
            else {
                _this.showSelectList(true);
                _this.selectSpeed.visible = true;
                clearInterval(_this.controllerVisibleTimer);
            }
        });
        centerContainer.sound.node.addEventListener("click", function () {
            _this.setMute(!_this.video.node.muted);
            _this.selectTelop.visible = false;
            _this.selectResolution.visible = false;
            _this.selectSpeed.visible = false;
            _this.showSelectList(false);
        });
        this.playerInstans.accessor.addEventListener("canPlayHls", function () {
            _this.canPlayHls = true;
        });
        document.addEventListener("seek_operation_start", function () {
            _this.isSeeking = true;
            _this.preSeekState = _this.video.state;
            _this.pause();
        });
        document.addEventListener("seek_operation_end", function () {
            var setTime = _this.getDuration() * (_this.seekbar.value / 100);
            _this.setCurrentTime(setTime);
            if (_this.preSeekState == "playing") {
                _this.play();
            }
            _this.isSeeking = false;
        });
        document.addEventListener("closeSelectMenu", function () {
            if (_this.isFirstPlay) {
                _this.showSelectList(false);
            }
            else {
                _this.showController(true);
            }
            _this.controllerVisibleTimer = setTimeout(function () {
                if (_this.video.state == "playing") {
                    _this.showController(false);
                }
            }, 3000);
        });
        document.addEventListener("closeOverlay", function () {
            if (_this.preOpenState == "playing") {
                _this.play();
            }
        });
        this.video.node.addEventListener("playing", function () {
            _this.showLoading(false);
        });
        this.video.node.addEventListener("seeked", function () {
            if (_this.preSeekState == "playing") {
                _this.showLoading(false);
            }
        });
        this.video.node.addEventListener("ended", function () {
            try {
                if (_this.subContainer.enable) {
                    var model = _this.playerInstans.accessor.model;
                    if (_this.useMovies) {
                        _this.overlayContainer.movies.open();
                    }
                    else if (_this.useExLink) {
                        _this.overlayContainer.links.open(_this.player.clientWidth);
                    }
                    else if (_this.useSns) {
                        _this.overlayContainer.share.visible = true;
                        if (_this.overlayContainer.share.node.children[0].children[3].children[0]) {
                            _this.overlayContainer.share.node.children[0].children[3].children[0].select();
                        }
                    }
                }
            }
            catch (e) {
            }
        });
        this.video.node.addEventListener("error", function (e) {
            _this.set_info_error(e.target.error.code);
        });
        this.overlayContainer.auth.inputBtn.addEventListener("click", function () {
            _this.overlayContainer.auth.close();
            var values = _this.overlayContainer.auth.getValue();
            _this.playerInstans.accessor.login(values["id"], values["pass"]);
        });
    };
    HTML5Player_t3.prototype.dispatchReady = function () {
    };
    HTML5Player_t3.prototype.showSelectList = function (visible) {
        this.isShowSelectMenu = visible;
        if (visible) {
            this.header.visible = false;
            this.footer.visible = false;
            this.centerContainer.visible = false;
            this.subContainer.visible = false;
            this.timeBox.visible = false;
        }
        else {
            this.header.visible = true;
            this.footer.visible = true;
            this.centerContainer.visible = true;
            this.subContainer.visible = true;
            this.timeBox.visible = true;
        }
    };
    HTML5Player_t3.prototype.isResposive = function () {
        return this.playerInstans.accessor.model.responsive == "on" || this.playerInstans.accessor.model.responsive == "fit";
    };
    HTML5Player_t3.prototype.linkAction = function (type, index) {
        var url;
        if (type == "exlink") {
            type = type + (index + 1).toString();
            url = this.overlayContainer.links.relationList[index].url;
        }
        else if (type == "movies") {
            this.playerInstans.accessor.reConstruct(this.overlayContainer.movies.relationList[index].meta_id);
            return;
        }
        else {
            switch (type) {
                case "facebook":
                    url = "http://www.facebook.com/share.php"
                        + "?u=" + encodeURIComponent(this.playerInstans.flashVars.parent_url);
                    break;
                case "twitter":
                    url = "http://twitter.com/share"
                        + "?text=" + encodeURIComponent(this.playerInstans.flashVars.title || "")
                        + "&url=" + encodeURIComponent(this.playerInstans.flashVars.parent_url);
                    break;
                case "google":
                    url = "https://plusone.google.com/share?url=" + encodeURIComponent(this.playerInstans.flashVars.parent_url);
                    break;
                case "line":
                    var query = (this.playerInstans.flashVars.title || "") + " " + this.playerInstans.flashVars.parent_url;
                    query = encodeURIComponent(query);
                    url = "http://line.me/R/msg/text/?" + query;
                    break;
            }
        }
        var newWindow = window.open("", "_blank");
        newWindow.location.href = url;
        this.setBeacon(type);
    };
    HTML5Player_t3.prototype.setBeacon = function (tag) {
        this.playerInstans.accessor.sendClickBeacon(tag);
    };
    HTML5Player_t3.prototype.changeFullscreen = function () {
        if (this.checkFullscreen()) {
            if (this.platform["os"]["name"] == "iOS") {
                return;
            }
            if (document.exitFullscreen != null) {
                document.exitFullscreen();
            }
            else if (document.mozCancelFullScreen != null) {
                document.mozCancelFullScreen();
            }
            else if (document.webkitCancelFullScreen != null) {
                document.webkitCancelFullScreen();
            }
            else if (document.msExitFullscreen != null) {
                document.msExitFullscreen();
            }
            if (this.isMobile()) {
                this.centerContainer.fullscreen.node.className = "eq-icon-fullscreen";
            }
            else {
                this.footer.fullscreen.node.className = "eq-icon-fullscreen";
            }
            if (!this.isResposive()) {
                this.player.style.width = this.playerInstans.accessor.model.width + "px";
                if (this.playerInstans.accessor.model.footer_use == "on") {
                    this.player.style.height = this.playerInstans.accessor.model.height - 20 + "px";
                }
                else {
                    this.player.style.height = this.playerInstans.accessor.model.height + "px";
                }
            }
        }
        else {
            this.playerInstans.accessor.onfullscreen(true);
            if (this.platform["os"]["name"] == "iOS") {
                this.video.node.webkitEnterFullScreen();
                return;
            }
            if (this.player.requestFullScreen != null) {
                this.player.requestFullScreen();
            }
            else if (this.player.msRequestFullscreen != null) {
                this.player.msRequestFullscreen();
            }
            else if (this.player.mozRequestFullScreen != null) {
                this.player.mozRequestFullScreen();
            }
            else if (this.player.webkitRequestFullScreen != null) {
                this.player.webkitRequestFullScreen();
            }
            else if (this.player.webkitEnterFullScreen != null) {
                this.player.webkitEnterFullScreen();
            }
            else if (this.video.node.webkitRequestFullScreen != null) {
                this.video.node.webkitRequestFullScreen();
            }
            else if (this.video.node.webkitEnterFullScreen != null) {
                this.video.node.webkitEnterFullScreen();
            }
            if (this.isMobile()) {
                this.centerContainer.fullscreen.node.className = "eq-icon-fullscreen_close";
            }
            else {
                this.footer.fullscreen.node.className = "eq-icon-fullscreen-disable";
            }
            if (!this.isResposive()) {
                this.player.style.width = "100%";
                this.player.style.height = "100%";
            }
        }
    };
    HTML5Player_t3.prototype.checkFullscreen = function () {
        var isFullscreen = false;
        isFullscreen = (document.fullscreenElement ||
            document.webkitFullscreenElement ||
            document.mozFullScreenElement ||
            document.msFullscreenElement ||
            this.video.node.webkitDisplayingFullscreen);
        if (isFullscreen) {
            if (this.player.clientWidth >= this.PLAYER_WIDTH_NOMAL) {
                this.player.classList.add("fullscreen");
            }
        }
        else {
            if (this.player.clientWidth < this.PLAYER_WIDTH_NOMAL) {
                this.player.classList.remove("fullscreen");
            }
            this.video.node.removeAttribute("controls");
        }
        return isFullscreen;
    };
    HTML5Player_t3.prototype.updateController = function () {
        if (this.playerWidth != this.player.clientWidth || this.playerHeight != this.player.clientHeight) {
            this.setStyle();
        }
        this.playerWidth = this.player.clientWidth;
        this.playerHeight = this.player.clientHeight;
        if (this.isFirstPlay && !this.isLoading) {
            if (!!this.controllerVisibleTimer) {
                clearTimeout(this.controllerVisibleTimer);
            }
            if (this.centerContainer.enable) {
                this.centerContainer.play.style.display = "block";
                this.centerContainer.prev.style.display = "none";
                this.centerContainer.next.style.display = "none";
                this.centerContainer.replay.style.display = "none";
            }
        }
        else if (this.video.state == "playing" && !this.isLoading) {
            this.footer.play.node.className = "eq-icon-pause";
            if (this.centerContainer.enable) {
                this.centerContainer.play.className = "eq-center-icon-pause";
                this.centerContainer.play.style.display = "block";
                if (this.seekbar.enable) {
                    this.centerContainer.prev.style.display = "block";
                    this.centerContainer.next.style.display = "block";
                }
                this.centerContainer.replay.style.display = "none";
            }
            if (this.seekbar.enable && this.isControllerVisible) {
                this.seekbar.visible = true;
            }
        }
        else if (this.video.state == "pause" && !this.isLoading) {
            if (!!this.controllerVisibleTimer) {
                clearTimeout(this.controllerVisibleTimer);
            }
            if (this.isControllerVisible) {
                this.centerContainer.visible = true;
            }
            if (this.centerContainer.enable) {
                this.footer.play.node.className = "eq-icon-play";
                this.centerContainer.play.className = "eq-center-icon-play";
                this.centerContainer.play.style.display = "block";
                if (this.seekbar.enable) {
                    this.centerContainer.prev.style.display = "block";
                    this.centerContainer.next.style.display = "block";
                }
                this.centerContainer.replay.style.display = "none";
            }
            this.footer.play.node.className = "eq-icon-play";
        }
        else if (this.video.state == "ended" && !this.isLoading) {
            if (!!this.controllerVisibleTimer) {
                clearTimeout(this.controllerVisibleTimer);
            }
            this.centerContainer.play.classList.remove("isFirstPlay");
            this.cover.showThumbnail(true);
            this.centerContainer.visible = true;
            if (this.centerContainer.enable) {
                if (this.playerInstans.accessor.model.replaybtn_use != "off") {
                    this.centerContainer.play.style.display = "none";
                    this.centerContainer.replay.style.display = "block";
                }
                else {
                    this.centerContainer.play.className = "eq-center-icon-play";
                }
                this.centerContainer.prev.style.display = "none";
                this.centerContainer.next.style.display = "none";
            }
            if (this.playerInstans.accessor.model.replaybtn_use != "off") {
                this.footer.play.node.className = "eq-icon-replay";
            }
            else {
                this.footer.play.node.className = "eq-icon-play";
            }
            this.showController(true);
        }
        else if (this.video.state == "seeking") {
        }
    };
    HTML5Player_t3.prototype.updateControllerMobile = function () {
        if (!!this.waitHlsTimer) {
            return;
        }
        if (this.playerWidth != this.player.clientWidth || this.playerHeight != this.player.clientHeight) {
            this.setStyleMobile();
            this.playerWidth = this.player.clientWidth;
            this.playerHeight = this.player.clientHeight;
        }
        if (this.isFirstPlay && !this.isLoading) {
            if (!!this.controllerVisibleTimer) {
                clearTimeout(this.controllerVisibleTimer);
            }
            this.centerContainer.prev.style.display = "none";
            this.centerContainer.next.style.display = "none";
            this.seekbar.visible = false;
            this.centerContainer.play.classList.add("isFirstPlay");
            if (this.playerInstans.accessor.model.watermark_use != "off") {
                if (this.player.clientWidth >= this.PLAYER_WIDTH_LANDSCAPE_SMALL) {
                    this.centerContainer.play.style.display = "block";
                    this.centerContainer.play_p.visible = false;
                }
                else {
                    this.centerContainer.play.style.display = "none";
                    this.centerContainer.play_p.visible = true;
                }
            }
            if (this.platform["os"]["name"] == "iOS" || this.platform["os"]["name"] == "Android") {
                this.centerContainer.fullscreen.visible = false;
                if (this.centerContainer.speed.visible) {
                    this.centerContainer.speed.node.classList.add("isFirstPlay");
                    this.lastChild = this.centerContainer.speed;
                }
                else if (this.centerContainer.resolution.visible) {
                    this.centerContainer.resolution.node.classList.add("isFirstPlay");
                    this.lastChild = this.centerContainer.resolution;
                }
                else if (this.centerContainer.telop.visible) {
                    this.centerContainer.telop.node.classList.add("isFirstPlay");
                    this.lastChild = this.centerContainer.telop;
                }
                else if (this.centerContainer.sound.visible) {
                    this.centerContainer.sound.node.classList.add("isFirstPlay");
                    this.lastChild = this.centerContainer.sound;
                }
                else if (this.centerContainer.play_p.visible) {
                    this.centerContainer.play_p.node.classList.add("isFirstPlay");
                    this.lastChild = this.centerContainer.play_p;
                }
            }
        }
        else if (this.video.state == "playing" && !this.isLoading) {
            this.centerContainer.play.classList.remove("isFirstPlay");
            if (this.centerContainer.enable) {
                if (this.playerInstans.accessor.model.watermark_use != "off") {
                    this.centerContainer.play.className = this.centerContainer.play.className.replace(/eq-icon-(play|pause|replay)/, "eq-icon-pause");
                    this.centerContainer.play_p.node.className = this.centerContainer.play_p.node.className.replace(/eq-icon-(play|pause|replay)/, "eq-icon-pause");
                    if (this.player.clientWidth >= this.PLAYER_WIDTH_LANDSCAPE_SMALL) {
                        this.centerContainer.play.style.display = "block";
                        this.centerContainer.play_p.visible = false;
                    }
                    else {
                        this.centerContainer.play.style.display = "none";
                        this.centerContainer.play_p.visible = true;
                    }
                    if (this.seekbar.enable && this.player.clientWidth >= this.PLAYER_WIDTH_LANDSCAPE_SMALL) {
                        this.centerContainer.prev.style.display = "block";
                        this.centerContainer.next.style.display = "block";
                    }
                    else {
                        this.centerContainer.prev.style.display = "none";
                        this.centerContainer.next.style.display = "none";
                    }
                }
                this.centerContainer.replay.style.display = "none";
                if (this.centerContainer.fullscreen.enable) {
                    this.centerContainer.fullscreen.visible = true;
                    if (this.lastChild) {
                        this.lastChild.node.classList.remove("isFirstPlay");
                    }
                }
            }
            if (this.seekbar.enable && this.isControllerVisible) {
                this.seekbar.visible = true;
            }
        }
        else if (this.video.state == "pause" && !this.isLoading) {
            if (!!this.controllerVisibleTimer) {
                clearTimeout(this.controllerVisibleTimer);
            }
            this.centerContainer.play.classList.remove("isFirstPlay");
            if (this.centerContainer.enable) {
                if (this.playerInstans.accessor.model.watermark_use != "off") {
                    this.centerContainer.play.className = this.centerContainer.play.className.replace(/eq-icon-(play|pause|replay)/, "eq-icon-play");
                    this.centerContainer.play_p.node.className = this.centerContainer.play_p.node.className.replace(/eq-icon-(play|pause|replay)/, "eq-icon-play");
                    if (this.player.clientWidth >= this.PLAYER_WIDTH_LANDSCAPE_SMALL) {
                        this.centerContainer.play.style.display = "block";
                        this.centerContainer.play_p.visible = false;
                    }
                    else {
                        this.centerContainer.play.style.display = "none";
                        this.centerContainer.play_p.visible = true;
                    }
                    if (this.seekbar.enable && this.player.clientWidth >= this.PLAYER_WIDTH_LANDSCAPE_SMALL) {
                        this.centerContainer.prev.style.display = "block";
                        this.centerContainer.next.style.display = "block";
                    }
                    else {
                        this.centerContainer.prev.style.display = "none";
                        this.centerContainer.next.style.display = "none";
                    }
                }
                this.centerContainer.replay.style.display = "none";
                if (this.centerContainer.fullscreen.enable) {
                    this.centerContainer.fullscreen.visible = true;
                    if (this.lastChild) {
                        this.lastChild.node.classList.remove("isFirstPlay");
                    }
                }
            }
            if (this.seekbar.enable) {
                this.seekbar.visible = true;
            }
        }
        else if (this.video.state == "ended" && !this.isLoading) {
            if (!!this.controllerVisibleTimer) {
                clearTimeout(this.controllerVisibleTimer);
            }
            this.centerContainer.play.classList.remove("isFirstPlay");
            this.cover.showThumbnail(true);
            if (this.centerContainer.enable) {
                if (this.playerInstans.accessor.model.replaybtn_use != "off") {
                    if (this.playerInstans.accessor.model.watermark_use != "off") {
                        this.centerContainer.play.style.display = "none";
                        if (this.player.clientWidth >= this.PLAYER_WIDTH_LANDSCAPE_SMALL) {
                            this.centerContainer.replay.style.display = "block";
                        }
                        else {
                            this.centerContainer.play_p.node.className = this.centerContainer.play_p.node.className.replace(/eq-icon-(play|pause|replay)/, "eq-icon-replay");
                        }
                    }
                }
                else {
                    if (this.playerInstans.accessor.model.watermark_use != "off") {
                        this.centerContainer.play.className = this.centerContainer.play.className.replace(/eq-icon-(play|pause|replay)/, "eq-icon-play");
                        this.centerContainer.play_p.node.className = this.centerContainer.play_p.node.className.replace(/eq-icon-(play|pause|replay)/, "eq-icon-play");
                    }
                }
                this.centerContainer.prev.style.display = "none";
                this.centerContainer.next.style.display = "none";
                this.showController(true);
                clearTimeout(this.controllerVisibleTimer);
            }
        }
        else if (this.video.state == "seeking") {
        }
    };
    HTML5Player_t3.prototype.updatePlayerStatus = function () {
        var fullscreen = this.checkFullscreen();
        if (this.isFullscreen != fullscreen) {
            this.isFullscreen = fullscreen;
            if (fullscreen) {
                this.footer.fullscreen.node.className = "eq-icon-fullscreen-disable";
                if (!this.isResposive()) {
                    this.player.style.width = "100%";
                    this.player.style.height = "100%";
                }
            }
            else {
                this.playerInstans.accessor.onfullscreen(false);
                this.footer.fullscreen.node.className = "eq-icon-fullscreen";
                if (!this.isResposive()) {
                    this.player.style.width = this.playerInstans.accessor.model.width + "px";
                    if (this.playerInstans.accessor.model.footer_use == "on") {
                        this.player.style.height = this.playerInstans.accessor.model.height - 20 + "px";
                    }
                    else {
                        this.player.style.height = this.playerInstans.accessor.model.height + "px";
                    }
                }
            }
        }
        if (!this.isSeeking) {
            this.seekbar.updateBufferPosition(this.video.currentBuffer);
            this.seekbar.updatePosition(this.getCurrentTime() / this.getDuration());
        }
        if (!this.isSoundOperating && !this.video.node.muted) {
            this.soundballoon.updatePosition(this.video.node.volume);
        }
        this.footer.setTimeText(this.getCurrentTime() || 0, this.getDuration());
        this.seekbar.balloon.setTimeText();
        this.captionContainer.createSubtitles(this.getCurrentTime());
        this.updateController();
    };
    HTML5Player_t3.prototype.updatePlayerStatusMobile = function () {
        var fullscreen = this.checkFullscreen();
        if (this.isFullscreen != fullscreen) {
            this.isFullscreen = fullscreen;
            if (fullscreen) {
                this.centerContainer.fullscreen.node.className = "eq-icon-fullscreen_close";
                if (!this.isResposive()) {
                    this.player.style.width = "100%";
                    this.player.style.height = "100%";
                }
                if (this.platform["os"]["name"] == "iOS" && this.useClosedCaption) {
                    var index = this.captionContainer.index;
                    if (index == 1) {
                        for (var i = 0; i < this.video.node.textTracks.length; i++) {
                            this.video.node.textTracks[i].mode = "disabled";
                        }
                    }
                    else {
                        var subtitle = this.playerInstans.accessor.model.subtitles[index];
                        for (var i = 0; i < this.video.node.textTracks.length; i++) {
                            if (this.video.node.textTracks[i].label == subtitle.text && this.video.node.textTracks[i].language == subtitle.lang) {
                                this.video.node.textTracks[i].mode = "showing";
                            }
                            else {
                                this.video.node.textTracks[i].mode = "disabled";
                            }
                        }
                    }
                }
            }
            else {
                this.showController(true);
                if (this.video.state != "playing") {
                    clearTimeout(this.controllerVisibleTimer);
                }
                this.playerInstans.accessor.onfullscreen(false);
                this.centerContainer.fullscreen.node.className = "eq-icon-fullscreen";
                if (!this.isResposive()) {
                    this.player.style.width = this.playerInstans.accessor.model.width + "px";
                    if (this.playerInstans.accessor.model.footer_use == "on") {
                        this.player.style.height = this.playerInstans.accessor.model.height - 20 + "px";
                    }
                    else {
                        this.player.style.height = this.playerInstans.accessor.model.height + "px";
                    }
                }
                if (this.platform["os"]["name"] == "iOS" && this.useClosedCaption) {
                    var video = this.video.node;
                    var index = -1;
                    for (var i = 0; i < video.textTracks.length; i++) {
                        if (video.textTracks[i].mode == "showing") {
                            index = i;
                        }
                        video.textTracks[i].mode = "disabled";
                    }
                    this.captionContainer.index = 1;
                    if (index > -1) {
                        for (var i = 1; i < this.captionContainer.list.length; i++) {
                            if (video.textTracks[index].label == this.captionContainer.list[i].text && video.textTracks[index].language == this.captionContainer.list[i].lang) {
                                this.captionContainer.index = i;
                            }
                        }
                    }
                    var subtitles = this.captionContainer.list;
                    if (!subtitles)
                        return;
                    if (index < subtitles.length) {
                        this.changeSubtitles(this.captionContainer.index);
                    }
                }
            }
        }
        if (!this.isSeeking) {
            this.seekbar.updateBufferPosition(this.video.currentBuffer);
            this.seekbar.updatePosition(this.getCurrentTime() / this.getDuration());
        }
        this.timeBox.update(this.getCurrentTime(), this.getDuration());
        this.captionContainer.createSubtitles(this.getCurrentTime());
        this.seekbar.balloon.setTimeText();
        this.updateControllerMobile();
    };
    HTML5Player_t3.prototype.setPlayerStatusTimer = function (enable) {
        var _this = this;
        if (enable) {
            this.playerStatusTimer = setInterval(function () {
                if (_this.isMobile()) {
                    _this.updatePlayerStatusMobile();
                }
                else {
                    _this.updatePlayerStatus();
                }
                if (_this.video.currentTime && _this.getDuration()) {
                    if (_this.video.currentTime > _this.getDuration() - 0.05 && !_this.video.node.paused && !_this.video.node.ended) {
                        if (_this.isStall) {
                            _this.pause();
                            setTimeout(function () {
                                var event = new CustomEvent("ended");
                                _this.video.node.dispatchEvent(event);
                                _this.isStall = false;
                            }, 500);
                        }
                        else {
                            _this.isStall = true;
                        }
                    }
                }
            }, 200);
        }
        else {
            clearInterval(this.playerStatusTimer);
        }
    };
    HTML5Player_t3.prototype.showController = function (visible) {
        var _this = this;
        if (this.isLoading || this.isSeeking || this.isFirstPlay) {
            return;
        }
        clearTimeout(this.controllerVisibleTimer);
        if (visible == this.isControllerVisible) {
            this.isControllerVisible = visible;
            if (visible) {
                this.header.visible = true;
                this.subContainer.visible = true;
                this.centerContainer.visible = true;
                this.footer.visible = true;
                this.seekbar.visible = true;
                if (this.liveMark) {
                    this.liveMark.style.display = "block";
                }
                if (this.timeBox) {
                    this.timeBox.visible = true;
                }
                if (this.isMobile()) {
                    this.captionContainer.node.style.bottom = "50px";
                }
                else {
                    if (this.player.clientWidth < this.PLAYER_WIDTH_NOMAL) {
                        this.captionContainer.node.style.bottom = "40px";
                    }
                    else {
                        this.captionContainer.node.style.bottom = "70px";
                    }
                    if (this.video.state == "playing") {
                        this.controllerVisibleTimer = setTimeout(function () {
                            _this.showController(false);
                        }, 3000);
                    }
                }
            }
            else {
                this.header.visible = false;
                this.subContainer.visible = false;
                this.centerContainer.visible = false;
                this.footer.visible = false;
                this.seekbar.visible = false;
                if (this.liveMark) {
                    this.liveMark.style.display = "none";
                }
                if (this.timeBox) {
                    this.timeBox.visible = false;
                }
                this.captionContainer.node.style.bottom = "10px";
            }
            return;
        }
        if (visible) {
            this.isControllerVisible = true;
            this.header.visible = true;
            this.subContainer.visible = true;
            this.centerContainer.visible = true;
            this.footer.visible = true;
            this.seekbar.visible = true;
            if (this.liveMark) {
                this.liveMark.style.display = "block";
            }
            if (this.timeBox) {
                this.timeBox.visible = true;
            }
            if (this.isMobile()) {
                this.captionContainer.node.style.bottom = "50px";
            }
            else {
                if (this.player.clientWidth < this.PLAYER_WIDTH_NOMAL) {
                    this.captionContainer.node.style.bottom = "40px";
                }
                else {
                    this.captionContainer.node.style.bottom = "70px";
                }
            }
            this.header.node.classList.remove("eq-fadeOut");
            this.subContainer.node.classList.remove("eq-fadeOut");
            this.centerContainer.node.classList.remove("eq-fadeOut");
            this.footer.node.classList.remove("eq-fadeOut");
            this.seekbar.node.classList.remove("eq-fadeOut");
            if (this.timeBox) {
                this.timeBox.node.classList.remove("eq-fadeOut");
                this.timeBox.node.classList.add("eq-fadeIn");
            }
            this.header.node.classList.add("eq-fadeIn");
            this.subContainer.node.classList.add("eq-fadeIn");
            this.centerContainer.node.classList.add("eq-fadeIn");
            this.footer.node.classList.add("eq-fadeIn");
            this.seekbar.node.classList.add("eq-fadeIn");
            this.controllerVisibleTimer = setTimeout(function () {
                _this.showController(false);
            }, 3000);
        }
        else {
            this.isControllerVisible = false;
            this.header.node.classList.remove("eq-fadeIn");
            this.subContainer.node.classList.remove("eq-fadeIn");
            this.centerContainer.node.classList.remove("eq-fadeIn");
            this.footer.node.classList.remove("eq-fadeIn");
            this.seekbar.node.classList.remove("eq-fadeIn");
            if (this.timeBox) {
                this.timeBox.node.classList.remove("eq-fadeIn");
                this.timeBox.node.classList.add("eq-fadeOut");
            }
            this.header.node.classList.add("eq-fadeOut");
            this.subContainer.node.classList.add("eq-fadeOut");
            this.centerContainer.node.classList.add("eq-fadeOut");
            this.footer.node.classList.add("eq-fadeOut");
            this.seekbar.node.classList.add("eq-fadeOut");
            setTimeout(function () {
                _this.header.visible = false;
                _this.subContainer.visible = false;
                _this.centerContainer.visible = false;
                _this.footer.visible = false;
                _this.seekbar.visible = false;
                if (_this.timeBox) {
                    _this.timeBox.visible = false;
                }
                if (_this.liveMark) {
                    _this.liveMark.style.display = "none";
                }
                if (_this.isMobile()) {
                }
                else {
                    _this.telopballoon.visible = false;
                    _this.resolutionballoon.visible = false;
                    _this.speedballoon.visible = false;
                }
                _this.captionContainer.node.style.bottom = "10px";
            }, 300);
        }
    };
    HTML5Player_t3.prototype.closeSelectMenu = function () {
        var event;
        var ua = window.navigator.userAgent.toLowerCase();
        if (ua.match(/msie/) || ua.match(/trident/) || !!ua.match(/mozilla\/.+windows nt 10\.[0-9].+chrome.+safari.+edge\/[0-9\.]+/i) || (ua.match(/android ([4]\.[0-3]\..)/) && ua.match(/mobile/))) {
            event = new CustomEvent("closeSelectMenu");
        }
        else {
            event = new Event("closeSelectMenu");
        }
        document.dispatchEvent(event);
    };
    HTML5Player_t3.prototype.waitHlsLoading = function () {
        if (this.canPlayHls) {
            clearInterval(this.waitHlsTimer);
            this.waitHlsTimer = null;
            this.showLoading(false);
            this.playerInstans.accessor.landing();
        }
        else if (!this.isLoading) {
            this.showLoading(true);
        }
    };
    HTML5Player_t3.prototype.showLoading = function (visible) {
        var _this = this;
        this.isLoading = visible;
        if (visible) {
            clearTimeout(this.controllerVisibleTimer);
            if (this.centerContainer.enable) {
                this.centerContainer.visible = true;
            }
            this.centerContainer.loading.style.display = "block";
            this.centerContainer.play.style.display = "none";
            this.centerContainer.prev.style.display = "none";
            this.centerContainer.next.style.display = "none";
            this.centerContainer.replay.style.display = "none";
            if (this.isMobile()) {
                this.centerContainer.play_p.visible = false;
                this.centerContainer.sound.visible = false;
                this.centerContainer.telop.visible = false;
                this.centerContainer.resolution.visible = false;
                this.centerContainer.speed.visible = false;
                this.centerContainer.fullscreen.visible = false;
            }
        }
        else {
            this.centerContainer.loading.style.display = "none";
            if (this.isMobile()) {
                if (this.player.clientWidth >= this.PLAYER_WIDTH_LANDSCAPE_SMALL && this.player.clientHeight >= this.PLAYER_HEIGHT_LANDSCAPE_SMALL) {
                    if (this.playerInstans.accessor.model.watermark_use == "on") {
                        this.centerContainer.play.style.display = "block";
                        if (this.playerInstans.accessor.model.seak_use == "on" && !this.isFirstPlay) {
                            this.centerContainer.prev.style.display = "block";
                            this.centerContainer.next.style.display = "block";
                        }
                    }
                }
                if (this.centerContainer.play_p.enable) {
                    this.centerContainer.play_p.visible = true;
                }
                if (this.centerContainer.sound.enable) {
                    this.centerContainer.sound.visible = true;
                }
                if (this.centerContainer.telop.enable) {
                    this.centerContainer.telop.visible = true;
                }
                if (this.centerContainer.resolution.enable) {
                    this.centerContainer.resolution.visible = true;
                }
                if (this.centerContainer.speed.enable) {
                    this.centerContainer.speed.visible = true;
                }
                if (this.centerContainer.fullscreen.enable && !this.isFirstPlay) {
                    this.centerContainer.fullscreen.visible = true;
                }
                if (this.footer.enable) {
                    this.footer.visible = true;
                }
                if (this.seekbar.enable && !this.isFirstPlay) {
                    this.seekbar.visible = true;
                }
                if (this.timeBox.enable) {
                    this.timeBox.visible = true;
                }
            }
            clearTimeout(this.controllerVisibleTimer);
            this.controllerVisibleTimer = setTimeout(function () {
                _this.showController(false);
            }, 3000);
        }
    };
    HTML5Player_t3.prototype.setCurrentMovieURL = function (url) {
        this.video.src = url;
    };
    HTML5Player_t3.prototype.getCurrentTime = function () {
        if (this.isFirstPlay) {
            return this.playerInstans.accessor.model.start_time || 0;
        }
        else {
            return this.video.currentTime;
        }
    };
    HTML5Player_t3.prototype.getDuration = function () {
        if (this.isFirstPlay) {
            return this.playerInstans.accessor.model.duration || 0;
        }
        else {
            return this.video.node.duration;
        }
    };
    HTML5Player_t3.prototype.getCurrentMovieURL = function () {
        return this.video.src;
    };
    HTML5Player_t3.prototype.setCurrentTime = function (time) {
        if (this.playerInstans.accessor.model.isAuthEnable()) {
            this.overlayContainer.auth.open();
            this.authCover.style.display = "none";
            return;
        }
        if (this.video.state == "playing") {
            this.preSeekState = "playing";
            this.showLoading(true);
        }
        var duration = this.getDuration();
        if (time <= 0) {
            time = 0;
        }
        else if (time >= duration) {
            time = duration - 1;
        }
        if (this.isFirstPlay) {
            if (!this.playerInstans.accessor.model.start_time) {
                this.playerInstans.accessor.model.start_time = 0;
            }
            this.playerInstans.accessor.model.start_time = time;
        }
        else {
            this.video.currentTime = time;
        }
        this.playerInstans.accessor.sendPlayerValues();
        return this.video.currentTime;
    };
    HTML5Player_t3.prototype.play = function () {
        var _this = this;
        if (this.video.state == "playing") {
            return;
        }
        if (this.playerInstans.accessor.model.isAuthEnable()) {
            this.overlayContainer.auth.open();
            this.authCover.style.display = "none";
            return;
        }
        if (this.playerInstans.accessor.Hls && !this.canPlayHls) {
            return;
        }
        this.showLoading(true);
        if (this.playerInstans.accessor.model.isConnectionEneble()) {
            if (this.isMobile() || (this.platform["os"]["name"] == "Macintosh" && this.platform["isSafari"])) {
                this.playerInstans.accessor.playCall();
            }
            else {
                this.playerInstans.accessor.playCall();
                return;
            }
        }
        this.cover.showThumbnail(false);
        this.overlayContainer.movies.visible = false;
        this.overlayContainer.links.visible = false;
        this.overlayContainer.share.visible = false;
        if (!this.isMobile()) {
            this.telopballoon.visible = false;
            this.resolutionballoon.visible = false;
            this.speedballoon.visible = false;
        }
        if (!this.playerInstans.accessor.hls) {
            if (this.isFirstPlay) {
                this.video.load(this.playerInstans);
                this.isFirstPlay = false;
                this.video.node.playbackRate = this.playbackRate;
                if (this.playerInstans.accessor.model.start_time > 0) {
                    var waitSeekForAndroid = function () {
                        _this.video.node.removeEventListener("playing", waitSeekForAndroid);
                        _this.video.node.pause();
                        var seekTimer = setInterval(function () {
                            if (_this.video.node.seekable.end(0) > 0) {
                                _this.setCurrentTime(_this.playerInstans.accessor.model.start_time);
                                _this.video.node.play();
                                if (_this.isMobile()) {
                                    _this.controllerVisibleTimer = setTimeout(function () {
                                        _this.showController(false);
                                    }, 3000);
                                }
                                clearInterval(seekTimer);
                            }
                        }, 100);
                    };
                    var waitPause = function () {
                        _this.video.node.removeEventListener("playing", waitPause);
                        _this.video.node.addEventListener("pause", waitSeek);
                        _this.video.node.pause();
                    };
                    var waitSeek = function () {
                        _this.video.node.removeEventListener("pause", waitSeek);
                        _this.video.node.addEventListener("timeupdate", seeked);
                        _this.setCurrentTime(_this.playerInstans.accessor.model.start_time);
                    };
                    var seeked = function () {
                        _this.video.node.removeEventListener("timeupdate", seeked);
                        if (Math.floor(_this.video.currentTime) >= Math.floor(_this.playerInstans.accessor.model.start_time)) {
                            _this.video.node.play();
                            if (_this.isMobile()) {
                                _this.controllerVisibleTimer = setTimeout(function () {
                                    _this.showController(false);
                                }, 3000);
                            }
                        }
                    };
                    if (this.platform["os"]["name"] == "Android") {
                        this.video.node.addEventListener("playing", waitSeekForAndroid);
                    }
                    else {
                        this.video.node.addEventListener("playing", waitPause);
                    }
                }
                else {
                    if (this.isMobile()) {
                        setTimeout(function () {
                            _this.video.node.play();
                        }, 1000);
                        this.controllerVisibleTimer = setTimeout(function () {
                            _this.showController(false);
                        }, 3000);
                    }
                    else {
                        this.video.node.play();
                    }
                }
            }
            if (this.isLiveStop) {
                this.setCurrentTime(this.video.node.seekable.end(0) - 30);
                this.isLiveStop = false;
            }
            this.video.node.play();
        }
        else {
            if (this.canPlayHls) {
                var loadPosition = -1;
                if (this.isFirstPlay) {
                    if (this.playerInstans.accessor.model.start_time > 0) {
                        loadPosition = this.playerInstans.accessor.model.start_time;
                    }
                    if (this.isMobile()) {
                        this.playerInstans.accessor.hls.startLoad(loadPosition);
                        this.video.currentTime = loadPosition;
                    }
                    else {
                        this.playerInstans.accessor.hls.startLoad(loadPosition);
                    }
                    this.isFirstPlay = false;
                    this.video.node.playbackRate = this.playbackRate;
                }
                if (this.isLiveStop) {
                    this.setCurrentTime(this.video.node.seekable.end(0) - 30);
                    this.isLiveStop = false;
                }
                this.video.play();
                this.controllerVisibleTimer = setTimeout(function () {
                    _this.showController(false);
                }, 3000);
            }
            else {
                setTimeout(function () {
                    _this.play();
                }, 100);
            }
        }
    };
    HTML5Player_t3.prototype.pause = function () {
        if (this.playerInstans.accessor.model.isAuthEnable()) {
            this.overlayContainer.auth.open();
            this.authCover.style.display = "none";
            return;
        }
        if (this.isLive) {
            this.isLiveStop = true;
        }
        this.video.pause();
        this.showController(true);
        clearTimeout(this.controllerVisibleTimer);
    };
    HTML5Player_t3.prototype.replay = function () {
        var _this = this;
        if (this.playerInstans.accessor.model.isAuthEnable()) {
            this.overlayContainer.auth.open();
            this.authCover.style.display = "none";
            return;
        }
        this.cover.showThumbnail(false);
        this.setBeacon("replay");
        if (!this.platform["isIE"]) {
            this.setCurrentTime(0);
        }
        this.play();
        setTimeout(function () {
            if (_this.isMobile()) {
                _this.video.state = "playing";
                _this.updateControllerMobile();
            }
            else {
                _this.video.state = "playing";
                _this.updateController();
            }
            if (_this.playerInstans.accessor.hls) {
                _this.playerInstans.accessor.hls.startLoad(-1);
            }
            if (_this.platform["isIE"] && _this.playerInstans.accessor.getQuality() == "0") {
                setTimeout(function () {
                    if (this.playerInstans.accessor.hls) {
                        this.playerInstans.accessor.hls.startLoad(-1);
                    }
                }, 1000);
            }
        }, 500);
    };
    HTML5Player_t3.prototype.setAuthVisible = function (visiblity) {
        if (visiblity) {
            this.overlayContainer.auth.open();
            this.authCover.style.display = "none";
        }
        else {
            this.overlayContainer.auth.close();
        }
    };
    HTML5Player_t3.prototype.authResult = function (isAuthed) {
        var _this = this;
        this.authed = isAuthed;
        if (!isAuthed) {
            this.overlayContainer.auth.open(this.languageResource.kinds.ERROR_AUTH);
        }
        else {
            this.authCover.style.display = "none";
            if (!this.platform["isSP"] && !this.platform["isTablet"]) {
                this.play();
            }
            else {
                if (this.video.isHls && this.platform["os"]["name"] != "iOS" && !(this.platform["os"]["name"] == "Macintosh" && this.platform["isSafari"]) && !this.playerInstans.accessor.model.isAuthEnable()) {
                    this.waitHlsTimer = setInterval(function () {
                        _this.waitHlsLoading();
                    }, 100);
                }
            }
        }
    };
    HTML5Player_t3.prototype.updateVideoURL = function (movie_url, isAuthed) {
        this.authed = isAuthed;
        if (isAuthed) {
            this.video.src = movie_url;
            if (!this.isHls) {
                this.video.load(this.playerInstans);
            }
            this.pause();
        }
        else {
        }
    };
    HTML5Player_t3.prototype.setMute = function (bool) {
        if (!this.isMobile()) {
            if (bool) {
                this.preMuteVolume = this.video.node.volume;
                this.video.node.volume = 0;
                this.soundballoon.updatePosition(this.video.node.volume);
            }
            else {
                if (this.preMuteVolume == null) {
                    this.preMuteVolume = 1;
                }
                this.video.node.volume = this.preMuteVolume;
                this.soundballoon.updatePosition(this.video.node.volume);
            }
        }
        this.video.node.muted = bool;
        var sound;
        if (this.isMobile()) {
            sound = this.centerContainer.sound.node;
            if (bool) {
                sound.className = "eq-icon-sound_mute";
            }
            else {
                var volume = this.video.node.volume;
                if (volume > 0) {
                    sound.className = "eq-icon-sound";
                }
                else {
                    sound.className = "eq-icon-sound_mute";
                }
            }
        }
        else {
            sound = this.footer.sound.node;
            if (bool) {
                sound.className = "eq-icon-sound_mute";
            }
            else {
                var volume = this.video.node.volume;
                if (volume > 0.66) {
                    sound.className = "eq-icon-sound_max";
                }
                else if (volume > 0.33) {
                    sound.className = "eq-icon-sound_middle";
                }
                else if (volume > 0) {
                    sound.className = "eq-icon-sound_minimum";
                }
                else {
                    sound.className = "eq-icon-sound_mute";
                }
            }
        }
        this.playerInstans.accessor.sendPlayerValues();
    };
    HTML5Player_t3.prototype.setVolume = function (value) {
        this.video.node.volume = value;
        this.preMuteVolume = value;
        this.setMute(false);
        this.playerInstans.accessor.sendPlayerValues();
    };
    HTML5Player_t3.prototype.set_info_error = function (message) {
        var code = "";
        if (message) {
            var title;
            var info;
            switch (message) {
                case Hls.ErrorDetails.MANIFEST_LOAD_ERROR:
                    title = this.languageResource.kinds.P8001T;
                    info = this.languageResource.kinds.P8001M;
                    code = "8001";
                    break;
                case Hls.ErrorDetails.MANIFEST_LOAD_TIMEOUT:
                    title = this.languageResource.kinds.P8002T;
                    info = this.languageResource.kinds.P8002M;
                    code = "8002";
                    break;
                case Hls.ErrorDetails.MANIFEST_PARSING_ERROR:
                    title = this.languageResource.kinds.P8003T;
                    info = this.languageResource.kinds.P8003M;
                    code = "8003";
                    break;
                case Hls.ErrorDetails.LEVEL_LOAD_ERROR:
                    title = this.languageResource.kinds.P8004T;
                    info = this.languageResource.kinds.P8004M;
                    code = "8004";
                    break;
                case Hls.ErrorDetails.LEVEL_LOAD_TIMEOUT:
                    title = this.languageResource.kinds.P8005T;
                    info = this.languageResource.kinds.P8005M;
                    code = "8005";
                    break;
                case Hls.ErrorDetails.LEVEL_SWITCH_ERROR:
                    title = this.languageResource.kinds.P8006T;
                    info = this.languageResource.kinds.P8006M;
                    code = "8006";
                    break;
                case Hls.ErrorDetails.FRAG_LOAD_ERROR:
                    title = this.languageResource.kinds.P8007T;
                    info = this.languageResource.kinds.P8007M;
                    code = "8007";
                    break;
                case Hls.ErrorDetails.FRAG_LOOP_LOADING_ERROR:
                    title = this.languageResource.kinds.P8008T;
                    info = this.languageResource.kinds.P8008M;
                    code = "8008";
                    break;
                case Hls.ErrorDetails.FRAG_LOAD_TIMEOUT:
                    title = this.languageResource.kinds.P8009T;
                    info = this.languageResource.kinds.P8009M;
                    code = "8009";
                    break;
                case Hls.ErrorDetails.FRAG_PARSING_ERROR:
                    title = this.languageResource.kinds.P8010T;
                    info = this.languageResource.kinds.P8010M;
                    code = "8010";
                    break;
                case Hls.ErrorDetails.MANIFEST_INCOMPATIBLE_CODECS_ERROR:
                    title = this.languageResource.kinds.P8011T;
                    info = this.languageResource.kinds.P8011M;
                    code = "8011";
                    break;
                case Hls.ErrorDetails.BUFFER_ADD_CODEC_ERROR:
                    title = this.languageResource.kinds.P8012T;
                    info = this.languageResource.kinds.P8012M;
                    code = "8012";
                    break;
                case Hls.ErrorDetails.BUFFER_APPEND_ERROR:
                    title = this.languageResource.kinds.P8013T;
                    info = this.languageResource.kinds.P8013M;
                    code = "8013";
                    break;
                case Hls.ErrorDetails.BUFFER_APPENDING_ERROR:
                    title = this.languageResource.kinds.P8014T;
                    info = this.languageResource.kinds.P8014M;
                    code = "8014";
                    break;
                case Hls.ErrorDetails.BUFFER_STALLED_ERROR:
                    title = this.languageResource.kinds.P8015T;
                    info = this.languageResource.kinds.P8015M;
                    code = "8015";
                    break;
                case Hls.ErrorDetails.BUFFER_FULL_ERROR:
                    title = this.languageResource.kinds.P8016T;
                    info = this.languageResource.kinds.P8016M;
                    code = "8016";
                    break;
                case Hls.ErrorDetails.BUFFER_SEEK_OVER_HOLE:
                    title = this.languageResource.kinds.P8017T;
                    info = this.languageResource.kinds.P8017M;
                    code = "8017";
                    break;
                case Hls.ErrorDetails.OTHER_ERROR:
                    title = this.languageResource.kinds.P8018T;
                    info = this.languageResource.kinds.P8018M;
                    code = "8018";
                    break;
                case MediaError.MEDIA_ERR_ABORTED:
                    title = this.languageResource.kinds.P8019T;
                    info = this.languageResource.kinds.P8019M;
                    code = "8019";
                    break;
                case MediaError.MEDIA_ERR_NETWORK:
                    title = this.languageResource.kinds.P8020T;
                    info = this.languageResource.kinds.P8020M;
                    code = "8020";
                    break;
                case MediaError.MEDIA_ERR_DECODE:
                    title = this.languageResource.kinds.P8021T;
                    info = this.languageResource.kinds.P8021M;
                    code = "8021";
                    break;
                case MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED:
                    title = this.languageResource.kinds.P8022T;
                    info = this.languageResource.kinds.P8022M;
                    code = "8022";
                    break;
                default:
                    title = this.languageResource.kinds.P8001T;
                    info = this.languageResource.kinds.P8001M + "<br>" + message;
                    code = "8001";
            }
            this.overlayContainer.error.open(title, info, this.player.clientWidth, this.player.clientHeight);
        }
        else {
            if (this.playerInstans.accessor.model.isLive) {
                this.overlayContainer.error.open("", this.languageResource.kinds.ERROR_LIVE_RELOAD, this.player.clientWidth, this.player.clientHeight);
                code = "7101";
            }
            else {
                this.overlayContainer.error.open("", this.languageResource.kinds.ERROR_MOVIE_NOT_FOUND, this.player.clientWidth, this.player.clientHeight);
                code = "7011";
            }
        }
        this.playerInstans.accessor.sendCrashReport(code, "HTML5Player");
    };
    HTML5Player_t3.prototype.displayRefresh = function () {
    };
    HTML5Player_t3.prototype.changeSubtitles = function (index) {
        this.captionContainer.index = index;
        if (this.useClosedCaption) {
            if (this.isMobile()) {
                this.selectTelop.setFocus(this.captionList[index]);
            }
            else {
                this.telopballoon.setFocus(this.captionList[index]);
            }
        }
        this.playerInstans.accessor.sendPlayerValues();
    };
    HTML5Player_t3.prototype.getSubtitles = function () {
        return this.captionContainer.index;
    };
    HTML5Player_t3.prototype.changeQualityLabel = function (text) {
        text = text.replace(/\(.*\)/, "");
        switch (text) {
            case "4k":
            case "４Ｋ画質":
                text = "2160p";
                break;
            case "fh":
            case "フルＨＤ画質":
            case "フルＨＤ":
            case "FullHD":
                text = "1080p";
                break;
            case "hd":
            case "ＨＤ画質":
            case "ＨＤ":
            case "HD":
                text = "720p";
                break;
            case "hq":
            case "高画質":
            case "High":
                text = "480p";
                break;
            case "sq":
            case "標準画質":
            case "Standard":
                text = "360p";
                break;
            case "lq":
            case "低画質":
            case "Low":
                text = "270p";
                break;
            case "auto_pc":
            case "auto_sp":
            case "自動":
                text = "Auto";
                break;
        }
        return text;
    };
    HTML5Player_t3.prototype.changeQuality = function (url) {
        if (this.playerInstans.accessor.model.isAuthEnable()) {
            this.overlayContainer.auth.open();
            this.authCover.style.display = "none";
            return;
        }
        this.showLoading(true);
        var text;
        for (var i = 0; i < this.movie_list.length; i++) {
            if (this.movie_list[i].url == url) {
                text = this.movie_list[i].text;
                break;
            }
        }
        this.video.src = url;
        this.video.changeSource(this);
        text = this.changeQualityLabel(text);
        if (this.useMultibitrate) {
            if (this.isMobile()) {
                this.centerContainer.resolution.node.children[0].children[0].innerText = text;
                this.selectResolution.setFocus(url);
            }
            else {
                this.footer.resolution.node.children[0].children[0].innerText = text;
                this.resolutionballoon.setFocus(url);
            }
        }
        this.playerInstans.accessor.sendPlayerValues();
    };
    HTML5Player_t3.prototype.getPlaybackRate = function () {
        if (this.isFirstPlay) {
            return this.playbackRate;
        }
        return this.video.node.playbackRate;
    };
    HTML5Player_t3.prototype.changePlaybackRate = function (rate) {
        var rateString = rate.toString();
        this.playbackRate = rate;
        if (!this.isFirstPlay) {
            this.video.node.playbackRate = rate;
        }
        if (rateString.length == 1) {
            rateString = rateString + ".0";
        }
        if (!!this.playbackrateList && this.playbackrateList.length > 1) {
            if (this.isMobile()) {
                this.centerContainer.speed.node.children[0].children[0].innerText = rateString;
                this.selectSpeed.setFocus(rate);
            }
            else {
                this.footer.speed.node.children[0].children[0].innerText = rateString;
                this.speedballoon.setFocus(rate);
            }
        }
        this.playerInstans.accessor.sendPlayerValues();
    };
    HTML5Player_t3.prototype.setloop = function () {
        this.playerInstans.accessor.sendPlayerValues();
    };
    HTML5Player_t3.prototype.isMobile = function () {
        return this.platform["isSP"] || this.platform["isTablet"];
    };
    return HTML5Player_t3;
}());
var EQPlayer_parts;
(function (EQPlayer_parts) {
    var playerElementBase = (function () {
        function playerElementBase(node) {
            this._enable = true;
            this._visible = false;
            this.node = node;
            this.visible = this.node.style.display != "none";
        }
        Object.defineProperty(playerElementBase.prototype, "visible", {
            get: function () {
                return this.node.style.display != "none";
            },
            set: function (visible) {
                this._visible = visible;
                if (visible && this.enable) {
                    this.node.style.display = "block";
                }
                else {
                    this.node.style.display = "none";
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(playerElementBase.prototype, "enable", {
            get: function () {
                return this._enable;
            },
            set: function (enable) {
                this._enable = enable;
                this.visible = enable;
            },
            enumerable: true,
            configurable: true
        });
        return playerElementBase;
    }());
    EQPlayer_parts.playerElementBase = playerElementBase;
    var video = (function (_super) {
        __extends(video, _super);
        function video(node) {
            var _this = _super.call(this, node) || this;
            _this.isHls = true;
            _this._enable = true;
            _this._visible = false;
            _this.setEvent();
            return _this;
        }
        Object.defineProperty(video.prototype, "src", {
            get: function () {
                return this._src;
            },
            set: function (url) {
                this._src = url;
                if (url.indexOf(".m3u8") > -1) {
                    this.isHls = true;
                }
                else {
                    this.isHls = false;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(video.prototype, "currentTime", {
            get: function () {
                return this.node.currentTime;
            },
            set: function (value) {
                this.node.currentTime = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(video.prototype, "currentBuffer", {
            get: function () {
                var video = this.node;
                if (video.buffered.length < 1)
                    return { "length": 0, "left": 0 };
                var onBufferIndex = 0;
                for (var index = 0; index < video.buffered.length; index++) {
                    if (video.currentTime >= video.buffered.start(index) && video.currentTime <= video.buffered.end(index)) {
                        onBufferIndex = index;
                        break;
                    }
                }
                var bufferLength = (video.buffered.end(onBufferIndex) - video.buffered.start(onBufferIndex)) / video.duration;
                var bufferLeft = video.buffered.start(onBufferIndex) / video.duration;
                return { "length": bufferLength, "left": bufferLeft };
            },
            enumerable: true,
            configurable: true
        });
        video.prototype.setEvent = function () {
            var _this = this;
            this.node.addEventListener("ended", function (e) { _this.videoEventListener(e); });
            this.node.addEventListener("error", function (e) { _this.videoEventListener(e); });
            this.node.addEventListener("pause", function (e) { _this.videoEventListener(e); });
            this.node.addEventListener("play", function (e) { _this.videoEventListener(e); });
            this.node.addEventListener("playing", function (e) { _this.videoEventListener(e); });
            this.node.addEventListener("seeked", function (e) { _this.videoEventListener(e); });
            this.node.addEventListener("seeking", function (e) { _this.videoEventListener(e); });
        };
        video.prototype.load = function (playerInstans) {
            if (playerInstans.accessor.hls) {
                playerInstans.accessor.hls.loadSource(this.src);
            }
            else {
                this.node.src = this.src;
                this.node.load();
            }
        };
        video.prototype.changeSource = function (HTML5Player_t3) {
            var playerInstans = HTML5Player_t3.playerInstans;
            if (playerInstans.accessor.hls) {
                this.changeQualityHls(HTML5Player_t3);
            }
            else {
                this.changeQualityVanilla(HTML5Player_t3);
            }
        };
        video.prototype.changeQualityHls = function (HTML5Player_t3) {
            var _this = this;
            var playerInstans = HTML5Player_t3.playerInstans;
            var isPlay = false;
            HTML5Player_t3.cover.showThumbnail(false);
            var forEdge = function () {
                _this.node.removeEventListener("play", forEdge);
                setTimeout(function () {
                    _this.node.addEventListener("pause", switchMovieSource);
                    _this.pause();
                }, 100);
            };
            var switchMovieSource = function () {
                if (_this.node.removeEventListener) {
                    _this.node.removeEventListener("pause", switchMovieSource);
                    playerInstans.accessor.edgeSwitchMovieSourceFlg = false;
                }
                var ct = 0;
                if (HTML5Player_t3.isFirstPlay) {
                    if (playerInstans.accessor.model.start_time > 0) {
                        ct = playerInstans.accessor.model.start_time;
                    }
                }
                else {
                    ct = playerInstans.accessor.hls.media.currentTime;
                }
                if (!playerInstans.accessor.model.isLive) {
                    var duration = Number(playerInstans.accessor.model.duration);
                    if (!isFinite(duration))
                        return;
                    if ((_this.state == "ended") || (_this.currentTime >= duration)) {
                        isPlay = false;
                        HTML5Player_t3.setCurrentTime(0);
                        ct = 0;
                    }
                }
                playerInstans.accessor.hls.destroy();
                var config = {
                    debug: false,
                    startLevel: -1,
                    highBufferWatchdogPeriod: 30,
                    maxBufferLength: 30,
                    maxBufferSize: 6e7,
                    maxBufferHole: .5,
                    maxSeekHole: 2
                };
                playerInstans.accessor.hls = new Hls(config);
                playerInstans.accessor.setErrorHandler();
                playerInstans.accessor.hls.on("hlsMediaAttached", function () {
                    playerInstans.accessor.hls.on("hlsManifestParsed", function (event, data) {
                        var handler = function () {
                            _this.node.removeEventListener("loadeddata", handler);
                            HTML5Player_t3.showLoading(false);
                            if (!playerInstans.accessor.model.isLive) {
                                _this.currentTime = ct;
                            }
                        };
                        _this.node.addEventListener("loadeddata", handler);
                    });
                    _this.load(playerInstans);
                });
                playerInstans.accessor.hls.attachMedia(_this.node);
                if (isPlay) {
                    _this.play();
                }
            };
            if (this.state == "playing") {
                var isPlay = true;
                this.node.addEventListener("pause", switchMovieSource);
                this.pause();
            }
            else {
                if (playerInstans.accessor.model.platform["isEdge"] && HTML5Player_t3.isFirstPlay) {
                    playerInstans.accessor.edgeSwitchMovieSourceFlg = true;
                    this.node.addEventListener("play", forEdge);
                    this.play();
                }
                else {
                    switchMovieSource();
                }
            }
        };
        video.prototype.changeQualityVanilla = function (HTML5Player_t3) {
            var playerInstans = HTML5Player_t3.playerInstans;
            var isPlay = false;
            HTML5Player_t3.cover.showThumbnail(false);
            var ct = 0;
            isPlay = (this.state == "playing");
            if (HTML5Player_t3.isFirstPlay == false) {
                var duration = Number(this.node.duration);
                if (!isFinite(duration) && !playerInstans.accessor.model.isLive)
                    return;
                if ((this.state == "ended") || (this.currentTime >= duration)) {
                    isPlay = false;
                    HTML5Player_t3.setCurrentTime(0);
                }
                else {
                    if (playerInstans.accessor.model.isLive) {
                        HTML5Player_t3.setCurrentTime(0);
                    }
                    else {
                        if (this.currentTime >= 0)
                            ct = this.currentTime;
                    }
                }
            }
            else {
                if (playerInstans.accessor.model.start_time > 0) {
                    ct = playerInstans.accessor.model.start_time;
                }
            }
            var video = this.node;
            var loadeddata = function (e) {
                if (video.removeEventListener) {
                    video.removeEventListener("loadeddata", loadeddata);
                }
                HTML5Player_t3.showLoading(false);
                if (/iP(hone|od|ad)/.test(navigator.platform)) {
                    video.addEventListener("timeupdate", timeupdate);
                    video.currentTime = ct;
                }
                else {
                    video.currentTime = ct;
                    if (isPlay) {
                        this.play();
                    }
                }
            };
            var timeupdate = function (e) {
                if (Math.ceil(video.currentTime) >= Math.ceil(ct)) {
                    video.removeEventListener("timeupdate", timeupdate);
                    if (isPlay) {
                        this.play();
                    }
                }
            };
            if (this.node.addEventListener) {
                video.addEventListener("loadeddata", loadeddata);
            }
            this.load(HTML5Player_t3.playerInstans);
        };
        video.prototype.play = function () {
            this.node.play();
        };
        video.prototype.pause = function () {
            this.node.pause();
        };
        video.prototype.replay = function () {
        };
        video.prototype.seek = function (time) {
        };
        video.prototype.changeQuallity = function (index) {
        };
        video.prototype.changePlaybackRate = function (rate) {
        };
        video.prototype.videoEventListener = function (e) {
            switch (e.type) {
                case "playing":
                case "play":
                    this.state = "playing";
                    break;
                case "pause":
                    this.state = "pause";
                    break;
                case "ended":
                    this.state = "ended";
                    break;
                case "error":
                    this.state = "error";
                    break;
            }
        };
        return video;
    }(playerElementBase));
    EQPlayer_parts.video = video;
    var cover = (function (_super) {
        __extends(cover, _super);
        function cover(node) {
            var _this = _super.call(this, node) || this;
            _this._enable = true;
            _this._visible = false;
            return _this;
        }
        Object.defineProperty(cover.prototype, "thumbnail", {
            get: function () {
                return this._thumbnail;
            },
            set: function (url) {
                this._thumbnail = url;
            },
            enumerable: true,
            configurable: true
        });
        cover.prototype.showThumbnail = function (visible) {
            if (this.thumbnail && this.thumbnail.length > 0) {
                if (visible) {
                    this.node.style.backgroundImage = 'url(' + this.thumbnail + ')';
                    this.node.style.backgroundColor = "rgba(0,0,0,1)";
                }
                else {
                    this.node.style.backgroundImage = '';
                    this.node.style.backgroundColor = "rgba(0,0,0,0)";
                }
            }
        };
        return cover;
    }(playerElementBase));
    EQPlayer_parts.cover = cover;
    var subContainer = (function (_super) {
        __extends(subContainer, _super);
        function subContainer(node) {
            var _this = _super.call(this, node) || this;
            _this._enable = true;
            _this._visible = false;
            var ul = _this.node.children[0];
            _this.movies = ul.children[0];
            _this.links = ul.children[1];
            _this.share = ul.children[2];
            return _this;
        }
        return subContainer;
    }(playerElementBase));
    EQPlayer_parts.subContainer = subContainer;
    var overlayContainer = (function (_super) {
        __extends(overlayContainer, _super);
        function overlayContainer(node) {
            var _this = _super.call(this, node) || this;
            _this._enable = true;
            _this._visible = false;
            _this.movies = new relationMovies(_this.node.children[0]);
            _this.links = new relationLinks(_this.node.children[1]);
            _this.share = new relationShare(_this.node.children[2]);
            _this.auth = new auth(_this.node.children[3]);
            _this.error = new error(_this.node.children[4]);
            return _this;
        }
        return overlayContainer;
    }(playerElementBase));
    EQPlayer_parts.overlayContainer = overlayContainer;
    var relationMovies = (function (_super) {
        __extends(relationMovies, _super);
        function relationMovies(node) {
            var _this = _super.call(this, node) || this;
            _this.currentPage = 1;
            _this.maxView = 3;
            _this.maxPage = 1;
            _this._enable = true;
            _this._visible = false;
            _this.SMALL_WIDTH = 480;
            _this.SMALL_HEIGHT = 270;
            _this.NOMAL_WIDTH = 640;
            _this.BIG_WIDTH = 1680;
            _this.isLandscape = false;
            var ua = navigator.userAgent.toLowerCase();
            if (ua.match(/msie/) || ua.match(/trident/) || !!ua.match(/mozilla\/.+windows nt 10\.[0-9].+chrome.+safari.+edge\/[0-9\.]+/i) || (ua.match(/android ([4]\.[0-3]\..)/) && ua.match(/mobile/))) {
                var event = new CustomEvent("closeOverlay");
            }
            else {
                var event = new Event("closeOverlay");
            }
            _this.closeBtn = _this.node.children[2];
            _this.closeBtn.addEventListener("click", function () {
                _this.visible = false;
                document.dispatchEvent(event);
            });
            _this.title = _this.node.children[0].children[0];
            _this.ul = _this.node.children[0].children[1];
            var inner = _this.node.children[0].children[2];
            if (!!inner) {
                _this.pagerUl = _this.node.children[0].children[2].children[0];
            }
            try {
                _this.prevBtn = _this.node.children[1].children[0].children[0];
                _this.prevBtn.addEventListener("click", function () {
                    _this.setPage(_this.currentPage - 1);
                });
                _this.nextBtn = _this.node.children[1].children[0].children[1];
                _this.nextBtn.addEventListener("click", function () {
                    _this.setPage(_this.currentPage + 1);
                });
            }
            catch (e) {
            }
            return _this;
        }
        relationMovies.prototype.open = function () {
            var _this = this;
            this.currentPage = 1;
            this.unset();
            var playerWidth = this.playerObj.player.clientWidth;
            var playerHeight = this.playerObj.player.clientHeight;
            if (this.playerObj.isMobile()) {
                if (playerWidth >= this.playerObj.PLAYER_WIDTH_LANDSCAPE_SMALL && playerHeight >= this.playerObj.PLAYER_HEIGHT_LANDSCAPE_SMALL) {
                    this.isLandscape = true;
                }
                this.ul.addEventListener("scroll", function () {
                    _this.checkScroll();
                });
            }
            else {
                if (playerWidth < this.SMALL_WIDTH || playerHeight < this.SMALL_HEIGHT) {
                    this.maxView = 1;
                    this.node.children[0].style.width = "164px";
                }
                else if (playerWidth < this.NOMAL_WIDTH) {
                    this.maxView = 2;
                    this.node.children[0].style.width = (168 + 9 * 2) * 2 + "px";
                }
                else if (playerWidth < this.BIG_WIDTH) {
                    this.maxView = 3;
                    this.node.children[0].style.width = (168 + 9 * 2) * 3 + "px";
                }
                else {
                    this.maxView = 4;
                    this.node.children[0].style.width = "1512px";
                }
            }
            if ((this.relationList.length % this.maxView) == 0) {
                this.maxPage = this.relationList.length / this.maxView;
            }
            else {
                this.maxPage = Math.floor(this.relationList.length / this.maxView) + 1;
            }
            this.setPager();
            this.setPage(this.currentPage);
            this.visible = true;
            if (this.playerObj.isMobile()) {
                this.checkMaxView();
            }
        };
        relationMovies.prototype.setPager = function () {
            var _this = this;
            if (!this.playerObj.isMobile()) {
                if (this.maxPage <= 10) {
                    this.pagerUl.style.display = "block";
                    for (var i = 0; i < this.maxPage; i++) {
                        var li = document.createElement("div");
                        li.classList.add("eq-pager");
                        li.innerText = "●";
                        li.addEventListener("click", (function (i) {
                            return function () {
                                _this.setPage(i + 1);
                            };
                        })(i));
                        this.pagerUl.appendChild(li);
                    }
                }
                else {
                    this.pagerUl.style.display = "none";
                }
            }
        };
        relationMovies.prototype.unset = function () {
            if (!this.playerObj.isMobile()) {
                for (var i = this.pagerUl.children.length - 1; i >= 0; i--) {
                    this.pagerUl.removeChild(this.pagerUl.children[i]);
                }
            }
        };
        relationMovies.prototype.setPage = function (page) {
            if (page < 1) {
                page = this.maxPage;
            }
            else if (page > this.maxPage) {
                page = 1;
            }
            if (!this.playerObj.isMobile()) {
                for (var i = 0; i < this.pagerUl.children.length; i++) {
                    this.pagerUl.children[i].className = "eq-pager";
                    if (page == i + 1) {
                        this.pagerUl.children[i].classList.add("eq-focus");
                    }
                }
            }
            for (var i = 0; i < this.maxView; i++) {
                var index = (this.maxView * (page - 1)) + i;
                this.setThumbnailURL(index);
            }
            this.ul.style.transform = "translate(-" + (100 * (page - 1)).toString() + "%,0)";
            this.currentPage = page;
        };
        relationMovies.prototype.setList = function (list, HTML5Player_t3) {
            this.playerObj = HTML5Player_t3;
            var index = 0;
            var tmpArray = [].concat(list);
            var popedArray = [];
            for (var i = 0; i < list.length; i++) {
                if (list[i].meta_id == this.playerObj.playerInstans.accessor.model.meta_id) {
                    index = i;
                    break;
                }
                var popedItem = tmpArray.shift();
                popedArray.push(popedItem);
            }
            this.relationList = tmpArray.concat(popedArray);
            for (var i = this.ul.children.length - 1; i >= 0; i--) {
                this.ul.removeChild(this.ul.children[i]);
            }
            for (var i = 0; i < this.relationList.length; i++) {
                var li = document.createElement("div");
                li.className = "eq-list-movies";
                li.addEventListener("click", (function (i) {
                    return function () {
                        HTML5Player_t3.linkAction("movies", i);
                    };
                })(i));
                var block = document.createElement("div");
                var image = document.createElement("div");
                block.appendChild(image);
                var duration = document.createElement("div");
                duration.className = "eq-relation-movies-time";
                duration.innerText = this.getTimeString(this.relationList[i].duration);
                block.appendChild(duration);
                li.appendChild(block);
                var title = document.createElement("div");
                title.className = "eq-relation-movies-title";
                title.innerText = this.relationList[i].title;
                li.appendChild(title);
                var titleForSmall = document.createElement("div");
                titleForSmall.className = "eq-relation-movies-title";
                titleForSmall.innerText = this.relationList[i].title;
                block.appendChild(titleForSmall);
                this.ul.appendChild(li);
            }
        };
        relationMovies.prototype.checkMaxView = function () {
            var slider = this.ul;
            var margin = 30;
            if (this.isLandscape) {
                margin = 19;
            }
            var scrollOffset = slider.children[0].clientWidth + margin;
            var sliderWidth = this.ul.clientWidth;
            for (var i = 0; i < slider.children.length; i++) {
                this.setThumbnailURL(i);
                sliderWidth = sliderWidth - scrollOffset;
                if (sliderWidth < 1) {
                    this.maxView = i;
                    break;
                }
            }
        };
        relationMovies.prototype.checkScroll = function () {
            var slider = this.ul;
            var scrollLeft = slider.scrollLeft;
            var margin = 30;
            if (this.isLandscape) {
                margin = 19;
            }
            var scrollOffset = slider.children[0].clientWidth + margin;
            var preloadImageWidth = slider.clientWidth - (scrollOffset * this.maxView);
            for (var i = 0; i < slider.children.length - this.maxView - 1; i++) {
                var scroll = i * scrollOffset;
                scroll = scroll - preloadImageWidth;
                if (scrollLeft > scroll) {
                    this.setThumbnailURL(i + this.maxView + 1);
                }
            }
        };
        relationMovies.prototype.setThumbnailURL = function (index) {
            var li = this.ul.children[index];
            if (!li) {
                return;
            }
            var image = li.children[0].children[0];
            if (image.style.backgroundImage.indexOf("url") == -1) {
                image.style.backgroundImage = "url('" + this.relationList[index].thumbnail_url + "')";
            }
        };
        relationMovies.prototype.getTimeString = function (sec) {
            sec = Math.floor(sec);
            if (!sec)
                sec = 0;
            var s = sec % 60;
            var m = Math.round((sec - s) / 60) % 60;
            var t = Math.round((sec - (m * 60 + s)) / (60 * 60)) % 60;
            var setStr = "";
            setStr = String(t) + ":";
            setStr += ("0" + String(m)).slice(-2) + ":";
            setStr += ("0" + String(s)).slice(-2);
            return setStr;
        };
        return relationMovies;
    }(playerElementBase));
    EQPlayer_parts.relationMovies = relationMovies;
    var relationLinks = (function (_super) {
        __extends(relationLinks, _super);
        function relationLinks(node) {
            var _this = _super.call(this, node) || this;
            _this._enable = true;
            _this._visible = false;
            var ua = navigator.userAgent.toLowerCase();
            if (ua.match(/msie/) || ua.match(/trident/) || !!ua.match(/mozilla\/.+windows nt 10\.[0-9].+chrome.+safari.+edge\/[0-9\.]+/i) || (ua.match(/android ([4]\.[0-3]\..)/) && ua.match(/mobile/))) {
                var event = new CustomEvent("closeOverlay");
            }
            else {
                var event = new Event("closeOverlay");
            }
            _this.closeBtn = _this.node.children[1];
            _this.closeBtn.addEventListener("click", function () {
                _this.visible = false;
                document.dispatchEvent(event);
            });
            _this.title = _this.node.children[0].children[0];
            _this.ul = _this.node.children[0].children[1];
            return _this;
        }
        relationLinks.prototype.setList = function (list, HTML5Player_t3) {
            this.relationList = list;
            for (var i = this.ul.children.length - 1; i >= 0; i--) {
                this.ul.removeChild(this.ul.children[i]);
            }
            for (var i = 0; i < this.relationList.length; i++) {
                var li = document.createElement("div");
                li.className = "eq-list-links";
                li.addEventListener("click", (function (i) {
                    return function () {
                        HTML5Player_t3.linkAction("exlink", i);
                    };
                })(i));
                var block = document.createElement("div");
                block.innerHTML = "<span>・</span>" + this.relationList[i].text;
                block.setAttribute("index", i.toString());
                if (HTML5Player_t3.isFullscreen) {
                    block.style.maxWidth = (HTML5Player_t3.player.clientWidth - 20) + "px";
                }
                else {
                    block.style.maxWidth = (HTML5Player_t3.parent.clientWidth - 20) + "px";
                }
                li.appendChild(block);
                this.ul.appendChild(li);
            }
        };
        relationLinks.prototype.open = function (playerWidth) {
            var li;
            this.visible = true;
            for (var i = 0; i < this.ul.children.length; i++) {
                li = this.ul.children[i];
                li.firstChild.style.maxWidth = (playerWidth - 20) + "px";
            }
        };
        return relationLinks;
    }(playerElementBase));
    EQPlayer_parts.relationLinks = relationLinks;
    var relationShare = (function (_super) {
        __extends(relationShare, _super);
        function relationShare(node) {
            var _this = _super.call(this, node) || this;
            _this._enable = true;
            _this._visible = false;
            var ua = navigator.userAgent.toLowerCase();
            if (ua.match(/msie/) || ua.match(/trident/) || !!ua.match(/mozilla\/.+windows nt 10\.[0-9].+chrome.+safari.+edge\/[0-9\.]+/i) || (ua.match(/android ([4]\.[0-3]\..)/) && ua.match(/mobile/))) {
                var event = new CustomEvent("closeOverlay");
            }
            else {
                var event = new Event("closeOverlay");
            }
            _this.closeBtn = _this.node.children[1];
            _this.closeBtn.addEventListener("click", function () {
                _this.visible = false;
                document.dispatchEvent(event);
            });
            _this.shareTitle = _this.node.children[0].children[0];
            _this.shareUl = _this.node.children[0].children[1];
            _this.viralTitle = _this.node.children[0].children[2];
            _this.viralForm = _this.node.children[0].children[3];
            return _this;
        }
        relationShare.prototype.showShare = function (visible) {
            if (visible) {
                this.shareTitle.style.display = "block";
                this.shareUl.style.display = "block";
            }
            else {
                this.shareTitle.style.display = "none";
                this.shareUl.style.display = "none";
            }
        };
        relationShare.prototype.showViral = function (visible) {
            if (visible) {
                this.viralTitle.style.display = "block";
                this.viralForm.style.display = "block";
            }
            else {
                this.viralTitle.style.display = "none";
                this.viralForm.style.display = "none";
            }
        };
        relationShare.prototype.setList = function (list, HTML5Player_t3) {
            this.relationList = list;
            for (var i = 0; i < this.relationList.length; i++) {
                if (this.relationList[i].toLowerCase() == "facebook") {
                    this.shareUl.children[0].style.display = "inline-block";
                    this.shareUl.children[0].addEventListener("click", function () {
                        HTML5Player_t3.linkAction("facebook", -1);
                    });
                }
                else if (this.relationList[i].toLowerCase() == "twitter") {
                    this.shareUl.children[1].style.display = "inline-block";
                    this.shareUl.children[1].addEventListener("click", function () {
                        HTML5Player_t3.linkAction("twitter", -1);
                    });
                }
                else if (this.relationList[i].toLowerCase() == "line") {
                    this.shareUl.children[2].style.display = "inline-block";
                    this.shareUl.children[2].addEventListener("click", function () {
                        HTML5Player_t3.linkAction("line", -1);
                    });
                }
                else if (this.relationList[i].toLowerCase() == "google") {
                    this.shareUl.children[3].style.display = "inline-block";
                    this.shareUl.children[3].addEventListener("click", function () {
                        HTML5Player_t3.linkAction("google", -1);
                    });
                }
            }
        };
        relationShare.prototype.setViral = function (string) {
        };
        return relationShare;
    }(playerElementBase));
    EQPlayer_parts.relationShare = relationShare;
    var auth = (function (_super) {
        __extends(auth, _super);
        function auth(node) {
            var _this = _super.call(this, node) || this;
            _this.ID_PLACEHOLDER_TEXT = "ID";
            _this.PASSWORD_PLACEHOLDER_TEXT = "PASSWORD";
            _this.INPUT_FONT_COLOR = "#000";
            _this.PLACEHOLDER_FONT_COLOR = "#999";
            _this.ERROR_TITLE_COLOR = "#e74c3c";
            var inner = node.children[0];
            _this.title = inner.children[0];
            var form = inner.children[1];
            _this.idBox = form.children[0];
            _this.passwordBox = form.children[2];
            _this.inputBtn = inner.children[2];
            return _this;
        }
        auth.prototype.getValue = function () {
            var returnObj = {
                id: this.idBox.value,
                pass: this.passwordBox.value
            };
            return returnObj;
        };
        auth.prototype.open = function (error) {
            if (error === void 0) { error = ""; }
            if (error || error.length > 0) {
                this.title.innerText = error;
                this.title.style.color = this.ERROR_TITLE_COLOR;
            }
            this.idBox.placeholder = this.ID_PLACEHOLDER_TEXT;
            this.idBox.style.color = this.INPUT_FONT_COLOR;
            this.passwordBox.placeholder = this.PASSWORD_PLACEHOLDER_TEXT;
            this.passwordBox.style.color = this.INPUT_FONT_COLOR;
            this.visible = true;
        };
        auth.prototype.close = function () {
            this.visible = false;
        };
        return auth;
    }(playerElementBase));
    EQPlayer_parts.auth = auth;
    var error = (function (_super) {
        __extends(error, _super);
        function error(node) {
            var _this = _super.call(this, node) || this;
            _this.title = node.children[0].children[0].children[0];
            _this.message = node.children[0].children[1];
            return _this;
        }
        error.prototype.open = function (title, message, playerWidth, playerHeight) {
            if (title === void 0) { title = ""; }
            if (message === void 0) { message = ""; }
            this.visible = true;
            this.title.innerHTML = title;
            this.message.innerHTML = message;
            var className;
            if (playerWidth < 480 || playerHeight < 270) {
                this.node.classList.add("mini");
            }
            else {
                this.node.classList.remove("mini");
            }
        };
        error.prototype.close = function () {
            this.visible = false;
        };
        return error;
    }(playerElementBase));
    EQPlayer_parts.error = error;
    var centerContainer = (function (_super) {
        __extends(centerContainer, _super);
        function centerContainer(node, isMobile) {
            if (isMobile === void 0) { isMobile = false; }
            var _this = _super.call(this, node) || this;
            _this._enable = true;
            _this._visible = false;
            var ul = _this.node.children[0];
            _this.prev = ul.children[0];
            _this.play = ul.children[1];
            _this.next = ul.children[2];
            _this.replay = ul.children[3];
            if (isMobile) {
                var ulMobile = _this.node.children[1];
                _this.play_p = new playerElementBase(ulMobile.children[0]);
                _this.sound = new playerElementBase(ulMobile.children[1]);
                _this.telop = new playerElementBase(ulMobile.children[2]);
                _this.resolution = new playerElementBase(ulMobile.children[3]);
                _this.speed = new playerElementBase(ulMobile.children[4]);
                _this.fullscreen = new playerElementBase(ulMobile.children[5]);
                _this.loading = _this.node.children[2].children[0];
            }
            else {
                _this.loading = ul.children[4];
            }
            return _this;
        }
        return centerContainer;
    }(playerElementBase));
    EQPlayer_parts.centerContainer = centerContainer;
    var header = (function (_super) {
        __extends(header, _super);
        function header(node) {
            var _this = _super.call(this, node) || this;
            _this._enable = true;
            _this._visible = false;
            _this.title = node.children[0];
            return _this;
        }
        header.prototype.setTitle = function (text) {
            this.title.innerText = text;
        };
        return header;
    }(playerElementBase));
    EQPlayer_parts.header = header;
    var footer = (function (_super) {
        __extends(footer, _super);
        function footer(node, isMobile) {
            if (isMobile === void 0) { isMobile = false; }
            var _this = _super.call(this, node) || this;
            _this._enable = true;
            _this._visible = false;
            if (!isMobile) {
                _this.leftbox = _this.node.children[0];
                _this.play = new playerElementBase(_this.leftbox.children[0].children[0]);
                _this.prev = new playerElementBase(_this.leftbox.children[0].children[1]);
                _this.next = new playerElementBase(_this.leftbox.children[0].children[2]);
                _this.sound = new playerElementBase(_this.leftbox.children[0].children[3]);
                _this.rightbox = _this.node.children[1];
                _this.time = new playerElementBase(_this.rightbox.children[0].children[0]);
                _this.telop = new playerElementBase(_this.rightbox.children[0].children[1]);
                _this.resolution = new playerElementBase(_this.rightbox.children[0].children[2]);
                _this.speed = new playerElementBase(_this.rightbox.children[0].children[3]);
                _this.fullscreen = new playerElementBase(_this.rightbox.children[0].children[4]);
            }
            return _this;
        }
        footer.prototype.setTimeText = function (currentTime, duration) {
            var currentTimeString = this.getTimeString(currentTime);
            var durationString = this.getTimeString(duration);
            this.time.node.children[0].textContent = currentTimeString + " / " + durationString;
        };
        footer.prototype.getTimeString = function (sec) {
            sec = Math.floor(sec);
            if (!sec)
                sec = 0;
            var s = sec % 60;
            var m = Math.round((sec - s) / 60) % 60;
            var t = Math.round((sec - (m * 60 + s)) / (60 * 60)) % 60;
            var setStr = "";
            setStr = String(t) + ":";
            setStr += ("0" + String(m)).slice(-2) + ":";
            setStr += ("0" + String(s)).slice(-2);
            return setStr;
        };
        return footer;
    }(playerElementBase));
    EQPlayer_parts.footer = footer;
    var seekbar = (function (_super) {
        __extends(seekbar, _super);
        function seekbar(node) {
            var _this = _super.call(this, node) || this;
            _this.mouse_x = 0;
            _this.mouse_y = 0;
            _this.value = 0;
            _this.clientWidth = 0;
            _this.isSeeking = false;
            _this._enable = true;
            _this._visible = false;
            _this.init();
            return _this;
        }
        seekbar.prototype.updatePosition = function (val) {
            if (this.isSeeking)
                return;
            var position = val;
            this.value = position * 100;
            if (this.node.clientWidth != 0 && this.node.clientWidth != this.clientWidth) {
                this.clientWidth = this.node.clientWidth;
            }
            this.pointer.style.transform = "translateX(" + this.clientWidth * val + "px)";
            this.progress.style.width = this.value + "%";
        };
        seekbar.prototype.updateBufferPosition = function (val) {
            this.buffer.style.width = val["length"] * 100 + "%";
            this.buffer.style.left = val["left"] * 100 + "%";
        };
        seekbar.prototype.init = function () {
            this.container = this.node.children[0];
            this.base = this.container.children[0];
            this.buffer = this.container.children[1];
            this.progress = this.container.children[2];
            this.pointer = this.container.children[3];
            this.setEvent();
            this.updatePosition(0);
        };
        seekbar.prototype.setEvent = function () {
            var _this = this;
            this.container.addEventListener("mousedown", function (e) { _this.onMouseDown(e); });
            this.container.addEventListener("mousemove", function (e) { _this.onMouseMove(e); });
            this.container.addEventListener("touchstart", function (e) {
                e.stopPropagation();
                _this.onTouchStart(e);
            });
            this.container.addEventListener("touchmove", function (e) {
                e.stopPropagation();
                _this.onTouchMove(e);
            });
            this.node.addEventListener("touchstart", function (e) { _this.onTouchStart(e); });
            this.node.addEventListener("touchmove", function (e) { _this.onTouchMove(e); });
            document.addEventListener("mousemove", function (e) { _this.onMouseMove(e); });
            this.node.addEventListener("mouseover", function (e) { _this.onMouseOver(e); });
            this.node.addEventListener("mouseout", function (e) { _this.onMouseOut(e); });
        };
        seekbar.prototype.onMouseOver = function (e) {
            this.balloon.visible = true;
            this.mouse_x = Number(e.clientX);
            this.mouse_y = Number(e.clientY);
            this.setBalloonPosition();
        };
        seekbar.prototype.onMouseOut = function (e) {
            var _this = this;
            if (!this.isSeeking) {
                this.balloon.visible = false;
            }
            else {
                setTimeout(function () {
                    _this.onMouseOut(e);
                }, 500);
            }
        };
        seekbar.prototype.onMouseDown = function (e) {
            var _this = this;
            var ua = navigator.userAgent.toLowerCase();
            if (ua.match(/msie/) || ua.match(/trident/) || !!ua.match(/mozilla\/.+windows nt 10\.[0-9].+chrome.+safari.+edge\/[0-9\.]+/i) || (ua.match(/android ([4]\.[0-3]\..)/) && ua.match(/mobile/))) {
                var event = new CustomEvent("seek_operation_start");
            }
            else {
                var event = new Event("seek_operation_start");
            }
            document.dispatchEvent(event);
            this.isSeeking = true;
            this.mouse_x = Number(e.clientX);
            this.mouse_y = Number(e.clientY);
            this.seekingTimer = setInterval(function () {
                _this.setPosition();
            }, 100);
            window.addEventListener('mouseup', function (e) { _this.onMouseUp(e); }, false);
            if (ua.match(/msie/) || ua.match(/trident/) || !!ua.match(/mozilla\/.+windows nt 10\.[0-9].+chrome.+safari.+edge\/[0-9\.]+/i) || (ua.match(/android ([4]\.[0-3]\..)/) && ua.match(/mobile/))) {
                document.body.addEventListener('mouseleave', function (e) { _this.onMouseUp(e); }, false);
            }
        };
        seekbar.prototype.onMouseUp = function (e) {
            if (!this.isSeeking)
                return;
            var ua = navigator.userAgent.toLowerCase();
            if (ua.match(/msie/) || ua.match(/trident/) || !!ua.match(/mozilla\/.+windows nt 10\.[0-9].+chrome.+safari.+edge\/[0-9\.]+/i) || (ua.match(/android ([4]\.[0-3]\..)/) && ua.match(/mobile/))) {
                var event = new CustomEvent("seek_operation_end");
            }
            else {
                var event = new Event("seek_operation_end");
            }
            clearInterval(this.seekingTimer);
            this.isSeeking = false;
            document.dispatchEvent(event);
        };
        seekbar.prototype.onMouseMove = function (e) {
            this.mouse_x = Number(e.clientX);
            this.mouse_y = Number(e.clientY);
            this.setBalloonPosition();
        };
        seekbar.prototype.setBalloonPosition = function () {
            var seekBaseClientRect = this.base.getBoundingClientRect();
            var seekBaseWidth = this.base.clientWidth;
            var pointerWidth = this.pointer.clientWidth;
            var scrollLeft = document.documentElement.scrollLeft || document.body.scrollLeft;
            var position = (Number(this.mouse_x) - (seekBaseClientRect['left'] - scrollLeft)) / seekBaseWidth;
            if (position < 0)
                position = 0;
            if (position > 1)
                position = 1;
            this.balloon.value = position;
            this.balloon.node.style.left = position * 100 + "%";
            if (this.balloon.text.clientWidth / 2 > (Number(this.mouse_x) - (seekBaseClientRect['left'] - scrollLeft))) {
                if ((this.balloon.text.clientWidth / 2 - (Number(this.mouse_x) - (seekBaseClientRect['left'] - scrollLeft))) > this.balloon.text.clientWidth / 2) {
                    this.balloon.text.style.marginLeft = this.balloon.text.clientWidth / 2 + "px";
                }
                else {
                    this.balloon.text.style.marginLeft = (this.balloon.text.clientWidth / 2 - (Number(this.mouse_x) - (seekBaseClientRect['left'] - scrollLeft))) + "px";
                }
                this.balloon.text.style.right = "initial";
            }
            else if ((seekBaseWidth - this.balloon.text.clientWidth / 2) < (Number(this.mouse_x) - (seekBaseClientRect['left'] - scrollLeft))) {
                this.balloon.text.style.marginLeft = "initial";
                if ((Number(this.mouse_x) - (seekBaseClientRect['left'] - scrollLeft)) - (seekBaseWidth - this.balloon.text.clientWidth / 2) > this.balloon.text.clientWidth / 2) {
                    this.balloon.text.style.right = this.balloon.text.clientWidth / 2 + "px";
                }
                else {
                    this.balloon.text.style.right = ((Number(this.mouse_x) - (seekBaseClientRect['left'] - scrollLeft)) - (seekBaseWidth - this.balloon.text.clientWidth / 2)) + "px";
                }
            }
            else {
                this.balloon.text.style.marginLeft = "initial";
                this.balloon.text.style.right = "initial";
            }
        };
        seekbar.prototype.setPosition = function () {
            var palRect = this.base.getBoundingClientRect();
            var pointerRect = this.pointer.getBoundingClientRect();
            var width = this.base.clientWidth;
            var pointerWidth = this.pointer.clientWidth;
            var scrollLeft = document.documentElement.scrollLeft || document.body.scrollLeft;
            var position = (Number(this.mouse_x) - (palRect['left'] - scrollLeft)) / width;
            if (position < 0)
                position = 0;
            if (position > 1)
                position = 1;
            this.value = position * 100;
            this.pointer.style.transform = "translateX(" + this.node.clientWidth * position + "px)";
            this.progress.style.width = position * 100 + "%";
        };
        seekbar.prototype.onTouchStart = function (e) {
            var _this = this;
            e.preventDefault();
            this.balloon.visible = true;
            var event = new CustomEvent("seek_operation_start");
            document.dispatchEvent(event);
            this.isSeeking = true;
            this.mouse_x = Number(e.touches[0].pageX);
            this.mouse_y = Number(e.touches[0].pageY);
            this.setPosition();
            this.seekingTimer = setInterval(function () {
                _this.setPosition();
                _this.setBalloonPosition();
            }, 100);
            document.addEventListener('touchend', function (e) { _this.onTouchEnd(e); }, false);
        };
        seekbar.prototype.onTouchMove = function (e) {
            e.preventDefault();
            this.mouse_x = Number(e.touches[0].pageX);
            this.mouse_y = Number(e.touches[0].pageY);
            this.setBalloonPosition();
        };
        seekbar.prototype.onTouchEnd = function (e) {
            if (!this.isSeeking)
                return;
            this.balloon.visible = false;
            clearInterval(this.seekingTimer);
            this.isSeeking = false;
            var event = new CustomEvent("seek_operation_end");
            document.dispatchEvent(event);
        };
        return seekbar;
    }(playerElementBase));
    EQPlayer_parts.seekbar = seekbar;
    var seekBalloon = (function (_super) {
        __extends(seekBalloon, _super);
        function seekBalloon(node) {
            var _this = _super.call(this, node) || this;
            _this.mouse_x = 0;
            _this.mouse_y = 0;
            _this.isOperating = false;
            _this._enable = true;
            _this._visible = false;
            _this.text = node.children[0].children[1];
            _this.pin = node.children[0].children[2];
            return _this;
        }
        seekBalloon.prototype.setTimeText = function () {
            this.text.innerText = this.getTimeString(this.duration * this.value);
        };
        seekBalloon.prototype.getTimeString = function (sec) {
            sec = Math.floor(sec);
            if (!sec)
                sec = 0;
            var s = sec % 60;
            var m = Math.round((sec - s) / 60) % 60;
            var t = Math.round((sec - (m * 60 + s)) / (60 * 60)) % 60;
            var setStr = "";
            setStr = String(t) + ":";
            setStr += ("0" + String(m)).slice(-2) + ":";
            setStr += ("0" + String(s)).slice(-2);
            return setStr;
        };
        return seekBalloon;
    }(playerElementBase));
    EQPlayer_parts.seekBalloon = seekBalloon;
    var timeBox = (function (_super) {
        __extends(timeBox, _super);
        function timeBox(node) {
            var _this = _super.call(this, node) || this;
            _this._enable = true;
            _this._visible = false;
            _this.currentTime = node.children[0];
            _this.duration = node.children[1];
            return _this;
        }
        timeBox.prototype.update = function (currentTime, duration) {
            this.currentTime.innerText = this.getTimeString(currentTime);
            this.duration.innerText = this.getTimeString(duration);
        };
        timeBox.prototype.getTimeString = function (sec) {
            sec = Math.floor(sec);
            if (!sec)
                sec = 0;
            var s = sec % 60;
            var m = Math.round((sec - s) / 60) % 60;
            var t = Math.round((sec - (m * 60 + s)) / (60 * 60)) % 60;
            var setStr = "";
            setStr = String(t) + ":";
            setStr += ("0" + String(m)).slice(-2) + ":";
            setStr += ("0" + String(s)).slice(-2);
            return setStr;
        };
        return timeBox;
    }(playerElementBase));
    EQPlayer_parts.timeBox = timeBox;
    var soundballoon = (function (_super) {
        __extends(soundballoon, _super);
        function soundballoon(node) {
            var _this = _super.call(this, node) || this;
            _this.mouse_x = 0;
            _this.mouse_y = 0;
            _this.isOperating = false;
            _this._enable = true;
            _this._visible = false;
            _this.ratio = 1.0;
            _this.init();
            return _this;
        }
        soundballoon.prototype.updatePosition = function (val) {
            if (this.isOperating)
                return;
            this.value = val * 100;
            if (this.visible) {
                if (this.base.clientHeight == 100) {
                    this.ratio = 1.0;
                }
                else {
                    this.ratio = 0.71;
                }
            }
            this.pointer.style.bottom = this.value * this.ratio - 8 + "px";
            this.volume.style.height = this.value * this.ratio + "px";
        };
        soundballoon.prototype.init = function () {
            var container = this.node.children[0];
            this.base = container.children[0];
            this.volume = container.children[1];
            this.pointer = container.children[2];
            this.pin = container.children[3];
            this.setEvent();
            this.updatePosition(1);
        };
        soundballoon.prototype.setEvent = function () {
            var _this = this;
            this.node.addEventListener("mousedown", function (e) { _this.onMouseDown(e); });
            this.node.addEventListener("mousemove", function (e) { _this.onMouseMove(e); });
            this.node.addEventListener("touchstart", function (e) { _this.onTouchStart(e); });
            this.node.addEventListener("touchmove", function (e) { _this.onTouchMove(e); });
            document.addEventListener("mousemove", function (e) { _this.onMouseMove(e); });
        };
        soundballoon.prototype.onMouseDown = function (e) {
            var _this = this;
            var ua = navigator.userAgent.toLowerCase();
            if (ua.match(/msie/) || ua.match(/trident/) || !!ua.match(/mozilla\/.+windows nt 10\.[0-9].+chrome.+safari.+edge\/[0-9\.]+/i) || (ua.match(/android ([4]\.[0-3]\..)/) && ua.match(/mobile/))) {
                var event = new CustomEvent("sound_operation_start");
            }
            else {
                var event = new Event("sound_operation_start");
            }
            document.dispatchEvent(event);
            this.isOperating = true;
            this.mouse_x = Number(e.clientX);
            this.mouse_y = Number(e.clientY);
            this.operatingTimer = setInterval(function () {
                _this.setPosition();
            }, 100);
            window.addEventListener('mouseup', function (e) { _this.onMouseUp(e); }, false);
            if (ua.match(/msie/) || ua.match(/trident/) || !!ua.match(/mozilla\/.+windows nt 10\.[0-9].+chrome.+safari.+edge\/[0-9\.]+/i) || (ua.match(/android ([4]\.[0-3]\..)/) && ua.match(/mobile/))) {
                document.body.addEventListener('mouseleave', function (e) { _this.onMouseUp(e); }, false);
            }
        };
        soundballoon.prototype.onMouseUp = function (e) {
            if (!this.isOperating)
                return;
            var ua = navigator.userAgent.toLowerCase();
            if (ua.match(/msie/) || ua.match(/trident/) || !!ua.match(/mozilla\/.+windows nt 10\.[0-9].+chrome.+safari.+edge\/[0-9\.]+/i) || (ua.match(/android ([4]\.[0-3]\..)/) && ua.match(/mobile/))) {
                var event = new CustomEvent("sound_operation_end");
            }
            else {
                var event = new Event("sound_operation_end");
            }
            clearInterval(this.operatingTimer);
            this.isOperating = false;
            document.dispatchEvent(event);
        };
        soundballoon.prototype.onMouseMove = function (e) {
            if (!this.isOperating)
                return;
            this.mouse_x = Number(e.clientX);
            this.mouse_y = Number(e.clientY);
        };
        soundballoon.prototype.setPosition = function () {
            var palRect = this.base.getBoundingClientRect();
            var pointerRect = this.pointer.getBoundingClientRect();
            var height = this.base.clientHeight;
            var pointerHeight = this.pointer.clientHeight;
            var position = (Number(this.mouse_y) - palRect['top']) / height;
            if (position < 0)
                position = 0;
            if (position > 1)
                position = 1;
            this.value = (1 - position) * 100;
            if (this.base.clientHeight == 100) {
                this.ratio = 1.0;
            }
            else {
                this.ratio = 0.71;
            }
            this.pointer.style.bottom = this.value * this.ratio - 8 + "px";
            this.volume.style.height = this.value * this.ratio + "px";
        };
        soundballoon.prototype.onTouchStart = function (e) {
            event.preventDefault();
            var Element = this.node;
            var event = new CustomEvent("seek_operation_start");
            Element.dispatchEvent(event);
            this.mouse_x = Number(e.touches[0].pageX);
            this.mouse_y = Number(e.touches[0].pageY);
            document.addEventListener('touchend', this.onTouchEnd, false);
        };
        soundballoon.prototype.onTouchMove = function (e) {
            event.preventDefault();
            this.mouse_x = Number(e.touches[0].pageX);
            this.mouse_y = Number(e.touches[0].pageY);
        };
        soundballoon.prototype.onTouchEnd = function (e) {
            document.removeEventListener('touchend', this.onTouchEnd, false);
            var Element = this.node;
            var event = new CustomEvent("seek_operation_end");
            Element.dispatchEvent(event);
        };
        return soundballoon;
    }(playerElementBase));
    EQPlayer_parts.soundballoon = soundballoon;
    var telopballoon = (function (_super) {
        __extends(telopballoon, _super);
        function telopballoon(node) {
            var _this = _super.call(this, node) || this;
            _this._enable = true;
            _this._visible = false;
            _this.title = _this.node.children[0].children[0];
            _this.title.addEventListener("click", function () {
                _this.visible = false;
            });
            _this.ul = _this.node.children[0].children[1];
            _this.pin = node.children[0].children[2];
            return _this;
        }
        telopballoon.prototype.setList = function (list, HTML5Player_t3) {
            this.list = list;
            for (var i = this.ul.children.length - 1; i >= 0; i--) {
                this.ul.removeChild(this.ul.children[i]);
            }
            for (var i = 1; i < this.list.length; i++) {
                var li = document.createElement("div");
                li.className = "eq-balloon-item";
                li.onclick = (function (i) {
                    return function () {
                        HTML5Player_t3.changeSubtitles(i);
                    };
                })(i);
                var block = document.createElement("div");
                block.innerText = this.list[i].text;
                block.setAttribute("index", i.toString());
                li.appendChild(block);
                this.ul.appendChild(li);
            }
        };
        telopballoon.prototype.setFocus = function (subtitle) {
            if (!!this.list) {
                for (var i = 1; i < this.list.length; i++) {
                    if (this.list[i].text == subtitle["text"] && this.list[i].lang == subtitle["lang"]) {
                        this.ul.children[i - 1].classList.add("eq-focus");
                    }
                    else {
                        this.ul.children[i - 1].classList.remove("eq-focus");
                    }
                }
            }
        };
        return telopballoon;
    }(playerElementBase));
    EQPlayer_parts.telopballoon = telopballoon;
    var resolutionballoon = (function (_super) {
        __extends(resolutionballoon, _super);
        function resolutionballoon(node) {
            var _this = _super.call(this, node) || this;
            _this._enable = true;
            _this._visible = false;
            _this.title = _this.node.children[0].children[0];
            _this.title.addEventListener("click", function () {
                _this.visible = false;
            });
            _this.ul = _this.node.children[0].children[1];
            _this.pin = node.children[0].children[2];
            return _this;
        }
        resolutionballoon.prototype.setList = function (list, HTML5Player_t3) {
            this.list = list;
            var self = this;
            for (var i = this.ul.children.length - 1; i >= 0; i--) {
                this.ul.removeChild(this.ul.children[i]);
            }
            for (var i = 0; i < this.list.length; i++) {
                var li = document.createElement("div");
                li.className = "eq-balloon-item";
                li.onclick = (function (i) {
                    return function () {
                        self.visible = false;
                        self.ul.style.overflowY = "unset";
                        HTML5Player_t3.changeQuality(HTML5Player_t3.movie_list[i].url);
                    };
                })(i);
                var block = document.createElement("div");
                block.innerText = this.list[i].text;
                block.setAttribute("index", i.toString());
                li.appendChild(block);
                this.ul.appendChild(li);
            }
        };
        resolutionballoon.prototype.setFocus = function (url) {
            if (!!this.list) {
                for (var i = 0; i < this.list.length; i++) {
                    if (this.list[i].url == url) {
                        this.ul.children[i].classList.add("eq-focus");
                    }
                    else {
                        this.ul.children[i].classList.remove("eq-focus");
                    }
                }
            }
            this.visible = false;
        };
        return resolutionballoon;
    }(playerElementBase));
    EQPlayer_parts.resolutionballoon = resolutionballoon;
    var speedballoon = (function (_super) {
        __extends(speedballoon, _super);
        function speedballoon(node) {
            var _this = _super.call(this, node) || this;
            _this._enable = true;
            _this._visible = false;
            _this.title = _this.node.children[0].children[0];
            _this.title.addEventListener("click", function () {
                _this.visible = false;
            });
            _this.ul = _this.node.children[0].children[1];
            _this.pin = node.children[0].children[2];
            return _this;
        }
        speedballoon.prototype.setList = function (list, HTML5Player_t3) {
            this.list = list;
            for (var i = this.ul.children.length - 1; i >= 0; i--) {
                this.ul.removeChild(this.ul.children[i]);
            }
            for (var i = 0; i < this.list.length; i++) {
                var li = document.createElement("div");
                li.className = "eq-balloon-item";
                var val = this.list[i].toString();
                if (val.indexOf(".") == -1) {
                    val = val + ".0";
                }
                li.onclick = (function (i) {
                    return function () {
                        HTML5Player_t3.changePlaybackRate(HTML5Player_t3.playbackrateList[i]);
                    };
                })(i);
                var block = document.createElement("div");
                block.innerText = val;
                block.setAttribute("index", i.toString());
                li.appendChild(block);
                this.ul.appendChild(li);
            }
        };
        speedballoon.prototype.setFocus = function (rate) {
            if (!!this.list) {
                for (var i = 0; i < this.list.length; i++) {
                    if (this.list[i] == rate) {
                        this.ul.children[i].classList.add("eq-focus");
                    }
                    else {
                        this.ul.children[i].classList.remove("eq-focus");
                    }
                }
            }
        };
        return speedballoon;
    }(playerElementBase));
    EQPlayer_parts.speedballoon = speedballoon;
    var selectTelop = (function (_super) {
        __extends(selectTelop, _super);
        function selectTelop(node) {
            var _this = _super.call(this, node) || this;
            _this.title = _this.node.children[0];
            var ua = navigator.userAgent.toLowerCase();
            if (ua.match(/msie/) || ua.match(/trident/) || !!ua.match(/mozilla\/.+windows nt 10\.[0-9].+chrome.+safari.+edge\/[0-9\.]+/i) || (ua.match(/android ([4]\.[0-3]\..)/) && ua.match(/mobile/))) {
                _this.event = new CustomEvent("closeSelectMenu");
            }
            else {
                _this.event = new Event("closeSelectMenu");
            }
            _this.title.addEventListener("click", function () {
                _this.visible = false;
                document.dispatchEvent(_this.event);
            });
            _this.closeBtn = _this.node.children[1];
            _this.closeBtn.addEventListener("click", function () {
                _this.visible = false;
                document.dispatchEvent(_this.event);
            });
            _this.ul = _this.node.children[2];
            _this.canvas = document.createElement("canvas");
            _this.canvas.id = "canvas";
            _this.canvas.style.visibility = "hidden";
            _this.canvas.style.position = "absolute";
            _this.node.appendChild(_this.canvas);
            return _this;
        }
        selectTelop.prototype.setList = function (list, HTML5Player_t3) {
            var _this = this;
            this.list = list;
            for (var i = this.ul.children.length - 1; i >= 0; i--) {
                this.ul.removeChild(this.ul.children[i]);
            }
            for (var i = 1; i < this.list.length; i++) {
                var li = document.createElement("div");
                li.className = "eq-select-item";
                li.onclick = (function (i) {
                    return function () {
                        HTML5Player_t3.changeSubtitles(i);
                        HTML5Player_t3.selectTelop.visible = false;
                        document.dispatchEvent(_this.event);
                    };
                })(i);
                var block = document.createElement("div");
                block.innerText = this.list[i].text;
                var length = block.innerText.length;
                var size = this.strWidth(this.list[i].text, 0);
                if (size > 100) {
                    var playerWidth = HTML5Player_t3.player.clientWidth;
                    var playerHeight = HTML5Player_t3.player.clientHeight;
                    var font;
                    if (playerWidth < HTML5Player_t3.PLAYER_WIDTH_LANDSCAPE_SMALL || playerHeight < HTML5Player_t3.PLAYER_HEIGHT_LANDSCAPE_SMALL) {
                        font = (100 / size) * 16;
                        font = Math.floor(font);
                        if (size > 200) {
                            font = 8;
                            block.style.lineHeight = "15px";
                        }
                        block.style.height = "30px";
                    }
                    else if (playerWidth < HTML5Player_t3.PLAYER_WIDTH_LANDSCAPE || playerHeight < HTML5Player_t3.PLAYER_HEIGHT_LANDSCAPE) {
                        font = (100 / size) * 20;
                        font = Math.floor(font);
                        if (size > 200) {
                            font = 10;
                            block.style.lineHeight = "25px";
                        }
                        block.style.height = "50px";
                    }
                    else {
                        font = (100 / size) * 20;
                        font = Math.floor(font);
                        if (size > 200) {
                            font = 9;
                            block.style.lineHeight = "30px";
                        }
                        block.style.height = "60px";
                    }
                    block.style.fontSize = font + "px";
                }
                block.setAttribute("index", i.toString());
                li.appendChild(block);
                this.ul.appendChild(li);
            }
        };
        selectTelop.prototype.setFocus = function (subtitle) {
            if (!!this.list) {
                for (var i = 1; i < this.list.length; i++) {
                    if (this.list[i].text == subtitle["text"] && this.list[i].lang == subtitle["lang"]) {
                        this.ul.children[i - 1].classList.add("eq-focus");
                    }
                    else {
                        this.ul.children[i - 1].classList.remove("eq-focus");
                    }
                }
            }
        };
        selectTelop.prototype.getBytes = function (text) {
            var bytes = 0, i, c, len = text.length;
            for (i = 0; i < len; i++) {
                c = text[i].charCodeAt(0);
                if (c <= 127) {
                    bytes += 1;
                }
                else {
                    bytes += 2;
                }
            }
            return bytes;
        };
        selectTelop.prototype.strWidth = function (str, fontSize) {
            if (this.canvas.getContext) {
                var context = this.canvas.getContext('2d');
                context.font = "20px ヒラギノ角ゴ Pro W3";
                var metrics = context.measureText(str);
                return metrics.width;
            }
            return -1;
        };
        return selectTelop;
    }(playerElementBase));
    EQPlayer_parts.selectTelop = selectTelop;
    var selectResolution = (function (_super) {
        __extends(selectResolution, _super);
        function selectResolution(node) {
            var _this = _super.call(this, node) || this;
            _this.title = _this.node.children[0];
            var ua = navigator.userAgent.toLowerCase();
            if (ua.match(/msie/) || ua.match(/trident/) || !!ua.match(/mozilla\/.+windows nt 10\.[0-9].+chrome.+safari.+edge\/[0-9\.]+/i) || (ua.match(/android ([4]\.[0-3]\..)/) && ua.match(/mobile/))) {
                _this.event = new CustomEvent("closeSelectMenu");
            }
            else {
                _this.event = new Event("closeSelectMenu");
            }
            _this.title.addEventListener("click", function () {
                _this.visible = false;
                document.dispatchEvent(_this.event);
            });
            _this.closeBtn = _this.node.children[1];
            _this.closeBtn.addEventListener("click", function () {
                _this.visible = false;
                document.dispatchEvent(_this.event);
            });
            _this.ul = _this.node.children[2];
            return _this;
        }
        selectResolution.prototype.setList = function (list, HTML5Player_t3) {
            var _this = this;
            this.list = list;
            for (var i = this.ul.children.length - 1; i >= 0; i--) {
                this.ul.removeChild(this.ul.children[i]);
            }
            for (var i = 0; i < this.list.length; i++) {
                var li = document.createElement("div");
                li.className = "eq-select-item";
                li.onclick = (function (i) {
                    return function () {
                        HTML5Player_t3.changeQuality(HTML5Player_t3.movie_list[i].url);
                        HTML5Player_t3.selectResolution.visible = false;
                        document.dispatchEvent(_this.event);
                    };
                })(i);
                var block = document.createElement("div");
                if (HTML5Player_t3.isMobile() && this.list[i].text.match(/\((.*)\)/)) {
                    block.innerText = this.list[i].text.match(/\((.*)\)/)[1];
                }
                else {
                    block.innerText = this.list[i].text.replace(/\(.*\)/, "");
                }
                block.setAttribute("index", i.toString());
                li.appendChild(block);
                this.ul.appendChild(li);
            }
        };
        selectResolution.prototype.setFocus = function (url) {
            if (!!this.list) {
                for (var i = 0; i < this.list.length; i++) {
                    if (this.list[i].url == url) {
                        this.ul.children[i].classList.add("eq-focus");
                    }
                    else {
                        this.ul.children[i].classList.remove("eq-focus");
                    }
                }
            }
            this.visible = false;
        };
        return selectResolution;
    }(playerElementBase));
    EQPlayer_parts.selectResolution = selectResolution;
    var selectSpeed = (function (_super) {
        __extends(selectSpeed, _super);
        function selectSpeed(node) {
            var _this = _super.call(this, node) || this;
            _this.title = _this.node.children[0];
            var ua = navigator.userAgent.toLowerCase();
            if (ua.match(/msie/) || ua.match(/trident/) || !!ua.match(/mozilla\/.+windows nt 10\.[0-9].+chrome.+safari.+edge\/[0-9\.]+/i) || (ua.match(/android ([4]\.[0-3]\..)/) && ua.match(/mobile/))) {
                _this.event = new CustomEvent("closeSelectMenu");
            }
            else {
                _this.event = new Event("closeSelectMenu");
            }
            _this.title.addEventListener("click", function () {
                _this.visible = false;
                document.dispatchEvent(_this.event);
            });
            _this.closeBtn = _this.node.children[1];
            _this.closeBtn.addEventListener("click", function () {
                _this.visible = false;
                document.dispatchEvent(_this.event);
            });
            _this.ul = _this.node.children[2];
            return _this;
        }
        selectSpeed.prototype.setList = function (list, HTML5Player_t3) {
            var _this = this;
            this.list = list;
            for (var i = this.ul.children.length - 1; i >= 0; i--) {
                this.ul.removeChild(this.ul.children[i]);
            }
            for (var i = 0; i < this.list.length; i++) {
                var li = document.createElement("div");
                li.className = "eq-select-item";
                var val = this.list[i].toString();
                if (val.indexOf(".") == -1) {
                    val = val + ".0";
                }
                li.onclick = (function (i) {
                    return function () {
                        HTML5Player_t3.changePlaybackRate(HTML5Player_t3.playbackrateList[i]);
                        HTML5Player_t3.selectSpeed.visible = false;
                        document.dispatchEvent(_this.event);
                    };
                })(i);
                var block = document.createElement("div");
                block.innerText = val;
                block.setAttribute("index", i.toString());
                li.appendChild(block);
                this.ul.appendChild(li);
            }
        };
        selectSpeed.prototype.setFocus = function (rate) {
            if (!!this.list) {
                for (var i = 0; i < this.list.length; i++) {
                    if (this.list[i] == rate) {
                        this.ul.children[i].classList.add("eq-focus");
                    }
                    else {
                        this.ul.children[i].classList.remove("eq-focus");
                    }
                }
            }
        };
        return selectSpeed;
    }(playerElementBase));
    EQPlayer_parts.selectSpeed = selectSpeed;
    var captionContainer = (function (_super) {
        __extends(captionContainer, _super);
        function captionContainer(node, useLightBox) {
            var _this = _super.call(this, node) || this;
            _this.index = 1;
            _this.viewingTrack = {
                lang: "",
                label: ""
            };
            _this.viewingCue = {
                startTime: 0,
                endTime: 0,
                text: ""
            };
            _this.useNativeTrack = false;
            _this.isiOS = false;
            _this._enable = true;
            _this._visible = false;
            _this.textNode = node.children[0];
            var appVersion = window.navigator.appVersion.toLowerCase();
            if (/iP(hone|od|ad)/.test(navigator.platform)) {
                _this.isiOS = true;
                var v = (navigator.appVersion).match(/OS (\d+)_(\d+)_?(\d+)?/);
                var iosVersion = [parseInt(v[1], 10), parseInt(v[2], 10), parseInt((v[3] || "0"), 10)];
                if (iosVersion[0] < 10) {
                    _this.useNativeTrack = true;
                }
            }
            _this.textTracks = [];
            return _this;
        }
        captionContainer.prototype.setFontSize = function (width, isMobile) {
            var fontSize = 20;
            if (isMobile) {
                fontSize = 16;
                this.textNode.style.lineHeight = "21px";
            }
            else {
                fontSize = width / 30;
            }
            this.textNode.style.fontSize = fontSize + "px";
            this.textNode.style.lineHeight = fontSize * 1.5 + "px";
        };
        captionContainer.prototype.createSubtitles = function (currentTime) {
            var currentText = "";
            var textTrackCueList = [];
            var element = this.textNode;
            var appVersion = window.navigator.appVersion.toLowerCase();
            var iosVersion = null;
            if (!this.list || this.list.length < 1) {
                return;
            }
            var cueCheck = this.list[this.index];
            if (this.useNativeTrack) {
                return;
            }
            if (this.index == 0 || this.index == 1) {
                element.innerHTML = currentText;
                return;
            }
            if (this.viewingCue.startTime > currentTime || this.viewingCue.endTime < currentTime
                || cueCheck.lang != this.viewingTrack.lang || cueCheck.text != this.viewingTrack.label) {
                this.viewingCue.startTime = 0;
                this.viewingCue.endTime = 0;
                this.viewingTrack.lang = cueCheck.lang;
                this.viewingTrack.label = cueCheck.text;
                for (var textIndex = 0; textIndex < this.textTracks.length; textIndex++) {
                    if (cueCheck.text === this.textTracks[textIndex].label && cueCheck.lang === this.textTracks[textIndex].lang) {
                        textTrackCueList = this.textTracks[textIndex].textTrackCueList;
                    }
                }
                for (var cueIndex = 0; cueIndex < textTrackCueList.length; cueIndex++) {
                    if (textTrackCueList[cueIndex].startTime <= currentTime && textTrackCueList[cueIndex].endTime >= currentTime) {
                        currentText = textTrackCueList[cueIndex].text;
                        this.viewingCue.text = currentText;
                        this.viewingCue.startTime = textTrackCueList[cueIndex].startTime;
                        this.viewingCue.endTime = textTrackCueList[cueIndex].endTime;
                        break;
                    }
                }
                this.removeTextNode();
                this.createTextNode(currentText);
            }
        };
        captionContainer.prototype.createTextNode = function (txt) {
            this.textNode = document.createElement("span");
            this.textNode.className = "eq-caption_text";
            this.textNode.innerHTML = txt;
            var fontSize = this.node.clientWidth / 30;
            this.textNode.style.fontSize = fontSize + "px";
            this.textNode.style.lineHeight = fontSize * 1.5 + "px";
            this.node.appendChild(this.textNode);
        };
        captionContainer.prototype.removeTextNode = function () {
            this.node.removeChild(this.textNode);
            this.textNode = null;
        };
        captionContainer.prototype.init_subtitles = function (subtitles) {
            var captionArea = this.node;
            var textArea = this.textNode;
            if (!subtitles || subtitles.length < 3)
                return;
            this.list = subtitles;
            var langTypes = [];
            for (var i = 2; i < subtitles.length; i++) {
                if (/\.vtt$/.test(subtitles[i].url)) {
                    var vtt = this.getVtt(subtitles[i].url);
                    if (!(vtt === null) && !(vtt === '')) {
                        var cueList = new Object();
                        cueList["textTrackCueList"] = this.parseVtt(vtt);
                        cueList["label"] = subtitles[i].text;
                        if (langTypes.length > 0 && langTypes.indexOf(subtitles[i].lang) != -1) {
                            subtitles[i].lang = subtitles[i].lang + "_" + i.toString();
                        }
                        else {
                            langTypes.push(subtitles[i].lang);
                        }
                        cueList["lang"] = subtitles[i].lang;
                        this.textTracks.push(cueList);
                    }
                }
                else if (/\.ttml$/.test(subtitles[i].url)) {
                    var ttml = this.getTTML(subtitles[i].url);
                    if (!(ttml === null)) {
                        var cueList = new Object();
                        cueList["textTrackCueList"] = this.parseTTML(ttml);
                        cueList["label"] = subtitles[i].text;
                        if (langTypes.length > 0 && langTypes.indexOf(subtitles[i].lang) != -1) {
                            subtitles[i].lang = subtitles[i].lang + "_" + i.toString();
                        }
                        else {
                            langTypes.push(subtitles[i].lang);
                        }
                        cueList["lang"] = subtitles[i].lang;
                        this.textTracks.push(cueList);
                    }
                }
            }
            var textTrackIndex = -1;
            if (this.isiOS && !!this.textTracks) {
                for (var index = 0; index < this.textTracks.length; index++) {
                    if (this.textTracks[index].label == subtitles[this.index].text && this.textTracks[index].lang == subtitles[this.index].lang) {
                        textTrackIndex = index;
                    }
                    var track = this.video.addTextTrack("captions", this.textTracks[index].label, this.textTracks[index].lang);
                    for (var cueIndex = 0; cueIndex < this.textTracks[index].textTrackCueList.length; cueIndex++) {
                        track.addCue(this.textTracks[index].textTrackCueList[cueIndex]);
                    }
                }
                for (var i = 0; i < this.video.textTracks.length; i++) {
                    this.video.textTracks[i].mode = "disabled";
                }
                if (this.useNativeTrack) {
                    setTimeout(function () {
                        this.video.textTracks[textTrackIndex].mode = "showing";
                    }, 1000);
                    return;
                }
            }
        };
        captionContainer.prototype.getVtt = function (src) {
            var xmlHttp = new XMLHttpRequest();
            xmlHttp.open("GET", src, false);
            xmlHttp.send(null);
            return xmlHttp.responseText;
        };
        captionContainer.prototype.parseVtt = function (string) {
            var lines = string.replace(/\r\n/gm, "\n").replace(/\r/gm, "\n").split("\n");
            var timestampMatcher = /([0-9,:,.]{0,})\s-->\s([0-9,:,.]{0,})/;
            var webVttMatcher = /WEBVTT/;
            var brMatcher = /<br>$/gm;
            var startTime;
            var endTime;
            var cues = [];
            var textLine = [];
            var text;
            var match;
            var timeStampIndex;
            for (var index = 0; index < lines.length; index++) {
                if (match = lines[index].match(timestampMatcher)) {
                    text = "";
                    textLine = [];
                    startTime = this.parseToNumber(match[1]);
                    endTime = this.parseToNumber(match[2]);
                    for (var nextIndex = index + 1; nextIndex < lines.length; nextIndex++) {
                        timeStampIndex = nextIndex;
                        if (lines[nextIndex].match(timestampMatcher)) {
                            break;
                        }
                    }
                    if (timeStampIndex == lines.length - 1) {
                        timeStampIndex += 1;
                    }
                    textLine = lines.slice(index + 1, timeStampIndex - 1);
                    text = textLine.join("\r\n<br>");
                    index = timeStampIndex - 1;
                    while (text.match(brMatcher)) {
                        text = text.replace(brMatcher, "");
                    }
                    while (text.match(/\r\n$/gm)) {
                        text = text.replace(/\r\n$/gm, "");
                    }
                    var ua = window.navigator.userAgent.toLowerCase();
                    if (!!startTime && !!endTime) {
                        try {
                            if (ua.match(/msie/) || ua.match(/trident/) || ua.match(/edge/)) {
                                cues.push(new TextTrackCue(startTime, endTime, text));
                            }
                            else {
                                cues.push(new VTTCue(startTime, endTime, text));
                            }
                        }
                        catch (error) {
                        }
                    }
                }
            }
            return cues;
        };
        captionContainer.prototype.getTTML = function (src) {
            var xmlHttp = new XMLHttpRequest();
            xmlHttp.open("GET", src, false);
            xmlHttp.send(null);
            return xmlHttp.responseXML;
        };
        captionContainer.prototype.parseTTML = function (ttml) {
            var cues = [];
            var startTime;
            var endTime;
            var text;
            var textLines = [];
            textLines = ttml.getElementsByTagName("body")[0].getElementsByTagName("div")[0].getElementsByTagName("p");
            for (var index = 0; index < textLines.length; index++) {
                text = textLines[index].innerHTML;
                startTime = this.parseToNumber(textLines[index].getAttribute("begin"));
                endTime = this.parseToNumber(textLines[index].getAttribute("end"));
                var ua = window.navigator.userAgent.toLowerCase();
                if (!!startTime && !!endTime) {
                    try {
                        if (ua.match(/msie/) || ua.match(/trident/) || ua.match(/edge/)) {
                            cues.push(new TextTrackCue(startTime, endTime, text));
                        }
                        else {
                            cues.push(new VTTCue(startTime, endTime, text));
                        }
                    }
                    catch (error) {
                    }
                }
            }
            return cues;
        };
        captionContainer.prototype.parseToNumber = function (time) {
            var times = time.split(":");
            var seconds = 0;
            var tmp;
            if (times.length >= 3) {
                seconds = Number(times[0]) * 60 * 60;
                seconds += Number(times[1]) * 60;
                seconds += Number(times[2]);
                return seconds;
            }
            if (times.length >= 2) {
                seconds += Number(times[0]) * 60;
                seconds += Number(times[1]);
                return seconds;
            }
            if (times.length >= 1) {
                seconds += Number(times[0]);
                return seconds;
            }
            return seconds;
        };
        return captionContainer;
    }(playerElementBase));
    EQPlayer_parts.captionContainer = captionContainer;
})(EQPlayer_parts || (EQPlayer_parts = {}));
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var jstream_t3;
(function (jstream_t3) {
    var version = (function () {
        function version() {
        }
        version.getVersion = function () {
            return "player_3_0_9";
        };
        version.getAsemVersion = function () { return "v3.0.9r2018042401"; };
        return version;
    }());
    jstream_t3.version = version;
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3) {
    var utils;
    (function (utils) {
        var Util = (function () {
            function Util() {
            }
            Util.getCanonical = function () {
                var linkList = document.getElementsByTagName("link");
                for (var i = 0; i < linkList.length; i++) {
                    if (linkList[i].rel == "canonical") {
                        var aaa = "aaa";
                        return linkList[i].href;
                    }
                }
                return null;
            };
            Util.getAPIServerURL = function (url) {
                return url + "/apiservice/";
            };
            Util.parse_uri = function (uri) {
                var reg = /^(?:([^:\/?#]+):)?(?:\/\/([^\/?#]*))?([^?#]*)(?:\?([^#]*))?(?:#(.*))?/;
                var m = uri.match(reg);
                if (m) {
                    return { "scheme": m[1], "authority": m[2], "path": m[3], "query": m[4], "fragment": m[5] };
                }
                else {
                    return null;
                }
            };
            Util.encode = function (value) {
                if (value == null)
                    return value;
                return value.split("&").join("__and__");
            };
            Util.decode = function (value) {
                if (value == null)
                    return value;
                return value.split("__and__").join("&");
            };
            Util.decodeHTMLEncode = function (src) {
                if (src == null)
                    return src;
                return src.split("&lt;").join("<").split("&gt;").join(">").split("&amp;").join("&").split("&quot;").join("\"").split("&nbsp;").join(" ");
            };
            Util.encodeHTMLEncode = function (str) {
                if (str == null)
                    return str;
                str = str.replace(/&/g, '&amp;');
                str = str.replace(/\"/g, '&quot;');
                str = str.replace(/\'/g, '&#039;');
                str = str.replace(/</g, '&lt;');
                str = str.replace(/>/g, '&gt;');
                return str;
            };
            Util.isFlash = function () {
                return jstream_t3.utils.EmbedSwf.detectFlashVer(10, 1, 0);
            };
            Util.browserLanguage = function () {
                if (Util.isMobileList().Android2) {
                    return navigator.appVersion.indexOf("ja-jp") >= 0 ? "ja" : "en";
                }
                if (document.all) {
                    return navigator.browserLanguage.split("-")[0];
                }
                var language = window.navigator.userLanguage || window.navigator.language || window.navigator.browserLanguage;
                return language.split("-")[0];
            };
            Util.getOSVersion = function () {
                var ua = window.navigator.userAgent.toLowerCase();
                if (ua.indexOf("nt 6.1") != -1) {
                    return "Win7";
                }
                return "other";
            };
            Util.getUserAgent = function () {
                var ua = window.navigator.userAgent.toLowerCase();
                var appVersion = window.navigator.appVersion.toLowerCase();
                if (ua.indexOf("msie") > -1 || ua.indexOf('trident') > -1) {
                    if (appVersion.indexOf("msie 6.") != -1) {
                        return 'ie6';
                    }
                    else if (appVersion.indexOf("msie 7.") != -1) {
                        return 'ie7';
                    }
                    else if (appVersion.indexOf("msie 8.") != -1) {
                        return 'ie8';
                    }
                    else if (appVersion.indexOf("msie 9.") != -1) {
                        return 'ie9';
                    }
                    else if (appVersion.indexOf("msie 10.") != -1) {
                        return 'ie10';
                    }
                    return "IE";
                }
                else if (ua.indexOf("edge") > -1) {
                    return "edge";
                }
                else if (ua.indexOf("firefox") > -1) {
                    return "Firefox";
                }
                else if (ua.indexOf("opera") > -1) {
                    return "opera";
                }
                else if (ua.indexOf("netscape") > -1) {
                    return "netscape";
                }
                else if (ua.indexOf("chrome") > -1) {
                    return "Chrome";
                }
                else if (ua.indexOf("safari") > -1 && ua.indexOf("mobile") == -1) {
                    var re = /version\/(\d+)/;
                    var ver = parseInt(re.exec(appVersion)[1]);
                    if (ver >= 9) {
                        return "Safari";
                    }
                    else {
                        return "oldSafari";
                    }
                }
                else {
                    return "Unknown";
                }
            };
            Util.isMobileList = function (userAgent) {
                if (userAgent === void 0) { userAgent = null; }
                if (Util["isMobile"] == null) {
                    Util["isMobile"] = new MobileAgentList(userAgent);
                }
                return Util["isMobile"];
            };
            Util.isLegacyBrowser = function (os, browser) {
                return false;
            };
            Util.isPC = function () {
                var ua = window.navigator.userAgent.toLowerCase();
                if ((ua.indexOf('iphone') > 0
                    || ua.indexOf('ipad') > 0
                    || (ua.indexOf('android') > 0) && (ua.indexOf('mobile') > 0)
                    || ua.indexOf('windows phone') > 0))
                    return false;
                return true;
            };
            Util.getOS = function () {
                var os = "";
                var ua = window.navigator.platform.toLowerCase();
                return os;
            };
            Util.deleteNullItem = function (myArray) {
                var i, len, _results;
                if (!myArray) {
                    return;
                }
                len = myArray.length - 1;
                i = len;
                _results = [];
                while (i >= 0) {
                    if (!myArray[i]) {
                        myArray.splice(i, 1);
                    }
                    _results.push(i--);
                }
                return _results;
            };
            Util.isFunction = function (value) {
                return typeof value == "function";
            };
            Util.isObject = function (value) {
                return typeof value == "object";
            };
            Util.escapeObject = function (value) {
                if (value == null || typeof value == "function")
                    return null;
                if (typeof value == "string") {
                    return window["escape"](value);
                }
                if (typeof value == "number" || typeof value == "boolean") {
                    return value;
                }
                var result;
                if (value instanceof Array) {
                    result = [];
                }
                else {
                    result = {};
                }
                for (var prop in value) {
                    result[prop] = Util.escapeObject(value[prop]);
                }
                return result;
            };
            Util.changeParamName = function (params) {
                params.base = params.b;
                params.contract_id = params.c;
                params.meta_id = params.m || params.meta_id;
                params.partner_id = params.pcid || params.partner_id;
                params.maker_id = params.mkid || params.maker_id;
                params.product_id = params.pdid || params.product_id;
                if (params.t <= 0) {
                    params.t = undefined;
                }
                params.start_time = params.t;
                params.plugins = params.p;
                params.va_url = params.v;
                params.width = params.s.wp;
                params.height = params.s.hp;
                if (!isNaN(parseFloat(params.s.wt)))
                    params.s.wt = parseFloat(params.s.wt);
                params.thumb_width = params.s.wt;
                if (!isNaN(parseFloat(params.s.ht)))
                    params.s.ht = parseFloat(params.s.ht);
                params.thumb_height = params.s.ht;
                params.responsive = params.s.rp;
                params.default_quality = params.s.dq || 2;
                params.auth = params.a;
                params.optionId = params.opid;
                params.onetimeTag = params.ot;
                params.line = params.s.line;
                params.playlist_id = params.pl || params.playlist_id;
                return params;
            };
            Util.checkDynamicPlayerSetting = function (params) {
                var isDynamic = true;
                if (!!params.s) {
                    for (var prop in params) {
                        if (prop == "rp" || prop == "va") {
                        }
                        else {
                            isDynamic = false;
                            break;
                        }
                    }
                }
                return isDynamic;
            };
            Util.unObfuscate = function (str) {
                str = decodeURIComponent(str);
                str = this.base64decode(str).toString();
                return str;
            };
            Util.obfuscate = function (str) {
                str = this.base64encode(str);
                str = encodeURIComponent(str);
                return str;
            };
            Util.base64encode = function (s) {
                var t = '';
                var p = -6;
                var a = 0;
                var i = 0;
                var v = 0;
                var c;
                var BASE64_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
                while ((i < s.length) || (p > -6)) {
                    if (p < 0) {
                        if (i < s.length) {
                            c = s.charCodeAt(i++);
                            v += 8;
                        }
                        else {
                            c = 0;
                        }
                        a = ((a & 255) << 8) | (c & 255);
                        p += 8;
                    }
                    t += BASE64_CHARS.charAt((v > 0) ? (a >> p) & 63 : 64);
                    p -= 6;
                    v -= 6;
                }
                return t;
            };
            Util.base64decode = function (s) {
                var t = '';
                var p = -8;
                var a = 0;
                var c;
                var d;
                var BASE64_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
                for (var i = 0; i < s.length; i++) {
                    if ((c = BASE64_CHARS.indexOf(s.charAt(i))) < 0)
                        continue;
                    a = (a << 6) | (c & 63);
                    if ((p += 6) >= 0) {
                        d = (a >> p) & 255;
                        if (c != 64)
                            t += String.fromCharCode(d);
                        a &= 63;
                        p -= 8;
                    }
                }
                return t;
            };
            Util.toJSON = function (obj) {
                var buff = [];
                var read = function (o) {
                    if (typeof (o) == "function") {
                        return;
                    }
                    else if (typeof (o) == "string" || o instanceof String) {
                        return '"' + o + '"';
                    }
                    else if (typeof (o) == "number" || o instanceof Number) {
                        return o;
                    }
                    else if (o instanceof Array) {
                        if (o) {
                            buff.push('[');
                            for (var idx in o) {
                                buff.push(read(o[idx]));
                                buff.push(', ');
                            }
                            if (o.length > 0)
                                delete buff[buff.length - 1];
                            buff.push(']');
                        }
                    }
                    else if (o instanceof Object) {
                        if (o) {
                            buff.push('{');
                            for (var key in o) {
                                buff.push(key + ': ');
                                buff.push(read(o[key]));
                                buff.push(',');
                            }
                            delete buff[buff.length - 1];
                            buff.push('}');
                        }
                    }
                };
                read(obj);
                return buff.join('');
            };
            Util.toJSONforCustomVA = function (obj) {
                var buff = [];
                var read = function (o) {
                    if (typeof (o) == "function") {
                        return;
                    }
                    else if (typeof (o) == "string" || o instanceof String) {
                        return '"' + o + '"';
                    }
                    else if (typeof (o) == "number" || o instanceof Number) {
                        return o;
                    }
                    else if (o instanceof Array) {
                        if (o) {
                            buff.push('[');
                            for (var idx in o) {
                                buff.push(read(o[idx]));
                                buff.push(', ');
                            }
                            if (o.length > 0)
                                delete buff[buff.length - 1];
                            buff.push(']');
                        }
                    }
                    else if (o instanceof Object) {
                        if (o) {
                            buff.push('{');
                            for (var key in o) {
                                buff.push('"' + key + '": ');
                                buff.push(read(o[key]));
                                buff.push(',');
                            }
                            delete buff[buff.length - 1];
                            buff.push('}');
                        }
                    }
                };
                read(obj);
                return buff.join('');
            };
            Util.toQuery = function (obj) {
                var buff = [];
                var read = function (o) {
                    if (typeof (o) == "function") {
                        return;
                    }
                    else if (typeof (o) == "string" || o instanceof String) {
                        return o;
                    }
                    else if (typeof (o) == "number" || o instanceof Number) {
                        return o;
                    }
                    else if (o instanceof Array) {
                        if (o) {
                            buff.push('[');
                            for (var idx in o) {
                                buff.push(read(o[idx]));
                                buff.push(', ');
                            }
                            if (o.length > 0)
                                delete buff[buff.length - 1];
                            buff.push(']');
                        }
                    }
                    else if (o instanceof Object) {
                        if (o) {
                            buff.push('{');
                            for (var key in o) {
                                buff.push(key + ': ');
                                buff.push(read(o[key]));
                                buff.push(',');
                            }
                            delete buff[buff.length - 1];
                            buff.push('}');
                        }
                    }
                };
                read(obj);
                return buff.join('');
            };
            Util.GetCookie = function (name) {
                var result = null;
                var cookieName = name + '=';
                var allcookies = window.document.cookie;
                var position = allcookies.indexOf(cookieName);
                if (position != -1) {
                    var startIndex = position + cookieName.length;
                    var endIndex = allcookies.indexOf(';', startIndex);
                    if (endIndex == -1) {
                        endIndex = allcookies.length;
                    }
                    result = decodeURIComponent(allcookies.substring(startIndex, endIndex));
                }
                return result;
            };
            Util.SetCookie = function (name, value, path, period, domain) {
                if (period === void 0) { period = null; }
                if (domain === void 0) { domain = null; }
                if (domain == null) {
                    domain == "";
                }
                else {
                    domain = "domain=" + domain + ";";
                }
                if (period != null) {
                    var date = new Date();
                    date.setTime(date.getTime() + period * 60 * 60 * 24 * 1000);
                    var nowtime = new Date().getTime();
                    var clear_time = new Date(nowtime + (60 * 60 * 24 * 1000 * (period)));
                    var expires = date.toUTCString();
                    var max_age = 60 * 60 * 24 * period;
                    window.document.cookie = name + "=" + encodeURIComponent(value) + ";path=/;" + domain + "max-age=" + max_age + ";expires=" + expires;
                }
                else {
                    window.document.cookie = name + "=" + encodeURIComponent(value) + ";path=/;" + domain;
                }
            };
            Util.CheckOverCookie = function (key, name, max) {
                var cookies = window.document.cookie.split(";");
                if (window.document.cookie.indexOf(name) != -1) {
                    return null;
                }
                var firstCookie = null;
                var cookieCount = 0;
                for (var i = 0; i < cookies.length; i++) {
                    if (cookies[i].indexOf(key) != -1) {
                        if (firstCookie == null) {
                            firstCookie = cookies[i].split("=")[0];
                        }
                        cookieCount++;
                    }
                }
                return cookieCount >= max ? firstCookie : null;
            };
            Util.DeleteCookie = function (name, domain) {
                if (domain === void 0) { domain = null; }
                if (domain == null) {
                    domain == "";
                }
                else {
                    domain = "domain=" + domain + ";";
                }
                var date1 = new Date();
                date1.setTime(0);
                window.document.cookie = name + "=;path=/;" + domain + " expires=" + date1.toDateString();
            };
            Util.ReplaceHtmltagWithString = function (originString, htmlTagName, newString) {
                var pattern = "/<" + htmlTagName + "[^>]+?\/>|<" + htmlTagName + "(.|\s)*?\/" + htmlTagName + ">/gi";
                return originString.replace(pattern, newString);
            };
            Util.messageConvertForLegacy = function (msg, value, iframeID) {
                var stringMessage;
                stringMessage = msg;
                if (typeof (value) == "string") {
                    stringMessage += "," + value;
                }
                else {
                    for (var prop in value) {
                        stringMessage += "," + value[prop];
                    }
                }
                stringMessage += "," + iframeID;
                return stringMessage;
            };
            Util.messageRevertForLagacy = function (data) {
                var returnObject = {
                    msg: "",
                    value: "",
                    iframeID: ""
                };
                var parseData = data.split(",");
                if (parseData.length == 3) {
                    returnObject["msg"] = parseData[0];
                    returnObject["value"] = parseData[1];
                    returnObject["iframeID"] = parseData[2];
                }
                else {
                    returnObject["msg"] = parseData[0];
                    var value = {
                        currentTime: parseData[1],
                        totalTime: parseData[2],
                        quality: parseData[3],
                        isMute: parseData[4],
                        volume: parseData[5],
                        playbackRate: parseData[6],
                        currentAPI: parseData[7]
                    };
                    returnObject["value"] = value;
                    returnObject["iframeID"] = parseData[parseData.length - 1];
                }
                return returnObject;
            };
            Util.createCrashReportQuery = function (errorCode, crashPoint, cid, mid, tagType, params, referer) {
                var queryString = "?errorCode=" + errorCode
                    + "&crashPoint=" + crashPoint
                    + "&cid=" + cid
                    + "&mid=" + mid
                    + "&tagType=" + tagType
                    + "&params=" + encodeURIComponent(JSON.stringify(params))
                    + "&referer=" + encodeURIComponent(referer)
                    + "&version=" + jstream_t3.version.getAsemVersion();
                return queryString;
            };
            Util.createLogReportQuery = function (cid, mid, tagType, params, referer) {
                var queryString = "?cid=" + cid
                    + "&mid=" + mid
                    + "&tagType=" + tagType
                    + "&params=" + encodeURIComponent(JSON.stringify(params))
                    + "&referer=" + encodeURIComponent(referer)
                    + "&version=" + jstream_t3.version.getAsemVersion();
                return queryString;
            };
            Util.appendScript = function (endpoint, query) {
                var script = document.createElement("script");
                script.src = endpoint + query;
                document.body.appendChild(script);
            };
            Util.isPublishSitePlayerSetting = function (params) {
                var checkParamList = [
                    "ti",
                    "ip",
                    "is",
                    "fa",
                    "ft",
                    "cp",
                    "pb",
                    "wm",
                    "wd",
                    "rb",
                    "sb",
                    "vc",
                    "fs",
                    "mb",
                    "el",
                    "tg",
                    "il",
                    "sn",
                    "rs",
                    "pr",
                    "dq",
                    "mdq"
                ];
                for (var prop in params) {
                    for (var j = 0; j < checkParamList.length; j++)
                        if (prop == checkParamList[j]) {
                            return false;
                        }
                }
                return true;
            };
            Util.isContainApiDomain = function (url) {
                var matcher = /api.*-platform\.stream\.co\.jp/;
                if (url.search(matcher) != -1) {
                    return true;
                }
                return false;
            };
            return Util;
        }());
        utils.Util = Util;
        var MobileAgentList = (function () {
            function MobileAgentList(userAgent) {
                if (userAgent === void 0) { userAgent = null; }
                this.iOSP = false;
                this.iOST = false;
                this.Android1 = false;
                this.Android2 = false;
                this.Android3 = false;
                this.Android4 = false;
                this.BlackBerry = false;
                this.Windows = false;
                this.WindowsPC = false;
                this.Firefox = false;
                var agent = userAgent || navigator.userAgent;
                var navMatch = function (exp) {
                    return agent.match(exp) ? true : false;
                };
                this.iOSP = navMatch(/iPhone|iPod/i);
                this.iOST = navMatch(/iPad/i);
                this.Android1 = navMatch(/Android 1/i);
                this.Android2 = navMatch(/Android 2/i);
                this.Android3 = navMatch(/Android 3/i);
                this.Android4 = (navMatch(/Android [4-9]/i)) || (navMatch(/Silk/i));
                this.BlackBerry = navMatch(/BlackBerry/i);
                this.Windows = navMatch(/Windows Phone/i);
                this.WindowsPC = navMatch(/Windows NT/i);
                this.Firefox = navMatch(/Firefox/i) && navMatch(/Mobile|Tablet/i);
            }
            return MobileAgentList;
        }());
        utils.MobileAgentList = MobileAgentList;
        var Trace = (function () {
            function Trace() {
            }
            Trace.write = function (str) {
                var targetElement = "debug";
                var el = document.getElementById(targetElement);
                if (el) {
                    var dt = new Date();
                    var HHMMSS = String(dt.getHours() + 100).substr(1) + ":" + String(dt.getMinutes() + 100).substr(1) + ":" + String(dt.getSeconds() + 100).substr(1) + "." + String(dt.getMilliseconds() + 1000).substr(1);
                    var tmpStr = el.innerText;
                    el.innerText = HHMMSS + " " + str + "\n" + tmpStr;
                }
                return;
            };
            return Trace;
        }());
        utils.Trace = Trace;
        var EmbedSwf = (function () {
            function EmbedSwf() {
            }
            EmbedSwf.embed = function (id, path, width, height, thumb) {
                if (thumb === void 0) { thumb = null; }
                var params = {
                    quality: "high",
                    bgcolor: "#000000",
                    play: "true",
                    loop: "false",
                    wmode: "opaque",
                    scale: "noScale",
                    menu: "false",
                    devicefont: "false",
                    salign: "TL",
                    allowscriptaccess: "always",
                    allowfullscreen: "true"
                };
                var target = document.getElementById(id);
                var win = window;
                if (win.ActiveXObject) {
                    var objectTag = "";
                    var paramTags = "";
                    for (var key in params) {
                        paramTags += '<param name="' + key + '" value="' + params[key] + '" />';
                    }
                    paramTags += '<param name="movie" value="' + path + '" />';
                    objectTag = '<object id="' + id + '" name="' + id + '" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="' + String(width) + '" height="' + String(height) + '">' + paramTags + '</object>';
                    target.outerHTML = objectTag;
                    var object = document.getElementById(id);
                }
                else {
                    var parent = target.parentElement;
                    parent.removeChild(target);
                    var object = document.createElement("object");
                    object.id = id;
                    object.setAttribute("name", id);
                    object.setAttribute("type", "application/x-shockwave-flash");
                    object.setAttribute("width", String(width));
                    object.setAttribute("height", String(height));
                    object.setAttribute("data", path);
                    for (var key in params) {
                        var param = document.createElement("param");
                        param.setAttribute("name", key);
                        param.setAttribute("value", params[key]);
                        object.appendChild(param);
                    }
                    var w = -1;
                    var h = -1;
                    if (width != null) {
                        if (width == "100%") {
                            w = parent.clientWidth;
                        }
                        else {
                            w = parseInt(width);
                        }
                    }
                    if (height != null) {
                        if (height == "100%") {
                            h = parent.clientHeight;
                        }
                        else {
                            h = parseInt(height);
                        }
                    }
                    if (thumb != null && (w < 398 || h < 298)) {
                        var img = document.createElement("param");
                        img.setAttribute("name", "poster");
                        img.setAttribute("value", thumb);
                        object.appendChild(img);
                    }
                    parent.appendChild(object);
                }
            };
            EmbedSwf.fallbackEmbed = function (id, path, width, height, thumb) {
                if (thumb === void 0) { thumb = null; }
                var params = {
                    quality: "high",
                    bgcolor: "#000000",
                    play: "true",
                    loop: "false",
                    wmode: "opaque",
                    scale: "noScale",
                    menu: "false",
                    devicefont: "false",
                    salign: "TL",
                    allowscriptaccess: "always",
                    allowfullscreen: "true"
                };
                var target = document.getElementById(id);
                var win = window;
                if (win.ActiveXObject) {
                    var objectTag = "";
                    var paramTags = "";
                    for (var key in params) {
                        paramTags += '<param name="' + key + '" value="' + params[key] + '" />';
                    }
                    paramTags += '<param name="movie" value="' + path + '" />';
                    objectTag = '<object id="' + id + '" name="' + id + '" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="' + String(width) + '" height="' + String(height) + '">' + paramTags + '</object>';
                    target.innerHTML = objectTag;
                    var object = document.getElementById(id);
                }
                else {
                    var parent = target.parentElement;
                    var object = document.createElement("object");
                    object.id = id + "fallback";
                    object.setAttribute("name", id + "fallback");
                    object.setAttribute("type", "application/x-shockwave-flash");
                    object.setAttribute("width", String(width));
                    object.setAttribute("height", String(height));
                    object.setAttribute("data", path);
                    for (var key in params) {
                        var param = document.createElement("param");
                        param.setAttribute("name", key);
                        param.setAttribute("value", params[key]);
                        object.appendChild(param);
                    }
                    var w = -1;
                    var h = -1;
                    if (width != null) {
                        if (width == "100%") {
                            w = parent.clientWidth;
                        }
                        else {
                            w = parseInt(width);
                        }
                    }
                    if (height != null) {
                        if (height == "100%") {
                            h = parent.clientHeight;
                        }
                        else {
                            h = parseInt(height);
                        }
                    }
                    if (thumb != null && (w < 398 || h < 298)) {
                        var img = document.createElement("param");
                        img.setAttribute("name", "poster");
                        img.setAttribute("value", thumb);
                        object.appendChild(img);
                    }
                    target.appendChild(object);
                }
            };
            EmbedSwf.getFpVer = function () {
                var isIE = (navigator.appVersion.indexOf("MSIE") != -1) ? true : false;
                var isWin = (navigator.appVersion.toLowerCase().indexOf("win") != -1) ? true : false;
                var isOpera = (navigator.userAgent.indexOf("Opera") != -1) ? true : false;
                var flashVer = "-1";
                if (navigator.plugins != null && navigator.plugins.length > 0) {
                    if (navigator.plugins["Shockwave Flash 2.0"] || navigator.plugins["Shockwave Flash"]) {
                        var swVer2 = navigator.plugins["Shockwave Flash 2.0"] ? " 2.0" : "";
                        var flashDescription = navigator.plugins["Shockwave Flash" + swVer2].description;
                        var descArray = flashDescription.split(" ");
                        var tempArrayMajor = descArray[2].split(".");
                        var versionMajor = tempArrayMajor[0];
                        var versionMinor = tempArrayMajor[1];
                        var versionRevision = descArray[3];
                        if (versionRevision == "") {
                            versionRevision = descArray[4];
                        }
                        if (versionRevision[0] == "d") {
                            versionRevision = versionRevision.substring(1);
                        }
                        else if (versionRevision[0] == "r") {
                            versionRevision = versionRevision.substring(1);
                            if (versionRevision.indexOf("d") > 0) {
                                versionRevision = versionRevision.substring(0, versionRevision.indexOf("d"));
                            }
                        }
                        var flashVer = versionMajor + "." + versionMinor + "." + versionRevision;
                    }
                }
                else if (isIE && isWin && !isOpera) {
                    flashVer = this.controlVersion();
                }
                return flashVer;
            };
            EmbedSwf.controlVersion = function () {
                var version;
                var axo;
                var e;
                try {
                    axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7");
                    version = axo.GetVariable("$version");
                }
                catch (e) {
                }
                if (!version) {
                    try {
                        axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.6");
                        version = "WIN 6,0,21,0";
                        axo.AllowScriptAccess = "always";
                        version = axo.GetVariable("$version");
                    }
                    catch (e) {
                        version = -1;
                    }
                }
                return version;
            };
            EmbedSwf.detectFlashVer = function (reqMajorVer, reqMinorVer, reqRevision) {
                var versionStr = this.getFpVer();
                if (versionStr == "-1") {
                    return false;
                }
                else if (versionStr != "0") {
                    if (versionStr.match(/ /)) {
                        var tmpArray = versionStr.split(" ");
                        versionStr = String(tmpArray[1]);
                    }
                    var versionArray = versionStr.replace(/,/g, ".").split(".");
                    var versionMajor = versionArray[0];
                    var versionMinor = versionArray[1];
                    var versionRevision = versionArray[2];
                    if (versionMajor > parseFloat(reqMajorVer)) {
                        return true;
                    }
                    else if (versionMajor == parseFloat(reqMajorVer)) {
                        if (versionMinor > parseFloat(reqMinorVer))
                            return true;
                        else if (versionMinor == parseFloat(reqMinorVer)) {
                            if (versionRevision >= parseFloat(reqRevision))
                                return true;
                        }
                    }
                    return false;
                }
            };
            return EmbedSwf;
        }());
        utils.EmbedSwf = EmbedSwf;
    })(utils = jstream_t3.utils || (jstream_t3.utils = {}));
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3) {
    var QueController = (function () {
        function QueController(queType) {
            this.queType = queType;
        }
        QueController.prototype.getQueGlobal = function () {
            if (window["jstream_que_global"] == null) {
                window["jstream_que_global"] = {
                    queList: {},
                    currentQue: {}
                };
            }
            return window["jstream_que_global"];
        };
        QueController.prototype.getQueList = function () {
            if (this.getQueGlobal().queList[this.queType] == null) {
                this.getQueGlobal().queList[this.queType] = [];
            }
            return this.getQueGlobal().queList[this.queType];
        };
        QueController.prototype.currentQue = function (value) {
            if (value != null) {
                this.getQueGlobal().currentQue[this.queType] = value;
            }
            return this.getQueGlobal().currentQue[this.queType];
        };
        QueController.prototype.resetCurrentQue = function () {
            this.getQueGlobal().currentQue[this.queType] = null;
        };
        QueController.prototype.setQue = function () {
            this.getQueList().push(this);
            if (this.currentQue() == null) {
                this.next();
            }
        };
        QueController.prototype.next = function () {
            var _this = this;
            if (this.getQueList().length == 0) {
                this.resetCurrentQue();
                return;
            }
            this.currentQue(this.getQueList().shift());
            setTimeout(function () {
                var a = _this.currentQue();
                if (a) {
                    a.exec();
                }
            }, 100);
        };
        QueController.prototype.exec = function () {
        };
        return QueController;
    }());
    jstream_t3.QueController = QueController;
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3) {
    var utils;
    (function (utils) {
        var PlayerSetting = (function () {
            function PlayerSetting() {
            }
            PlayerSetting.setPlayerPreSetting = function (plyerId, params) {
                var setting;
                switch (plyerId.toString()) {
                    case "1":
                        setting = {
                            "name": "Syndication01",
                            "movie_width": "640",
                            "movie_height": "360",
                            "movie_aspect": "16:9",
                            "movie_protocol": "rtmp",
                            "play_use": "on",
                            "volume_use": "on",
                            "seak_use": "on",
                            "fullscreen_use": "on",
                            "footer_use": "off",
                            "title_use": "on",
                            "init_sound": "on",
                            "init_play": "off",
                            "embed_width": "640",
                            "embed_height": "360",
                            "va_use": "on",
                            "exlink_use": "on",
                            "tag_use": "off",
                            "multibitrate_use": "on",
                            "sns_use": "off"
                        };
                        break;
                    case "2":
                        setting = {
                            "name": "Syndication02",
                            "movie_width": "640",
                            "movie_height": "360",
                            "movie_aspect": "16:9",
                            "movie_protocol": "rtmp",
                            "play_use": "on",
                            "volume_use": "on",
                            "seak_use": "on",
                            "fullscreen_use": "on",
                            "footer_use": "off",
                            "title_use": "on",
                            "init_sound": "on",
                            "init_play": "off",
                            "embed_width": "640",
                            "embed_height": "360",
                            "va_use": "on",
                            "exlink_use": "on",
                            "tag_use": "off",
                            "multibitrate_use": "on",
                            "sns_use": "on",
                            "sns_id_list": ["facebook", "twitter", "line", "google"]
                        };
                        break;
                    case "3":
                        setting = {
                            "name": "Syndication03",
                            "movie_width": "640",
                            "movie_height": "360",
                            "movie_aspect": "16:9",
                            "movie_protocol": "rtmp",
                            "play_use": "on",
                            "volume_use": "on",
                            "seak_use": "on",
                            "fullscreen_use": "on",
                            "footer_use": "off",
                            "title_use": "on",
                            "init_sound": "on",
                            "init_play": "off",
                            "embed_width": "640",
                            "embed_height": "360",
                            "va_use": "on",
                            "exlink_use": "on",
                            "tag_use": "off",
                            "multibitrate_use": "on",
                            "sns_use": "off"
                        };
                        break;
                    case "4":
                        setting = {
                            "name": "Syndication04",
                            "movie_width": "640",
                            "movie_height": "360",
                            "movie_aspect": "16:9",
                            "movie_protocol": "rtmp",
                            "play_use": "on",
                            "volume_use": "on",
                            "seak_use": "on",
                            "fullscreen_use": "on",
                            "footer_use": "off",
                            "title_use": "on",
                            "init_sound": "on",
                            "init_play": "off",
                            "embed_width": "640",
                            "embed_height": "360",
                            "va_use": "on",
                            "exlink_use": "off",
                            "tag_use": "off",
                            "multibitrate_use": "on",
                            "sns_use": "on",
                            "sns_id_list": ["facebook", "twitter", "line", "google"]
                        };
                        break;
                    case "5":
                        setting = {
                            "name": "Syndication05",
                            "movie_width": "640",
                            "movie_height": "360",
                            "movie_aspect": "16:9",
                            "movie_protocol": "rtmp",
                            "play_use": "on",
                            "volume_use": "on",
                            "seak_use": "on",
                            "fullscreen_use": "on",
                            "footer_use": "off",
                            "title_use": "on",
                            "init_sound": "on",
                            "init_play": "off",
                            "embed_width": "640",
                            "embed_height": "360",
                            "va_use": "on",
                            "exlink_use": "off",
                            "tag_use": "off",
                            "multibitrate_use": "on",
                            "sns_use": "off"
                        };
                        break;
                    case "101":
                        setting = {
                            "name": "Syndication101",
                            "movie_width": "640",
                            "movie_height": "360",
                            "movie_aspect": "16:9",
                            "movie_protocol": "rtmp",
                            "play_use": "on",
                            "volume_use": "on",
                            "seak_use": "on",
                            "fullscreen_use": "on",
                            "footer_use": "off",
                            "title_use": "on",
                            "init_sound": "on",
                            "init_play": "on",
                            "embed_width": "640",
                            "embed_height": "360",
                            "va_use": "on",
                            "exlink_use": "on",
                            "tag_use": "off",
                            "multibitrate_use": "on",
                            "sns_use": "off"
                        };
                        break;
                    case "102":
                        setting = {
                            "name": "Syndication102",
                            "movie_width": "640",
                            "movie_height": "360",
                            "movie_aspect": "16:9",
                            "movie_protocol": "rtmp",
                            "play_use": "on",
                            "volume_use": "on",
                            "seak_use": "on",
                            "fullscreen_use": "on",
                            "footer_use": "off",
                            "title_use": "on",
                            "init_sound": "on",
                            "init_play": "on",
                            "embed_width": "640",
                            "embed_height": "360",
                            "va_use": "on",
                            "exlink_use": "on",
                            "tag_use": "off",
                            "multibitrate_use": "on",
                            "sns_use": "on",
                            "sns_id_list": ["facebook", "twitter", "line", "google"]
                        };
                        break;
                    case "103":
                        setting = {
                            "name": "Syndication103",
                            "movie_width": "640",
                            "movie_height": "360",
                            "movie_aspect": "16:9",
                            "movie_protocol": "rtmp",
                            "play_use": "on",
                            "volume_use": "on",
                            "seak_use": "on",
                            "fullscreen_use": "on",
                            "footer_use": "off",
                            "title_use": "on",
                            "init_sound": "on",
                            "init_play": "on",
                            "embed_width": "640",
                            "embed_height": "360",
                            "va_use": "on",
                            "exlink_use": "on",
                            "tag_use": "off",
                            "multibitrate_use": "on",
                            "sns_use": "off"
                        };
                        break;
                    case "104":
                        setting = {
                            "name": "Syndication104",
                            "movie_width": "640",
                            "movie_height": "360",
                            "movie_aspect": "16:9",
                            "movie_protocol": "rtmp",
                            "play_use": "on",
                            "volume_use": "on",
                            "seak_use": "on",
                            "fullscreen_use": "on",
                            "footer_use": "off",
                            "title_use": "on",
                            "init_sound": "on",
                            "init_play": "on",
                            "embed_width": "640",
                            "embed_height": "360",
                            "va_use": "on",
                            "exlink_use": "off",
                            "tag_use": "off",
                            "multibitrate_use": "on",
                            "sns_use": "on",
                            "sns_id_list": ["facebook", "twitter", "line", "google"]
                        };
                        break;
                    case "105":
                        setting = {
                            "name": "Syndication105",
                            "movie_width": "640",
                            "movie_height": "360",
                            "movie_aspect": "16:9",
                            "movie_protocol": "rtmp",
                            "play_use": "on",
                            "volume_use": "on",
                            "seak_use": "on",
                            "fullscreen_use": "on",
                            "footer_use": "off",
                            "title_use": "on",
                            "init_sound": "on",
                            "init_play": "on",
                            "embed_width": "640",
                            "embed_height": "360",
                            "va_use": "on",
                            "exlink_use": "off",
                            "tag_use": "off",
                            "multibitrate_use": "on",
                            "sns_use": "off"
                        };
                        break;
                }
                for (var key in setting) {
                    params[key] = setting[key];
                }
            };
            return PlayerSetting;
        }());
        utils.PlayerSetting = PlayerSetting;
    })(utils = jstream_t3.utils || (jstream_t3.utils = {}));
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3) {
    var model;
    (function (model) {
        var NetServiceModel = (function () {
            function NetServiceModel() {
            }
            return NetServiceModel;
        }());
        model.NetServiceModel = NetServiceModel;
    })(model = jstream_t3.model || (jstream_t3.model = {}));
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3) {
    var view;
    (function (view) {
        var AlertView = (function () {
            function AlertView() {
            }
            AlertView.show = function (message, title, parentElementId, cssDir) {
                if (title === void 0) { title = ""; }
                if (parentElementId === void 0) { parentElementId = null; }
                if (cssDir === void 0) { cssDir = ""; }
                var errorAlert = '<div class="errorDialog" style="top:0px;left:0px;right:0px;bottom:0px;margin:auto;height:134px"><div class="errorDialogHeader"><div class="hl"><img src="' + cssDir + 'e_ico.png"" style="margin-right:10px;" />#head</div><div class="hr"></div></div><div class="errorContent"><div class="bl"><p id="jsterrormessage">#message</p></div><div class="br"></div></div></div>';
                var targetElement = !parentElementId ? document.body : document.getElementById(parentElementId);
                if (targetElement.clientWidth < 240 || targetElement.clientHeight < 180) {
                    errorAlert = errorAlert.split("#head").join("");
                    errorAlert = errorAlert.split("#message").join(message);
                }
                else {
                    errorAlert = errorAlert.split("#head").join(title);
                    errorAlert = errorAlert.split("#message").join(message);
                }
                targetElement.innerHTML = errorAlert;
                var bl = targetElement.getElementsByTagName("p")[0];
                bl.style.top = ((84 - bl.clientHeight) / 2).toString() + 'px';
            };
            return AlertView;
        }());
        view.AlertView = AlertView;
    })(view = jstream_t3.view || (jstream_t3.view = {}));
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3) {
    var resource;
    (function (resource) {
        var LanguageKinds = (function () {
            function LanguageKinds() {
            }
            return LanguageKinds;
        }());
        resource.LanguageKinds = LanguageKinds;
        var LanguageResource = (function () {
            function LanguageResource(languageResouce) {
                if (languageResouce === void 0) { languageResouce = null; }
                this.kinds = new LanguageKinds();
                this.setUp();
                if (languageResouce != null) {
                    this.setUpResource(languageResouce);
                }
            }
            LanguageResource.kinds = function () {
                if (jstream_t3.resource["LanguageResource_kinds"] == null) {
                    var language = new LanguageResource();
                    jstream_t3.resource["LanguageResource_kinds"] = language.kinds;
                }
                return jstream_t3.resource["LanguageResource_kinds"];
            };
            LanguageResource.prototype.getMessage = function (type) {
                return this.kinds[type];
            };
            LanguageResource.prototype.setUp = function () {
                if (jstream_t3.utils.Util.browserLanguage() == "ja") {
                    this.kinds.ERROR_LIMIT = "現在、非公開です。";
                    this.kinds.ERROR_LIMIT_MESSAGE = "この動画は現在公開されておりません(P5001)";
                    this.kinds.ERROR_LIMIT_PRE_TITLE = "公開期間前です。";
                    this.kinds.ERROR_LIMIT_PRE_MESSAGE = "この動画はまだ公開されておりません(P5002)";
                    this.kinds.ERROR_LIMIT_OVER_TITLE = "公開が終了しています。";
                    this.kinds.ERROR_LIMIT_OVER_MESSAGE = "この動画の公開は終了しました(P5003)";
                    this.kinds.ERROR_META_DATA_TITLE = "動画情報の読み込みに失敗しました。";
                    this.kinds.ERROR_META_DATA_MESSAGE = "この動画は配信者によって削除されたか、現在、変換処理中の可能性があります。(P1001)";
                    this.kinds.ERROR_SETTING_TITLE = "プレイヤー設定情報の読み込みに失敗しました";
                    this.kinds.ERROR_SETTING_DELETE = "このプレイヤーは配信者によって削除された可能性があります。(P0501)";
                    this.kinds.ERROR_ENV_TITLE = "再生が許可されていません。";
                    this.kinds.ERROR_ENV_MESSAGE = "この動画は、再生が許可されていません。(P5101:_STATUS_)";
                    this.kinds.ERROR_CID_ILLEGAL_TITLE = "動画情報の読み込みに失敗しました。";
                    this.kinds.ERROR_CID_ILLEGAL_MESSAGE = "動画情報が正しくありませんでした。(P0201)";
                    this.kinds.SHARE_MOVIE = "この動画を共有";
                    this.kinds.LINKS = "関連ページ";
                    this.kinds.MOVIES = "関連動画";
                    this.kinds.VIRALTAG_TITLE = "バイラルタグで共有";
                    this.kinds.VIRALTAG = "バイラルタグを取得";
                    this.kinds.VIRALTAG_BTN = "バイラルタグをコピー";
                    this.kinds.AUTH = "入力してください";
                    this.kinds.ERROR_AUTH = "認証に失敗しました";
                    this.kinds.ID = "ID";
                    this.kinds.PASS = "パスワード";
                    this.kinds.PLAY = "動画を見る";
                    this.kinds.Replay = "もう一度見る";
                    this.kinds.Speed = "速度";
                    this.kinds.Caption = "字幕";
                    this.kinds.Quality = "画質";
                    this.kinds.Label_Low = "低画質";
                    this.kinds.Label_Standard = "標準画質";
                    this.kinds.Label_High = "高画質";
                    this.kinds.Label_HD = "ＨＤ";
                    this.kinds.Label_FullHD = "フルＨＤ";
                    this.kinds.Label_4K = "４Ｋ";
                    this.kinds.Label_Auto = "自動";
                    this.kinds.ERROR_TITLE = "エラー";
                    this.kinds.ERROR_MOVIE_NOT_FOUND = "動画ファイルが見つかりません。(P7011)";
                    this.kinds.ERROR_MOVIE_NOT_FOUND_2 = "動画ファイルが見つかりません。(P7012)";
                    this.kinds.ERROR_NO_FLASH_TITLE = "FlashPlayerがみつかりません。";
                    this.kinds.ERROR_NO_FLASH_MESSAGE = '<span style="color:#fff">動画の再生にはFlash Playerが必要です。<br /><a target="_blank" href="//www.adobe.com/go/getflashplayer" style="color:#ff0;" >Flash Playerをインストールしてください。</a>(P0102)</span>';
                    this.kinds.ERROR_NO_FLASH_ANDROID_TITLE = "FlashPlayerがみつかりません。";
                    this.kinds.ERROR_NO_FLASH_ANDROID_MESSAGE = "お使いの端末ではFlash Playerがサポートされていないため、動画を視聴することができません。(P0103)";
                    this.kinds.ERROR_SERVICE_TITLE = "サービス設定情報の読み込みに失敗しました";
                    this.kinds.ERROR_SERVICE_DELETE = "サービス設定情報の読み込みに失敗しました(P2001)";
                    this.kinds.ERROR_LIVE_RELOAD = "ライブが中断されました。<br />しばらくしてからリロードをお試し下さい。(P7101)";
                    this.kinds.P1201T = "ライブ情報の読み込みに失敗しました。";
                    this.kinds.P1201M = "このライブ配信はキャンセルされた可能性があります。(P1201)";
                    this.kinds.P3001T = "ライブ状態の読み込みに失敗しました。";
                    this.kinds.P3001M = "ページのリロードをお試しください。(P3001)";
                    this.kinds.P3501T = "ライブ状態の読み込みに失敗しました。";
                    this.kinds.P3501M = "ページのリロードをお試しください。(P3501)";
                    this.kinds.P3502M = "ページをリロード頂くか、しばらくたってからアクセスしなおしてください。(P3502)";
                    this.kinds.P3503M = "ページをリロード頂くか、しばらくたってからアクセスしなおしてください。(P3503)";
                    this.kinds.P3502T = "視聴者数が制限されているか、回線状態がよくありません";
                    this.kinds.P3503T = "動画情報の読み込みができませんでした";
                    this.kinds.P8001T = "ネットワークエラー";
                    this.kinds.P8001M = "読み込みに失敗しました。ネットワーク環境をご確認頂き、リロードをお試しください。(P8001)";
                    this.kinds.P8002T = "ネットワークエラー";
                    this.kinds.P8002M = "読み込みに失敗しました。ネットワーク環境をご確認頂き、リロードをお試しください。(P8002)";
                    this.kinds.P8003T = "ネットワークエラー";
                    this.kinds.P8003M = "読み込みに失敗しました。ネットワーク環境をご確認頂き、リロードをお試しください。(P8003)";
                    this.kinds.P8004T = "ネットワークエラー";
                    this.kinds.P8004M = "読み込みに失敗しました。ネットワーク環境をご確認頂き、リロードをお試しください。(P8004)";
                    this.kinds.P8005T = "ネットワークエラー";
                    this.kinds.P8005M = "読み込みに失敗しました。ネットワーク環境をご確認頂き、リロードをお試しください。(P8005)";
                    this.kinds.P8006T = "ネットワークエラー";
                    this.kinds.P8006M = "読み込みに失敗しました。ネットワーク環境をご確認頂き、リロードをお試しください。(P8006)";
                    this.kinds.P8007T = "ネットワークエラー";
                    this.kinds.P8007M = "読み込みに失敗しました。ネットワーク環境をご確認頂き、リロードをお試しください。(P8007)";
                    this.kinds.P8008T = "ネットワークエラー";
                    this.kinds.P8008M = "読み込みに失敗しました。ネットワーク環境をご確認頂き、リロードをお試しください。(P8008)";
                    this.kinds.P8009T = "ネットワークエラー";
                    this.kinds.P8009M = "読み込みに失敗しました。ネットワーク環境をご確認頂き、リロードをお試しください。(P8009)";
                    this.kinds.P8010T = "ネットワークエラー";
                    this.kinds.P8010M = "読み込みに失敗しました。ネットワーク環境をご確認頂き、リロードをお試しください。(P8010)";
                    this.kinds.P8011T = "メディアエラー";
                    this.kinds.P8011M = "読み込みに失敗しました。ネットワーク環境をご確認頂き、リロードをお試しください。(P8011)";
                    this.kinds.P8012T = "メディアエラー";
                    this.kinds.P8012M = "読み込みに失敗しました。ネットワーク環境をご確認頂き、リロードをお試しください。(P8012)";
                    this.kinds.P8013T = "メディアエラー";
                    this.kinds.P8013M = "読み込みに失敗しました。ネットワーク環境をご確認頂き、リロードをお試しください。(P8013)";
                    this.kinds.P8014T = "メディアエラー";
                    this.kinds.P8014M = "読み込みに失敗しました。ネットワーク環境をご確認頂き、リロードをお試しください。(P8014)";
                    this.kinds.P8015T = "メディアエラー";
                    this.kinds.P8015M = "読み込みに失敗しました。ネットワーク環境をご確認頂き、リロードをお試しください。(P8015)";
                    this.kinds.P8016T = "メディアエラー";
                    this.kinds.P8016M = "読み込みに失敗しました。ネットワーク環境をご確認頂き、リロードをお試しください。(P8016)";
                    this.kinds.P8017T = "メディアエラー";
                    this.kinds.P8017M = "読み込みに失敗しました。ネットワーク環境をご確認頂き、リロードをお試しください。(P8017)";
                    this.kinds.P8018T = "エラー";
                    this.kinds.P8018M = "読み込みに失敗しました。ネットワーク環境をご確認頂き、リロードをお試しください。(P8018)";
                    this.kinds.P8019T = "メディアエラー";
                    this.kinds.P8019M = "読み込みに失敗しました。ネットワーク環境をご確認頂き、リロードをお試しください。(P8019)";
                    this.kinds.P8020T = "メディアエラー";
                    this.kinds.P8020M = "読み込みに失敗しました。ネットワーク環境をご確認頂き、リロードをお試しください。(P8020)";
                    this.kinds.P8021T = "メディアエラー";
                    this.kinds.P8021M = "読み込みに失敗しました。ネットワーク環境をご確認頂き、リロードをお試しください。(P8021)";
                    this.kinds.P8022T = "エラー";
                    this.kinds.P8022M = "読み込みに失敗しました。ネットワーク環境をご確認頂き、リロードをお試しください。(P8022)";
                    this.kinds.P8000T = "エラー";
                    this.kinds.P8000M = "読み込みに失敗しました。ネットワーク環境をご確認頂き、リロードをお試しください。(P8000)";
                    return;
                }
                else {
                    this.kinds.ERROR_LIMIT = "Content Not Available";
                    this.kinds.ERROR_LIMIT_MESSAGE = "This content is not currently available.<br />This content is only available for a limited term.(P5001)";
                    this.kinds.ERROR_LIMIT_PRE_TITLE = "Content Not Available";
                    this.kinds.ERROR_LIMIT_PRE_MESSAGE = "This content is not in public yet.<br />This content will be available in the near future.(P5002)";
                    this.kinds.ERROR_LIMIT_OVER_TITLE = "Content Not Available";
                    this.kinds.ERROR_LIMIT_OVER_MESSAGE = "This content has been expired.<br />This content was only available for a limited term(P5003)";
                    this.kinds.ERROR_META_DATA_TITLE = "Player failed to load this content information";
                    this.kinds.ERROR_SETTING_TITLE = "Failed to load configuration files of this player";
                    this.kinds.ERROR_SETTING_DELETE = "This player configuration may have been deleted by the publisher.(P0501)";
                    this.kinds.ERROR_ENV_TITLE = "Unauthorized content.";
                    this.kinds.ERROR_ENV_MESSAGE = "Unauthorized content.(P5101:_STATUS_)";
                    this.kinds.SHARE_MOVIE = "Share This Content";
                    this.kinds.ERROR_META_DATA_MESSAGE = "This content has been deleted or is being converted. (P1001)";
                    this.kinds.ERROR_CID_ILLEGAL_TITLE = "Failed to load this content information";
                    this.kinds.ERROR_CID_ILLEGAL_MESSAGE = "Illegal data exists in content information.(P0201)";
                    this.kinds.LINKS = "Related Link";
                    this.kinds.MOVIES = "Related Movie";
                    this.kinds.VIRALTAG_TITLE = "Viral Tag";
                    this.kinds.VIRALTAG = "Viral Tag";
                    this.kinds.VIRALTAG_BTN = "Copy Viral Tag";
                    this.kinds.AUTH = "Enter ID/PW";
                    this.kinds.ERROR_AUTH = "Invalid ID or PW";
                    this.kinds.ID = "ID";
                    this.kinds.PASS = "PASSWORD";
                    this.kinds.PLAY = "PLAY";
                    this.kinds.Label_Low = "Low";
                    this.kinds.Label_Standard = "Standard";
                    this.kinds.Label_High = "High";
                    this.kinds.Label_HD = "HD";
                    this.kinds.Label_FullHD = "FullHD";
                    this.kinds.Label_4K = "4K";
                    this.kinds.Label_Auto = "AUTO";
                    this.kinds.Replay = "Replay";
                    this.kinds.Speed = "Speed";
                    this.kinds.Caption = "Caption";
                    this.kinds.Quality = "Quality";
                    this.kinds.ERROR_TITLE = "Error";
                    this.kinds.ERROR_MOVIE_NOT_FOUND = "Movie not found(P7011)";
                    this.kinds.ERROR_MOVIE_NOT_FOUND_2 = "Movie not found(P7012)";
                    this.kinds.ERROR_NO_FLASH_TITLE = "flashPlayer not found";
                    this.kinds.ERROR_NO_FLASH_MESSAGE = '<span style="color:#fff">Require "Flash Player" to play this content. Please<br /><a target="_blank" href="//www.adobe.com/go/getflashplayer" style="color:#ff0">install the Flash Player.</a>(P0102)</span>';
                    this.kinds.ERROR_NO_FLASH_ANDROID_TITLE = "flashPlayer not found";
                    this.kinds.ERROR_NO_FLASH_ANDROID_MESSAGE = "This content is unavailable to you because your device doesn't support Flash Player.(P0103)";
                    this.kinds.ERROR_SERVICE_TITLE = "Failed to load configuration files of this serivce";
                    this.kinds.ERROR_SERVICE_DELETE = "This service configuration may have been deleted by the publisher.(P2001)";
                    this.kinds.ERROR_LIVE_RELOAD = "Live broadcast is interrupted.<br />Please try reload this page.(P7101)";
                    this.kinds.P1201T = "Player failed to load this live information";
                    this.kinds.P1201M = "This live may be canceled.(P1201)";
                    this.kinds.P3001T = "Player failed to load live status.";
                    this.kinds.P3001M = "Please try reload this page.(P3001)";
                    this.kinds.P3501T = "Player failed to load live status.";
                    this.kinds.P3501M = "Please try reload this page.(P3501)";
                    this.kinds.P3502M = "Please reload the page or access it again after a while.(P3502)";
                    this.kinds.P3503M = "Please reload the page or access it again after a while.(P3503)";
                    this.kinds.P3502T = "Player failed to load content information.";
                    this.kinds.P3503T = "Player failed to load content information.";
                    this.kinds.P8001T = "Network Error";
                    this.kinds.P8001M = "Failed to load.<br>To recconect the session, reload this page please.(P8001)";
                    this.kinds.P8002T = "Network Error";
                    this.kinds.P8002M = "Failed to load.<br>To recconect the session, reload this page please.(P8002)";
                    this.kinds.P8003T = "Network Error";
                    this.kinds.P8003M = "Failed to load.<br>To recconect the session, reload this page please.(P8003)";
                    this.kinds.P8004T = "Network Error";
                    this.kinds.P8004M = "Failed to load.<br>To recconect the session, reload this page please.(P8004)";
                    this.kinds.P8005T = "Network Error";
                    this.kinds.P8005M = "Failed to load.<br>To recconect the session, reload this page please.(P8005)";
                    this.kinds.P8006T = "Network Error";
                    this.kinds.P8006M = "Failed to load.<br>To recconect the session, reload this page please.(P8006)";
                    this.kinds.P8007T = "Network Error";
                    this.kinds.P8007M = "Failed to load.<br>To recconect the session, reload this page please.(P8007)";
                    this.kinds.P8008T = "Network Error";
                    this.kinds.P8008M = "Failed to load.<br>To recconect the session, reload this page please.(P8008)";
                    this.kinds.P8009T = "Network Error";
                    this.kinds.P8009M = "Failed to load.<br>To recconect the session, reload this page please.(P8009)";
                    this.kinds.P8010T = "Network Error";
                    this.kinds.P8010M = "Failed to load.<br>To recconect the session, reload this page please.(P8010)";
                    this.kinds.P8011T = "Media Error";
                    this.kinds.P8011M = "Failed to load.<br>To recconect the session, reload this page please.(P8011)";
                    this.kinds.P8012T = "Media Error";
                    this.kinds.P8012M = "Failed to load.<br>To recconect the session, reload this page please.(P8012)";
                    this.kinds.P8013T = "Media Error";
                    this.kinds.P8013M = "Failed to load.<br>To recconect the session, reload this page please.(P8013)";
                    this.kinds.P8014T = "Media Error";
                    this.kinds.P8014M = "Failed to load.<br>To recconect the session, reload this page please.(P8014)";
                    this.kinds.P8015T = "Media Error";
                    this.kinds.P8015M = "Failed to load.<br>To recconect the session, reload this page please.(P8015)";
                    this.kinds.P8016T = "Media Error";
                    this.kinds.P8016M = "Failed to load.<br>To recconect the session, reload this page please.(P8016)";
                    this.kinds.P8017T = "Media Error";
                    this.kinds.P8017M = "Failed to load.<br>To recconect the session, reload this page please.(P8017)";
                    this.kinds.P8018T = "Other Error";
                    this.kinds.P8018M = "Failed to load.<br>To recconect the session, reload this page please.(P8018)";
                    this.kinds.P8019T = "Other Error";
                    this.kinds.P8019M = "Failed to load.<br>To recconect the session, reload this page please.(P8019)";
                    this.kinds.P8020T = "Other Error";
                    this.kinds.P8020M = "Failed to load.<br>To recconect the session, reload this page please.(P8020)";
                    this.kinds.P8021T = "Other Error";
                    this.kinds.P8021M = "Failed to load.<br>To recconect the session, reload this page please.(P8021)";
                    this.kinds.P8022T = "Other Error";
                    this.kinds.P8022M = "Failed to load.<br>To recconect the session, reload this page please.(P8022)";
                    this.kinds.P8000T = "Other Error";
                    this.kinds.P8000M = "Failed to load.<br>To recconect the session, reload this page please.(P8000)";
                }
            };
            LanguageResource.prototype.setUpResource = function (languageResouce) {
                this.kinds.ERROR_LIMIT = (languageResouce["title_P5001"] != null) ? languageResouce["title_P5001"] : this.kinds.ERROR_LIMIT;
                this.kinds.ERROR_LIMIT_MESSAGE = (languageResouce["info_P5001"] != null) ? languageResouce["info_P5001"] : this.kinds.ERROR_LIMIT_MESSAGE;
                this.kinds.ERROR_LIMIT_PRE_TITLE = (languageResouce["title_P5002"] != null) ? languageResouce["title_P5002"] : this.kinds.ERROR_LIMIT_PRE_TITLE;
                this.kinds.ERROR_LIMIT_PRE_MESSAGE = (languageResouce["info_P5002"] != null) ? languageResouce["info_P5002"] : this.kinds.ERROR_LIMIT_PRE_MESSAGE;
                this.kinds.ERROR_LIMIT_OVER_TITLE = (languageResouce["title_P5003"] != null) ? languageResouce["title_P5003"] : this.kinds.ERROR_LIMIT_OVER_TITLE;
                this.kinds.ERROR_LIMIT_OVER_MESSAGE = (languageResouce["info_P5003"] != null) ? languageResouce["info_P5003"] : this.kinds.ERROR_LIMIT_OVER_MESSAGE;
                this.kinds.ERROR_META_DATA_TITLE = (languageResouce["title_P1001"] != null) ? languageResouce["title_P1001"] : this.kinds.ERROR_META_DATA_TITLE;
                this.kinds.ERROR_META_DATA_MESSAGE = (languageResouce["info_P1001"] != null) ? languageResouce["info_P1001"] : this.kinds.ERROR_META_DATA_MESSAGE;
                this.kinds.ERROR_SETTING_TITLE = (languageResouce["title_P0501"] != null) ? languageResouce["title_P0501"] : this.kinds.ERROR_SETTING_TITLE;
                this.kinds.ERROR_SETTING_DELETE = (languageResouce["info_P0501"] != null) ? languageResouce["info_P0501"] : this.kinds.ERROR_SETTING_DELETE;
                this.kinds.ERROR_ENV_TITLE = (languageResouce["title_P5101"] != null) ? languageResouce["title_P5101"] : this.kinds.ERROR_ENV_TITLE;
                this.kinds.ERROR_ENV_MESSAGE = (languageResouce["info_P5101"] != null) ? languageResouce["info_P5101"] : this.kinds.ERROR_ENV_MESSAGE;
                this.kinds.ERROR_CID_ILLEGAL_TITLE = this.kinds.ERROR_CID_ILLEGAL_TITLE;
                this.kinds.ERROR_CID_ILLEGAL_MESSAGE = this.kinds.ERROR_CID_ILLEGAL_MESSAGE;
                this.kinds.SHARE_MOVIE = (languageResouce["title_share_movie"] != null) ? languageResouce["title_share_movie"] : this.kinds.ERROR_LIMIT;
                this.kinds.LINKS = (languageResouce["title_links"] != null) ? languageResouce["title_links"] : this.kinds.LINKS;
                this.kinds.VIRALTAG_TITLE = (languageResouce["viral_tag_title"] != null) ? languageResouce["viral_tag_title"] : this.kinds.VIRALTAG_TITLE;
                this.kinds.VIRALTAG = (languageResouce["title_viral_tag"] != null) ? languageResouce["title_viral_tag"] : this.kinds.VIRALTAG;
                this.kinds.VIRALTAG_BTN = (languageResouce["btn_viral_tag"] != null) ? languageResouce["btn_viral_tag"] : this.kinds.VIRALTAG_BTN;
                this.kinds.AUTH = (languageResouce["title_auth"] != null) ? languageResouce["title_auth"] : this.kinds.AUTH;
                this.kinds.ERROR_AUTH = (languageResouce["title_auth_error"] != null) ? languageResouce["title_auth_error"] : this.kinds.ERROR_AUTH;
                this.kinds.ID = (languageResouce["hint_id"] != null) ? languageResouce["hint_id"] : this.kinds.ID;
                this.kinds.PASS = (languageResouce["hint_pass"] != null) ? languageResouce["hint_pass"] : this.kinds.PASS;
                this.kinds.PLAY = (languageResouce["btn_play"] != null) ? languageResouce["btn_play"] : this.kinds.PLAY;
                this.kinds.Label_Low = (languageResouce["label_Low"] != null) ? languageResouce["label_Low"] : this.kinds.Label_Low;
                this.kinds.Label_Standard = (languageResouce["label_Standard"] != null) ? languageResouce["label_Standard"] : this.kinds.Label_Standard;
                this.kinds.Label_High = (languageResouce["label_High"] != null) ? languageResouce["label_High"] : this.kinds.Label_High;
                this.kinds.Label_HD = (languageResouce["label_HD"] != null) ? languageResouce["label_HD"] : this.kinds.Label_HD;
                this.kinds.Label_FullHD = (languageResouce["label_FullHD"] != null) ? languageResouce["label_FullHD"] : this.kinds.Label_FullHD;
                this.kinds.Label_4K = (languageResouce["label_4K"] != null) ? languageResouce["label_4K"] : this.kinds.Label_4K;
                this.kinds.Label_4K = (languageResouce["label_Auto"] != null) ? languageResouce["label_Auto"] : this.kinds.Label_Auto;
                this.kinds.Replay = (languageResouce["label_replay"] != null) ? languageResouce["label_replay"] : this.kinds.Replay;
                this.kinds.Speed = (languageResouce["label_speed"] != null) ? languageResouce["label_speed"] : this.kinds.Speed;
                this.kinds.Caption = (languageResouce["label_caption"] != null) ? languageResouce["label_caption"] : this.kinds.Caption;
                this.kinds.Quality = (languageResouce["label_quality"] != null) ? languageResouce["label_quality"] : this.kinds.Quality;
                this.kinds.ERROR_TITLE = (languageResouce["title_P7011"] != null) ? languageResouce["title_P7011"] : this.kinds.ERROR_TITLE;
                this.kinds.ERROR_MOVIE_NOT_FOUND = (languageResouce["info_P7011"] != null) ? languageResouce["info_P7011"] : this.kinds.ERROR_MOVIE_NOT_FOUND;
                this.kinds.ERROR_MOVIE_NOT_FOUND = (languageResouce["info_P7012"] != null) ? languageResouce["info_P7012"] : this.kinds.ERROR_MOVIE_NOT_FOUND_2;
                this.kinds.ERROR_NO_FLASH_TITLE = (languageResouce["title_P0102"] != null) ? languageResouce["title_P0102"] : this.kinds.ERROR_NO_FLASH_TITLE;
                this.kinds.ERROR_NO_FLASH_MESSAGE = (languageResouce["info_P0102"] != null) ? languageResouce["info_P0102"] : this.kinds.ERROR_NO_FLASH_MESSAGE;
                this.kinds.ERROR_NO_FLASH_ANDROID_TITLE = (languageResouce["title_P0103"] != null) ? languageResouce["title_P0103"] : this.kinds.ERROR_NO_FLASH_ANDROID_TITLE;
                this.kinds.ERROR_NO_FLASH_ANDROID_MESSAGE = (languageResouce["info_P0103"] != null) ? languageResouce["info_P0103"] : this.kinds.ERROR_NO_FLASH_ANDROID_MESSAGE;
                this.kinds.ERROR_SERVICE_TITLE = (languageResouce["title_P2001"] != null) ? languageResouce["title_P2001"] : this.kinds.ERROR_SERVICE_TITLE;
                this.kinds.ERROR_SERVICE_DELETE = (languageResouce["info_P2001"] != null) ? languageResouce["info_P2001"] : this.kinds.ERROR_SERVICE_DELETE;
                this.kinds.ERROR_LIVE_RELOAD = (languageResouce["info_P7101"] != null) ? languageResouce["info_P7101"] : this.kinds.ERROR_LIVE_RELOAD;
                this.kinds.P1201T = (languageResouce["title_P1201"] != null) ? languageResouce["title_P1201"] : this.kinds.P1201T;
                this.kinds.P1201M = (languageResouce["info_P1201"] != null) ? languageResouce["info_P1201"] : this.kinds.P1201M;
                this.kinds.P3501T = (languageResouce["title_P3501"] != null) ? languageResouce["title_P3501"] : this.kinds.P3501T;
                this.kinds.P3501M = (languageResouce["info_P3501"] != null) ? languageResouce["info_P3501"] : this.kinds.P3501M;
                this.kinds.P8001T = (languageResouce["title_P8001"] != null) ? languageResouce["title_P8001"] : this.kinds.P8001T;
                this.kinds.P8001M = (languageResouce["info_P8001"] != null) ? languageResouce["info_P8001"] : this.kinds.P8001M;
                this.kinds.P8002T = (languageResouce["title_P8002"] != null) ? languageResouce["title_P8002"] : this.kinds.P8002T;
                this.kinds.P8002M = (languageResouce["info_P8002"] != null) ? languageResouce["info_P8002"] : this.kinds.P8002M;
                this.kinds.P8003T = (languageResouce["title_P8003"] != null) ? languageResouce["title_P8003"] : this.kinds.P8003T;
                this.kinds.P8003M = (languageResouce["info_P8003"] != null) ? languageResouce["info_P8003"] : this.kinds.P8003M;
                this.kinds.P8004T = (languageResouce["title_P8004"] != null) ? languageResouce["title_P8004"] : this.kinds.P8004T;
                this.kinds.P8004M = (languageResouce["info_P8004"] != null) ? languageResouce["info_P8004"] : this.kinds.P8004M;
                this.kinds.P8005T = (languageResouce["title_P8005"] != null) ? languageResouce["title_P8005"] : this.kinds.P8005T;
                this.kinds.P8005M = (languageResouce["info_P8005"] != null) ? languageResouce["info_P8005"] : this.kinds.P8005M;
                this.kinds.P8006T = (languageResouce["title_P8006"] != null) ? languageResouce["title_P8006"] : this.kinds.P8006T;
                this.kinds.P8006M = (languageResouce["info_P8006"] != null) ? languageResouce["info_P8006"] : this.kinds.P8006M;
                this.kinds.P8007T = (languageResouce["title_P8007"] != null) ? languageResouce["title_P8007"] : this.kinds.P8007T;
                this.kinds.P8007M = (languageResouce["info_P8007"] != null) ? languageResouce["info_P8007"] : this.kinds.P8007M;
                this.kinds.P8008T = (languageResouce["title_P8008"] != null) ? languageResouce["title_P8008"] : this.kinds.P8008T;
                this.kinds.P8008M = (languageResouce["info_P8008"] != null) ? languageResouce["info_P8008"] : this.kinds.P8008M;
                this.kinds.P8009T = (languageResouce["title_P8009"] != null) ? languageResouce["title_P8009"] : this.kinds.P8009T;
                this.kinds.P8009M = (languageResouce["info_P8009"] != null) ? languageResouce["info_P8009"] : this.kinds.P8009M;
                this.kinds.P8010T = (languageResouce["title_P8010"] != null) ? languageResouce["title_P8010"] : this.kinds.P8010T;
                this.kinds.P8010M = (languageResouce["info_P8010"] != null) ? languageResouce["info_P8010"] : this.kinds.P8010M;
                this.kinds.P8011T = (languageResouce["title_P8011"] != null) ? languageResouce["title_P8011"] : this.kinds.P8011T;
                this.kinds.P8011M = (languageResouce["info_P8014"] != null) ? languageResouce["info_P8011"] : this.kinds.P8011M;
                this.kinds.P8012T = (languageResouce["title_P8012"] != null) ? languageResouce["title_P8012"] : this.kinds.P8012T;
                this.kinds.P8012M = (languageResouce["info_P8012"] != null) ? languageResouce["info_P8012"] : this.kinds.P8012M;
                this.kinds.P8013T = (languageResouce["title_P8013"] != null) ? languageResouce["title_P8013"] : this.kinds.P8013T;
                this.kinds.P8013M = (languageResouce["info_P8013"] != null) ? languageResouce["info_P8013"] : this.kinds.P8013M;
                this.kinds.P8014T = (languageResouce["title_P8014"] != null) ? languageResouce["title_P8014"] : this.kinds.P8014T;
                this.kinds.P8014M = (languageResouce["info_P8014"] != null) ? languageResouce["info_P8014"] : this.kinds.P8014M;
                this.kinds.P8015T = (languageResouce["title_P8015"] != null) ? languageResouce["title_P8015"] : this.kinds.P8015T;
                this.kinds.P8015M = (languageResouce["info_P8015"] != null) ? languageResouce["info_P8015"] : this.kinds.P8015M;
                this.kinds.P8016T = (languageResouce["title_P8016"] != null) ? languageResouce["title_P8016"] : this.kinds.P8016T;
                this.kinds.P8016M = (languageResouce["info_P8016"] != null) ? languageResouce["info_P8016"] : this.kinds.P8016M;
                this.kinds.P8017T = (languageResouce["title_P8017"] != null) ? languageResouce["title_P8017"] : this.kinds.P8017T;
                this.kinds.P8017M = (languageResouce["info_P8017"] != null) ? languageResouce["info_P8017"] : this.kinds.P8017M;
                this.kinds.P8018T = (languageResouce["title_P8018"] != null) ? languageResouce["title_P8018"] : this.kinds.P8018T;
                this.kinds.P8018M = (languageResouce["info_P8018"] != null) ? languageResouce["info_P8018"] : this.kinds.P8018M;
                this.kinds.P8019T = (languageResouce["title_P8019"] != null) ? languageResouce["title_P8019"] : this.kinds.P8019T;
                this.kinds.P8019M = (languageResouce["info_P8019"] != null) ? languageResouce["info_P8019"] : this.kinds.P8019M;
                this.kinds.P8020T = (languageResouce["title_P8020"] != null) ? languageResouce["title_P8020"] : this.kinds.P8020T;
                this.kinds.P8020M = (languageResouce["info_P8020"] != null) ? languageResouce["info_P8020"] : this.kinds.P8020M;
                this.kinds.P8021T = (languageResouce["title_P8021"] != null) ? languageResouce["title_P8021"] : this.kinds.P8021T;
                this.kinds.P8021M = (languageResouce["info_P8021"] != null) ? languageResouce["info_P8021"] : this.kinds.P8021M;
                this.kinds.P8022T = (languageResouce["title_P8022"] != null) ? languageResouce["title_P8022"] : this.kinds.P8022T;
                this.kinds.P8022M = (languageResouce["info_P8022"] != null) ? languageResouce["info_P8022"] : this.kinds.P8022M;
                this.kinds.P8000T = (languageResouce["title_P8000"] != null) ? languageResouce["title_P8000"] : this.kinds.P8000T;
                this.kinds.P8000M = (languageResouce["info_P8000"] != null) ? languageResouce["info_P8000"] : this.kinds.P8000M;
                return;
            };
            return LanguageResource;
        }());
        resource.LanguageResource = LanguageResource;
    })(resource = jstream_t3.resource || (jstream_t3.resource = {}));
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3) {
    var parser;
    (function (parser) {
        var EmbedTagBuilder = (function () {
            function EmbedTagBuilder() {
            }
            EmbedTagBuilder.create = function (params) {
                var Class;
                if (params.tagType == "player_1_0_0") {
                    if (params.stype == null) {
                        Class = Onetag10;
                    }
                    else {
                        Class = Syn10;
                    }
                }
                else {
                    if (params.stype == null) {
                        Class = Onetag16;
                    }
                    else {
                        Class = Syn16;
                    }
                }
                var result = new Class();
                result.createTag(params);
                return result;
            };
            return EmbedTagBuilder;
        }());
        parser.EmbedTagBuilder = EmbedTagBuilder;
        var TagBase = (function () {
            function TagBase() {
            }
            TagBase.prototype.getTag = function () {
                return this.tag;
            };
            return TagBase;
        }());
        parser.TagBase = TagBase;
        var Onetag10 = (function (_super) {
            __extends(Onetag10, _super);
            function Onetag10() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            Onetag10.prototype.createTag = function (params) {
                var list, source, url;
                list = window.location.href.split("/");
                url = "http://" + list[4] + "." + "webcdn.stream.ne.jp/" + list.slice(3).join("/").split("?")[0];
                source = "<script language=\"javascript\">document.write('<iframe frameborder=\"0\" src=\"" + url + "?c=#contract_id&m=#meta_id&s=#setting##start_time##plugins##va_url#&file_id=#file_id&parent_url='+encodeURIComponent(window.location.href) +'&ref=' + encodeURIComponent(document.referrer) + '\" width=\"" + params.width + "\" height=\"" + params.height + "\" scrolling=\"no\" frameborder=\"0\" style=\"border:none; overflow:hidden;\" allowtransparency=\"true\"></iframe>');</script>";
                source = source.split("#contract_id").join(jstream_t3.utils.Util.obfuscate(params.contract_id))
                    .split("#meta_id").join(jstream_t3.utils.Util.obfuscate(params.meta_id))
                    .split("#file_id").join(params.file_id);
                var settings = "";
                if (params.s) {
                    if (params.s.ft) {
                        params.s.ft = decodeURIComponent(params.s.ft);
                    }
                    settings = jstream_t3.utils.Util.toJSON(params.s);
                    settings = encodeURIComponent(settings);
                }
                source = source.split("#setting#").join(settings);
                if (params.start_time) {
                    source = source.split("#start_time#").join(", t: " + params.start_time);
                }
                else {
                    source = source.split("#start_time#").join("");
                }
                if (params.plugins) {
                    source = source.split("#plugins#").join(", p: \"" + params.plugins + "\"");
                }
                else {
                    source = source.split("#plugins#").join("");
                }
                if (params.va_url) {
                    source = source.split("#va_url#").join(", v: \"" + params.va_url + "\"");
                }
                else {
                    source = source.split("#va_url#").join("");
                }
                this.tag = source;
            };
            Onetag10.prototype.getTag = function () {
                return this.tag;
            };
            return Onetag10;
        }(TagBase));
        parser.Onetag10 = Onetag10;
        var Onetag16 = (function (_super) {
            __extends(Onetag16, _super);
            function Onetag16() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            Onetag16.prototype.createTag = function (params) {
                var source = '<script type="text/javascript" src="https://ssl-cache.stream.ne.jp/#playerDir#t3/#type_exp#.js" charset="UTF-8"></script><script type="text/javascript">jstream_t3.PlayerFactory#type#.create({b: "#playerURI#",c: "#contract_id#",m: "#meta_id#",s: #setting##start_time##plugins##va_url##object#});</script>';
                if (params.isIframe) {
                    source = source.split("#type_exp#").join("if");
                    source = source.split("#type#").join("IF");
                }
                else {
                    source = source.split("#type_exp#").join("obj");
                    source = source.split("#type#").join("OBJ");
                }
                source = source.split("#playerDir#").join(params.base.split("://")[1].split("/").slice(1).join("/"));
                source = source.split("#playerURI#").join(params.base.split("://")[1]);
                source = source.split("#contract_id#").join(jstream_t3.utils.Util.base64encode(params.contract_id));
                source = source.split("#meta_id#").join(jstream_t3.utils.Util.base64encode(params.meta_id));
                var settings = "";
                if (params.s) {
                    if (params.s.ft) {
                        params.s.ft = decodeURIComponent(params.s.ft);
                    }
                    if (params.s.rp == "on" || params.s.rp == "fit") {
                        params.s.rp = "off";
                        params.s.hp = 270;
                        params.s.wp = 480;
                    }
                    settings = jstream_t3.utils.Util.toJSON(params.s);
                }
                source = source.split("#setting#").join(settings);
                if (params.start_time) {
                    source = source.split("#start_time#").join(", t: " + params.start_time);
                }
                else {
                    source = source.split("#start_time#").join("");
                }
                if (params.plugins) {
                    source = source.split("#plugins#").join(", p: \"" + params.plugins + "\"");
                }
                else {
                    source = source.split("#plugins#").join("");
                }
                if (params.va_url) {
                    source = source.split("#va_url#").join(", v: \"" + params.va_url + "\"");
                }
                else {
                    source = source.split("#va_url#").join("");
                }
                var objects = "";
                if (params.o) {
                    objects = jstream_t3.utils.Util.toJSONforCustomVA(params.o);
                    source = source.split("#object#").join(", o: " + objects);
                }
                else {
                    source = source.split("#object#").join("");
                }
                if (params.useInboundLink()) {
                    source += '<br><a href="' + params.inbound_link["url"] + '">' + params.inbound_link["link"] + '</a>';
                }
                this.tag = source;
            };
            return Onetag16;
        }(TagBase));
        parser.Onetag16 = Onetag16;
        var Syn10 = (function (_super) {
            __extends(Syn10, _super);
            function Syn10() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            Syn10.prototype.createTag = function (params) {
                this.tag = "";
            };
            return Syn10;
        }(TagBase));
        parser.Syn10 = Syn10;
        var Syn16 = (function (_super) {
            __extends(Syn16, _super);
            function Syn16() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            Syn16.prototype.createTag = function (params) {
                this.tag = "";
            };
            return Syn16;
        }(TagBase));
        parser.Syn16 = Syn16;
    })(parser = jstream_t3.parser || (jstream_t3.parser = {}));
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3) {
    var events;
    (function (events) {
        var Event = (function () {
            function Event(type, data) {
                if (type === void 0) { type = null; }
                if (data === void 0) { data = null; }
                this.type = type;
                this.data = data;
            }
            Event.LOADED = "loaded";
            Event.ERROR = "error";
            return Event;
        }());
        events.Event = Event;
    })(events = jstream_t3.events || (jstream_t3.events = {}));
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3) {
    var events;
    (function (events) {
        var ErrorEvent = (function (_super) {
            __extends(ErrorEvent, _super);
            function ErrorEvent(code, message, subject) {
                if (message === void 0) { message = ""; }
                if (subject === void 0) { subject = ""; }
                var _this = _super.call(this, "error") || this;
                _this.code = code;
                _this.message = message;
                _this.subject = subject;
                return _this;
            }
            ErrorEvent.METAINFO_LOAD_ERROR = "MetaInfo.LoadError";
            ErrorEvent.SETTINGS_LOAD_ERROR = "PlayerSettings.LoadError";
            ErrorEvent.SERVICE_SETTING_ERROR = "ServiceSettings.LoadError";
            ErrorEvent.VIEWLIMIT_DISABLED = "ViewLimit.Disabled";
            ErrorEvent.SERVER_MEDIA_ERROR = "Server.MediaError";
            ErrorEvent.FLASHPLAYER_VERSION_ERROR = "FlashPlayer.VersionError";
            ErrorEvent.LIVELIMIT_LOAD_ERROR = "LiveLimit.LoadError";
            ErrorEvent.LIDSETTINGS_LOAD_ERROR = "LidSettings.LoadError";
            ErrorEvent.AUTHENTICATION_FAILED = "Authentication.Failed";
            ErrorEvent.OTHER_ERROR = "Other.Error";
            return ErrorEvent;
        }(events.Event));
        events.ErrorEvent = ErrorEvent;
    })(events = jstream_t3.events || (jstream_t3.events = {}));
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3) {
    var model;
    (function (model) {
        var EQPlayerModel = (function () {
            function EQPlayerModel(params) {
                if (params === void 0) { params = null; }
                this.isLightbox = false;
                this.isMSEnable = true;
                this.isHlsjsSupported = false;
                this.ssl_url = "https://ssl-cache.stream.ne.jp";
                this.time_use = "on";
                this.isLive = false;
                this.auth = "0";
                this.a = "";
                this.auth_mode = "and";
                this.hostCheckResult = "none";
                this.isAuthPassed = false;
                this.api_url = "api01-platform.stream.co.jp";
                this.syndicationapi_url = "syndication-api.stream.co.jp/ec/";
                this.isThumbnail = false;
                this.vc = null;
                this.resumeEnable = "off";
                this.resumeVolumeEnable = "on";
                this.inCookieCurrentTime = "0";
                this.inCookieVolume = "100";
                this.ot = "";
                this.isDebug = false;
                this.connection_limit = -1;
                this.CheckConnectionService = false;
                this.isCheckConnectionPassed = "undefined";
                this.checkconnection_url = "count01-platform.stream.co.jp";
                this.checkconnection_filename = "/index.php";
                this.stat = "";
                this.connectionCheckEndpoint = "";
                this.kollective_flg = "0";
                this.info_dir = "";
                this.loop_use = "off";
                this.isInIframe = false;
                this.device_profile_id = "0";
                this.subtitles = null;
                this.init_play = "off";
                this.sb_default = 1;
                this.closedCaption = "on";
                this.playlist_use = "off";
                this.playlist_id = "";
                this.playlist = [];
                this.playerFromPlaylist = false;
                this.publish_site = 0;
                this.publish_tag = "";
                this.crashReportEndPoint = "https://eq-player-log.cdnext.stream.ne.jp/player.txt";
                this.playbackRate_index = -1;
                this._thumbnailURL = null;
                var prop;
                for (prop in params) {
                    if (prop == "isAuthPassed") {
                        var authPassedParam = jstream_t3.utils.Util.base64decode(params[prop]);
                        var date = new Date();
                        var toDay = date.getFullYear().toString() + (date.getMonth() + 1).toString() + date.getDate().toString();
                        var passedKey = "true" + toDay;
                        if (authPassedParam == passedKey) {
                            this[prop] = true;
                        }
                        else {
                            this[prop] = false;
                        }
                    }
                    else {
                        this[prop] = params[prop];
                    }
                }
                try {
                    var ms = new MediaSource();
                }
                catch (e) {
                    this.isMSEnable = false;
                }
            }
            EQPlayerModel.prototype.setEnviroment = function () {
                var ua = navigator.userAgent.toLowerCase(), matches = [], platform = {
                    browser: {
                        name: '',
                        version: '',
                        engine: ''
                    },
                    os: {
                        name: '',
                        version: ''
                    },
                    isIE: false,
                    isEdge: false,
                    isFirefox: false,
                    isSafari: false,
                    isChrome: false,
                    isOpera: false,
                    isSP: false,
                    isTablet: false
                };
                if (ua.match(/msie/) || ua.match(/trident/)) {
                    platform.browser.name = 'Internet Explorer';
                    matches = ua.match(/(msie|rv:?)\s?([\d\.]+)/);
                    if (matches && matches.length > 0 && matches[2]) {
                        platform.browser.version = matches[2];
                    }
                    platform.isIE = true;
                }
                else if (ua.match(/mozilla\/.+windows nt 10\.[0-9].+chrome.+safari.+edge\/[0-9\.]+/i)) {
                    platform.browser.name = 'Edge';
                    matches = ua.match(/mozilla\/.+windows nt 10\.[0-9].+chrome.+safari.+edge\/([0-9\.]+)/);
                    if (matches && matches.length > 0 && matches[1]) {
                        platform.browser.version = matches[1];
                    }
                    platform.isEdge = true;
                }
                else if (ua.match(/opera|opr/)) {
                    platform.browser.name = 'Opera';
                    if (ua.match(/version\//)) {
                        matches = ua.match(/version\/([\d\.]+)/);
                        if (matches && matches.length > 0 && matches[1]) {
                            platform.browser.version = matches[1];
                        }
                    }
                    else {
                        matches = ua.match(/(opera(\s|\/)|opr\/)([\d\.]+)/);
                        if (matches && matches.length > 0 && matches[3]) {
                            platform.browser.version = matches[3];
                        }
                    }
                    platform.isOpera = true;
                }
                else if (ua.match(/firefox/)) {
                    platform.browser.name = 'Firefox';
                    matches = ua.match(/firefox\/([\d\.]+)/);
                    if (matches && matches.length > 0 && matches[1]) {
                        platform.browser.version = matches[1];
                    }
                    platform.isFirefox = true;
                }
                else if (ua.match(/chrome/)) {
                    platform.browser.name = 'Chrome';
                    matches = ua.match(/chrome\/([\d\.]+)/);
                    if (matches && matches.length > 0 && matches[1]) {
                        platform.browser.version = matches[1];
                    }
                    platform.isChrome = true;
                }
                else if (ua.match(/safari/)) {
                    platform.browser.name = 'Safari';
                    matches = ua.match(/version\/([\d\.]+)/);
                    if (matches && matches.length > 0 && matches[1]) {
                        platform.browser.version = matches[1];
                    }
                    platform.isSafari = true;
                }
                else {
                    platform.browser.name = 'Unknown';
                }
                if (ua.match(/trident/)) {
                    platform.browser.engine = 'Trident';
                }
                else if (ua.match(/blink/)) {
                    platform.browser.engine = 'Blink';
                }
                else if (ua.match(/webkit/)) {
                    platform.browser.engine = 'Webkit';
                }
                else if (ua.match(/khtml/)) {
                    platform.browser.engine = 'KHTML';
                }
                else if (ua.match(/gecko/)) {
                    platform.browser.engine = 'Gecko';
                }
                else if (ua.match(/presto/)) {
                    platform.browser.engine = 'Presto';
                }
                else {
                    platform.browser.engine = 'Unknown';
                }
                if (ua.match(/windows phone/)) {
                    platform.os.name = 'Windows Phone';
                }
                else if (ua.match(/windows/)) {
                    platform.os.name = 'Windows';
                    matches = ua.match(/windows nt ([\d\.]+)/);
                    if (matches && matches.length > 0 && matches[1]) {
                        if (matches[1].match(/10\.[0-9]/)) {
                            platform.os.version = matches[1];
                        }
                        else if (matches[1] === '6.3') {
                            platform.os.version = '8.1';
                        }
                        else if (matches[1] === '6.2') {
                            platform.os.version = '8.0';
                        }
                        else if (matches[1] === '6.1') {
                            platform.os.version = '7';
                        }
                        else if (matches[1] === '6.1') {
                            platform.os.version = '7';
                        }
                        else if (matches[1] === '6.0') {
                            platform.os.version = 'Vista';
                        }
                        else if (matches[1] === '5.2' || matches[1] === '5.1') {
                            platform.os.version = 'XP';
                        }
                        else if (matches[1] === '5.0') {
                            platform.os.version = '2000';
                        }
                    }
                    matches = ua.match(/windows ([\d]+)/);
                    if (matches && matches.length > 0 && matches[1]) {
                        if (matches[1] === '98' && ua.match(/9x/)) {
                            platform.os.version = 'Me';
                        }
                        else if (matches[1] === '98') {
                            platform.os.version = '98';
                        }
                        else if (matches[1] === '95') {
                            platform.os.version = '95';
                        }
                        else if (matches[1] === '3.1') {
                            platform.os.version = '3.1';
                        }
                    }
                }
                else if (ua.match(/ios|iphone|ipad|ipod/)) {
                    platform.os.name = 'iOS';
                    matches = ua.match(/((iphone)? os) ([\d_]+)/);
                    if (matches && matches.length > 0 && matches[3]) {
                        platform.os.version = matches[3].replace(/_/g, '.');
                    }
                }
                else if (ua.match(/mac os|mac_powerpc|macintosh/)) {
                    platform.os.name = 'Macintosh';
                }
                else if (ua.match(/android/)) {
                    platform.os.name = 'Android';
                    matches = ua.match(/android ([\d\.]+)/);
                    if (matches && matches.length > 0 && matches[1]) {
                        platform.os.version = matches[1];
                    }
                }
                else if (ua.match(/linux/)) {
                    platform.os.name = 'Linux';
                }
                else if (ua.match(/firefox/) && ua.match(/mobile|tablet/)) {
                    platform.os.name = 'Firefox OS';
                }
                else {
                    platform.os.name = 'Unknown';
                }
                if (ua.match(/iphone/) || ua.match(/ipod/) || (ua.match(/android/) && ua.match(/mobile/)) || ua.match(/windows phone/)) {
                    platform.isSP = true;
                }
                else if (ua.match(/ipad/) || ua.match(/android/) && !ua.match(/mobile/)) {
                    platform.isTablet = true;
                }
                this.platform = platform;
            };
            EQPlayerModel.prototype.getSSLDomain = function () {
                var p = jstream_t3.utils.Util.parse_uri(this.ssl_url);
                return p.authority;
            };
            EQPlayerModel.prototype.useInboundLink = function () {
                return (this.inboundlink_use == "on" && this.inbound_link && this.inbound_link["link"] != null && this.inbound_link["url"] != null);
            };
            EQPlayerModel.prototype.isPDPlayerEnable = function () {
                return this.pd_enable == "1";
            };
            EQPlayerModel.prototype.isAuthEnable = function () {
                if (this.auth == "1" && !this.isAuthPassed) {
                    if (!((this.auth_mode == "or" && this.hostCheckResult == "ok") || (this.auth_mode == "and" && this.hostCheckResult == "ng")))
                        return true;
                }
                return false;
            };
            EQPlayerModel.prototype.isMobilePlayer = function () {
                var env = this.getEnvironmentType();
                return env == jstream_t3.EnviromentKind.MOBILE_STREAMING || env == jstream_t3.EnviromentKind.MOBILE_PROGRESSIVE || env == jstream_t3.EnviromentKind.MOBILE_NATIVE || env == jstream_t3.EnviromentKind.MOBILE_HLSJS;
            };
            EQPlayerModel.prototype.isConnectionEneble = function () {
                return (this.connection_limit > 0 && this.checkconnection_url != "off" && (this.isCheckConnectionPassed == "NG" || this.isCheckConnectionPassed == "undefined"));
            };
            EQPlayerModel.prototype.getConnectionURL = function () {
                return this.checkconnection_url + this.checkconnection_filename;
            };
            EQPlayerModel.prototype.isKollectiveEnable = function () {
                return this.kollective_flg == "1" && this.kontikiAgent.isInstalled() && !(this.platform["isSP"] || this.platform["isTablet"]) && !(this.line == 1 || this.line == 2);
            };
            EQPlayerModel.prototype.createServiceModel = function () {
                return new model.EQPlayerServiceModel(this);
            };
            EQPlayerModel.prototype.clone = function () {
                var result = new EQPlayerModel();
                var prop;
                for (prop in this) {
                    if (typeof this[prop] == "function") {
                        continue;
                    }
                    result[prop] = this[prop];
                }
                return result;
            };
            EQPlayerModel.prototype.onError = function (code, title, message) {
            };
            EQPlayerModel.prototype.parce = function () {
                var lang = "ja";
                if (jstream_t3.utils.Util.browserLanguage() != "ja") {
                    lang = "en";
                }
                var messages = new jstream_t3.resource.LanguageResource(this["language_resource_" + lang]);
                if (this.enable !== "1") {
                    this.onError(jstream_t3.events.ErrorEvent.VIEWLIMIT_DISABLED, messages.kinds.ERROR_LIMIT, messages.kinds.ERROR_LIMIT_MESSAGE);
                    return false;
                }
                if (this.parent_url == null || this.parent_url.indexOf("file") == 0 || this.parent_url.indexOf("http://localhost") == 0) {
                    this.va_use = "off";
                }
                if (typeof this.start_time == "string") {
                    this.start_time = parseInt(this.start_time);
                    if (isNaN(this.start_time)) {
                        this.start_time = 0;
                    }
                }
                if (this.start_time > parseInt(this.duration)) {
                    this.start_time = 0;
                }
                this.thumbnail_url = this.getThumbnailURL();
                this.convertMP4Path();
                jstream_t3.utils.Util.deleteNullItem(this.exlink);
                jstream_t3.utils.Util.deleteNullItem(this.multibitrate_list);
                this.tag_text = this.createTagText();
                this.setFooterAlign();
                if (this.stype != "s1" && this.stype != "s2") {
                    this.setDefaultMovie();
                    if (this.movie_list.length < 1) {
                        var language = null;
                        if (language == null) {
                            var lang = "ja";
                            if (jstream_t3.utils.Util.browserLanguage() != "ja") {
                                lang = "en";
                            }
                            language = new jstream_t3.resource.LanguageResource(this["language_resource_" + lang]);
                        }
                        jstream_t3.view.AlertView.show(language.kinds.ERROR_MOVIE_NOT_FOUND_2, language.kinds.ERROR_TITLE, this.fieldID, this.cssDir);
                        return false;
                    }
                }
                else {
                    this.setDefaultMovieForSyndication();
                }
                if (!this.isAuthPassed) {
                    this.setMovieMobileURL();
                }
                if (this.isAuthPassed) {
                    this.setMovieMobileURL_AfterAuth();
                }
                this.setQualityLabel();
                this.encodeText();
                this.formatSubtitles();
                return true;
            };
            EQPlayerModel.prototype.setFooterAlign = function () {
                switch (this.footer_align) {
                    case "L":
                        this.footer_align = "left";
                        break;
                    case "C":
                        this.footer_align = "center";
                        break;
                    case "R":
                        this.footer_align = "right";
                }
            };
            EQPlayerModel.prototype.formatSubtitles = function () {
                var userDir = window.location.protocol + "//" + this["b"].split("/").slice(0, -3).join("/") + "/";
                if (!!this.subtitles && this.closedCaption != "off") {
                    for (var index = 0; index < this.subtitles.length; index++) {
                        if (this.subtitles[index]["url"].indexOf("http") < 0) {
                            this.subtitles[index]["url"] = userDir + this.subtitles[index]["url"];
                        }
                    }
                }
                else {
                    this.subtitles = [];
                }
                this.subtitles.unshift({ "url": null, "lang": null, "text": "off" });
                this.subtitles.unshift({ "url": null, "lang": null, "text": "dummy" });
                if (!this.subtitles[this.sb_default]) {
                    this.sb_default = 1;
                }
            };
            EQPlayerModel.prototype.getListFormat = function () {
                var result = [];
                for (var prop in this) {
                    if (typeof this[prop] != "function") {
                        var item = {};
                        item[prop] = this[prop];
                        result.push(item);
                    }
                }
                return result;
            };
            EQPlayerModel.prototype.getThumbnailURL = function () {
                if (!this.thumbnail_url) {
                    return "";
                }
                if (this._thumbnailURL == null) {
                    if (this.thumbnail_url.indexOf("http") === -1) {
                        this._thumbnailURL = "../../jmc_thumb/" + this.thumbnail_url;
                    }
                    else if (window.location.protocol === "https:" && this.thumbnail_url.indexOf("https:") != 0) {
                        var list = this.thumbnail_url.split("http").join("https").split("/");
                        list[2] = this.getSSLDomain();
                        this._thumbnailURL = list.join("/");
                    }
                    else {
                        this._thumbnailURL = this.thumbnail_url;
                    }
                }
                return this._thumbnailURL;
            };
            EQPlayerModel.prototype.resetThumbnailURL = function () {
                this._thumbnailURL = null;
            };
            EQPlayerModel.prototype.getEnvironmentType = function () {
                if (this.mode == "flash") {
                    return jstream_t3.EnviromentKind.PC_STREAMING;
                }
                if (this.platform["isTablet"] || this.platform["isSP"]) {
                    if (!document.createElement('video').canPlayType) {
                        if (jstream_t3.utils.Util.isFlash()) {
                            return jstream_t3.EnviromentKind.PC_STREAMING;
                        }
                        else {
                            return jstream_t3.EnviromentKind.NO_FLASH;
                        }
                    }
                    if (this.platform["os"]["name"] == "iOS" && (this.platform["isTablet"] || this.platform["isSP"])) {
                        if (this.isPDPlayerEnable()) {
                            return jstream_t3.EnviromentKind.MOBILE_PROGRESSIVE;
                        }
                        else {
                            return jstream_t3.EnviromentKind.MOBILE_STREAMING;
                        }
                    }
                    else if (this.platform["os"]["name"] == "Android") {
                        if ((this.platform["os"]["name"] == "Android" && (Number(this.platform["os"]["version"].split(".")[0]) >= 4 && (this.platform["isTablet"] || this.platform["isSP"])) || this.platform["isFirefox"])) {
                            if (this.isPDPlayerEnable()) {
                                return jstream_t3.EnviromentKind.MOBILE_PROGRESSIVE;
                            }
                            else {
                                if (this.isMSEnable && this.isHlsjsSupported) {
                                    return jstream_t3.EnviromentKind.MOBILE_HLSJS;
                                }
                                else {
                                    return jstream_t3.EnviromentKind.MOBILE_NATIVE;
                                }
                            }
                        }
                        else {
                            if (jstream_t3.utils.Util.isFlash()) {
                                return jstream_t3.EnviromentKind.PC_STREAMING;
                            }
                            else {
                                return jstream_t3.EnviromentKind.NO_FLASH;
                            }
                        }
                    }
                    else {
                        if (this.isPDPlayerEnable()) {
                            return jstream_t3.EnviromentKind.MOBILE_PROGRESSIVE;
                        }
                        else {
                            return jstream_t3.EnviromentKind.MOBILE_STREAMING;
                        }
                    }
                }
                else {
                    if (!document.createElement('video').canPlayType) {
                        if (jstream_t3.utils.Util.isFlash()) {
                            return jstream_t3.EnviromentKind.PC_STREAMING;
                        }
                        else {
                            return jstream_t3.EnviromentKind.NO_FLASH;
                        }
                    }
                    if (this.isPDPlayerEnable()) {
                        if ((this.platform["isIE"] && Number(this.platform["browser"]["version"]) <= 9) || (this.platform["isSafari"] && this.platform["os"]["name"] == "Macintosh" && Number(this.platform["browser"]["version"].split(".")[0]) <= 8)) {
                            if (jstream_t3.utils.Util.isFlash()) {
                                return jstream_t3.EnviromentKind.PC_STREAMING;
                            }
                            else {
                                return jstream_t3.EnviromentKind.NO_FLASH;
                            }
                        }
                        else {
                            return jstream_t3.EnviromentKind.PC_PROGRESSIVE;
                        }
                    }
                    else {
                        if (this.platform["isIE"] &&
                            ((this.platform["browser"]["version"] == "11.0" && this.platform["os"]["name"] == "Windows" && this.platform["os"]["version"] == "7")
                                || Number(this.platform["browser"]["version"]) <= 10) || (this.platform["isSafari"] && this.platform["os"]["name"] == "Macintosh" && Number(this.platform["browser"]["version"].split(".")[0]) <= 8)) {
                            if (jstream_t3.utils.Util.isFlash()) {
                                return jstream_t3.EnviromentKind.PC_STREAMING;
                            }
                            else {
                                return jstream_t3.EnviromentKind.NO_FLASH;
                            }
                        }
                        else if (this.platform["isSafari"]) {
                            return jstream_t3.EnviromentKind.PC_HTML5HLS;
                        }
                        else if (this.isMSEnable == false || this.isHlsjsSupported == false) {
                            if (jstream_t3.utils.Util.isFlash()) {
                                return jstream_t3.EnviromentKind.PC_STREAMING;
                            }
                            else {
                                return jstream_t3.EnviromentKind.NO_FLASH;
                            }
                        }
                        else {
                            return jstream_t3.EnviromentKind.HLSJS;
                        }
                    }
                }
            };
            EQPlayerModel.prototype.encodeText = function () {
                if (this.isMobilePlayer()) {
                    this.title = jstream_t3.utils.Util.encodeHTMLEncode(this.title);
                }
                this.footer_text = jstream_t3.utils.Util.encodeHTMLEncode(this.footer_text);
            };
            EQPlayerModel.prototype.convertMP4Path = function () {
                var convert, i, _results;
                convert = function (src) {
                    var list;
                    if (src && src.indexOf("mp4:") > -1) {
                        return src;
                    }
                    if (src && src.indexOf("rtmp") > -1 && src.indexOf(".mp4") > -1) {
                        list = src.split("_definst_/");
                        list[1] = "mp4:" + list[1];
                        src = list.join("_definst_/");
                    }
                    return src;
                };
                this.movie_url = convert(this.movie_url);
                if (!this.movie_list) {
                    return;
                }
                i = 0;
                _results = [];
                while (i < this.movie_list.length) {
                    this.movie_list[i].url = convert(this.movie_list[i].url);
                    _results.push(i++);
                }
                return _results;
            };
            EQPlayerModel.prototype.convertPDPath = function () {
                var convert, i, results;
                if (this.movie_url_pd) {
                    this.movie_url = this.movie_url_pd;
                }
                results = [];
                if (this.movie_list_pd) {
                    this.movie_list = this.movie_list_pd;
                }
                return results;
            };
            EQPlayerModel.prototype.createTagText = function () {
                var tagCreator = jstream_t3.parser.EmbedTagBuilder.create(this);
                return tagCreator.getTag();
            };
            EQPlayerModel.prototype.setDefaultMovie = function () {
                var qualityList = ["lq", "sq", "hq", "hd", "fh", "4k"];
                var isMobile = false;
                var movie_list = [];
                var movie_url = "";
                var useQualityList;
                var default_quality;
                var userDir;
                var auto = "";
                this.movie_url = "";
                if (this.movie_list == undefined) {
                    this.movie_list = [];
                }
                if (this.platform["isSP"] || this.platform["isTablet"]) {
                    useQualityList = this.sp;
                    this.default_quality = this.mobile_default_quality;
                    default_quality = this.mobile_default_quality;
                    auto = "auto_sp";
                }
                else {
                    useQualityList = this.pc;
                    default_quality = this.default_quality;
                    auto = "auto_pc";
                }
                if (this.isPDPlayerEnable()) {
                    movie_list = this.movie_list_pd;
                    qualityList.unshift(auto);
                }
                else {
                    movie_list = this.movie_list_hls;
                    if (useQualityList.length > 0) {
                        useQualityList.unshift(auto);
                    }
                    qualityList.unshift(auto);
                }
                userDir = window.location.protocol + "//" + this["b"].split("/").slice(0, -3).join("/") + "/";
                for (var index = 0; index < useQualityList.length; index++) {
                    for (var movie_listIndex = 0; movie_listIndex < movie_list.length; movie_listIndex++) {
                        if (movie_list[movie_listIndex].text == useQualityList[index]) {
                            var movie_data = { "url": "", "text": "" };
                            movie_data.url = userDir + movie_list[movie_listIndex].url;
                            movie_data.text = movie_list[movie_listIndex].text;
                            this.movie_list.push(movie_data);
                        }
                    }
                }
                if (default_quality >= 90) {
                    if (default_quality == 90) {
                        default_quality = this.getDefaultQualityLower(this.movie_list, qualityList);
                    }
                    else if (default_quality == 92) {
                        default_quality = this.getDefaultQualityHigher(this.movie_list, qualityList);
                    }
                    this.default_quality = default_quality;
                }
                for (var movie_listIndex = 0; movie_listIndex < this.movie_list.length; movie_listIndex++) {
                    if (this.movie_list[movie_listIndex].text == qualityList[Number(default_quality)]) {
                        this.movie_url = this.movie_list[movie_listIndex].url;
                        break;
                    }
                }
                if (!this.movie_url) {
                    for (var qualityListIndex = 0; qualityListIndex < qualityList.length; qualityListIndex++) {
                        for (var index = 0; index < this.movie_list.length; index++) {
                            if (qualityList[qualityListIndex] == this.movie_list[index].text) {
                                this.movie_url = this.movie_list[index].url;
                                this.default_quality = qualityListIndex.toString();
                                this.mobile_default_quality = qualityListIndex.toString();
                                break;
                            }
                        }
                        if (!!this.movie_url) {
                            break;
                        }
                    }
                }
            };
            EQPlayerModel.prototype.getDefaultQualityHigher = function (movie_list, qualityList) {
                for (var qualityListIndex = qualityList.length - 1; 0 <= qualityListIndex; qualityListIndex--) {
                    for (var movieListIndex = 0; movieListIndex < movie_list.length; movieListIndex++) {
                        if (qualityList[qualityListIndex] == movie_list[movieListIndex].text) {
                            return qualityListIndex;
                        }
                    }
                }
                return 0;
            };
            EQPlayerModel.prototype.getDefaultQualityLower = function (movie_list, qualityList) {
                var qualityListIndex = 0;
                if (qualityList[qualityListIndex].indexOf("auto") != -1 && qualityList.length != 1) {
                    qualityListIndex = 1;
                }
                for (qualityListIndex; qualityListIndex < qualityList.length; qualityListIndex++) {
                    for (var movieListIndex = 0; movieListIndex < movie_list.length; movieListIndex++) {
                        if (qualityList[qualityListIndex] == movie_list[movieListIndex].text) {
                            return qualityListIndex;
                        }
                    }
                }
                return 0;
            };
            EQPlayerModel.prototype.setDefaultMovieForSyndication = function () {
                var qualityList = ["自動", "低画質", "標準画質", "高画質", "ＨＤ画質", "フルＨＤ画質", "４Ｋ画質"];
                function getQualityURL(list, key) {
                    if (typeof (list) == "undefined")
                        return null;
                    for (var i = 0; i < list.length; i++) {
                        if (list[i].text == key) {
                            return list[i].url;
                        }
                    }
                    return null;
                }
                var qualityKey = qualityList[this.default_quality];
                if (this.movie_list) {
                    var qualityURL = getQualityURL(this.movie_list, qualityKey);
                    if (qualityURL == null) {
                        var i = 1;
                        qualityURL = getQualityURL(this.movie_list, qualityList[2]);
                        while (qualityURL == null && i < 7) {
                            qualityURL = getQualityURL(this.movie_list, qualityList[i]);
                            qualityKey = qualityList[this.default_quality];
                            i++;
                        }
                    }
                    if (qualityURL) {
                        this.movie_url = qualityURL;
                    }
                }
                if (this.movie_list_mobile) {
                    var qualityURL_mobile = getQualityURL(this.movie_list_mobile, qualityList[this.default_quality]);
                    if (qualityURL_mobile == null) {
                        var i = 0;
                        qualityURL_mobile = getQualityURL(this.movie_list_mobile, qualityList[2]);
                        while (qualityURL_mobile == null && i < 7) {
                            qualityURL_mobile = getQualityURL(this.movie_list_mobile, qualityList[i]);
                            qualityKey = qualityList[this.default_quality];
                            i++;
                        }
                    }
                    if (qualityURL_mobile) {
                        this.movie_url_mobile = qualityURL_mobile;
                    }
                }
                if (this.movie_list_pd) {
                    if (this.movie_url_pd != null) {
                        var qualityURL_pd = getQualityURL(this.movie_list_pd, qualityList[this.default_quality]);
                        if (!qualityURL_pd) {
                            var i = 1;
                            qualityURL_pd = getQualityURL(this.movie_list_pd, qualityList[2]);
                            while (qualityURL_pd == null && i < 7) {
                                qualityURL_pd = getQualityURL(this.movie_list_pd, qualityList[i]);
                                qualityKey = qualityList[this.default_quality];
                                i++;
                            }
                        }
                        if (qualityURL_pd) {
                            this.movie_url_pd = qualityURL_pd;
                        }
                    }
                }
                if (this.isPDPlayerEnable()) {
                    this.movie_url = this.movie_url_pd;
                    this.movie_list = this.movie_list_pd;
                }
                else {
                    this.movie_url = this.movie_url_mobile;
                    this.movie_list = this.movie_list_mobile;
                }
            };
            EQPlayerModel.prototype.setQualityLabel = function () {
                var _this = this;
                var changeQualityLabel = function (item) {
                    switch (item.text) {
                        case "4k":
                        case "４Ｋ画質":
                            if (jstream_t3.utils.Util.browserLanguage() == "ja") {
                                item.text = "４Ｋ(2160p)";
                            }
                            else {
                                item.text = "4K(2160p)";
                            }
                            break;
                        case "fh":
                        case "フルＨＤ画質":
                            if (jstream_t3.utils.Util.browserLanguage() == "ja") {
                                item.text = "フルＨＤ(1080p)";
                            }
                            else {
                                item.text = "FullHD(1080p)";
                            }
                            break;
                        case "hd":
                        case "ＨＤ画質":
                            if (jstream_t3.utils.Util.browserLanguage() == "ja") {
                                item.text = "ＨＤ(720p)";
                            }
                            else {
                                item.text = "HD(720p)";
                            }
                            break;
                        case "hq":
                        case "高画質":
                            if (jstream_t3.utils.Util.browserLanguage() == "ja") {
                                item.text = "高画質(480p)";
                            }
                            else {
                                item.text = "High(480p)";
                            }
                            break;
                        case "sq":
                        case "標準画質":
                            if (jstream_t3.utils.Util.browserLanguage() == "ja") {
                                item.text = "標準画質(360p)";
                            }
                            else {
                                item.text = "Standard(360p)";
                            }
                            break;
                        case "lq":
                        case "低画質":
                            if (jstream_t3.utils.Util.browserLanguage() == "ja") {
                                item.text = "低画質(270p)";
                            }
                            else {
                                item.text = "Low(270p)";
                            }
                            break;
                        case "auto_pc":
                        case "auto_sp":
                        case "自動":
                            if (jstream_t3.utils.Util.browserLanguage() == "ja") {
                                item.text = "Auto";
                            }
                            else {
                                item.text = "Auto";
                            }
                            break;
                    }
                    if (_this.getEnvironmentType() == jstream_t3.EnviromentKind.PC_STREAMING) {
                        item.text = item.text.replace(/\(.*\)/, "");
                        if (item.text == "Auto") {
                            item.text = "自動";
                        }
                    }
                };
                var i = 0;
                var movie_list = this.movie_list;
                for (i = 0; i < movie_list.length; i++) {
                    changeQualityLabel(movie_list[i]);
                }
            };
            EQPlayerModel.prototype.changeMovieMobileURL = function (item, api, cid, mid, tk, dq) {
                var url = item;
                var quality;
                if (this.device_profile_id != "0" && (dq == "auto_pc" || dq == "auto_sp")) {
                    quality = dq;
                }
                else if (dq == "自動" || dq == "AUTO" || dq == "Auto" || (dq == "auto_pc" || dq == "auto_sp") || (!!this.stype && dq == "0")) {
                    quality = "0";
                }
                else {
                    quality = item.split("/").pop().split("_").pop().split(".", 1);
                }
                if (item.split("/")[4]) {
                    url = "http://" + api.split("/").slice(0, 2).join("/") + "/getPlayList/" + cid + "/" + mid + "/" + quality + "/" + tk + ".m3u8";
                }
                return url;
            };
            EQPlayerModel.prototype.setMovieMobileURL = function () {
                var enviroment = this.getEnvironmentType();
                if ((enviroment != jstream_t3.EnviromentKind.MOBILE_STREAMING && enviroment != jstream_t3.EnviromentKind.MOBILE_NATIVE && enviroment != jstream_t3.EnviromentKind.HLSJS && enviroment != jstream_t3.EnviromentKind.MOBILE_HLSJS && this.isPDPlayerEnable())
                    || !this.tk
                    || (this.tk && this.viewlimit_flg != "1")
                    || this.tk == "_NG_"
                    || (this.tk && this.auth_mode == "and" && this.auth == "1")) {
                    this.changeMovieMobileURLforM3U8();
                    return;
                }
                if ((this.movie_list == undefined || this.movie_list == null || this.movie_list.length == undefined || this.movie_list.length < 1)) {
                    return;
                }
                var cid = this.contract_id || this.maker_id;
                var dq = this.default_quality;
                if (dq == "0") {
                    for (var i = 0; i < this.movie_list.length; i++) {
                        if (this.movie_url == this.movie_list[i].url) {
                            dq = this.movie_list[i].text;
                        }
                    }
                }
                this.movie_url = this.changeMovieMobileURL(this.movie_url, jstream_t3.utils.Util.getAPIServerURL(this.api_url), cid, this.meta_id, this.tk, dq);
                for (var i = 0; i < this.movie_list.length; i++) {
                    this.movie_list[i].url = this.changeMovieMobileURL(this.movie_list[i].url, jstream_t3.utils.Util.getAPIServerURL(this.api_url), cid, this.meta_id, this.tk, this.movie_list[i].text);
                }
                this.changeMovieMobileURLforM3U8();
            };
            EQPlayerModel.prototype.setMovieMobileURL_AfterAuth = function () {
                var enviroment = this.getEnvironmentType();
                if ((enviroment != jstream_t3.EnviromentKind.MOBILE_STREAMING && enviroment != jstream_t3.EnviromentKind.MOBILE_NATIVE && enviroment != jstream_t3.EnviromentKind.HLSJS && enviroment != jstream_t3.EnviromentKind.MOBILE_HLSJS && this.isPDPlayerEnable())
                    || !this.tk) {
                    return;
                }
                var cid = this.contract_id || this.maker_id;
                var dq = this.default_quality;
                if (dq == "0") {
                    for (var i = 0; i < this.movie_list.length; i++) {
                        if (this.movie_url == this.movie_list[i].url) {
                            dq = this.movie_list[i].text;
                        }
                    }
                }
                this.movie_url = this.changeMovieMobileURL(this.movie_url, jstream_t3.utils.Util.getAPIServerURL(this.api_url), cid, this.meta_id, this.tk, dq);
                for (var i = 0; i < this.movie_list.length; i++) {
                    this.movie_list[i].url = this.changeMovieMobileURL(this.movie_list[i].url, jstream_t3.utils.Util.getAPIServerURL(this.api_url), cid, this.meta_id, this.tk, this.movie_list[i].text);
                }
                this.changeMovieMobileURLforM3U8();
            };
            EQPlayerModel.prototype.changeMovieMobileURLforM3U8 = function () {
                if (window.location.protocol === "https:") {
                    var env = this.getEnvironmentType();
                    if (env == jstream_t3.EnviromentKind.MOBILE_STREAMING || env == jstream_t3.EnviromentKind.HLSJS || env == jstream_t3.EnviromentKind.PC_HTML5HLS || env == jstream_t3.EnviromentKind.MOBILE_NATIVE || env == jstream_t3.EnviromentKind.MOBILE_HLSJS) {
                        for (var i = 0; i < this.movie_list.length; i++) {
                            this.movie_list[i].url = this.replaceToSSL(this.movie_list[i].url);
                        }
                        this.movie_url = this.replaceToSSL(this.movie_url);
                    }
                    else if (env == jstream_t3.EnviromentKind.PC_PROGRESSIVE || env == jstream_t3.EnviromentKind.MOBILE_PROGRESSIVE) {
                        for (var i = 0; i < this.movie_list.length; i++) {
                            this.movie_list[i].url = this.replaceToSSL(this.movie_list[i].url);
                        }
                        this.movie_url = this.replaceToSSL(this.movie_url);
                    }
                }
            };
            EQPlayerModel.prototype.replaceToSSL = function (url) {
                var replacedUrl;
                var reg = /^http:/;
                replacedUrl = url.replace(reg, "https:");
                return replacedUrl;
            };
            EQPlayerModel.prototype.replaceToHttp = function (url) {
                var replacedUrl;
                var reg = /^https:/;
                replacedUrl = url.replace(reg, "http:");
                return replacedUrl;
            };
            EQPlayerModel.prototype.isFooder = function () {
                return this.footer_use === "on" && (this.footer_text != null) && this.footer_text !== "";
            };
            EQPlayerModel.prototype.isVa = function () {
                if (this.tagType == "player_1_0_0" && this.isMobilePlayer()) {
                    return false;
                }
                return (this.va_use == "on" && (window.location.protocol.indexOf("file") != 0));
            };
            EQPlayerModel.prototype.createVarsParam = function () {
                return jstream_t3.utils.Util.escapeObject(this);
            };
            EQPlayerModel.prototype.setTagSize = function (fieldID) {
                var movieWidth = this.movie_width || 150;
                var movieHeight = this.movie_height || 136;
                var divTagID = fieldID;
                var divTag = document.getElementById(divTagID);
                var divTagMaxWidth;
                var divTagMaxHeight;
                var divTagWidth = divTag.clientWidth;
                var divTagHeight = divTag.clientHeight;
                var setW = this.width;
                var setH = this.height;
                var ftHeight = (this.footer_use === 'on') ? 20 : 0;
                if (setW == "eq-auto" || setH == "eq-auto") {
                    if (divTagWidth <= 0 || divTagWidth == null) {
                        divTagMaxWidth = Number(movieWidth);
                        divTagMaxHeight = Number(movieHeight) + ftHeight;
                    }
                    else if (divTagHeight <= 24 || divTagHeight == null) {
                        divTagMaxWidth = Number(divTagWidth);
                        divTagMaxHeight = Math.ceil((movieHeight / movieWidth) * divTagWidth) + ftHeight;
                    }
                    else {
                        divTagMaxWidth = Number(divTagWidth);
                        divTagMaxHeight = Number(divTagHeight);
                    }
                }
                else if (!isNaN(parseInt(setW)) && !isNaN(parseInt(setH))) {
                    setW = parseInt(setW);
                    setH = parseInt(setH);
                    if (setW > divTagWidth && divTagWidth > 150) {
                        divTagMaxWidth = Number(divTagWidth);
                        divTagMaxHeight = Math.ceil((movieHeight / movieWidth) * divTagWidth) + ftHeight;
                    }
                    else {
                        divTagMaxWidth = Number(setW);
                        divTagMaxHeight = Number(setH);
                    }
                }
                else {
                    divTagMaxWidth = Number(movieWidth);
                    divTagMaxHeight = Number(movieHeight) + ftHeight;
                }
                this.width = divTagMaxWidth;
                this.height = divTagMaxHeight;
            };
            EQPlayerModel.prototype.getTagType = function () {
                if (this.publish_tag) {
                    return this.publish_tag;
                }
                if (this.isLive) {
                    this.publish_tag = "LiveOBJ";
                }
                else if (this.stype == "s1" || this.stype == "s2") {
                    if (this.isLightbox) {
                        this.publish_tag = this.stype.toUpperCase() + "LB";
                    }
                    else if (this.isIframe) {
                        this.publish_tag = this.stype.toUpperCase() + "SCRIPT";
                    }
                    else {
                        this.publish_tag = this.stype.toUpperCase() + "OBJ";
                    }
                }
                else {
                    if (this.isLightbox) {
                        this.publish_tag = "LB";
                    }
                    else if (this.isIframe) {
                        this.publish_tag = "SCRIPT";
                    }
                    else {
                        this.publish_tag = "OBJ";
                    }
                }
                return this.publish_tag;
            };
            EQPlayerModel.prototype.destroy = function () {
                for (var prop in this) {
                    this[prop] = null;
                }
            };
            EQPlayerModel.prototype.reset = function () {
                this.init_play = "off";
                this.title = "";
                this.enable = "";
                this.duration = "";
                this.movie_url = "";
                this.movie_url_mobile = "";
                this.movie_url_pd = "";
                this.viewlimit_flg = "";
                this.viewlimit_url = "";
                this.auth = "0";
                this.api_url = "api01-platform.stream.co.jp";
                this.device_profile_id = "0";
                this.movie_list_pd = [];
                this.movie_list_hls = [];
                this.inbound_link = "";
                this.resetThumbnailURL();
                this.subtitles = [];
                this.movie_list = [];
                this.exlink = [];
                this.pc = [];
                this.sp = [];
                this.hostCheckResult = "none";
                this.tk = "";
                this.isAuthPassed = false;
            };
            return EQPlayerModel;
        }());
        model.EQPlayerModel = EQPlayerModel;
    })(model = jstream_t3.model || (jstream_t3.model = {}));
})(jstream_t3 || (jstream_t3 = {}));
(function (jstream_t3) {
    var EnviromentKind = (function () {
        function EnviromentKind() {
        }
        EnviromentKind.HLSJS = "HlsJS";
        EnviromentKind.PC_STREAMING = "pcStreaming";
        EnviromentKind.MOBILE_STREAMING = "mobileStreaming";
        EnviromentKind.MOBILE_PROGRESSIVE = "mobileProgressive";
        EnviromentKind.MOBILE_HLSJS = "mobile_hlsjs";
        EnviromentKind.MOBILE_NATIVE = "mobileNative";
        EnviromentKind.PC_HTML5HLS = "pcHls";
        EnviromentKind.PC_PROGRESSIVE = "pcProgressive";
        EnviromentKind.NO_FLASH = "noFlash";
        return EnviromentKind;
    }());
    jstream_t3.EnviromentKind = EnviromentKind;
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3) {
    var model;
    (function (model) {
        var EQPlayerLiveModel = (function (_super) {
            __extends(EQPlayerLiveModel, _super);
            function EQPlayerLiveModel(params) {
                if (params === void 0) { params = null; }
                var _this = _super.call(this, params) || this;
                _this.isLive = true;
                _this.interval = 0;
                _this.MaxRetryLid = 0;
                _this._liveLidURL = null;
                return _this;
            }
            EQPlayerLiveModel.prototype.parseLive = function () {
                this.seak_use = "off";
                this.time_use = "off";
                this.title_use = "off";
                this.va_use = "off";
                this.tag_use = "off";
                this.init_play = "on";
                this.playbackRate = "";
                if (this.start_time) {
                    this.start_time = 0;
                }
                this.setFooterAlign();
                this.setDefaultQuality();
                this.setLiveList();
                this.setLiveHTML5List();
                this.setLiveHLSUrl();
                this.setLiveKollectiveHLSUrl();
                this.setLiveNestedKollectiveHLSUrl();
                this.setLivePreviewList();
                return true;
            };
            EQPlayerLiveModel.prototype.createLiveServiceModel = function () {
                return new model.EQPlayerLiveServiceModel(this);
            };
            EQPlayerLiveModel.prototype.getPlayerVersion = function () {
                return jstream_t3.version.getVersion();
                ;
            };
            EQPlayerLiveModel.prototype.setDefaultQuality = function () {
                var def_quality;
                if (this.default_quality != null && (parseInt(this.default_quality) > 0 && parseInt(this.default_quality) <= 3)) {
                    def_quality = this.default_quality;
                }
                else {
                    def_quality = '2';
                }
                var len = this.getPropertyNum(this.quality);
                for (var i = def_quality; i > 0; i--) {
                    if (this.quality.hasOwnProperty(i)) {
                        this.default_quality = i;
                        return;
                    }
                }
                for (var i = def_quality; i < 4; i++) {
                    if (this.quality.hasOwnProperty(i)) {
                        this.default_quality = i;
                        return;
                    }
                }
            };
            EQPlayerLiveModel.prototype.setLiveList = function () {
                var i, prop;
                var liveListAll = [];
                var codec = "hds";
                var qualityLen = this.getPropertyNum(this.quality);
                var streamIndex = 0;
                if (this.list[codec]) {
                    while (streamIndex < 2) {
                        var liveList = [];
                        i = 1;
                        for (prop in this.quality) {
                            var liveURLSetting = {};
                            liveURLSetting = {
                                "quality": prop,
                                "url": this.list[codec][prop][streamIndex],
                                "text": this.quality[prop].ja,
                                "text_en": this.quality[prop].en
                            };
                            liveList[qualityLen - i] = liveURLSetting;
                            i++;
                        }
                        liveListAll[streamIndex] = liveList;
                        streamIndex++;
                    }
                    this.movie_list = liveListAll;
                }
            };
            EQPlayerLiveModel.prototype.setLiveHTML5List = function () {
                if (this.getEnvironmentType() != jstream_t3.EnviromentKind.PC_STREAMING && this.getEnvironmentType() != jstream_t3.EnviromentKind.MOBILE_STREAMING && this.getEnvironmentType() != jstream_t3.EnviromentKind.PC_HTML5HLS && this.getEnvironmentType() != jstream_t3.EnviromentKind.HLSJS && this.getEnvironmentType() != jstream_t3.EnviromentKind.MOBILE_HLSJS) {
                    return;
                }
                var i, prop;
                var codec = "nested_hls";
                var qualityLen = this.getPropertyNum(this.quality);
                this.movie_url_mobile = this.list[codec][this.default_quality][0];
                if (window.location.protocol === "https:") {
                    this.movie_url_mobile = _super.prototype.replaceToSSL.call(this, this.movie_url_mobile);
                }
                var movieListMobileAll = [];
                i = 1;
                for (prop in this.quality) {
                    var liveMobileURLSetting = {};
                    var url = this.list[codec][prop][0];
                    if (window.location.protocol === "https:") {
                        url = _super.prototype.replaceToSSL.call(this, url);
                    }
                    liveMobileURLSetting = {
                        "url": url,
                        "text": this.quality[prop].ja
                    };
                    movieListMobileAll[qualityLen - i] = liveMobileURLSetting;
                    i++;
                }
                this.movie_list_mobile = movieListMobileAll;
            };
            EQPlayerLiveModel.prototype.setLiveHLSUrl = function () {
                if (this.getEnvironmentType() != jstream_t3.EnviromentKind.MOBILE_NATIVE) {
                    return;
                }
                var codec = "hls";
                var streamIndex = 0;
                if (this.list[codec][this.default_quality].length > 1) {
                    var streamNum = this.list[codec][this.default_quality].length;
                    var round = Math.floor(Math.random() * 100) % streamNum;
                    this.movie_url_mobile = this.list[codec][this.default_quality][round];
                }
                else {
                    this.movie_url_mobile = this.list[codec][this.default_quality][streamIndex];
                }
                if (window.location.protocol === "https:") {
                    this.movie_url_mobile = _super.prototype.replaceToSSL.call(this, this.movie_url_mobile);
                }
            };
            EQPlayerLiveModel.prototype.setLiveKollectiveHLSUrl = function () {
                if (this.kollective_flg != "1" || this.getEnvironmentType() != jstream_t3.EnviromentKind.PC_STREAMING && this.getEnvironmentType() != jstream_t3.EnviromentKind.MOBILE_STREAMING && this.getEnvironmentType() != jstream_t3.EnviromentKind.PC_HTML5HLS && this.getEnvironmentType() != jstream_t3.EnviromentKind.HLSJS && this.getEnvironmentType() != jstream_t3.EnviromentKind.MOBILE_HLSJS) {
                    return;
                }
                var codec = "nested_kollective_hls";
                var i, prop;
                var qualityLen = this.getPropertyNum(this.quality);
                this.kollective_url = this.list[codec][this.default_quality][0];
                if (window.location.protocol === "https:") {
                    this.kollective_url = _super.prototype.replaceToSSL.call(this, this.kollective_url);
                }
                var movieListMobileAll = [];
                i = 1;
                for (prop in this.quality) {
                    var liveMobileURLSetting = {};
                    var url = this.list[codec][prop][0];
                    if (window.location.protocol === "https:") {
                        url = _super.prototype.replaceToSSL.call(this, url);
                    }
                    liveMobileURLSetting = {
                        "url": url,
                        "text": this.quality[prop].ja
                    };
                    movieListMobileAll[qualityLen - i] = liveMobileURLSetting;
                    i++;
                }
                this.kollective_list = movieListMobileAll;
            };
            EQPlayerLiveModel.prototype.setLiveNestedKollectiveHLSUrl = function () {
                if (this.kollective_flg != "1" || this.getEnvironmentType() != jstream_t3.EnviromentKind.MOBILE_NATIVE) {
                    return;
                }
                var codec = "setLiveNestedKollectiveHLSUrl";
                var streamIndex = 0;
                if (this.list[codec][this.default_quality].length > 1) {
                    var streamNum = this.list[codec][this.default_quality].length;
                    var round = Math.floor(Math.random() * 100) % streamNum;
                    this.kollective_url = this.list[codec][this.default_quality][round];
                }
                else {
                    this.kollective_url = this.list[codec][this.default_quality][streamIndex];
                }
                if (window.location.protocol === "https:") {
                    this.kollective_url = _super.prototype.replaceToSSL.call(this, this.movie_url_mobile);
                }
            };
            EQPlayerLiveModel.prototype.getLiveLidURL = function () {
                if (!this.img) {
                    return "";
                }
                if (this.img.indexOf("http") === -1) {
                    this._liveLidURL = "../../jmc_thumb/" + this.img;
                }
                else if (window.location.protocol === "https:" && this.img.indexOf("https:") != 0) {
                    var list = this.img.split("http").join("https").split("/");
                    list[2] = this.getSSLDomain();
                    this._liveLidURL = list.join("/");
                }
                else {
                    this._liveLidURL = this.img;
                }
                return this._liveLidURL;
            };
            EQPlayerLiveModel.prototype.setLivePreviewList = function () {
                if (this.line !== 1 && this.line !== 2) {
                    return;
                }
                var i, prop, streamIndex, previewStreamIndex, codec, url;
                var liveListAll = [];
                var qualityLen = this.getPropertyNum(this.quality);
                if (this.line === 1) {
                    previewStreamIndex = 0;
                }
                else if (this.line === 2) {
                    previewStreamIndex = 1;
                }
                if (this.getEnvironmentType() == jstream_t3.EnviromentKind.PC_STREAMING || this.getEnvironmentType() == jstream_t3.EnviromentKind.MOBILE_STREAMING || this.getEnvironmentType() == jstream_t3.EnviromentKind.PC_HTML5HLS || this.getEnvironmentType() == jstream_t3.EnviromentKind.HLSJS || this.getEnvironmentType() == jstream_t3.EnviromentKind.MOBILE_HLSJS) {
                    codec = "hls";
                    streamIndex = 0;
                    while (streamIndex < 2) {
                        var liveList = [];
                        i = 1;
                        for (prop in this.quality) {
                            url = this.list[codec][prop][previewStreamIndex];
                            if (window.location.protocol === "https:") {
                                url = _super.prototype.replaceToSSL.call(this, url);
                            }
                            var liveURLSetting = {};
                            liveURLSetting = {
                                "quality": prop,
                                "url": url,
                                "text": this.quality[prop].ja,
                                "text_en": this.quality[prop].en
                            };
                            liveList[qualityLen - i] = liveURLSetting;
                            i++;
                        }
                        liveListAll[streamIndex] = liveList;
                        streamIndex++;
                    }
                    this.movie_url_mobile = this.list[codec][this.default_quality][previewStreamIndex];
                    if (window.location.protocol === "https:") {
                        this.movie_url_mobile = _super.prototype.replaceToSSL.call(this, this.movie_url_mobile);
                    }
                    this.movie_list_mobile = liveListAll[previewStreamIndex];
                    return;
                }
                codec = "hds";
                streamIndex = 0;
                while (streamIndex < 2) {
                    var liveList = [];
                    i = 1;
                    for (prop in this.quality) {
                        var liveURLSetting = {};
                        liveURLSetting = {
                            "quality": prop,
                            "url": this.list[codec][prop][previewStreamIndex],
                            "text": this.quality[prop].ja,
                            "text_en": this.quality[prop].en
                        };
                        liveList[qualityLen - i] = liveURLSetting;
                        i++;
                    }
                    liveListAll[streamIndex] = liveList;
                    streamIndex++;
                }
                this.movie_list = liveListAll;
            };
            EQPlayerLiveModel.prototype.getPropertyNum = function (obj) {
                var len = 0;
                for (var key in obj) {
                    ++len;
                }
                return len;
            };
            EQPlayerLiveModel.prototype.getPreviewMode = function () {
                if (this.line !== 1 && this.line !== 2) {
                    return false;
                }
                else {
                    return true;
                }
            };
            return EQPlayerLiveModel;
        }(model.EQPlayerModel));
        model.EQPlayerLiveModel = EQPlayerLiveModel;
    })(model = jstream_t3.model || (jstream_t3.model = {}));
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3) {
    var model;
    (function (model) {
        var EQPlayerServiceModel = (function (_super) {
            __extends(EQPlayerServiceModel, _super);
            function EQPlayerServiceModel(value) {
                var _this = _super.call(this) || this;
                value = value || {};
                _this.stype = value.stype || "";
                _this.playerDir = value.playerDir || "";
                _this.contract_id = value.contract_id || "";
                _this.player_id = value.player_id || "";
                _this.meta_id = value.meta_id || "";
                _this.partner_id = value.partner_id || "";
                _this.maker_id = value.maker_id || "";
                _this.product_id = value.product_id || "";
                _this.type = value.type || "";
                _this.viewlimit_flg = value.viewlimit_flg || "";
                _this.viewlimit_url = value.viewlimit_url || "";
                _this.isLive = value.isLive || false;
                if (value.isIframe) {
                    _this.domain = value.domain || value.parent_url;
                }
                else {
                    _this.domain = location.href;
                }
                _this.auth = value.auth || "";
                _this.a = value.a || "";
                _this.auth_mode = value.auth_mode || "and";
                _this.resultObject = value;
                _this.opid = value.optionId || "";
                _this.lpid = value.lpid || "";
                return _this;
            }
            return EQPlayerServiceModel;
        }(model.NetServiceModel));
        model.EQPlayerServiceModel = EQPlayerServiceModel;
        var EQPlayerLiveServiceModel = (function (_super) {
            __extends(EQPlayerLiveServiceModel, _super);
            function EQPlayerLiveServiceModel(value) {
                var _this = _super.call(this) || this;
                value = value || {};
                _this.playerDir = value.playerDir || "";
                _this.contract_id = value.contract_id || "";
                _this.player_id = value.player_id || "";
                _this.type = value.type || "";
                _this.viewlimit_flg = value.viewlimit_flg || "";
                _this.viewlimit_url = value.viewlimit_url || "";
                if (value.isIframe) {
                    _this.domain = value.domain || value.parent_url;
                }
                else {
                    _this.domain = location.href;
                }
                _this.auth = value.auth || "";
                _this.a = value.a || "";
                _this.auth_mode = value.auth_mode || "and";
                _this.lpid = value.lpid || "";
                _this.isLive = value.isLive || false;
                _this.resultObject = value;
                return _this;
            }
            return EQPlayerLiveServiceModel;
        }(model.NetServiceModel));
        model.EQPlayerLiveServiceModel = EQPlayerLiveServiceModel;
    })(model = jstream_t3.model || (jstream_t3.model = {}));
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3_1) {
    var PlayerManger = (function () {
        function PlayerManger() {
        }
        PlayerManger.addPlayerAPI = function (player) {
            var jstream_t3 = window["jstream_t3"];
            var players = jstream_t3.PlayerManger_players;
            if (jstream_t3.PlayerManger_players == null) {
                jstream_t3.PlayerManger_players = {};
            }
            jstream_t3.PlayerManger_players[player.objectID] = player;
        };
        PlayerManger.removePlayerAPI = function (objectID) {
            var api = PlayerManger.getPlayer(objectID);
            if (api) {
                PlayerManger.getPlayer(objectID).destroy();
                delete window["jstream_t3"].PlayerManger_players[objectID];
            }
        };
        PlayerManger.getPlayer = function (objectID) {
            var jstream_t3 = window["jstream_t3"];
            var players = jstream_t3.PlayerManger_players;
            if (jstream_t3.PlayerManger_players == null) {
                jstream_t3.PlayerManger_players = {};
            }
            return jstream_t3.PlayerManger_players[objectID];
        };
        PlayerManger.getFlashVars = function (objectID) {
            return PlayerManger.getPlayer(objectID).eqPlayer.getFlashVars().createVarsParam();
        };
        PlayerManger.getFlashVarsLength = function (objectID) {
            return PlayerManger.getPlayer(objectID).eqPlayer.getFlashVarsLength();
        };
        PlayerManger.getFlashVarsAt = function (objectID, index) {
            return PlayerManger.getPlayer(objectID).eqPlayer.getFlashVarsAt(index);
        };
        PlayerManger.dispatchEvent = function (objectID, type) {
            PlayerManger.getPlayer(objectID).dispatchEvent(type);
        };
        PlayerManger.setState = function (objectID, state) {
            PlayerManger.getPlayer(objectID).setState(state);
        };
        PlayerManger.sendClickBeacon = function (objectID, state) {
            PlayerManger.getPlayer(objectID).sendClickBeacon(state);
        };
        return PlayerManger;
    }());
    jstream_t3_1.PlayerManger = PlayerManger;
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3) {
    var events;
    (function (events) {
        var EventDispatcher = (function () {
            function EventDispatcher() {
                this.listeners = {};
            }
            EventDispatcher.prototype.dispatchEvent = function (event) {
                var e;
                var type;
                if (event instanceof events.Event) {
                    type = event.type;
                    e = event;
                }
                else {
                    type = event;
                    e = new events.Event(type);
                }
                if (this.listeners[type] != null) {
                    e.currentTarget = this;
                    for (var i = 0; i < this.listeners[type].length; i++) {
                        var listener = this.listeners[type][i];
                        try {
                            listener.handler(e);
                        }
                        catch (error) {
                            if (window.console) {
                                console.error(error.stack);
                            }
                        }
                    }
                }
            };
            EventDispatcher.prototype.dispatchCustomEvent = function (event) {
                var e;
                var type;
                if (event instanceof CustomEvent) {
                    type = event.type;
                    e = event;
                }
                if (this.listeners[type] != null) {
                    for (var i = 0; i < this.listeners[type].length; i++) {
                        var listener = this.listeners[type][i];
                        try {
                            listener.handler(e);
                        }
                        catch (error) {
                            if (window.console) {
                                console.error(error.stack);
                            }
                        }
                    }
                }
            };
            EventDispatcher.prototype.addEventListener = function (type, callback, priolity) {
                if (priolity === void 0) { priolity = 0; }
                if (this.listeners[type] == null) {
                    this.listeners[type] = [];
                }
                this.listeners[type].push(new EventListener(type, callback, priolity));
                this.listeners[type].sort(function (listerner1, listener2) {
                    return listener2.priolity - listerner1.priolity;
                });
            };
            EventDispatcher.prototype.removeEventListener = function (type, callback) {
                if (this.hasEventListener(type, callback)) {
                    for (var i = 0; i < this.listeners[type].length; i++) {
                        var listener = this.listeners[type][i];
                        if (listener.equalCurrentListener(type, callback)) {
                            listener.handler = null;
                            this.listeners[type].splice(i, 1);
                            return;
                        }
                    }
                }
            };
            EventDispatcher.prototype.clearEventListener = function () {
                this.listeners = {};
            };
            EventDispatcher.prototype.containEventListener = function (type) {
                if (this.listeners[type] == null)
                    return false;
                return this.listeners[type].length > 0;
            };
            EventDispatcher.prototype.hasEventListener = function (type, callback) {
                if (this.listeners[type] == null)
                    return false;
                for (var i = 0; i < this.listeners[type].length; i++) {
                    var listener = this.listeners[type][i];
                    if (listener.equalCurrentListener(type, callback)) {
                        return true;
                    }
                }
                return false;
            };
            return EventDispatcher;
        }());
        events.EventDispatcher = EventDispatcher;
        var EventListener = (function () {
            function EventListener(type, handler, priolity) {
                if (type === void 0) { type = null; }
                if (handler === void 0) { handler = null; }
                if (priolity === void 0) { priolity = 0; }
                this.type = type;
                this.handler = handler;
                this.priolity = priolity;
            }
            EventListener.prototype.equalCurrentListener = function (type, handler) {
                if (this.type == type && this.handler == handler) {
                    return true;
                }
                return false;
            };
            return EventListener;
        }());
    })(events = jstream_t3.events || (jstream_t3.events = {}));
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3) {
    var utils;
    (function (utils) {
        var Timer = (function (_super) {
            __extends(Timer, _super);
            function Timer(interval, repeateCount) {
                if (repeateCount === void 0) { repeateCount = 0; }
                var _this = _super.call(this) || this;
                _this.interval = interval;
                _this.repeateCount = repeateCount;
                _this.running = false;
                return _this;
            }
            Timer.prototype.start = function () {
                var _this = this;
                this.running = true;
                this.currentCount = 0;
                this.intervalID = setInterval(function () {
                    if (_this.repeateCount > 0 && _this.currentCount > _this.repeateCount) {
                        _this.dispatchEvent(Timer.TIMER_COMPLETE);
                        _this.stop();
                        return;
                    }
                    _this.dispatchEvent(Timer.TIMER);
                    _this.currentCount++;
                }, this.interval);
            };
            Timer.prototype.stop = function () {
                clearInterval(this.intervalID);
                this.running = false;
            };
            Timer.prototype.reset = function () {
                this.stop();
                this.currentCount = 0;
            };
            Timer.TIMER = "time";
            Timer.TIMER_COMPLETE = "timeComplete";
            return Timer;
        }(jstream_t3.events.EventDispatcher));
        utils.Timer = Timer;
    })(utils = jstream_t3.utils || (jstream_t3.utils = {}));
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3) {
    var utils;
    (function (utils) {
        var HashChecker = (function (_super) {
            __extends(HashChecker, _super);
            function HashChecker(checkInterval) {
                if (checkInterval === void 0) { checkInterval = 300; }
                var _this = _super.call(this) || this;
                _this.timer = new utils.Timer(checkInterval);
                _this.timer.addEventListener("time", function () { _this.checkHash(); });
                _this.checkHash();
                return _this;
            }
            HashChecker.prototype.checkHash = function () {
                var hash = window.location.hash.slice(1);
                if (this.currentHash != hash) {
                    this.currentHash = hash;
                    this.dispatchEvent("chenge");
                }
            };
            HashChecker.prototype.start = function () {
                this.timer.start();
            };
            HashChecker.prototype.stop = function () {
                this.timer.stop();
            };
            return HashChecker;
        }(jstream_t3.events.EventDispatcher));
        utils.HashChecker = HashChecker;
    })(utils = jstream_t3.utils || (jstream_t3.utils = {}));
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3) {
    var geom;
    (function (geom) {
        var Point = (function () {
            function Point(x, y) {
                if (x === void 0) { x = 0; }
                if (y === void 0) { y = 0; }
                this.x = x;
                this.y = y;
            }
            Point.prototype.racio = function () {
                return this.y / this.x;
            };
            return Point;
        }());
        geom.Point = Point;
    })(geom = jstream_t3.geom || (jstream_t3.geom = {}));
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3) {
    var geom;
    (function (geom) {
        var Rectangle = (function () {
            function Rectangle(x, y, width, height) {
                if (x === void 0) { x = 0; }
                if (y === void 0) { y = 0; }
                if (width === void 0) { width = 0; }
                if (height === void 0) { height = 0; }
                this.x = x;
                this.y = y;
                this.width = width;
                this.height = height;
            }
            Rectangle.prototype.fexedZoom = function (width, height) {
                var xScale = width / this.width;
                var yScale = height / this.height;
                var scale = (xScale > yScale) ? yScale : xScale;
                this.zoom(scale);
                return this;
            };
            Rectangle.prototype.centerXY = function (width, height, basePosition) {
                if (basePosition === void 0) { basePosition = null; }
                if (basePosition == null) {
                    basePosition = new geom.Point();
                }
                this.x = Math.floor((width - this.width) / 2) + basePosition.x;
                this.y = Math.floor((height - this.height) / 2) + basePosition.y;
                return this;
            };
            Rectangle.prototype.zoom = function (scale) {
                this.width *= scale;
                this.height *= scale;
                return this;
            };
            return Rectangle;
        }());
        geom.Rectangle = Rectangle;
    })(geom = jstream_t3.geom || (jstream_t3.geom = {}));
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3) {
    var view;
    (function (view) {
        var ViewElement = (function (_super) {
            __extends(ViewElement, _super);
            function ViewElement(dom, style) {
                if (dom === void 0) { dom = null; }
                if (style === void 0) { style = null; }
                var _this = _super.call(this) || this;
                _this.parent = null;
                _this.id = _this.createID();
                _this.children = [];
                _this.childrenHash = {};
                _this.dom = _this.createDom(dom);
                if (!dom) {
                    _this.initStyle(style);
                }
                return _this;
            }
            ViewElement.prototype.createID = function () {
                return "t" + Math.floor(Math.random() * new Date().getTime());
            };
            ViewElement.prototype.createDom = function (dom) {
                if (dom === void 0) { dom = null; }
                if (dom == null) {
                    dom = document.createElement("div");
                }
                this.setUpEvent(dom);
                return dom;
            };
            ViewElement.prototype.useHandCursole = function (value) {
                this.dom.style.cursor = value ? "pointer" : null;
            };
            ViewElement.prototype.setUpEvent = function (dom) {
                var _this = this;
                dom.onload = function () {
                    _this.dispatchEvent(DOMEventKind.LOAD);
                };
                dom.onclick = function () {
                    _this.dispatchEvent(MouseEventKind.CLICK);
                };
                dom.onmouseout = function () {
                    _this.dispatchEvent(MouseEventKind.MOUSE_OUT);
                };
                dom.onmouseover = function () {
                    _this.dispatchEvent(MouseEventKind.MOUSE_OVER);
                };
                dom.onmousemove = function () {
                    _this.dispatchEvent(MouseEventKind.MOUSE_MOVE);
                };
                dom.onmousedown = function () {
                    _this.dispatchEvent(MouseEventKind.MOUSE_DOWN);
                };
                dom.onmouseup = function () {
                    _this.dispatchEvent(MouseEventKind.MOUSE_UP);
                };
            };
            ViewElement.prototype.initStyle = function (style) {
                if (style === void 0) { style = null; }
                if (style == null)
                    style = {};
                this.dom.style.position = style.position || "absolute";
                this.dom.style.margin = style.margin || "0px";
                this.dom.style.padding = style.padding || "0px";
                this.dom.style.left = style.left || "0px";
                this.dom.style.top = style.top || "0px";
            };
            ViewElement.prototype.setNumberStyle = function (type, value) {
                if (value === void 0) { value = null; }
                if (value != null) {
                    this.dom.style[type] = value.toString() + "px";
                }
                return this.getNumberStyle(type);
            };
            ViewElement.prototype.setStringStyle = function (type, value) {
                if (value === void 0) { value = null; }
                if (value != null) {
                    this.dom.style[type] = value;
                }
                return this.getStringStyle(type);
            };
            ViewElement.prototype.getNumberStyle = function (type) {
                if (!this.dom.style[type])
                    return 0;
                return parseInt(this.dom.style[type].slice(0, -2));
            };
            ViewElement.prototype.getStringStyle = function (type) {
                if (!this.dom.style[type])
                    return "";
                return (this.dom.style[type]);
            };
            ViewElement.prototype.left = function (value) {
                if (value === void 0) { value = null; }
                return this.setNumberStyle("left", value);
            };
            ViewElement.prototype.top = function (value) {
                if (value === void 0) { value = null; }
                return this.setNumberStyle("top", value);
            };
            ViewElement.prototype.right = function (value) {
                if (value === void 0) { value = null; }
                return this.setNumberStyle("right", value);
            };
            ViewElement.prototype.bottom = function (value) {
                if (value === void 0) { value = null; }
                return this.setNumberStyle("bottom", value);
            };
            ViewElement.prototype.width = function (value) {
                if (value === void 0) { value = null; }
                if (value != null)
                    this.dom.style.width = value + "px";
                return this.dom.offsetWidth - this.getNumberStyle("borderLeftWidth") - this.getNumberStyle("borderRightWidth") - this.getNumberStyle("paddingLeft") - this.getNumberStyle("paddingRight");
            };
            ViewElement.prototype.outerWidth = function () {
                return this.dom.offsetWidth;
            };
            ViewElement.prototype.height = function (value) {
                if (value === void 0) { value = null; }
                if (value != null)
                    this.dom.style.height = value + "px";
                return this.dom.offsetHeight;
            };
            ViewElement.prototype.outerHeight = function () {
                return this.dom.offsetHeight;
            };
            ViewElement.prototype.innerHeight = function () {
                return this.dom.offsetHeight;
            };
            ViewElement.prototype.borderVisible = function (value) {
                if (value === void 0) { value = null; }
                if (value != null) {
                    this.dom.style.border = !value ? "none" : value;
                }
                return this.dom.style.border != "none";
            };
            ViewElement.prototype.visible = function (value) {
                if (value === void 0) { value = null; }
                if (value != null) {
                    this.dom.style.visibility = value ? "visible" : "hidden";
                }
                return this.dom.style.visibility == "visible";
            };
            ViewElement.prototype.alpha = function (value) {
                if (value === void 0) { value = null; }
                if (value != null) {
                    this.dom.style.opacity = value.toString();
                }
                return parseFloat(this.dom.style.opacity);
            };
            ViewElement.prototype.getElement = function () {
                return this.dom;
            };
            ViewElement.prototype.addChild = function (value) {
                if (this.childrenHash[value.id] == null) {
                    this.children.push(value);
                    this.childrenHash[value.id] = value;
                    this.dom.appendChild(value.getElement());
                    value.parent = this;
                }
            };
            ViewElement.prototype.removeChild = function (value) {
                if (this.childrenHash[value.id]) {
                    delete this.childrenHash[value.id];
                    for (var i = 0; i < this.children.length; i++) {
                        if (this.children[i].id == value.id) {
                            this.children.splice(i, 1);
                            this.dom.removeChild(value.getElement());
                            value.parent = null;
                            return;
                        }
                    }
                }
            };
            ViewElement.prototype.parentDom = function () {
                return this.dom.parentElement;
            };
            return ViewElement;
        }(jstream_t3.events.EventDispatcher));
        view.ViewElement = ViewElement;
        var MouseEventKind = (function () {
            function MouseEventKind() {
            }
            MouseEventKind.MOUSE_UP = "mouseup";
            MouseEventKind.MOUSE_DOWN = "mosuedown";
            MouseEventKind.MOUSE_MOVE = "mousemove";
            MouseEventKind.CLICK = "click";
            MouseEventKind.MOUSE_OUT = "mouseout";
            MouseEventKind.MOUSE_OVER = "mouseover";
            return MouseEventKind;
        }());
        view.MouseEventKind = MouseEventKind;
        var DOMEventKind = (function () {
            function DOMEventKind() {
            }
            DOMEventKind.LOAD = "load";
            return DOMEventKind;
        }());
        view.DOMEventKind = DOMEventKind;
    })(view = jstream_t3.view || (jstream_t3.view = {}));
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3) {
    var view;
    (function (view) {
        var ImageView = (function (_super) {
            __extends(ImageView, _super);
            function ImageView(fit) {
                if (fit === void 0) { fit = true; }
                var _this = _super.call(this) || this;
                _this.fit = fit;
                _this.isLoading = false;
                _this._rawHeigt = 0;
                _this._rawWidth = 0;
                _this.setupRawSize();
                _this.addEventListener(view.DOMEventKind.LOAD, _this.onload);
                return _this;
            }
            ImageView.prototype.createDom = function (dom) {
                if (dom === void 0) { dom = null; }
                var img = document.createElement("img");
                var element = _super.prototype.createDom.call(this, img);
                return element;
            };
            ImageView.prototype.onload = function (e) {
                var currentTarget = e.currentTarget;
                currentTarget.isLoading = true;
                if (currentTarget.fit) {
                    currentTarget.resize(e);
                }
                currentTarget.visible(true);
            };
            ImageView.prototype.rawHeight = function () {
                return this.getElement().naturalHeight;
            };
            ImageView.prototype.rawWidth = function () {
                return this.getElement().naturalWidth;
            };
            ImageView.prototype.load = function (src) {
                var _this = this;
                this.isLoading = true;
                this.visible(false);
                this._rawWidth = 0;
                this._rawHeigt = 0;
                this.getElement().src = src;
                if (!("naturalWidth" in this.getElement())) {
                    setTimeout(function () {
                        if (_this.isLoading && _this.getElement()["width"] != 0) {
                            _this.dispatchEvent(view.DOMEventKind.LOAD);
                        }
                    }, 33);
                }
            };
            ImageView.prototype.resize = function (e) {
                var currentTarget = e.currentTarget;
                currentTarget.IEResize();
                var rect = new jstream_t3.geom.Rectangle(0, 0, currentTarget.rawWidth(), currentTarget.rawHeight());
                rect.fexedZoom(currentTarget.parent.width(), currentTarget.parent.height());
                rect.centerXY(currentTarget.parent.width(), currentTarget.parent.height());
                currentTarget.left(rect.x);
                currentTarget.top(rect.y);
                currentTarget.width(rect.width);
                currentTarget.height(rect.height);
            };
            ImageView.prototype.IEResize = function () {
                var image = this.getElement();
                if ("naturalWidth" in image) {
                    return;
                }
                var run = image.runtimeStyle;
                var mem = { w: run.width, h: run.height };
                run.width = "auto";
                run.height = "auto";
                this._rawWidth = image.width;
                this._rawHeigt = image.height;
                run.width = mem.w;
                run.height = mem.h;
            };
            ImageView.prototype.setupRawSize = function () {
                var _this = this;
                if ("naturalWidth" in this.getElement()) {
                    return;
                }
                this.rawHeight = function () { return _this._rawHeigt; };
                this.rawWidth = function () { return _this._rawWidth; };
            };
            return ImageView;
        }(view.ViewElement));
        view.ImageView = ImageView;
    })(view = jstream_t3.view || (jstream_t3.view = {}));
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3) {
    var view;
    (function (view) {
        var ThumbnailView = (function () {
            function ThumbnailView() {
                this.thumbnail = new view.ImageView();
                this.wMark = new view.ImageView(false);
                this.base = new view.ViewElement(null, { position: "relative" });
            }
            ThumbnailView.prototype.createElement = function (thumbnailURL, wmarkPath, width, height) {
                if (width === void 0) { width = 100; }
                if (height === void 0) { height = 100; }
                this.base.width(width);
                this.base.height(height);
                this.base.addChild(this.thumbnail);
                this.thumbnail.useHandCursole(true);
                this.thumbnail.load(thumbnailURL);
                this.thumbnailImage = new Image();
                this.thumbnailImage.src = thumbnailURL;
                var wSize = 99;
                if (width < 240 || height < 180) {
                    wSize = 49;
                }
                this.waterMarkSize = wSize;
                var left;
                var top;
                left = Math.floor(width / 2 - wSize / 2);
                top = Math.floor(height / 2 - wSize / 2);
                if (wmarkPath != null) {
                    this.wMark.left(left);
                    this.wMark.top(top);
                    this.wMark.width(wSize);
                    this.wMark.height(wSize);
                    this.wMark.load(wmarkPath);
                    this.wMark.useHandCursole(true);
                    this.base.addChild(this.wMark);
                }
                return this.base;
            };
            ThumbnailView.prototype.setSize = function (width, height) {
                this.base.width(width);
                this.base.height(height);
                this.wMark.left(Math.floor(width / 2 - this.wMark.width() / 2));
                this.wMark.top(Math.floor(height / 2 - this.wMark.height() / 2));
            };
            ThumbnailView.prototype.setSizeResponsive = function (responsive) {
                if (responsive == "on") {
                    this.base.setStringStyle("position", "absolute");
                }
                var userAgent = window.navigator.userAgent.toLowerCase();
                var appVersion = window.navigator.appVersion.toLowerCase();
                if (appVersion.indexOf("msie 6.") != -1 || appVersion.indexOf("msie 7.") != -1 || appVersion.indexOf("msie 8.") != -1) {
                    var clientHeight;
                    var clientWidth;
                    if (document.compatMode == "BackCompat") {
                        clientWidth = document.body.clientWidth;
                        clientHeight = document.body.clientHeight;
                    }
                    else {
                        clientWidth = document.documentElement.clientWidth;
                        clientHeight = document.documentElement.clientHeight;
                    }
                    var thumbOriginWidth = this.thumbnailImage.width;
                    var thumbOriginHeight = this.thumbnailImage.height;
                    var thumbnailAspect = thumbOriginHeight / thumbOriginWidth;
                    this.base.setStringStyle("width", "100%");
                    this.base.setStringStyle("height", "100%");
                    this.base.setStringStyle("cursor", "pointer");
                    this.thumbnail.setStringStyle("max-width", "100%");
                    this.wMark.setStringStyle("left", "50%");
                    this.wMark.setStringStyle("top", "50%");
                    this.wMark.setStringStyle("margin", this.waterMarkSize / 2 * -1 + "px 0 0 " + this.waterMarkSize / 2 * -1 + "px");
                }
                else {
                    this.base.setStringStyle("width", "100%");
                    this.base.setStringStyle("height", "100%");
                    this.base.setStringStyle("background-image", "url(" + this.thumbnailImage.src + ")");
                    this.base.setStringStyle("background-size", "contain");
                    this.base.setStringStyle("background-repeat", "no-repeat");
                    this.base.setStringStyle("background-position", "center");
                    this.base.setStringStyle("cursor", "pointer");
                    this.thumbnail.getElement().onload = null;
                    this.thumbnail.visible(false);
                    this.thumbnail.setStringStyle("display", "none");
                    this.wMark.setStringStyle("left", "50%");
                    this.wMark.setStringStyle("top", "50%");
                    this.wMark.setStringStyle("margin", this.waterMarkSize / 2 * -1 + "px 0 0 " + this.waterMarkSize / 2 * -1 + "px");
                }
            };
            ThumbnailView.prototype.getElement = function () {
                return this.base.getElement();
            };
            ThumbnailView.prototype.getWaterMark = function () {
                return this.wMark;
            };
            return ThumbnailView;
        }());
        view.ThumbnailView = ThumbnailView;
    })(view = jstream_t3.view || (jstream_t3.view = {}));
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3) {
    var view;
    (function (view) {
        var html5playerTemplate = (function () {
            function html5playerTemplate() {
            }
            ;
            html5playerTemplate.getTemplate = function (deviceType) {
                if (deviceType === "pc") {
                    return this.templateForPC;
                }
                else if (deviceType === "mobile") {
                    return this.templateForMobile;
                }
                return;
            };
            html5playerTemplate.templateForPC = ""
                + "<div class=\"eq-h5_player\" style=\"text-align: left;\">\r\n"
                + "\r\n"
                + "            <div class=\"eq-video_cover\" ></div>\r\n"
                + "            <div class=\"eq-caption_area\">\r\n"
                + "                <span class=\"eq-caption_text\"></span>\r\n"
                + "            </div>\r\n"
                + "              <!-- ヘッダー start -->\r\n"
                + "              <div class=\"eq-header\" style=\"display:none;\">\r\n"
                + "                <div>サンプルのタイトル</div>\r\n"
                + "            </div>\r\n"
                + "            <!-- ヘッダー end -->\r\n"
                + "            <!-- 関連コンテンツ ボタンエリア start -->\r\n"
                + "            <div class=\"eq-sub-container\" style=\"display:none;\">\r\n"
                + "                <div class=\"eq-sub-container-box\">\r\n"
                + "                    <div class=\"eq-btn-movies\" ><div>movies</div></div>\r\n"
                + "                    <div class=\"eq-btn-links\" ><div>links</div></div>\r\n"
                + "                    <div class=\"eq-btn-share\" ><div>share</div></div>\r\n"
                + "                </div>\r\n"
                + "            </div>\r\n"
                + "            <!-- 関連コンテンツ ボタンエリア end -->\r\n"
                + "            <!-- オーバーレイコンテンツ start -->\r\n"
                + "            <div class=\"overlay-container\">\r\n"
                + "                <div style=\"display:none;\" class=\"eq-state-relation\">\r\n"
                + "                    <div class=\"eq-state-movies_inner\">\r\n"
                + "                        <div class=\"eq_relation_title\">関連動画</div>\r\n"
                + "                        <div class=\"eq-state-movies-box\">\r\n"
                + "                            \r\n"
                + "                        </div>\r\n"
                + "                        <div class=\"eq-box-pager\">\r\n"
                + "                            <div>\r\n"
                + "                                <!-- <div class=\"eq-pager eq-foucus\">●</div>\r\n"
                + "                                <div class=\"eq-pager\">●</div>\r\n"
                + "                                <div class=\"eq-pager\">●</div>\r\n"
                + "                                <div class=\"eq-pager\">●</div>\r\n"
                + "                                <div class=\"eq-pager\">●</div> -->\r\n"
                + "                            </div>\r\n"
                + "                        </div>\r\n"
                + "                    </div>\r\n"
                + "                    <div class=\"eq-box-nb\">\r\n"
                + "                        <div>\r\n"
                + "                            <div class=\"eq-btn-prev\"><div>prev</div></div>\r\n"
                + "                            <div class=\"eq-btn-next\"><div>next</div></div>\r\n"
                + "                        </div>\r\n"
                + "                    </div>\r\n"
                + "                    <div class=\"eq-btn-close\">閉じる</div>\r\n"
                + "                </div>\r\n"
                + "                <div style=\"display:none;\" class=\"eq-state-relation\">\r\n"
                + "                    <div class=\"eq-state-links_inner\">\r\n"
                + "                        <div class=\"eq_relation_title\">関連リンク</div>\r\n"
                + "                        <div class=\"eq-state-links-box\">\r\n"
                + "                            \r\n"
                + "                        </div>\r\n"
                + "                    </div>\r\n"
                + "                    <div class=\"eq-btn-close\">閉じる</div>\r\n"
                + "                </div>\r\n"
                + "                <div style=\"display:none;\" class=\"eq-state-relation\">\r\n"
                + "                    <div class=\"eq-state-share_inner\">\r\n"
                + "                        <div class=\"eq-state-share_title eq_relation_title\">シェア</div>\r\n"
                + "                        <div>\r\n"
                + "                            <div class=\"eq-btn-facebook\" style=\"display:none;\"><div >Facebook</div></div>\r\n"
                + "                            <div class=\"eq-btn-twitter\" style=\"display:none;\"><div >Twitter</div></div>\r\n"
                + "                            <div class=\"eq-btn-line\" style=\"display:none;\"><div >LINE</div></div>\r\n"
                + "                            <div class=\"eq-btn-google\" style=\"display:none;\"><div >Google+</div></div>\r\n"
                + "                            <div class=\"eq-btn-viral\" style=\"display:none;\"><div >Viral Tag</div></div>\r\n"
                + "                        </div>\r\n"
                + "                        <div class=\"eq_relation_title\">バイラルタグ</div>\r\n"
                + "                        <form>\r\n"
                + "                            <input type=\"text\" value=\"\" readonly style=\"user-select:text;-moz-user-select: text;\">\r\n"
                + "                        </form>\r\n"
                + "                    </div>\r\n"
                + "                    <div class=\"eq-btn-close\">閉じる</div>\r\n"
                + "                </div>\r\n"
                + "                <div style=\"display:none;\" class=\"eq-state-auth\">\r\n"
                + "                    <div class=\"eq-state-auth_inner\">\r\n"
                + "                        <div class=\"eq_relation_title\">入力してください</div>\r\n"
                + "                        <form>\r\n"
                + "                            <input type=\"text\" value=\"\"><br>\r\n"
                + "                            <input type=\"password\" value=\"\">\r\n"
                + "                        </form>\r\n"
                + "                        <div class=\"eq-btn-play\">\r\n"
                + "                            <div class=\"eq-btn-play_icon\"></div>\r\n"
                + "                            <div class=\"eq-btn-play_text\">動画を見る</div>\r\n"
                + "                        </div>\r\n"
                + "                    </div>\r\n"
                + "                </div>\r\n"
                + "                <div style=\"display:none;\" class=\"eq-state-error\">\r\n"
                + "                    <div class=\"eq-state-error_inner\">\r\n"
                + "                        <div class=\"eq_relation_title\"><span>Content Not Available</span></div>\r\n"
                + "                        <div class=\"eq-errorMessage\">\r\n"
                + "                            This content is not currently available.<br />This content is only available for a limited term.(P5001)\r\n"
                + "                        </div>\r\n"
                + "                    </div>\r\n"
                + "                </div>\r\n"
                + "            </div>\r\n"
                + "            <!-- オーバーレイコンテンツ end -->\r\n"
                + "            <!-- playボタン start -->\r\n"
                + "            <div class=\"eq-area-center\" style=\"display:none;\">\r\n"
                + "                <div>\r\n"
                + "                    <div class=\"eq-center-icon-prev10 eq-none\" ><div ><span class=\"eq-clearfix\">10</span></div></div>\r\n"
                + "                    <div class=\"eq-center-icon-play\" ><div >play</div></div>\r\n"
                + "                    <div class=\"eq-center-icon-next10 eq-none\" ><div ><span class=\"eq-clearfix\">10</span></div></div>\r\n"
                + "                    <div class=\"eq-center-icon-replay\" style=\"display:none;\"><div >replay</div></div>\r\n"
                + "                    <div class=\"eq-center-icon-loading\" style=\"display:none;\"><div >loading</div></div>\r\n"
                + "                    <!-- <div class=\"minimum-icon-play ms\" style=\"display:none;\"><div href=\"#\">play</div></div>\r\n"
                + "                    <div class=\"minimum-icon-sound_max ms\" style=\"display:none;\"><div href=\"#\">mute</div></div>\r\n"
                + "                    <div class=\"minimum-icon-fullscreen ms\" style=\"display:none;\"><div href=\"#\">fullscreen</div></div> -->\r\n"
                + "                </div>\r\n"
                + "            </div>\r\n"
                + "            <!-- playボタン end -->\r\n"
                + "          \r\n"
                + "\r\n"
                + "            <!-- フッター start -->\r\n"
                + "            <div class=\"eq-footer\" style=\"display:none;\">\r\n"
                + "                <div class=\"eq-box-left\">\r\n"
                + "                    <div>\r\n"
                + "                        <div class=\"eq-icon-play\" ><div  >play</div></div>\r\n"
                + "                        <div class=\"eq-icon-prev10\" ><div ><span class=\"eq-clearfix\">10</span></div></div>\r\n"
                + "                        <div class=\"eq-icon-next10\" ><div ><span class=\"eq-clearfix\">10</span></div></div>\r\n"
                + "                        <div class=\"eq-icon-sound\" ><div >sound</div></div>\r\n"
                + "                    </div>\r\n"
                + "                </div>\r\n"
                + "                <div class=\"eq-box-right\">\r\n"
                + "                    <div>\r\n"
                + "                        <div class=\"eq-time\">\r\n"
                + "                            <div>00:00 / 00:00</div>\r\n"
                + "                        </div>\r\n"
                + "                        <div class=\"eq-icon-telop\" ><div ><span class=\"eq-clearfix\">cc</span></div></div>\r\n"
                + "                        <div class=\"eq-icon-resolution\" ><div ><span class=\"eq-clearfix\">1080p</span></div></div>\r\n"
                + "                        <div class=\"eq-icon-speed\" ><div ><span class=\"eq-clearfix\">1.0</span></div></div>\r\n"
                + "                        <div class=\"eq-icon-fullscreen\" ><div >fullscreen</div></div>\r\n"
                + "                    </div>\r\n"
                + "                </div>\r\n"
                + "            </div>\r\n"
                + "            <!-- フッター end -->\r\n"
                + "\r\n"
                + "            <!-- シークバー start -->\r\n"
                + "            <div class=\"eq-box-seekbar\" draggable=\"false\" style=\"display:block;\">\r\n"
                + "                <div class=\"eq-seekbar-container\">\r\n"
                + "                    <div class=\"eq-seek_inner_bar_base\"></div>\r\n"
                + "                    <div class=\"eq-seek_inner_bar_loading\" style=\"width:0%;\"></div>\r\n"
                + "                    <div class=\"eq-seek_inner_bar\" style=\"width:0%;\"></div>\r\n"
                + "                    <div class=\"eq-seek_pointer\" style=\"left:0%;\"></div>\r\n"
                + "                </div>\r\n"
                + "                <!-- seek baloon start -->\r\n"
                + "                <div class=\"eq-balloon-seek\" style=\"display:none;\">\r\n"
                + "                    <div class=\"eq-balloon-base\">\r\n"
                + "                        <img style=\"display:none;\" />\r\n"
                + "                        <div class=\"eq-seek-time\">02:14</div>\r\n"
                + "                        <div class=\"eq-pin\"></div>\r\n"
                + "                    </div>\r\n"
                + "                </div>\r\n"
                + "            </div>\r\n"
                + "            <!-- シークバー end -->\r\n"
                + "            <!-- sound baloon start -->\r\n"
                + "            <div class=\"eq-balloon-sound\" draggable=\"false\" style=\"display:none;\" >\r\n"
                + "                <div class=\"eq-balloon-base\">\r\n"
                + "                    <div class=\"eq-sound_inner_bar_base\"></div>\r\n"
                + "                    <div class=\"eq-sound_inner_bar\"></div>\r\n"
                + "                    <div class=\"eq-sound_pointer\"></div>\r\n"
                + "                    <div class=\"eq-pin\"></div>\r\n"
                + "                </div>\r\n"
                + "            </div>\r\n"
                + "            <!-- volume baloon end -->\r\n"
                + "            <!-- telop baloon start -->\r\n"
                + "            <div class=\"eq-balloon-telop\" style=\"display:none;\">\r\n"
                + "                <div class=\"eq-balloon-base\">\r\n"
                + "                    <div>字 幕</div>\r\n"
                + "                    <div class=\"eq-balloon-box\">\r\n"
                + "                        <div class=\"eq-focus\"><div >日本語</div></div>\r\n"
                + "                        <div><div >English</div></div>\r\n"
                + "                        <div><div >Español</div></div>\r\n"
                + "                        <div><div >한국</div></div>\r\n"
                + "                        <div><div >中国語<span>(カスタム設定1)</span></div></div>\r\n"
                + "                        <div><div >中国語<span>(カスタム設定2)</span></div></div>\r\n"
                + "                        <div><div >オフ</div></div>\r\n"
                + "                    </div>\r\n"
                + "                    <div class=\"eq-pin\"></div>\r\n"
                + "                </div>\r\n"
                + "            </div>\r\n"
                + "            <!-- telop baloon end -->\r\n"
                + "            <!-- resolution baloon start -->\r\n"
                + "            <div class=\"eq-balloon-resolution\" style=\"display:none;\">\r\n"
                + "                <div class=\"eq-balloon-base\">\r\n"
                + "                    <div>画 質</div>\r\n"
                + "                    <div class=\"eq-balloon-box\">\r\n"
                + "                        <div><div >1080p</div></div>\r\n"
                + "                        <div class=\"eq-focus\"><div >720p</div></div>\r\n"
                + "                        <div><div >480p</div></div>\r\n"
                + "                        <div><div >240p</div></div>\r\n"
                + "                        <div><div >144p</div></div>\r\n"
                + "                        <div><div >自 動</div></div>\r\n"
                + "                    </div>\r\n"
                + "                    <div class=\"eq-pin\"></div>\r\n"
                + "                </div>\r\n"
                + "            </div>\r\n"
                + "            <!-- resolution baloon end -->\r\n"
                + "            <!-- speed baloon start -->\r\n"
                + "            <div class=\"eq-balloon-speed\" style=\"display:none;\">\r\n"
                + "                <div class=\"eq-balloon-base\">\r\n"
                + "                    <div>速 度</div>\r\n"
                + "                    <div class=\"eq-balloon-box\">\r\n"
                + "                        <div><div >2.0</div></div>\r\n"
                + "                        <div><div >1.5</div></div>\r\n"
                + "                        <div><div >1.2</div></div>\r\n"
                + "                        <div class=\"eq-focus\"><div >1.0</div></div>\r\n"
                + "                        <div><div >0.7</div></div>\r\n"
                + "                        <div><div >0.5</div></div>\r\n"
                + "                    </div>\r\n"
                + "                    <div class=\"eq-pin\"></div>\r\n"
                + "                </div>\r\n"
                + "            </div>\r\n"
                + "            <!-- speed baloon end -->\r\n"
                + "            <div class=\"eq-auth-cover\" style=\"\r\n"
                + "            display:none;\r\n"
                + "            position: absolute;\r\n"
                + "            width: 100%;\r\n"
                + "            height: 100%;\r\n"
                + "            top: 0px;\r\n"
                + "            left: 0px;\r\n"
                + "            z-index: 99;\r\n"
                + "        \"></div>\r\n"
                + "        </div>";
            html5playerTemplate.templateForMobile = ""
                + "<div class=\"eq-h5_player\">\r\n"
                + "\t\t\t<!-- <video id=\"eq-video\" style=\"width:100%;height:100%;position:absolute;\" playsinline preload=\"metadata\"></video> -->\r\n"
                + "\t\t\t<div class=\"eq-video_cover\"></div>\r\n"
                + "\t\t\t<div class=\"eq-caption_area\">\r\n"
                + "\t\t\t\t<span class=\"eq-caption_text\"></span>\r\n"
                + "\t\t\t</div>\r\n"
                + "\t\t\t<!-- ヘッダー start -->\r\n"
                + "\t\t\t<div class=\"eq-header\" style=\"display:none;\">\r\n"
                + "\t\t\t\t<div>サンプルのタイトル</div>\r\n"
                + "\t\t\t</div>\r\n"
                + "\t\t\t<!-- ヘッダー end -->\r\n"
                + "\r\n"
                + "\t\t\t<!-- 関連コンテンツ ボタンエリア start -->\r\n"
                + "\t\t\t<div class=\"eq-sub-container\" style=\"display:none;\">\r\n"
                + "\t\t\t\t<div class=\"eq-sub-container-box\">\r\n"
                + "\t\t\t\t\t<div class=\"eq-btn-movies\">\r\n"
                + "\t\t\t\t\t\t<div>movies</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t<div class=\"eq-btn-links\">\r\n"
                + "\t\t\t\t\t\t<div>links</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t<div class=\"eq-btn-share\">\r\n"
                + "\t\t\t\t\t\t<div>share</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t</div>\r\n"
                + "\t\t\t</div>\r\n"
                + "\t\t\t<!-- 関連コンテンツ ボタンエリア end -->\r\n"
                + "\t\t\t<!-- オーバーレイコンテンツ start -->\r\n"
                + "\t\t\t<div class=\"overlay-container\" style=\"display:none;\">\r\n"
                + "\t\t\t\t<div class=\"eq-state-relation eq-landscape\" style=\"display:none;\">\r\n"
                + "\t\t\t\t\t<div class=\"eq-state-movies_inner\">\r\n"
                + "\t\t\t\t\t\t<div class=\"eq_relation_title\">関連動画</div>\r\n"
                + "\t\t\t\t\t\t<div class=\"eq-state-movies-box\">\r\n"
                + "\r\n"
                + "\t\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t<div></div>\r\n"
                + "\t\t\t\t\t<div class=\"eq-btn-close\">閉じる</div>\r\n"
                + "\t\t\t\t</div>\r\n"
                + "\t\t\t\t<div class=\"eq-state-relation eq-landscape\" style=\"display:none;\">\r\n"
                + "\t\t\t\t\t<div class=\"eq-state-links_inner\">\r\n"
                + "\t\t\t\t\t\t<div class=\"eq_relation_title\">関連リンク</div>\r\n"
                + "\t\t\t\t\t\t<div class=\"eq-state-links-box\">\r\n"
                + "\r\n"
                + "\t\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t<div class=\"eq-btn-close\">閉じる</div>\r\n"
                + "\t\t\t\t</div>\r\n"
                + "\t\t\t\t<div class=\"eq-state-relation eq-landscape\" style=\"display:none;\">\r\n"
                + "\t\t\t\t\t<div class=\"eq-state-share_inner\">\r\n"
                + "\t\t\t\t\t\t<div class=\"eq-state-share_title eq_relation_title\">シェア</div>\r\n"
                + "\t\t\t\t\t\t<div class=\"eq-state-share-box\">\r\n"
                + "\t\t\t\t\t\t\t<div class=\"eq-btn-facebook\" style=\"display:none;\">\r\n"
                + "\t\t\t\t\t\t\t\t<div>Facebook</div>\r\n"
                + "\t\t\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t\t\t<div class=\"eq-btn-twitter\" style=\"display:none;\">\r\n"
                + "\t\t\t\t\t\t\t\t<div>Twitter</div>\r\n"
                + "\t\t\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t\t\t<div class=\"eq-btn-line\" style=\"display:none;\">\r\n"
                + "\t\t\t\t\t\t\t\t<div>LINE</div>\r\n"
                + "\t\t\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t\t\t<div class=\"eq-btn-google\" style=\"display:none;\">\r\n"
                + "\t\t\t\t\t\t\t\t<div>Google+</div>\r\n"
                + "\t\t\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t<div class=\"eq-btn-close\">閉じる</div>\r\n"
                + "\t\t\t\t</div>\r\n"
                + "\t\t\t\t<div style=\"display:none;\" class=\"eq-state-auth\">\r\n"
                + "\t\t\t\t\t<div class=\"eq-state-auth_inner\">\r\n"
                + "\t\t\t\t\t\t<div class=\"eq_relation_title\">入力してください</div>\r\n"
                + "\t\t\t\t\t\t<form>\r\n"
                + "\t\t\t\t\t\t\t<input type=\"text\" value=\"\">\r\n"
                + "\t\t\t\t\t\t\t<br>\r\n"
                + "\t\t\t\t\t\t\t<input type=\"password\" value=\"\">\r\n"
                + "\t\t\t\t\t\t</form>\r\n"
                + "\t\t\t\t\t\t<div class=\"eq-btn-play\">\r\n"
                + "\t\t\t\t\t\t\t<div class=\"eq-btn-play_icon\"></div>\r\n"
                + "\t\t\t\t\t\t\t<div class=\"eq-btn-play_text\">動画を見る</div>\r\n"
                + "\t\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t</div>\r\n"
                + "\t\t\t\t<div style=\"display:none;\" class=\"eq-state-error\">\r\n"
                + "\t\t\t\t\t<div class=\"eq-state-error_inner\">\r\n"
                + "\t\t\t\t\t\t<div class=\"eq_relation_title\">\r\n"
                + "\t\t\t\t\t\t\t<span>エラータイトル</span>\r\n"
                + "\t\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t\t<div class=\"eq-errorMessage\">\r\n"
                + "\t\t\t\t\t\t\tエラーメッセージ\r\n"
                + "\t\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t</div>\r\n"
                + "\t\t\t</div>\r\n"
                + "\r\n"
                + "\t\t\t<!-- オーバーレイコンテンツ end -->\r\n"
                + "\t\t\t<!-- playボタン start -->\r\n"
                + "\t\t\t<div class=\"eq-area-center\" style=\"display:none;\">\r\n"
                + "\t\t\t\t<div>\r\n"
                + "\t\t\t\t\t<div class=\"eq-icon-prev10\" style=\"display:none;\">\r\n"
                + "\t\t\t\t\t\t<div>\r\n"
                + "\t\t\t\t\t\t\t<span class=\"eq-clearfix\">10</span>\r\n"
                + "\t\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t<div class=\"eq-icon-play eq-landscape\" style=\"display:none;\">\r\n"
                + "\t\t\t\t\t\t<div>play</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t<div class=\"eq-icon-next10\" style=\"display:none;\">\r\n"
                + "\t\t\t\t\t\t<div>\r\n"
                + "\t\t\t\t\t\t\t<span class=\"eq-clearfix\">10</span>\r\n"
                + "\t\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t<div class=\"eq-icon-replay eq-landscape\" style=\"display:none;\">\r\n"
                + "\t\t\t\t\t\t<div>replay</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t</div>\r\n"
                + "\t\t\t\t<div>\r\n"
                + "\t\t\t\t\t<div class=\"eq-icon-play eq-portlate\">\r\n"
                + "\t\t\t\t\t\t<div>play</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t<div class=\"eq-icon-sound\">\r\n"
                + "\t\t\t\t\t\t<div>sound</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t<div class=\"eq-icon-telop\">\r\n"
                + "\t\t\t\t\t\t<div>\r\n"
                + "\t\t\t\t\t\t\t<span class=\"eq-clearfix\">cc</span>\r\n"
                + "\t\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t<div class=\"eq-icon-resolution\">\r\n"
                + "\t\t\t\t\t\t<div>\r\n"
                + "\t\t\t\t\t\t\t<span class=\"eq-clearfix\">1080p</span>\r\n"
                + "\t\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t<div class=\"eq-icon-speed\">\r\n"
                + "\t\t\t\t\t\t<div>\r\n"
                + "\t\t\t\t\t\t\t<span class=\"eq-clearfix\">1.0</span>\r\n"
                + "\t\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t<div class=\"eq-icon-fullscreen\">\r\n"
                + "\t\t\t\t\t\t<div>fullscreen_close</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t</div>\r\n"
                + "\t\t\t\t<div>\r\n"
                + "\t\t\t\t\t<div class=\"eq-icon-loading\" style=\"display:none;\">\r\n"
                + "\t\t\t\t\t\t<div>loading</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t</div>\r\n"
                + "\t\t\t</div>\r\n"
                + "\t\t\t<!-- playボタン end -->\r\n"
                + "\r\n"
                + "\r\n"
                + "\t\t\t<!-- 時間表示 end -->\r\n"
                + "\t\t\t<div class=\"eq-box-time eq-ls\" style=\"display:none;\">\r\n"
                + "\t\t\t\t<div>01:23</div>\r\n"
                + "\t\t\t\t<div>05:31</div>\r\n"
                + "\t\t\t</div>\r\n"
                + "\t\t\t<!-- 時間表示 end -->\r\n"
                + "\r\n"
                + "\t\t\t<!-- フッター start -->\r\n"
                + "\t\t\t<div class=\"eq-footer\" style=\"display:none;\">\r\n"
                + "\t\t\t\t<!-- シークバー start -->\r\n"
                + "\t\t\t\t<div class=\"eq-box-seekbar\">\r\n"
                + "\t\t\t\t\t<div class=\"eq-seekbar-container\">\r\n"
                + "\t\t\t\t\t\t<div class=\"eq-seek_inner_bar_base\"></div>\r\n"
                + "\t\t\t\t\t\t<div class=\"eq-seek_inner_bar_loading\" style=\"width:0%;\"></div>\r\n"
                + "\t\t\t\t\t\t<div class=\"eq-seek_inner_bar\" style=\"width:0%;\"></div>\r\n"
                + "\t\t\t\t\t\t<div class=\"eq-seek_pointer\" style=\"left:0%;\"></div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t<!-- seek baloon start -->\r\n"
                + "\t\t\t\t\t<div class=\"eq-balloon-seek\" style=\"display:none;\">\r\n"
                + "\t\t\t\t\t\t<div class=\"eq-balloon-base\">\r\n"
                + "\t\t\t\t\t\t\t<img style=\"display:none;\" />\r\n"
                + "\t\t\t\t\t\t\t<div class=\"eq-seek-time\">02:14</div>\r\n"
                + "\t\t\t\t\t\t\t<div class=\"eq-pin\"></div>\r\n"
                + "\t\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t</div>\r\n"
                + "\t\t\t\t<!-- シークバー end -->\r\n"
                + "\t\t\t</div>\r\n"
                + "\t\t\t<!-- フッター end -->\r\n"
                + "\t\t\t<div class=\"eq-select-telop\" style=\"display:none;\">\r\n"
                + "\t\t\t\t<div>字幕設定</div>\r\n"
                + "\t\t\t\t<div class=\"eq-btn-close\">閉じる</div>\r\n"
                + "\t\t\t\t<div class=\"eq-select-box\">\r\n"
                + "\t\t\t\t\t<div class=\"eq-focus\">\r\n"
                + "\t\t\t\t\t\t<div>日本語</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t<div>\r\n"
                + "\t\t\t\t\t\t<div>English</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t<div>\r\n"
                + "\t\t\t\t\t\t<div>Español</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t<div>\r\n"
                + "\t\t\t\t\t\t<div>한국</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t<div class=\"eq-long\">\r\n"
                + "\t\t\t\t\t\t<div>中国語\r\n"
                + "\t\t\t\t\t\t\t<span>(カスタム設定1)</span>\r\n"
                + "\t\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t<div>\r\n"
                + "\t\t\t\t\t\t<div>字幕オフ</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t</div>\r\n"
                + "\t\t\t</div>\r\n"
                + "\t\t\t<div class=\"eq-select-resolution\" style=\"display:none;\">\r\n"
                + "\t\t\t\t<div>画質設定</div>\r\n"
                + "\t\t\t\t<div class=\"eq-btn-close\">閉じる</div>\r\n"
                + "\t\t\t\t<div class=\"eq-select-box\">\r\n"
                + "\t\t\t\t\t<div>\r\n"
                + "\t\t\t\t\t\t<div>1080p</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t<div class=\"eq-focus\">\r\n"
                + "\t\t\t\t\t\t<div>720p</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t<div>\r\n"
                + "\t\t\t\t\t\t<div>480p</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t<div>\r\n"
                + "\t\t\t\t\t\t<div>240p</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t<div>\r\n"
                + "\t\t\t\t\t\t<div>144p</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t<div>\r\n"
                + "\t\t\t\t\t\t<div>自 動</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t</div>\r\n"
                + "\t\t\t</div>\r\n"
                + "\t\t\t<!-- speed start -->\r\n"
                + "\t\t\t<div class=\"eq-select-speed\" style=\"display:none;\">\r\n"
                + "\t\t\t\t<div>速度設定</div>\r\n"
                + "\t\t\t\t<div class=\"eq-btn-close\">閉じる</div>\r\n"
                + "\t\t\t\t<div class=\"eq-select-box\">\r\n"
                + "\t\t\t\t\t<div>\r\n"
                + "\t\t\t\t\t\t<div>2.0</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t<div>\r\n"
                + "\t\t\t\t\t\t<div>1.5</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t<div>\r\n"
                + "\t\t\t\t\t\t<div>1.2</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t<div class=\"eq-focus\">\r\n"
                + "\t\t\t\t\t\t<div>1.0</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t<div>\r\n"
                + "\t\t\t\t\t\t<div>0.7</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t\t<div>\r\n"
                + "\t\t\t\t\t\t<div>0.5</div>\r\n"
                + "\t\t\t\t\t</div>\r\n"
                + "\t\t\t\t</div>\r\n"
                + "\t\t\t</div>\r\n"
                + "\t\t\t<div class=\"eq-auth-cover\" style=\"\r\n"
                + "\t\t\tdisplay:none;\r\n"
                + "\t\t\tposition: absolute;\r\n"
                + "\t\t\twidth: 100%;\r\n"
                + "\t\t\theight: 100%;\r\n"
                + "\t\t\ttop: 0px;\r\n"
                + "\t\t\tleft: 0px;\r\n"
                + "\t\t\tz-index: 99;\r\n"
                + "\t\t\"></div>\r\n"
                + "\t\t</div>";
            return html5playerTemplate;
        }());
        view.html5playerTemplate = html5playerTemplate;
    })(view = jstream_t3.view || (jstream_t3.view = {}));
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3) {
    var PlatformBuilder = (function () {
        function PlatformBuilder(model, accessor) {
            if (accessor === void 0) { accessor = null; }
            this.model = model;
            this.accessor = accessor;
        }
        PlatformBuilder.prototype.build = function () {
        };
        PlatformBuilder.prototype.createMark = function () {
            var mark = "";
            var style = "eq-livemark_useHeader";
            var useCTRL = "useCTRL";
            var margin = "";
            if (this.model.isLive && this.model.livemark_use != "off" && this.model.getEnvironmentType() != jstream_t3.EnviromentKind.PC_STREAMING) {
                if (this.model.title_use != "on" && this.model.replay_use != "on") {
                    style = "eq-livemark_noHeader";
                }
                mark += '<div id="' + this.model.objectID + 'live_mark" class="eq-livemark ' + style + '">LIVE</div>';
            }
            if (this.model.info_dir == "testing") {
                if (this.model.controlbar_use != "on") {
                    useCTRL = "noCTRL";
                }
                if (this.model.isFooder() && !(this.model.responsive == "on" || this.model.responsive == "fit")) {
                    margin = 'style="margin-bottom:20px;"';
                }
                mark += '<div class="eq-testmark ' + useCTRL + '">'
                    + '<div class="eq-testlabel" >検証モード</div>'
                    + '<div class="eq-testversion">' + jstream_t3.version.getAsemVersion() + '</div>'
                    + '</div>';
            }
            return mark;
        };
        PlatformBuilder.prototype.createFooter = function () {
            var footer = document.getElementById("footer-" + this.model.objectID);
            footer.innerHTML = "<span>" + this.model.footer_text + "</span>";
            footer.className = "jstream-eqPlayer-footer " + jstream_t3.utils.Util.getUserAgent();
            footer.style.textAlign = this.model.footer_align;
            if (this.model.deviceType === "android") {
                footer.style.fontSize = "10px";
            }
        };
        return PlatformBuilder;
    }());
    jstream_t3.PlatformBuilder = PlatformBuilder;
    var SWFBuilder = (function (_super) {
        __extends(SWFBuilder, _super);
        function SWFBuilder() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SWFBuilder.prototype.build = function () {
            var tag = '<div id="' + this.model.objectID + '"></div>';
            document.getElementById(this.model.fieldID).innerHTML = tag;
            document.getElementById(this.model.fieldID).innerHTML += this.createMark();
            if (this.model.isFooder() && !(this.model.responsive == "on" || this.model.responsive == "fit")) {
                var footer = '<div id="footer-' + this.model.objectID + '" > </div>';
                document.getElementById(this.model.fieldID).innerHTML += footer;
                this.createFooter();
            }
            var swfHeight = (this.model.isFooder() && !(this.model.responsive == "on" || this.model.responsive == "fit") ? this.model.height - 20 : this.model.height);
            var width = String(this.model.width);
            var height = String(swfHeight);
            if (this.model.responsive == "on" || this.model.responsive == "fit") {
                width = "100%";
                height = "100%";
            }
            if (this.model.init_sound == "off") {
                this.model.inCookieVolume = "mute";
            }
            else if (this.model.inCookieVolume == "mute") {
                this.model.inCookieVolume = "mute";
            }
            else if (isNaN(parseInt(this.model.inCookieVolume))) {
                this.model.inCookieVolume = "100";
            }
            if (!this.model.isLive) {
                if (this.model.isPDPlayerEnable()) {
                }
                else {
                }
                var q = "";
                if (this.model.stype) {
                    q = "?stype=" + this.model.stype;
                }
                var width = String(this.model.width);
                var height = String(swfHeight);
                if (this.model.responsive == "on" || this.model.responsive == "fit") {
                    width = "100%";
                    height = "100%";
                }
                jstream_t3.PlayerManger.getPlayer(this.model.objectID).eqPlayer.flashVarsList = this.model.getListFormat();
                jstream_t3.utils.EmbedSwf.embed(this.model.objectID, this.model.playerDir + "EQPlayer.swf" + q, width, height, this.model.thumbnail_url);
            }
            else {
                this.model.pd_enable = "0";
                this.model.movie_url = this.model.movie_url_mobile;
                this.model.movie_list = this.model.movie_list_mobile;
                var width = String(this.model.width);
                var height = String(swfHeight);
                if (this.model.responsive == "on" || this.model.responsive == "fit") {
                    width = "100%";
                    height = "100%";
                }
                jstream_t3.PlayerManger.getPlayer(this.model.objectID).eqPlayer.flashVarsList = this.model.getListFormat();
                jstream_t3.utils.EmbedSwf.embed(this.model.objectID, this.model.playerDir + "EQLivePlayer.swf", width, height);
            }
        };
        return SWFBuilder;
    }(PlatformBuilder));
    jstream_t3.SWFBuilder = SWFBuilder;
    var HTML5PDBuilder = (function (_super) {
        __extends(HTML5PDBuilder, _super);
        function HTML5PDBuilder() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        HTML5PDBuilder.prototype.build = function () {
            var device = "pc";
            var htmlTemplate = this.model.playerDir + "marge.html";
            if (this.model.platform["isSP"] || this.model.platform["isTablet"]) {
                device = "mobile";
                htmlTemplate = this.model.playerDir + "marge_mobile.html";
            }
            var tag = '<link rel = "stylesheet" href = "' + this.model.cssDir + device + '/style/reset.css" / >' +
                '<link rel = "stylesheet" href = "' + this.model.cssDir + device + '/style/common.css" / >' +
                '<link rel = "stylesheet" href = "' + this.model.cssDir + device + '/style/style.css" / >';
            document.getElementById(this.model.fieldID).innerHTML = tag;
            document.getElementById(this.model.fieldID).innerHTML += this.createMark();
            this.model.movie_width = this.model.width;
            this.model.movie_height = this.model.height;
            var eqPlayer = jstream_t3.PlayerManger.getPlayer(this.model.objectID).eqPlayer;
            eqPlayer.fieldID = eqPlayer.fieldID;
            var template = jstream_t3.view.html5playerTemplate.getTemplate(device);
            document.getElementById(this.model.fieldID).innerHTML += template;
            eqPlayer.html5Player = new HTML5Player_t3(eqPlayer, this.model.objectID);
            if (this.model.isFooder() && !(this.model.responsive == "on" || this.model.responsive == "fit")) {
                var footer = document.createElement("div");
                footer.id = "footer-" + this.model.objectID;
                document.getElementById(eqPlayer.fieldID).appendChild(footer);
                this.createFooter();
            }
            eqPlayer.accessor.dispatchEvent("playerInit");
        };
        return HTML5PDBuilder;
    }(PlatformBuilder));
    jstream_t3.HTML5PDBuilder = HTML5PDBuilder;
    var HTML5HLSBuilder = (function (_super) {
        __extends(HTML5HLSBuilder, _super);
        function HTML5HLSBuilder() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        HTML5HLSBuilder.prototype.build = function () {
            var device = "pc";
            var htmlTemplate = this.model.playerDir + "marge.html";
            if (this.model.platform["isSP"] || this.model.platform["isTablet"]) {
                device = "mobile";
                htmlTemplate = this.model.playerDir + "marge_mobile.html";
            }
            var tag = '<link rel = "stylesheet" href = "' + this.model.cssDir + device + '/style/reset.css" / >' +
                '<link rel = "stylesheet" href = "' + this.model.cssDir + device + '/style/common.css" / >' +
                '<link rel = "stylesheet" href = "' + this.model.cssDir + device + '/style/style.css" / >';
            document.getElementById(this.model.fieldID).innerHTML = tag;
            document.getElementById(this.model.fieldID).innerHTML += this.createMark();
            if (this.model.isKollectiveEnable()) {
                this.model.movie_url = this.model.kollective_url;
                this.model.movie_list = this.model.kollective_list;
            }
            else if (this.model.isLive) {
                this.model.movie_url = this.model.movie_url_mobile;
                this.model.movie_list = this.model.movie_list_mobile;
            }
            this.model.movie_width = this.model.width;
            this.model.movie_height = this.model.height;
            var eqPlayer = jstream_t3.PlayerManger.getPlayer(this.model.objectID).eqPlayer;
            eqPlayer.fieldID = eqPlayer.fieldID;
            var template = jstream_t3.view.html5playerTemplate.getTemplate(device);
            document.getElementById(this.model.fieldID).innerHTML += template;
            eqPlayer.html5Player = new HTML5Player_t3(eqPlayer, this.model.objectID);
            if (this.model.isFooder() && !(this.model.responsive == "on" || this.model.responsive == "fit")) {
                var footer = document.createElement("div");
                footer.id = "footer-" + this.model.objectID;
                document.getElementById(eqPlayer.fieldID).appendChild(footer);
                this.createFooter();
            }
            eqPlayer.accessor.dispatchEvent("playerInit");
        };
        return HTML5HLSBuilder;
    }(PlatformBuilder));
    jstream_t3.HTML5HLSBuilder = HTML5HLSBuilder;
    var HTML5HlsJSBuilder = (function (_super) {
        __extends(HTML5HlsJSBuilder, _super);
        function HTML5HlsJSBuilder() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        HTML5HlsJSBuilder.prototype.build = function () {
            var device = "pc";
            var htmlTemplate = this.model.playerDir + "marge.html";
            if (this.model.platform["isSP"] || this.model.platform["isTablet"]) {
                device = "mobile";
                htmlTemplate = this.model.playerDir + "marge_mobile.html";
            }
            var tag = '<link rel = "stylesheet" href = "' + this.model.cssDir + device + '/style/reset.css" / >' +
                '<link rel = "stylesheet" href = "' + this.model.cssDir + device + '/style/common.css" / >' +
                '<link rel = "stylesheet" href = "' + this.model.cssDir + device + '/style/style.css" / >';
            document.getElementById(this.model.fieldID).innerHTML = tag;
            document.getElementById(this.model.fieldID).innerHTML += this.createMark();
            var eqPlayer = jstream_t3.PlayerManger.getPlayer(this.model.objectID).eqPlayer;
            this.model.movie_width = this.model.width;
            this.model.movie_height = this.model.height;
            if (this.model.isKollectiveEnable()) {
                this.model.movie_url = this.model.kollective_url;
                this.model.movie_list = this.model.kollective_list;
            }
            else if (this.model.isLive) {
                this.model.movie_url = this.model.movie_url_mobile;
                this.model.movie_list = this.model.movie_list_mobile;
            }
            if (this.model.movie_url && this.model.movie_list) {
                var xmlHttp = new XMLHttpRequest();
                var template = jstream_t3.view.html5playerTemplate.getTemplate(device);
                document.getElementById(this.model.fieldID).innerHTML += template;
                eqPlayer.html5Player = new HTML5Player_t3(eqPlayer, this.model.objectID);
                if (this.model.isFooder() && !(this.model.responsive == "on" || this.model.responsive == "fit")) {
                    var footer = document.createElement("div");
                    footer.id = "footer-" + this.model.objectID;
                    document.getElementById(eqPlayer.fieldID).appendChild(footer);
                    this.createFooter();
                }
                eqPlayer.accessor.dispatchEvent("HlsPlayerInit");
            }
            else {
                eqPlayer.accessor.showError(jstream_t3.events.ErrorEvent.OTHER_ERROR, eqPlayer.accessor.LanguageResource.kinds.ERROR_MOVIE_NOT_FOUND, eqPlayer.accessor.LanguageResource.kinds.ERROR_TITLE);
                eqPlayer.accessor.sendCrashReport("7011", "HTML5HlsJSBuilder");
            }
        };
        return HTML5HlsJSBuilder;
    }(PlatformBuilder));
    jstream_t3.HTML5HlsJSBuilder = HTML5HlsJSBuilder;
    var NativeHlsBuilder = (function (_super) {
        __extends(NativeHlsBuilder, _super);
        function NativeHlsBuilder() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NativeHlsBuilder.prototype.build = function () {
            var _this = this;
            var tag = '<div id="' + this.model.objectID + '"></div><div id="footer-' + this.model.objectID + '"></div>';
            document.getElementById(this.model.fieldID).innerHTML = tag;
            document.getElementById(this.model.fieldID).innerHTML += this.createMark();
            if (this.model.isFooder() && (this.model.responsive != "on" && this.model.responsive != "fit")) {
                this.createFooter();
            }
            if (this.model.isLive) {
                this.model.movie_url = this.model.movie_url_mobile;
            }
            var movieURL = this.model.movie_url;
            var thumbnail = new jstream_t3.view.ThumbnailView();
            var height = (this.model.isFooder() && (this.model.responsive != "on" && this.model.responsive != "fit") ? this.model.height - 20 : this.model.height);
            var wmPath = this.model.cssDir + "wm_play.png";
            thumbnail.createElement(this.model.getThumbnailURL(), null, this.model.width, height);
            if (this.model.responsive == "on" || this.model.responsive == "fit") {
                thumbnail.setSizeResponsive(this.model.responsive);
                if (this.model.watermark_use != "off") {
                    var display_area = document.createElement("div");
                    display_area.style.width = "100%";
                    display_area.style.height = "100%";
                    display_area.style.display = "table";
                    thumbnail.getElement().appendChild(display_area);
                    var water_mark_wrapper = document.createElement("div");
                    water_mark_wrapper.setAttribute("class", "water_mark_wrapper");
                    display_area.appendChild(water_mark_wrapper);
                    var water_mark = document.createElement("div");
                    var classList = "";
                    classList = "water_mark_square";
                    var width = this.model.thumb_width;
                    var height = this.model.thumb_height;
                    if (height <= 180 || this.model.width <= 240) {
                        classList += " water_mark_small";
                    }
                    water_mark.setAttribute("class", classList);
                    water_mark_wrapper.appendChild(water_mark);
                }
            }
            else {
                thumbnail.getElement().style.display = "table";
                if (this.model.watermark_use != "off") {
                    var water_mark_wrapper = document.createElement("div");
                    water_mark_wrapper.setAttribute("class", "water_mark_wrapper");
                    thumbnail.getElement().appendChild(water_mark_wrapper);
                    var water_mark = document.createElement("div");
                    var classList = "";
                    classList = "water_mark_square";
                    if (height <= 180 || this.model.width <= 240) {
                        classList += " water_mark_small";
                    }
                    water_mark.setAttribute("class", classList);
                    water_mark_wrapper.appendChild(water_mark);
                }
            }
            if (this.accessor.model.isAuthEnable()) {
                var thDiv = thumbnail.getElement();
                thDiv.onclick = function () {
                    _this.accessor.setAuth();
                };
                document.getElementById(this.model.fieldID).appendChild(thDiv);
            }
            else {
                var a = document.createElement("a");
                a.href = movieURL;
                a.target = "_parent";
                a.appendChild(thumbnail.getElement());
                document.getElementById(this.model.fieldID).appendChild(a);
            }
            var eqPlayer = jstream_t3.PlayerManger.getPlayer(this.model.objectID).eqPlayer;
            eqPlayer.accessor.initInIFrameAPI();
            eqPlayer.accessor.dispatchEvent("playerReady");
            eqPlayer.accessor.isLanding = true;
            eqPlayer.accessor.setState("landing");
        };
        return NativeHlsBuilder;
    }(PlatformBuilder));
    jstream_t3.NativeHlsBuilder = NativeHlsBuilder;
    var NoFlashBuilder = (function (_super) {
        __extends(NoFlashBuilder, _super);
        function NoFlashBuilder() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NoFlashBuilder.prototype.build = function () {
            var language = null;
            if (language == null) {
                var lang = "ja";
                if (jstream_t3.utils.Util.browserLanguage() != "ja") {
                    lang = "en";
                }
                language = new jstream_t3.resource.LanguageResource(this.model["language_resource_" + lang]);
            }
            if (jstream_t3.utils.Util.isMobileList().Android2 || jstream_t3.utils.Util.isMobileList().Android3) {
                jstream_t3.view.AlertView.show(language.kinds.ERROR_NO_FLASH_ANDROID_MESSAGE, language.kinds.ERROR_NO_FLASH_ANDROID_TITLE, this.model.fieldID, this.model.cssDir);
            }
            else {
                jstream_t3.view.AlertView.show(language.kinds.ERROR_NO_FLASH_MESSAGE, language.kinds.ERROR_NO_FLASH_TITLE, this.model.fieldID, this.model.cssDir);
            }
        };
        return NoFlashBuilder;
    }(PlatformBuilder));
    jstream_t3.NoFlashBuilder = NoFlashBuilder;
    var PlatformBuilderFactory = (function () {
        function PlatformBuilderFactory() {
        }
        PlatformBuilderFactory.create = function (model, accessor) {
            if (accessor === void 0) { accessor = null; }
            var type = model.getEnvironmentType();
            var result;
            switch (type) {
                case jstream_t3.EnviromentKind.MOBILE_NATIVE:
                    result = new NativeHlsBuilder(model, accessor);
                    break;
                case jstream_t3.EnviromentKind.MOBILE_PROGRESSIVE:
                case jstream_t3.EnviromentKind.PC_PROGRESSIVE:
                    result = new HTML5PDBuilder(model);
                    break;
                case jstream_t3.EnviromentKind.PC_HTML5HLS:
                case jstream_t3.EnviromentKind.MOBILE_STREAMING:
                    result = new HTML5HLSBuilder(model);
                    break;
                case jstream_t3.EnviromentKind.NO_FLASH:
                    result = new NoFlashBuilder(model);
                    break;
                case jstream_t3.EnviromentKind.PC_STREAMING:
                    result = new SWFBuilder(model);
                    break;
                case jstream_t3.EnviromentKind.HLSJS:
                case jstream_t3.EnviromentKind.MOBILE_HLSJS:
                    result = new HTML5HlsJSBuilder(model);
                    break;
            }
            return result;
        };
        return PlatformBuilderFactory;
    }());
    jstream_t3.PlatformBuilderFactory = PlatformBuilderFactory;
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3) {
    var utils;
    (function (utils) {
        var Logger = (function () {
            function Logger() {
            }
            Logger.logSetup = function () {
                if (!console) {
                    var win = window;
                    win["console"] = {
                        log: function (str) { }
                    };
                }
            };
            Logger.log = function (str) {
                Logger._log += str + "\n";
            };
            Logger.stateLog = function (value) {
                var date = new Date();
                value.date = (date.getHours() * 60 + date.getMinutes()) + "." + date.getSeconds() + "." + date.getMilliseconds();
                Logger._stateLog.push(value);
            };
            Logger.publishStateLog = function () {
                if (utils.Util.isFlash()) {
                    return Logger.publishLog(["date", "time", "va", "api", "eq", "strobe", "strobeMethod", "action"]);
                }
                else {
                    return Logger.publishLog(["date", "time", "va", "api", "video", "action"]);
                }
            };
            Logger.publishLog = function (stateList) {
                var result = "";
                var lines = [];
                var i;
                for (i = 0; i < stateList.length; i++) {
                    lines[i] = [stateList[i]];
                }
                for (i = 0; i < Logger._stateLog.length; i++) {
                    var item = Logger._stateLog[i];
                    for (var n = 0; n < stateList.length; n++) {
                        var value = item[stateList[n]];
                        if (typeof value == "number") {
                            value = "" + value;
                        }
                        lines[n].push(value || "");
                    }
                }
                for (i = 0; i < stateList.length; i++) {
                    result += lines[i].join(",") + "\n";
                }
                return result;
            };
            Logger.getLogBuf = function () {
                return Logger._log;
            };
            Logger.getAllLog = function () {
                return Logger._log;
            };
            Logger._log = "";
            Logger._stateLog = [];
            return Logger;
        }());
        utils.Logger = Logger;
    })(utils = jstream_t3.utils || (jstream_t3.utils = {}));
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3) {
    var EQPlayerAccessAPI = (function (_super) {
        __extends(EQPlayerAccessAPI, _super);
        function EQPlayerAccessAPI(eqPlayer) {
            var _this = _super.call(this) || this;
            _this.inited = false;
            _this.objectID = eqPlayer.targetElementID;
            _this.eqPlayer = eqPlayer;
            _this.progressRate = 10;
            _this.preSeek = true;
            jstream_t3.PlayerManger.addPlayerAPI(_this);
            _this.addEventListener("playerInit", function () { _this.playerInit(); }, 1000);
            _this.addEventListener("HlsPlayerInit", function () { _this.HlsPlayerInit(); }, 1000);
            _this.analytics = _this.createAnalytics();
            _this.model = eqPlayer.flashVars;
            _this.model.sid = _this.analytics.getSid();
            _this.model.objectID = _this.objectID;
            _this.model.fieldID = eqPlayer.fieldID;
            _this.model.onError = function (code, title, message) {
                _this.showError(code, message, title);
                _this.sendCrashReport(code, "model");
            };
            _this.liveModel = eqPlayer.flashVars;
            _this.liveModel.objectID = _this.objectID;
            _this.liveModel.fieldID = eqPlayer.fieldID;
            _this.liveModel.onError = function (code, title, message) {
                _this.showError(code, message, title);
                _this.sendCrashReport(code, "live_model");
            };
            _this.settingService = new jstream_t3.SettingService();
            _this.settingService.fault = function () {
                _this.showError(jstream_t3.events.ErrorEvent.SETTINGS_LOAD_ERROR, JMCPlayer.kinds.ERROR_SETTING_DELETE, JMCPlayer.kinds.ERROR_SETTING_TITLE);
                _this.eqPlayer.errorHandler("error");
                _this.sendCrashReport("0501", "settingService");
            };
            _this.metaDataService = new jstream_t3.MetaService();
            _this.metaDataService.fault = function () {
                if (_this.LanguageResource == null) {
                    var lang = "ja";
                    if (jstream_t3.utils.Util.browserLanguage() != "ja") {
                        lang = "en";
                    }
                    _this.LanguageResource = new jstream_t3.resource.LanguageResource(_this.model["language_resource_" + lang]);
                }
                _this.showError(jstream_t3.events.ErrorEvent.METAINFO_LOAD_ERROR, _this.LanguageResource.kinds.ERROR_META_DATA_MESSAGE, _this.LanguageResource.kinds.ERROR_META_DATA_TITLE);
                _this.eqPlayer.errorHandler("error");
                _this.sendCrashReport("1001", "metaDataService");
            };
            _this.playlistService = new jstream_t3.PlaylistService();
            _this.playlistService.fault = function () {
                if (_this.LanguageResource == null) {
                    var lang = "ja";
                    if (jstream_t3.utils.Util.browserLanguage() != "ja") {
                        lang = "en";
                    }
                    _this.LanguageResource = new jstream_t3.resource.LanguageResource(_this.model["language_resource_" + lang]);
                }
                _this.showError(jstream_t3.events.ErrorEvent.METAINFO_LOAD_ERROR, _this.LanguageResource.kinds.ERROR_META_DATA_MESSAGE, _this.LanguageResource.kinds.ERROR_META_DATA_TITLE);
                _this.eqPlayer.errorHandler("error");
                _this.sendCrashReport("1001", "playlistService");
            };
            _this.deviceService = new jstream_t3.deviceService();
            _this.deviceService.fault = function () {
                if (_this.LanguageResource == null) {
                    var lang = "ja";
                    if (jstream_t3.utils.Util.browserLanguage() != "ja") {
                        lang = "en";
                    }
                    _this.LanguageResource = new jstream_t3.resource.LanguageResource(_this.model["language_resource_" + lang]);
                }
                _this.showError(jstream_t3.events.ErrorEvent.METAINFO_LOAD_ERROR, _this.LanguageResource.kinds.ERROR_META_DATA_MESSAGE, _this.LanguageResource.kinds.ERROR_META_DATA_TITLE);
                _this.eqPlayer.errorHandler("error");
                _this.sendCrashReport("1001", "deviceService");
            };
            _this.liveMetaDataService = new jstream_t3.LiveMetaService();
            _this.liveMetaDataService.fault = function () {
                _this.showError(jstream_t3.events.ErrorEvent.METAINFO_LOAD_ERROR, JMCPlayer.kinds.P1201M, JMCPlayer.kinds.P1201T);
                _this.eqPlayer.errorHandler("error");
                _this.sendCrashReport("1201", "liveMetaDataService");
            };
            _this.serviceSettingService = new jstream_t3.ServiceSettingService();
            _this.serviceSettingService.fault = function (status) {
                if (status == "illegal") {
                    _this.showError(jstream_t3.events.ErrorEvent.SERVICE_SETTING_ERROR, JMCPlayer.kinds.ERROR_CID_ILLEGAL_MESSAGE, JMCPlayer.kinds.ERROR_CID_ILLEGAL_TITLE);
                }
                else {
                    _this.showError(jstream_t3.events.ErrorEvent.SERVICE_SETTING_ERROR, JMCPlayer.kinds.ERROR_SERVICE_DELETE, JMCPlayer.kinds.ERROR_SERVICE_TITLE);
                }
                _this.eqPlayer.errorHandler("error");
                _this.sendCrashReport("2001", "serviceSettingService");
            };
            _this.hostCheckService2 = new jstream_t3.HostCheckService2();
            var _model = _this.model;
            _this.hostCheckService2.fault = function (status) {
                if (_this.LanguageResource == null) {
                    var lang = "ja";
                    if (jstream_t3.utils.Util.browserLanguage() != "ja") {
                        lang = "en";
                    }
                    _this.LanguageResource = new jstream_t3.resource.LanguageResource(_this.model["language_resource_" + lang]);
                }
                switch (status) {
                    case 2001:
                        _this.model.hostCheckResult = "ng";
                        if (!(_model.auth_mode == "or" && _model.auth == "1")) {
                            _this.showError(jstream_t3.events.ErrorEvent.VIEWLIMIT_DISABLED, _this.LanguageResource.kinds.ERROR_ENV_MESSAGE.replace("_STATUS_", status), _this.LanguageResource.kinds.ERROR_ENV_TITLE);
                            _this.eqPlayer.errorHandler("error");
                        }
                        break;
                    case 2002:
                        _this.model.hostCheckResult = "ng";
                        if (!(_model.auth_mode == "or" && _model.auth == "1")) {
                            _this.showError(jstream_t3.events.ErrorEvent.VIEWLIMIT_DISABLED, _this.LanguageResource.kinds.ERROR_ENV_MESSAGE.replace("_STATUS_", status), _this.LanguageResource.kinds.ERROR_ENV_TITLE);
                            _this.eqPlayer.errorHandler("error");
                        }
                        break;
                    case 2003:
                        _this.model.hostCheckResult = "ng";
                        _this.showError(jstream_t3.events.ErrorEvent.VIEWLIMIT_DISABLED, _this.LanguageResource.kinds.ERROR_LIMIT_PRE_MESSAGE, _this.LanguageResource.kinds.ERROR_LIMIT_PRE_TITLE);
                        _this.eqPlayer.errorHandler("error");
                        break;
                    case 2004:
                        _this.model.hostCheckResult = "ng";
                        _this.showError(jstream_t3.events.ErrorEvent.VIEWLIMIT_DISABLED, _this.LanguageResource.kinds.ERROR_LIMIT_OVER_MESSAGE, _this.LanguageResource.kinds.ERROR_LIMIT_OVER_TITLE);
                        _this.eqPlayer.errorHandler("error");
                        break;
                    default:
                        _this.model.hostCheckResult = "ng";
                        if (!(_model.auth_mode == "or" && _model.auth == "1")) {
                            _this.showError(jstream_t3.events.ErrorEvent.VIEWLIMIT_DISABLED, _this.LanguageResource.kinds.ERROR_ENV_MESSAGE.replace("_STATUS_", status), _this.LanguageResource.kinds.ERROR_ENV_TITLE);
                            _this.eqPlayer.errorHandler("error");
                        }
                }
                _this.sendCrashReport(status.toString(), "hostCheckService2");
            };
            _this.authCheckService = new jstream_t3.AuthenticationService();
            _this.CheckConnectionService = new jstream_t3.CheckConnectionService();
            _this.CheckConnectionService.fault = function () {
                if (_this.LanguageResource == null) {
                    var lang = "ja";
                    if (jstream_t3.utils.Util.browserLanguage() != "ja") {
                        lang = "en";
                    }
                    _this.LanguageResource = new jstream_t3.resource.LanguageResource(_this.model["language_resource_" + lang]);
                }
                _this.showError(jstream_t3.events.ErrorEvent.LIVELIMIT_LOAD_ERROR, _this.LanguageResource.kinds.P3501M, _this.LanguageResource.kinds.P3501T);
                _this.sendCrashReport("3501", "CheckConnectionService");
            };
            _this.CheckConnectionResultService = new jstream_t3.CheckConnectionResultService();
            _this.CheckConnectionResultService.fault = function () {
                if (_this.LanguageResource == null) {
                    var lang = "ja";
                    if (jstream_t3.utils.Util.browserLanguage() != "ja") {
                        lang = "en";
                    }
                    _this.LanguageResource = new jstream_t3.resource.LanguageResource(_this.model["language_resource_" + lang]);
                }
                _this.showError(jstream_t3.events.ErrorEvent.LIVELIMIT_LOAD_ERROR, _this.LanguageResource.kinds.P3501M, _this.LanguageResource.kinds.P3501T);
                _this.sendCrashReport("3501", "CheckConnectionResultService");
            };
            _this.DirInfoService = new jstream_t3.DirInfoService();
            _this.DirInfoService.fault = function () {
                _this.model.info_dir = "release";
            };
            return _this;
        }
        EQPlayerAccessAPI.prototype.loadMetaData = function (resultHandller) {
            this.metaDataService.result = resultHandller;
            this.metaDataService.syndicationapi_url = this.model.syndicationapi_url;
            this.metaDataService.setModel(this.model.createServiceModel());
            this.metaDataService.load();
        };
        EQPlayerAccessAPI.prototype.loadDeviceSetting = function (resultHandller) {
            this.deviceService.result = resultHandller;
            this.deviceService.setModel(this.model.createServiceModel());
            this.deviceService.load();
        };
        EQPlayerAccessAPI.prototype.loadPlaylistSetting = function (resultHandller) {
            if (!!this.model.playlist_id && this.model.playlist_id != "undefined") {
                this.playlistService.result = resultHandller;
                this.playlistService.setModel(this.model.createServiceModel());
                this.playlistService.load();
            }
            else {
                resultHandller();
            }
        };
        EQPlayerAccessAPI.prototype.loadLiveMetaData = function (resultHandller) {
            this.liveMetaDataService.result = resultHandller;
            this.liveMetaDataService.setModel(this.liveModel.createLiveServiceModel());
            this.liveMetaDataService.load();
        };
        EQPlayerAccessAPI.prototype.loadSettingData = function (resultHandller) {
            this.settingService.result = resultHandller;
            this.settingService.ssl_url = this.model.ssl_url;
            this.settingService.setModel(this.model.createServiceModel());
            this.settingService.load();
        };
        EQPlayerAccessAPI.prototype.loadPDSetting = function (resultHandller) {
            this.serviceSettingService.setModel(this.model.createServiceModel());
            this.serviceSettingService.result = resultHandller;
            this.serviceSettingService.load();
        };
        EQPlayerAccessAPI.prototype.loadHostCheck2 = function (resultHandler) {
            this.hostCheckService2.setModel(this.model.createServiceModel());
            this.hostCheckService2.result = resultHandler;
            this.hostCheckService2.load();
        };
        EQPlayerAccessAPI.prototype.loadLiveHostCheck = function (resultHandler) {
            this.hostCheckService2.setModel(this.liveModel.createLiveServiceModel());
            this.hostCheckService2.result = resultHandler;
            this.hostCheckService2.load();
        };
        EQPlayerAccessAPI.prototype.loadAuthCheck = function (resultHandler) {
            this.authCheckService.setModel(this.model.createServiceModel());
            this.authCheckService.result = resultHandler;
            this.authCheckService.fault = resultHandler;
            this.authCheckService.load();
        };
        EQPlayerAccessAPI.prototype.loadCheckConnection = function (resultHandler) {
            this.CheckConnectionService.setModel(this.model.createServiceModel());
            this.CheckConnectionService.result = resultHandler;
            this.CheckConnectionService.fault = resultHandler;
            this.CheckConnectionService.load();
        };
        EQPlayerAccessAPI.prototype.loadCheckConnectionResult = function (resultHandler) {
            this.CheckConnectionResultService.setModel(this.model.createServiceModel());
            this.CheckConnectionResultService.result = resultHandler;
            this.CheckConnectionResultService.fault = resultHandler;
            this.CheckConnectionResultService.load();
        };
        EQPlayerAccessAPI.prototype.loadDirInfoService = function (resultHandler) {
            this.DirInfoService.setModel(this.model.createServiceModel());
            this.DirInfoService.result = resultHandler;
            this.DirInfoService.fault = resultHandler;
            this.DirInfoService.load();
        };
        EQPlayerAccessAPI.prototype.showError = function (code, message, title) {
            if (title === void 0) { title = ""; }
            if (this.model.responsive == "on" || this.model.responsive == "fit") {
                if (this.model.isLive && document.getElementById(this.eqPlayer.fieldID).clientHeight < 150) {
                    this.liveModel.setTagSize(this.eqPlayer.fieldID);
                }
            }
            jstream_t3.view.AlertView.show(message, title, this.eqPlayer.fieldID, this.model.cssDir);
            this.dispatchEvent(new jstream_t3.events.ErrorEvent(code, message, title));
        };
        EQPlayerAccessAPI.prototype.createAnalytics = function () {
            var analytics = new Analytics_t3(true);
            return analytics;
        };
        EQPlayerAccessAPI.prototype.addEventListener = function (type, handler, priolity) {
            if (priolity === void 0) { priolity = 0; }
            _super.prototype.addEventListener.call(this, type, handler, priolity);
            if (type == "progress" || this.state == "playing") {
                this.startProgress();
            }
        };
        EQPlayerAccessAPI.prototype.startProgress = function () {
            var _this = this;
            if (this.progressItervalID != null)
                return;
            this.updateTime = new Date().getTime();
            this.connectionCheckTime = new Date().getTime();
            var progressRate = this.progressRate;
            this.progressItervalID = setInterval(function () {
                if (_this.state == "playing") {
                    _this.dispatchEvent("progress");
                    var time = new Date().getTime();
                    if (time - _this.updateTime > 5000) {
                        _this.dispatchEvent("update");
                        _this.updateTime = time;
                        if (_this.model.resumeEnable == "on") {
                            var name = "EQPlayer_resume_CurrentTime_" + _this.model.meta_id + "_" + _this.model.contract_id;
                            var value = _this.getCurrentTime().toString();
                            var path = '/';
                            var period = 30;
                            var max = 20;
                            var overflowCookie = jstream_t3.utils.Util.CheckOverCookie("EQPlayer_resume_CurrentTime_", name, max);
                            if (overflowCookie != null) {
                                jstream_t3.utils.Util.DeleteCookie(overflowCookie, _this.model.CookieDomain);
                            }
                            jstream_t3.utils.Util.SetCookie(name, value, path, period, _this.model.CookieDomain);
                        }
                    }
                    if (time - _this.connectionCheckTime > 30000) {
                        _this.connectionCheckTime = time;
                        if (_this.model.connection_limit > 0 && _this.model.checkconnection_url != "off") {
                            _this.playCall("update");
                        }
                    }
                }
                else {
                    _this.stopProgress();
                }
            }, 1000 / progressRate);
        };
        EQPlayerAccessAPI.prototype.setEvents = function () {
            var _this = this;
            this.addEventListener("landing", function () {
                if (_this.model.platform["isIE"] && _this.model.platform["browser"]["version"] < 10) {
                    _this.eq_host.postMessage(jstream_t3.utils.Util.messageConvertForLegacy("setState", "landing", _this.iframeID), _this.embed_origin);
                }
                else {
                    _this.eq_host.postMessage({ msg: "setState", value: "landing", iframeID: _this.iframeID }, _this.embed_origin);
                }
            });
            this.addEventListener("progress", function () {
                _this.sendPlayerValues();
            });
        };
        EQPlayerAccessAPI.prototype.sendPlayerValues = function () {
            if (!this.model.isInIframe) {
                return;
            }
            if (!this.eq_host) {
                return;
            }
            var currentTime = this.getCurrentTime();
            var totalTime = this.getTotalTime();
            var quality = this.getQuality();
            var isMute = this.isMuted();
            var volume = this.getVolume();
            var playbackRate = this.getPlaybackRate();
            var currentAPI = this.getCurrentAPI();
            var meta_id = this.getMetaId();
            var subtitle = this.getSubtitles();
            var value = {
                currentTime: currentTime,
                totalTime: totalTime,
                quality: quality,
                isMute: isMute,
                volume: volume,
                playbackRate: playbackRate,
                currentAPI: currentAPI,
                subtitle: subtitle,
                meta_id: meta_id
            };
            if (this.model.platform["isIE"] && this.model.platform["browser"]["version"] < 10) {
                this.eq_host.postMessage(jstream_t3.utils.Util.messageConvertForLegacy("progress", value, this.iframeID), this.embed_origin);
            }
            else {
                this.eq_host.postMessage({
                    msg: "progress",
                    value: value,
                    iframeID: this.iframeID
                }, this.embed_origin);
            }
        };
        EQPlayerAccessAPI.prototype.sendFullscreenEvent = function (isFullscreen) {
            if (!this.model.isInIframe) {
                return;
            }
            if (!this.eq_host) {
                return;
            }
            var msg = "fullscreen";
            if (!isFullscreen) {
                msg = "exitFullscreen";
            }
            if (this.model.platform["isIE"] && this.model.platform["browser"]["version"] < 10) {
                this.eq_host.postMessage(jstream_t3.utils.Util.messageConvertForLegacy("changefullscreen", msg, this.iframeID), this.embed_origin);
            }
            else {
                this.eq_host.postMessage({
                    msg: "changefullscreen",
                    value: msg,
                    iframeID: this.iframeID
                }, this.embed_origin);
            }
        };
        EQPlayerAccessAPI.prototype.execIframeAPI = function (func, arg, event) {
            switch (func) {
                case "play":
                    this.play();
                    break;
                case "pause":
                    this.pause();
                    break;
                case "setCurrentTime":
                    this.setCurrentTime(Number(arg));
                    this.sendPlayerValues();
                    break;
                case "setStartTime":
                    this.setStartTime(Number(arg));
                    this.sendPlayerValues();
                    break;
                case "changeQuality":
                    this.changeQuality(Number(arg));
                    this.sendPlayerValues();
                    break;
                case "mute":
                    if (typeof (arg) != "boolean") {
                        arg = arg == "true" ? true : false;
                    }
                    this.mute(arg);
                    this.sendPlayerValues();
                    break;
                case "setVolume":
                    this.setVolume(Number(arg));
                    this.sendPlayerValues();
                    break;
                case "setPlaybackRate":
                    this.setPlaybackRate(Number(arg));
                    this.sendPlayerValues();
                    break;
                case "changeSubtitles":
                    this.changeSubtitles(Number(arg));
                    this.sendPlayerValues();
                    break;
                case "displayRefresh":
                    this.displayRefresh();
                    break;
                case "apiReady":
                    this.eq_host = event["source"];
                    this.embed_origin = event["origin"];
                    this.iframeID = arg;
                    this.setEvents();
                    if (!this.eq_host) {
                        return;
                    }
                    break;
                default:
                    return;
            }
        };
        EQPlayerAccessAPI.prototype.initInIFrameAPI = function () {
            var _this = this;
            if (this.model.isInIframe) {
                if (this.model.platform["isIE"] && this.model.platform["browser"]["version"] < 9) {
                    window.attachEvent("onmessage", function (event) {
                        try {
                            var p = jstream_t3.utils.Util.parse_uri(_this.model.domain);
                            var origin = p.scheme + "://" + p.authority;
                            if (event["origin"] !== origin) {
                                return;
                            }
                            var func;
                            var arg;
                            if (_this.model.platform["isIE"] && _this.model.platform["browser"]["version"] < 10) {
                                var parseData = (event["data"]).split(",");
                                func = parseData[0];
                                arg = parseData[1];
                            }
                            else {
                                func = event["data"]["func"];
                                arg = event["data"]["arg"];
                            }
                            _this.execIframeAPI(func, arg, event);
                        }
                        catch (err) {
                        }
                        finally {
                            return;
                        }
                    });
                }
                window.addEventListener("message", function (event) {
                    try {
                        var p = jstream_t3.utils.Util.parse_uri(_this.model.domain);
                        var origin = p.scheme + "://" + p.authority;
                        if (event.origin !== origin) {
                            return;
                        }
                        var func;
                        var arg;
                        if (_this.model.platform["isIE"] && _this.model.platform["browser"]["version"] < 10) {
                            var parseData = (event.data).split(",");
                            func = parseData[0];
                            arg = parseData[1];
                        }
                        else {
                            func = event.data.func;
                            arg = event.data.arg;
                        }
                        _this.execIframeAPI(func, arg, event);
                    }
                    catch (err) {
                    }
                });
            }
        };
        EQPlayerAccessAPI.prototype.stopProgress = function () {
            clearInterval(this.progressItervalID);
            this.progressItervalID = null;
        };
        EQPlayerAccessAPI.prototype.getElement = function () {
            return document.getElementById(this.objectID) || {};
        };
        EQPlayerAccessAPI.prototype.getCurrentTime = function () {
            return 0;
        };
        EQPlayerAccessAPI.prototype.validateSeek = function (value) {
            if (isNaN(value) || value < 0 || value > this.getTotalTime()) {
                return false;
            }
            return true;
        };
        EQPlayerAccessAPI.prototype.setCurrentTime = function (time) { };
        EQPlayerAccessAPI.prototype.setStartTime = function (time) { };
        EQPlayerAccessAPI.prototype.setState = function (state) {
            var _this = this;
            if (this.state == state) {
                return;
            }
            this.preState = this.state;
            this.state = state;
            if (state == "playing") {
                this.isPlayed = true;
            }
            if (state == "landing" && (this.model["isLightbox"] == true && this.model.isThumbnail == false)) {
                this.dispatchEvent("lightboxReady");
                return;
            }
            if (this.model.isInIframe && !this.model.isLightbox) {
                if (this.state == "landing") {
                    if (!this.eq_host) {
                        var apiReadyTimer = setInterval(function () {
                            if (_this.eq_host) {
                                clearInterval(apiReadyTimer);
                                _this.sendPlayerValues();
                                if (_this.model.platform["isIE"] && _this.model.platform["browser"]["version"] < 10) {
                                    _this.eq_host.postMessage(jstream_t3.utils.Util.messageConvertForLegacy("setState", _this.state, _this.iframeID), _this.embed_origin);
                                }
                                else {
                                    _this.eq_host.postMessage({ msg: "setState", value: _this.state, iframeID: _this.iframeID }, _this.embed_origin);
                                }
                            }
                        }, 100);
                    }
                    else {
                        this.sendPlayerValues();
                        if (this.model.platform["isIE"] && this.model.platform["browser"]["version"] < 10) {
                            this.eq_host.postMessage(jstream_t3.utils.Util.messageConvertForLegacy("setState", this.state, this.iframeID), this.embed_origin);
                        }
                        else {
                            this.eq_host.postMessage({ msg: "setState", value: this.state, iframeID: this.iframeID }, this.embed_origin);
                        }
                    }
                }
                else {
                    if (this.model.platform["isIE"] && this.model.platform["browser"]["version"] < 10) {
                        this.eq_host.postMessage(jstream_t3.utils.Util.messageConvertForLegacy("setState", this.state, this.iframeID), this.embed_origin);
                    }
                    else {
                        this.eq_host.postMessage({ msg: "setState", value: this.state, iframeID: this.iframeID }, this.embed_origin);
                    }
                }
            }
            if (state == "landing" && (!this.model.isIframe || (this.model.isIframe && this.model.isInIframe))) {
                this.sendLogReport();
            }
            this.dispatchEvent("change_state");
            this.dispatchEvent(this.state);
            if (state != "exit" && state != "complete" && state != "landing") {
                if (this.model.resumeEnable == "on") {
                    var name = "EQPlayer_resume_CurrentTime_" + this.model.meta_id + "_" + this.model.contract_id;
                    var value = this.getCurrentTime().toString();
                    var path = '/';
                    var period = 30;
                    var max = 20;
                    var overflowCookie = jstream_t3.utils.Util.CheckOverCookie("EQPlayer_resume_CurrentTime_", name, max);
                    if (overflowCookie != null) {
                        jstream_t3.utils.Util.DeleteCookie(overflowCookie, this.model.CookieDomain);
                    }
                    jstream_t3.utils.Util.SetCookie(name, value, path, period, this.model.CookieDomain);
                }
            }
            else if (state == "complete" && !this.model.isLive) {
                if (this.model.resumeEnable == "on") {
                    var name = "EQPlayer_resume_CurrentTime_" + this.model.meta_id + "_" + this.model.contract_id;
                    var value = "0";
                    var path = '/';
                    var period = 30;
                    jstream_t3.utils.Util.DeleteCookie(name, this.model.CookieDomain);
                    setTimeout(function () {
                        jstream_t3.utils.Util.DeleteCookie(name, _this.model.CookieDomain);
                    }, 10);
                }
            }
            if (state == "playing") {
                this.startProgress();
            }
            else {
                this.stopProgress();
            }
        };
        EQPlayerAccessAPI.prototype.getEnvironmentType = function () {
            return this.model.getEnvironmentType();
        };
        EQPlayerAccessAPI.prototype.playCall = function (stat) {
            if (stat === void 0) { stat = ""; }
        };
        EQPlayerAccessAPI.prototype.play = function () { };
        EQPlayerAccessAPI.prototype.pause = function () { };
        EQPlayerAccessAPI.prototype.getTotalTime = function () { return; };
        EQPlayerAccessAPI.prototype.playerInit = function (instance) {
            if (instance === void 0) { instance = null; }
            this.setAnalyticsConfig();
            this.initInIFrameAPI();
        };
        EQPlayerAccessAPI.prototype.HlsPlayerInit = function (instance) {
            if (instance === void 0) { instance = null; }
            this.setAnalyticsConfig();
            this.initInIFrameAPI();
        };
        EQPlayerAccessAPI.prototype.setAnalyticsConfig = function () {
            var vars = this.eqPlayer.flashVars;
            this.analyticsEnabled = vars.isVa();
            var cvaLength = 5;
            if (!this.analyticsEnabled) {
                return;
            }
            this.analytics.setSelf(vars.parent_url);
            this.analytics.setRef(vars.ref);
            var svcid = vars.contract_id || vars.maker_id;
            var vid = svcid + "-" + (vars.meta_id || vars.lpid) + "-" + vars.file_id;
            var uid = "";
            var pid = vars.partner_id;
            var o = "";
            var i = 1;
            for (var key in vars.o) {
                if (i > cvaLength) {
                    break;
                }
                o += key + "=" + vars.o[key] + "&";
                i++;
            }
            if (o.length > 1)
                o = o.slice(0, -1);
            this.analytics.setSvcid(svcid);
            this.analytics.setVid(vid);
            this.analytics.setUid(uid);
            this.analytics.setTotal(vars.duration);
            this.analytics.setTagType(vars.tagType);
            this.analytics.setPid(vars.partner_id);
            this.analytics.setObject(o);
            if (this.model.playerFromPlaylist) {
                this.analytics.setPlid(vars.playlist_id);
            }
            else {
                this.analytics.setPlid("");
            }
            if (this.model.va_url)
                this.analytics.setBaseURL(this.model.va_url);
            if (this.model.vc)
                this.analytics.setVc(this.model.vc);
            if (!this.model.playerFromPlaylist) {
                this.analytics.setEvents(this);
            }
        };
        EQPlayerAccessAPI.prototype.sendClickBeacon = function (type) {
            if (!this.analyticsEnabled) {
                return;
            }
            this.analytics.sendClickBeacon(type, this.getCurrentTime());
        };
        EQPlayerAccessAPI.prototype.createPlayer = function () {
        };
        EQPlayerAccessAPI.prototype.changeMedia = function (meta_id, autoPlay) {
            if (autoPlay === void 0) { autoPlay = true; }
        };
        EQPlayerAccessAPI.prototype.changeQuality = function (quality) {
        };
        EQPlayerAccessAPI.prototype.getQuality = function () {
            return 0;
        };
        EQPlayerAccessAPI.prototype.mute = function (value) {
            return false;
        };
        EQPlayerAccessAPI.prototype.isMuted = function () {
            return false;
        };
        EQPlayerAccessAPI.prototype.setVolume = function (volume) {
        };
        EQPlayerAccessAPI.prototype.getVolume = function () {
            return 0;
        };
        EQPlayerAccessAPI.prototype.getCurrentAPI = function () {
            return;
        };
        EQPlayerAccessAPI.prototype.getPlaybackRate = function () {
            return;
        };
        EQPlayerAccessAPI.prototype.getMetaId = function () {
            return;
        };
        EQPlayerAccessAPI.prototype.getSubtitles = function () {
            return;
        };
        EQPlayerAccessAPI.prototype.changeSubtitles = function (index) {
        };
        EQPlayerAccessAPI.prototype.setPlaybackRate = function (pr) {
        };
        EQPlayerAccessAPI.prototype.playerSkinConfig = function (config) {
        };
        EQPlayerAccessAPI.prototype.displayRefresh = function () {
        };
        EQPlayerAccessAPI.prototype.destroy = function () {
            this.removeEventListener;
            this.startProgress();
            this.metaDataService = null;
            this.settingService = null;
            this.serviceSettingService = null;
            this.objectID = null;
            this.inited = null;
            this.eqPlayer.flashVars = null;
            this.eqPlayer.flashVarsList = null;
            this.progressRate = null;
            this.state = null;
            this.analytics = null;
            this.analyticsEnabled = null;
            this.isPlayed = null;
            this.hashChecker = null;
            jstream_t3.PlayerManger.getPlayer;
            this.model.destroy();
            this.model = null;
            this.clearEventListener();
        };
        EQPlayerAccessAPI.prototype.sendCrashReport = function (errorCode, crashPoint) {
            try {
                var referer = this.model.domain ? this.model.domain : document.location.href;
                var query = jstream_t3.utils.Util.createCrashReportQuery(errorCode, crashPoint, this.model.contract_id, this.model.meta_id, this.model.getTagType(), this.model["s"], referer);
                jstream_t3.utils.Util.appendScript(this.model.crashReportEndPoint, query);
            }
            catch (e) {
            }
        };
        EQPlayerAccessAPI.prototype.sendLogReport = function () {
            try {
                var referer = this.model.domain ? this.model.domain : document.location.href;
                var query = jstream_t3.utils.Util.createLogReportQuery(this.model.contract_id, this.model.meta_id, this.model.getTagType(), this.model["s"], referer);
                jstream_t3.utils.Util.appendScript(this.model.crashReportEndPoint, query);
            }
            catch (e) {
            }
        };
        return EQPlayerAccessAPI;
    }(jstream_t3.events.EventDispatcher));
    jstream_t3.EQPlayerAccessAPI = EQPlayerAccessAPI;
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3) {
    var SWFAccessAPI = (function (_super) {
        __extends(SWFAccessAPI, _super);
        function SWFAccessAPI(eqPlayer) {
            var _this = _super.call(this, eqPlayer) || this;
            _this.playCallTimeout = null;
            _this.addEventListener("mediaError", function (e) {
                if (!_this.liveModel.isLive) {
                    _this.dispatchEvent(new jstream_t3.events.ErrorEvent(jstream_t3.events.ErrorEvent.SERVER_MEDIA_ERROR));
                }
                else {
                    _this.setState("interrupted");
                }
            });
            var swfAccessAPI = _this;
            return _this;
        }
        SWFAccessAPI.prototype.StandByLoop = function () {
            var _this = this;
            this.setCurrentTime(0);
            setTimeout(function () {
                _this.play();
            }, 10);
        };
        SWFAccessAPI.prototype.setState = function (state) {
            if (state == "landing") {
                this.inited = true;
            }
            if (state != "exit" && state != "landing") {
                var swfAccessAPI = this;
                if (swfAccessAPI.model.resumeVolumeEnable == "on") {
                    if (this.model.CookieDomain) {
                        var name = "EQPlayer_resume_Volume";
                        var value;
                        var path = '/';
                        var period;
                        if (swfAccessAPI.isMuted && swfAccessAPI.isMuted()) {
                            value = "mute";
                        }
                        else {
                            value = swfAccessAPI.getVolume().toString();
                        }
                        jstream_t3.utils.Util.SetCookie(name, value, path, period, this.model.CookieDomain);
                    }
                }
            }
            if (state == "complete") {
                if (this.model.loop_use == "on") {
                    this.StandByLoop();
                }
            }
            _super.prototype.setState.call(this, state);
        };
        SWFAccessAPI.prototype.getCurrentTime = function () {
            if (!this.inited)
                return 0;
            if (this.model.isThumbnail)
                return 0;
            if (this.liveModel.isLive) {
                return this.getElement().getCurrentTime();
            }
            else {
                return this.getElement().getCurrentTime();
            }
        };
        SWFAccessAPI.prototype.getTotalTime = function () {
            if (!this.inited)
                return 0;
            if (this.liveModel.isLive) {
                return this.getElement().getTotalTime();
            }
            else {
                return Math.floor(this.getElement().getTotalTime() * 1000) / 1000;
            }
        };
        SWFAccessAPI.prototype.setStartTime = function (time) {
            jstream_t3.utils.Logger.stateLog({
                time: this.getCurrentTime(),
                action: "api.setStartTime"
            });
            if (!this.validateSeek(time)) {
                return;
            }
            if (!this.liveModel.isLive) {
                this.getElement().setStartTime(time);
            }
        };
        SWFAccessAPI.prototype.setCurrentTime = function (time) {
            jstream_t3.utils.Logger.stateLog({
                time: this.getCurrentTime(),
                action: "api.setCurrentTime"
            });
            if (!this.validateSeek(time)) {
                return;
            }
            if (!this.liveModel.isLive) {
                this.getElement().seek(time);
            }
        };
        SWFAccessAPI.prototype.playCall = function (stat) {
            var _this = this;
            if (stat === void 0) { stat = ""; }
            this.model.stat = (stat == "update" ? "2" : "1");
            _super.prototype.loadCheckConnection.call(this, function (result) {
                _this.getElement().setConnectionStat(_this.model.isCheckConnectionPassed);
                if (stat == "update") {
                    if (_this.model.isCheckConnectionPassed != "NG") {
                        _this.model.isCheckConnectionPassed = "OK";
                    }
                    if (!_this.playCallTimeout) {
                        _this.playCallTimeout = setTimeout(function () {
                            _this.model.isCheckConnectionPassed = "NG";
                            _this.getElement().setConnectionStat(_this.model.isCheckConnectionPassed);
                            _this.playCallTimeout = null;
                        }, 30000);
                    }
                    return;
                }
                if (_this.model.isCheckConnectionPassed != "NG") {
                    if (stat != "update") {
                        _this.play();
                    }
                    if (!_this.playCallTimeout) {
                        _this.playCallTimeout = setTimeout(function () {
                            _this.model.isCheckConnectionPassed = "NG";
                            _this.getElement().setConnectionStat(_this.model.isCheckConnectionPassed);
                            _this.playCallTimeout = null;
                        }, 30000);
                    }
                }
                else {
                    if (_this.LanguageResource == null) {
                        var lang = "ja";
                        if (jstream_t3.utils.Util.browserLanguage() != "ja") {
                            lang = "en";
                        }
                        _this.LanguageResource = new jstream_t3.resource.LanguageResource(_this.model["language_resource_" + lang]);
                    }
                    if (_this.model.isLive) {
                        _this.liveModel.liveLid = _this.liveModel.getLiveLidURL();
                        var lidthumb = new jstream_t3.view.LiveLidView();
                        lidthumb.createElement(_this.liveModel.liveLid, _this.liveModel.width, _this.liveModel.height);
                        if (_this.liveModel.responsive == "on" || _this.liveModel.responsive == "fit") {
                            lidthumb.setSizeResponsive(_this.liveModel.responsive);
                        }
                        var field = document.getElementById(_this.liveModel.fieldID);
                        if (field.hasChildNodes()) {
                            for (var i = 0, len = field.childNodes.length; i < len; i++) {
                                field.removeChild(field.childNodes[0]);
                            }
                        }
                        field.appendChild(lidthumb.getElement());
                        _this.liveModel.isPlayer = false;
                        _this.setState("complete");
                    }
                }
            });
        };
        SWFAccessAPI.prototype.play = function () {
            jstream_t3.utils.Logger.stateLog({
                time: this.getCurrentTime(),
                action: "api.play"
            });
            this.getElement().play2();
            _super.prototype.play.call(this);
        };
        SWFAccessAPI.prototype.pause = function () {
            if (!this.isPlayed)
                return;
            if (this.state == "complete" || this.state == "paused") {
                return;
            }
            jstream_t3.utils.Logger.stateLog({
                time: this.getCurrentTime(),
                action: "api.pause"
            });
            this.getElement().pause();
            _super.prototype.pause.call(this);
        };
        SWFAccessAPI.prototype.createPlayer = function () {
            var success;
            if (!this.liveModel.isLive) {
                success = this.model.parce();
            }
            else {
                success = this.liveModel.parseLive();
            }
            if (!success) {
                return;
            }
            this.eqPlayer.flashVarsList = this.model.getListFormat();
            jstream_t3.PlatformBuilderFactory.create(this.model).build();
            if (!jstream_t3.utils.Util.isFlash()) {
                this.dispatchEvent(new jstream_t3.events.ErrorEvent(jstream_t3.events.ErrorEvent.FLASHPLAYER_VERSION_ERROR));
            }
        };
        SWFAccessAPI.prototype.changeQuality = function (value) {
            jstream_t3.utils.Logger.stateLog({
                time: this.getCurrentTime(),
                action: "api.changeQuality"
            });
            this.getElement().changeQuality(value);
        };
        SWFAccessAPI.prototype.getQuality = function () {
            return this.getElement().getQuality();
        };
        SWFAccessAPI.prototype.mute = function (value) {
            if (typeof value === "boolean") {
                jstream_t3.utils.Logger.stateLog({
                    time: this.getCurrentTime(),
                    action: "api.mute"
                });
                return this.getElement().mute(value);
            }
            else {
                return this.isMuted();
            }
        };
        SWFAccessAPI.prototype.isMuted = function () {
            if (this.getElement().isMute) {
                return this.getElement().isMute();
            }
            else {
                return false;
            }
        };
        SWFAccessAPI.prototype.setVolume = function (volume) {
            if (typeof volume === "number" && volume >= 0 && volume <= 100 && volume % 1 == 0) {
                jstream_t3.utils.Logger.stateLog({
                    time: this.getCurrentTime(),
                    action: "api.setVolume"
                });
                if (this.getElement().setVolume) {
                    this.getElement().setVolume(volume / 100);
                }
            }
        };
        SWFAccessAPI.prototype.getVolume = function () {
            if (this.getElement().getVolume) {
                return Math.floor(this.getElement().getVolume() * 100);
            }
            else {
                return 100;
            }
        };
        SWFAccessAPI.prototype.getCurrentAPI = function () {
            return "SWFAPI";
        };
        return SWFAccessAPI;
    }(jstream_t3.EQPlayerAccessAPI));
    jstream_t3.SWFAccessAPI = SWFAccessAPI;
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3) {
    var view;
    (function (view) {
        var LiveLidView = (function () {
            function LiveLidView() {
                this.thumbnail = new view.ImageView();
                this.base = new view.ViewElement(null, { position: "relative" });
            }
            LiveLidView.prototype.createElement = function (thumbnailURL, width, height) {
                if (width === void 0) { width = 100; }
                if (height === void 0) { height = 100; }
                this.base.width(width);
                this.base.height(height);
                this.base.addChild(this.thumbnail);
                this.thumbnail.load(thumbnailURL);
                this.thumbnailImage = new Image();
                this.thumbnailImage.src = thumbnailURL;
                return this.base;
            };
            LiveLidView.prototype.setSize = function (width, height) {
                this.base.width(width);
                this.base.height(height);
            };
            LiveLidView.prototype.setSizeResponsive = function (responsive) {
                if (responsive == "on") {
                    this.base.setStringStyle("position", "absolute");
                }
                var userAgent = window.navigator.userAgent.toLowerCase();
                var appVersion = window.navigator.appVersion.toLowerCase();
                if (appVersion.indexOf("msie 6.") != -1 || appVersion.indexOf("msie 7.") != -1 || appVersion.indexOf("msie 8.") != -1) {
                    var clientHeight;
                    var clientWidth;
                    if (document.compatMode == "BackCompat") {
                        clientWidth = document.body.clientWidth;
                        clientHeight = document.body.clientHeight;
                    }
                    else {
                        clientWidth = document.documentElement.clientWidth;
                        clientHeight = document.documentElement.clientHeight;
                    }
                    var thumbOriginWidth = this.thumbnailImage.width;
                    var thumbOriginHeight = this.thumbnailImage.height;
                    var thumbnailAspect = thumbOriginHeight / thumbOriginWidth;
                    this.base.setStringStyle("width", "100%");
                    this.base.setStringStyle("height", "100%");
                    this.base.setStringStyle("cursor", "pointer");
                    this.thumbnail.setStringStyle("max-width", "100%");
                }
                else {
                    this.base.setStringStyle("width", "100%");
                    this.base.setStringStyle("height", "100%");
                    this.base.setStringStyle("background-image", "url(" + this.thumbnailImage.src + ")");
                    this.base.setStringStyle("background-size", "contain");
                    this.base.setStringStyle("background-repeat", "no-repeat");
                    this.base.setStringStyle("background-position", "center");
                    this.base.setStringStyle("cursor", "pointer");
                    this.thumbnail.getElement().onload = null;
                    this.thumbnail.visible(false);
                    this.thumbnail.setStringStyle("display", "none");
                }
            };
            LiveLidView.prototype.getElement = function () {
                return this.base.getElement();
            };
            return LiveLidView;
        }());
        view.LiveLidView = LiveLidView;
    })(view = jstream_t3.view || (jstream_t3.view = {}));
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3) {
    var HTML5AccessAPI = (function (_super) {
        __extends(HTML5AccessAPI, _super);
        function HTML5AccessAPI(player) {
            var _this = _super.call(this, player) || this;
            _this.UseHlsJs = false;
            _this.isSeeking = false;
            _this.isQuealitySelecting = false;
            _this.QuealitySelect_startTime = 0;
            _this.isFirstPlay = false;
            _this.video_event = "";
            _this.playCallTimeout = null;
            _this.LiveErrorCount = 0;
            _this.maxErrorCount = 3;
            _this.retryCount = 0;
            _this.retryDelay = 1000;
            _this.isTouching = false;
            _this.MOVIE_QUALITY_LIST_JA = ["Auto", "270p", "360p", "480p", "720p", "1080p", "2160p"];
            _this.MOVIE_QUALITY_LIST_EN = ["Auto", "Low", "Standard", "High", "HD", "FullHD", "4K"];
            _this.isLanding = false;
            _this.canPlayHls = false;
            _this.canLoad = false;
            _this.edgeSwitchMovieSourceFlg = false;
            _this.waitChangeDurationTimeout = 8000;
            _this.limit_error = false;
            _this.isPaused = true;
            _this.isWait = true;
            _this.isStoped = false;
            _this.cntTryAttach = 0;
            _this.lastTime = 0;
            _this.last2Time = 0;
            _this.jmcPlayer = player;
            if (_this.LanguageResource == null) {
                var lang = "ja";
                if (jstream_t3.utils.Util.browserLanguage() != "ja") {
                    lang = "en";
                }
                _this.LanguageResource = new jstream_t3.resource.LanguageResource(_this.model["language_resource_" + lang]);
            }
            return _this;
        }
        HTML5AccessAPI.prototype.setAuth = function () {
            if (!this.model.isAuthPassed) {
                if (this.model.a.indexOf(':') == -1 || this.model.a.split(":")[1].length < 1) {
                    this.showLoginForm();
                }
                else {
                    this.login(null, null);
                }
            }
            else {
                parent.location.href = this.model.movie_url;
            }
        };
        HTML5AccessAPI.prototype.showLoginForm = function (errorMessage) {
            if (errorMessage === void 0) { errorMessage = false; }
            if (this.model.responsive == "on" || this.model.responsive == "fit") {
            }
            var cssDir = this.model.playerDir + "resource/style/";
            jstream_t3.view.LoginFormView.show(this, this.model.fieldID, cssDir, errorMessage);
        };
        HTML5AccessAPI.prototype.login = function (id, pass) {
            var _this = this;
            var isPreSetAuthParam = false;
            var hashedPass = "";
            var orignePass = pass || "";
            if (id != null && pass != null) {
                var isAuthed = false;
                var md5_hexstr = MD5_hexhash(pass);
                id = jstream_t3.utils.Util.base64encode(id);
                hashedPass = md5_hexstr;
            }
            else if (id == null && pass == null) {
                isPreSetAuthParam = true;
                var splitAuthParam = this.model.a.split(":");
                id = jstream_t3.utils.Util.base64encode(splitAuthParam[0]);
                hashedPass = splitAuthParam[1];
            }
            this.model.a = encodeURIComponent(id + ":" + hashedPass);
            _super.prototype.loadAuthCheck.call(this, function (result) {
                if (isPreSetAuthParam) {
                    _this.model.a = "";
                }
                else {
                    _this.model.a = decodeURIComponent(_this.model.a);
                    var splitAuthParam = _this.model.a.split(":");
                    var id = jstream_t3.utils.Util.base64decode(splitAuthParam[0]);
                    var pass = orignePass;
                    _this.model.a = id + ":" + pass;
                }
                _this.authResult(result);
            });
        };
        HTML5AccessAPI.prototype.authResult = function (result) {
            if (this.model.getEnvironmentType() == jstream_t3.EnviromentKind.MOBILE_NATIVE) {
                if (result) {
                    this.model.isAuthPassed = true;
                    if (!this.model.isLive) {
                        this.model.setMovieMobileURL_AfterAuth();
                    }
                    parent.location.href = this.model.movie_url;
                }
                else {
                    this.showLoginForm(true);
                }
            }
            else if (this.model.getEnvironmentType() == jstream_t3.EnviromentKind.MOBILE_STREAMING) {
                this.model.a = null;
                if (result) {
                    this.model.isAuthPassed = true;
                    if (!this.model.isLive) {
                        this.model.setMovieMobileURL_AfterAuth();
                    }
                    this.eqPlayer.html5Player.updateVideoURL(this.model.movie_url, true);
                }
                else {
                    this.eqPlayer.html5Player.updateVideoURL(null, false);
                }
                this.eqPlayer.html5Player.authResult(result);
            }
            else {
                if (result) {
                    this.model.isAuthPassed = true;
                    if (this.UseHlsJs) {
                        if (!this.model.isLive) {
                            this.model.setMovieMobileURL_AfterAuth();
                        }
                        this.model.movie_url = this.model.movie_url;
                        this.eqPlayer.html5Player.setCurrentMovieURL(this.model.movie_url);
                        this.tryHlsLoad();
                    }
                    else {
                        if (!this.model.isLive) {
                            this.model.setMovieMobileURL_AfterAuth();
                        }
                    }
                }
                this.model.a = null;
                this.eqPlayer.html5Player.authResult(result);
            }
        };
        HTML5AccessAPI.prototype.playerEnd = function (e) {
            this.videoLog(e);
            this.video_event = e.type;
            this.isPaused = true;
            this.chengeState(e);
            this.preSeekState = "complete";
            if (this.model.loop_use == "on") {
                this.StandByLoop();
            }
        };
        HTML5AccessAPI.prototype.playerInit = function () {
            var _this = this;
            _super.prototype.playerInit.call(this);
            if (this.model.resumeEnable == "on" && (!this.model.start_time || this.model.start_time < 0)) {
                this.model.start_time = Number(jstream_t3.utils.Util.GetCookie("EQPlayer_resume_CurrentTime_" + this.model.meta_id + "_" + this.model.contract_id));
            }
            if (this.model.platform["isSP"] || this.model.platform["isTablet"]) {
                this.isFirstPlay = true;
            }
            var video = this.getElement();
            video.addEventListener("playing", function (e) {
                _this.videoLog(e);
                _this.chengeState(e);
                _this.isPaused = false;
                _this.video_event = e.type;
                _this.preSeekState = "playing";
            });
            video.addEventListener("pause", function (e) {
                _this.videoLog(e);
                _this.video_event = e.type;
                if ((!_this.liveModel.isLive) && (_this.getTotalTime() - _this.getCurrentTime() <= 0.05)) {
                    return;
                }
                _this.isPaused = true;
                _this.chengeState(e);
                _this.preSeekState = "paused";
            });
            video.addEventListener("seeking", function (e) {
                _this.videoLog(e);
                if (_this.preSeekState == "landing" || _this.preSeekState == "complete")
                    return;
                _this.video_event = e.type;
                if (_this.isSeeking || _this.isTouching)
                    return;
                if (jstream_t3.utils.Util.isMobileList().Android4 || jstream_t3.utils.Util.isMobileList().Firefox)
                    return;
                _this.startSeek();
            });
            video.addEventListener("seeked", function (e) {
                _this.videoLog(e);
                _this.video_event = e.type;
                if (_this.isQuealitySelecting)
                    _this.isQuealitySelecting = false;
                if (_this.isTouching || !_this.isSeeking)
                    return;
                _this.completeSeek();
            });
            video.addEventListener("ended", function (e) {
                _this.videoLog(e);
                _this.video_event = e.type;
                _this.isPaused = true;
                _this.chengeState(e);
                _this.preSeekState = "complete";
                if (_this.model.loop_use == "on") {
                    _this.StandByLoop();
                }
            });
            video.addEventListener("timeupdate", function (e) {
                _this.video_event = e.type;
                var delay = 500;
                if (_this.model.platform["isSafari"]) {
                    delay = 1000;
                }
                setTimeout(function () {
                    _this.last2Time = _this.lastTime;
                    _this.lastTime = _this.eqPlayer.html5Player.getCurrentTime();
                }, delay);
                _this.videoLog(e);
                if (_this.isQuealitySelecting) {
                    _this.chengeState(e);
                }
            });
            video.addEventListener("loadeddata", function (e) {
                _this.videoLog(e);
            });
            video.addEventListener("loadedmetadata", function (e) {
                _this.videoLog(e);
            });
            video.addEventListener("error", function (e) {
                _this.videoLog(e);
                _this.video_event = e.type;
                if (!_this.liveModel.isLive) {
                    _this.dispatchEvent(new jstream_t3.events.ErrorEvent(jstream_t3.events.ErrorEvent.SERVER_MEDIA_ERROR));
                }
                else {
                    _this.setState("interrupted");
                }
            });
            var html5Player = this.eqPlayer.html5Player;
            var __setCurrentTime = html5Player.setCurrentTime;
            var initSeek = html5Player._init_video_seek;
            html5Player._init_video_seek = function () {
                initSeek();
                if (!html5Player._values.seek_use)
                    return;
                var rail = html5Player._values.movie_slider_obj.node_slider_rail;
                rail.addEventListener("touchstart", function (e) {
                    _this.seekStart();
                }, true);
                rail.addEventListener("touchend", function (e) {
                    _this.seekEnd();
                });
            };
            var selectQuality = html5Player._click_movie_select;
            html5Player._click_movie_select = function (index) {
                _this.QuealitySelect_startTime = video.currentTime;
                _this.isQuealitySelecting = true;
                _this.stopProgress();
                selectQuality(index);
            };
            var timer = setTimeout(function () {
                if (!_this.model.playerFromPlaylist) {
                    if (_this.model.init_sound == "off" || _this.model.inCookieVolume == "mute") {
                        _this.mute(true);
                    }
                    else {
                        var volume = parseInt(_this.model.inCookieVolume);
                        if (isNaN(volume)) {
                            volume = 100;
                        }
                        _this.setVolume(volume);
                    }
                }
                else {
                    if (_this.model.inCookieVolume == "mute") {
                        _this.mute(true);
                    }
                    else {
                        var volume = parseInt(_this.model.inCookieVolume);
                        if (isNaN(volume)) {
                            volume = 100;
                        }
                        _this.setVolume(volume);
                    }
                }
                var slider = document.getElementById(_this.model.objectID + 'ctrl_volume_slider');
                if (slider) {
                    slider.style.display = "block";
                }
                _this.isLanding = true;
                _this.setState("landing");
                if (_this.model.init_play == "on" && !_this.model.platform["isSP"] && !_this.model.platform["isTablet"]) {
                    _this.play();
                }
            }, 1000);
        };
        HTML5AccessAPI.prototype.HlsPlayerInit = function (instance) {
            var _this = this;
            if (instance === void 0) { instance = null; }
            _super.prototype.playerInit.call(this);
            if (this.model.resumeEnable == "on" && (!this.model.start_time || this.model.start_time < 0)) {
                this.model.start_time = Number(jstream_t3.utils.Util.GetCookie("EQPlayer_resume_CurrentTime_" + this.model.meta_id + "_" + this.model.contract_id));
            }
            this.UseHlsJs = true;
            var video = this.getElement();
            video.addEventListener("playing", function (e) {
                if (!_this.edgeSwitchMovieSourceFlg) {
                    _this.videoLog(e);
                    _this.chengeState(e);
                    _this.isPaused = false;
                    _this.video_event = e.type;
                    _this.preSeekState = "playing";
                }
            });
            video.addEventListener("play", function (e) {
                if (_this.model.isLive) {
                    _this.LiveErrorCount = 0;
                }
            });
            video.addEventListener("pause", function (e) {
                if (!_this.edgeSwitchMovieSourceFlg) {
                    _this.videoLog(e);
                    _this.video_event = e.type;
                    _this.isPaused = true;
                    if ((!_this.liveModel.isLive) && (_this.getTotalTime() - _this.getCurrentTime() <= 0.05)) {
                        return;
                    }
                    _this.chengeState(e);
                    _this.preSeekState = "pause";
                }
            });
            video.addEventListener("seeking", function (e) {
                if (_this.preSeekState == "landing" || _this.preSeekState == "complete")
                    return;
                _this.videoLog(e);
                _this.video_event = e.type;
                if (_this.isSeeking || _this.isTouching)
                    return;
                if (jstream_t3.utils.Util.isMobileList().Android4 || jstream_t3.utils.Util.isMobileList().Firefox)
                    return;
                _this.startSeek();
            });
            video.addEventListener("seeked", function (e) {
                _this.videoLog(e);
                _this.video_event = e.type;
                if (_this.isQuealitySelecting)
                    _this.isQuealitySelecting = false;
                if (_this.isTouching || !_this.isSeeking)
                    return;
                _this.completeSeek();
            });
            video.addEventListener("ended", function (e) {
                _this.videoLog(e);
                _this.video_event = e.type;
                _this.isPaused = true;
                _this.chengeState(e);
                _this.preSeekState = "complete";
                if (_this.model.loop_use == "on") {
                    _this.StandByLoop();
                }
            });
            video.addEventListener("timeupdate", function (e) {
                _this.video_event = e.type;
                setTimeout(function () {
                    _this.last2Time = _this.lastTime;
                    _this.lastTime = video.currentTime;
                }, 500);
                _this.videoLog(e);
                if (_this.isQuealitySelecting) {
                    _this.chengeState(e);
                }
            });
            video.addEventListener("loadeddata", function (e) {
                _this.videoLog(e);
            });
            video.addEventListener("loadedmetadata", function (e) {
                _this.videoLog(e);
            });
            video.addEventListener("error", function (e) {
                _this.videoLog(e);
                _this.video_event = e.type;
                if (!_this.liveModel.isLive) {
                    _this.dispatchEvent(new jstream_t3.events.ErrorEvent(jstream_t3.events.ErrorEvent.SERVER_MEDIA_ERROR));
                }
                else {
                    _this.setState("interrupted");
                }
            });
            var html5Player = this.eqPlayer.html5Player;
            var __setCurrentTime = html5Player.setCurrentTime;
            var initSeek = html5Player._init_video_seek;
            html5Player._init_video_seek = function () {
                initSeek();
                if (!html5Player._values.seek_use)
                    return;
                var rail = html5Player._values.movie_slider_obj.node_slider_rail;
                rail.addEventListener("touchstart", function (e) {
                    _this.seekStart();
                }, true);
                rail.addEventListener("touchend", function (e) {
                    _this.seekEnd();
                });
            };
            var selectQuality = html5Player._click_movie_select;
            html5Player._click_movie_select = function (index) {
                _this.QuealitySelect_startTime = video.currentTime;
                _this.isQuealitySelecting = true;
                _this.stopProgress();
                selectQuality(index);
            };
            if (!this.model.isAuthEnable()) {
                this.loadingTimer = setInterval(function () {
                    _this.tryHlsLoad();
                }, 300);
            }
            else {
                this.setVolumeResume();
                this.landing();
            }
        };
        HTML5AccessAPI.prototype.tryHlsLoad = function () {
            var _this = this;
            try {
                var config;
                config = {
                    debug: this.model.isDebug,
                    startLevel: -1,
                    highBufferWatchdogPeriod: 30
                };
                this.hls = new Hls(config);
                this.setErrorHandler();
                this.hls.on("hlsMediaAttached", function () {
                    _this.setVolumeResume();
                    _this.tryLoadMedia(_this.model.movie_url);
                });
                this.cntTryAttach++;
                this.hls.attachMedia(document.getElementById(this.model.objectID));
                clearInterval(this.loadingTimer);
            }
            catch (e) {
                if (this.cntTryAttach > 10) {
                    clearInterval(this.loadingTimer);
                }
            }
        };
        HTML5AccessAPI.prototype.tryLoadMedia = function (movie_url) {
            var _this = this;
            this.hls.on("hlsManifestParsed", function () {
                if (_this.model.isLive) {
                    _this.canPlayHls = true;
                    _this.canLoad = true;
                    _this.dispatchEvent("canPlayHls");
                }
                else {
                    var stopLoadHls = function () {
                        _this.hls.stopLoad();
                        _this.hls.off("hlsFragParsed", stopLoadHls);
                        _this.canLoad = true;
                    };
                    var firstFragBuffered = function () {
                        _this.hls.off("hlsFragBuffered", firstFragBuffered);
                        if (_this.model.default_quality == "0") {
                            _this.canPlayHls = true;
                        }
                        if (_this.model.isDebug) {
                            console.log("[debug] > frag buffered");
                        }
                    };
                    var firstFragSeeked = function () {
                        _this.getElement().removeEventListener("seeked", firstFragSeeked);
                        _this.canPlayHls = true;
                        if (_this.model.isDebug) {
                            console.log("[debug] > video seeked");
                            console.log("[debug] > can play hls");
                        }
                    };
                    var durationChanged = function () {
                        clearTimeout(_this.waitChangeDurationTimer);
                        _this.hls["media"].removeEventListener("durationchange", durationChanged);
                        _this.hls.stopLoad();
                        _this.canPlayHls = true;
                        _this.canLoad = true;
                        _this.dispatchEvent("canPlayHls");
                        if (_this.model.isDebug) {
                            console.log("[debug] > can play hls");
                        }
                    };
                    _this.hls["media"].addEventListener("durationchange", durationChanged);
                    _this.waitChangeDurationTimer = setTimeout(function () {
                        _this.hls["media"].removeEventListener("durationchange", durationChanged);
                        _this.hls.stopLoad();
                        _this.canPlayHls = true;
                        _this.canLoad = true;
                        _this.dispatchEvent("canPlayHls");
                        if (_this.model.isDebug) {
                            console.log("[debug] > durationchange timeout");
                        }
                    }, _this.waitChangeDurationTimeout);
                    _this.getElement().addEventListener("seeked", firstFragSeeked);
                }
            });
            this.hls.loadSource(movie_url);
        };
        HTML5AccessAPI.prototype.setErrorHandler = function () {
            var _this = this;
            try {
                this.hls.on("hlsError", function (event, data) {
                    var errorType = data.type;
                    var errorDetails = data.details;
                    var errorFatal = data.fatal;
                    var errorEvent = data.event;
                    if (errorFatal) {
                        if (_this.model.isLive && errorType == "networkError") {
                            var waitElement = document.getElementById(_this.model.objectID + "play_state_liveWait");
                            if (!!waitElement) {
                                waitElement.style.display = "block";
                                var timeOut = 1000;
                                if (_this.model.isKollectiveEnable()) {
                                    timeOut = 5000;
                                }
                                setTimeout(function () {
                                    waitElement.style.display = "none";
                                    _this.hls.loadSource(_this.eqPlayer.html5Player.getCurrentMovieURL());
                                }, timeOut);
                            }
                            if (_this.model.isKollectiveEnable()) {
                            }
                            return;
                        }
                        _this.recoverTimer = setInterval(function () {
                            this.retryCount = 0;
                        }, _this.retryDelay * 4);
                        if (!!_this.errorData && _this.errorData.type == errorType) {
                            _this.retryCount += 1;
                        }
                        else {
                            _this.retryCount = 1;
                        }
                        _this.errorData = data;
                        switch (data.type) {
                            case "networkError":
                                if (_this.retryCount > _this.maxErrorCount) {
                                    _this.retryCount = 0;
                                    _this.eqPlayer.html5Player.set_info_error(errorDetails);
                                    return;
                                }
                                setTimeout(function () {
                                    _this.hls.loadSource(_this.eqPlayer.html5Player.getCurrentMovieURL());
                                    _this.hls.startLoad();
                                }, _this.retryDelay);
                                break;
                            case "mediaError":
                                if (_this.retryCount > _this.maxErrorCount) {
                                    _this.retryCount = 0;
                                    _this.eqPlayer.html5Player.set_info_error(errorDetails);
                                    return;
                                }
                                setTimeout(function () {
                                    _this.hls.recoverMediaError();
                                }, _this.retryDelay);
                                break;
                            default:
                                _this.eqPlayer.html5Player.set_info_error(errorDetails);
                                _this.hls.destroy();
                                break;
                        }
                        return;
                    }
                    else {
                        switch (data.details) {
                            case "bufferStalledError":
                                break;
                            default:
                                break;
                        }
                    }
                });
            }
            catch (e) {
            }
        };
        HTML5AccessAPI.prototype.landing = function () {
            if (!this.isLanding) {
                this.isLanding = true;
                this.setState("landing");
                this.preSeekState = this.state;
                if (this.model.init_play == "on" && !this.model.platform["isSP"] && !this.model.platform["isTablet"]) {
                    this.play();
                }
            }
        };
        HTML5AccessAPI.prototype.setVolumeResume = function () {
            var _this = this;
            var timer = setTimeout(function () {
                if (!_this.model.playerFromPlaylist) {
                    if (_this.model.init_sound == "off" || _this.model.inCookieVolume == "mute") {
                        _this.mute(true);
                    }
                    else {
                        var volume = parseInt(_this.model.inCookieVolume);
                        if (isNaN(volume)) {
                            volume = 100;
                        }
                        _this.setVolume(volume);
                    }
                }
                else {
                    if (_this.model.inCookieVolume == "mute") {
                        _this.mute(true);
                    }
                    else {
                        var volume = parseInt(_this.model.inCookieVolume);
                        if (isNaN(volume)) {
                            volume = 100;
                        }
                        _this.setVolume(volume);
                    }
                }
                var slider = document.getElementById(_this.model.objectID + 'ctrl_volume_slider');
                if (slider) {
                    slider.style.display = "block";
                }
            }, 0);
        };
        HTML5AccessAPI.prototype.onfullscreen = function (isFullscreen) {
            if (this.model.isInIframe) {
                this.sendFullscreenEvent(isFullscreen);
            }
            else {
                if (isFullscreen) {
                    this.dispatchEvent("fullscreen");
                }
                else {
                    this.dispatchEvent("exitFullscreen");
                }
            }
        };
        HTML5AccessAPI.prototype.videoLog = function (e) {
            jstream_t3.utils.Logger.stateLog({
                time: this.getCurrentTime(),
                video: e.type
            });
        };
        HTML5AccessAPI.prototype.startSeek = function () {
            if (this.preSeekState != "playing" && this.preSeekState != null) {
                this.preSeekState = this.state;
            }
            this.isSeeking = true;
            if (!this.isQuealitySelecting)
                this.setState("seek_start");
        };
        HTML5AccessAPI.prototype.completeSeek = function () {
            this.isSeeking = false;
            if (!this.isQuealitySelecting)
                this.setState(this.preSeekState == "playing" ? "playing" : "paused");
            this.preSeekState = this.state;
        };
        HTML5AccessAPI.prototype.seekStart = function () {
            this.isTouching = true;
            this.startSeek();
        };
        HTML5AccessAPI.prototype.seekEnd = function () {
            this.isTouching = false;
            if (this.isSeeking) {
                this.completeSeek();
            }
        };
        HTML5AccessAPI.prototype.timeupdate = function (e) {
            this.lastTime = this.getElement().currentTime;
        };
        HTML5AccessAPI.prototype.chengeState = function (e) {
            if (e.type == "timeupdate") {
                if (this.isQuealitySelecting && this.lastTime + 2 >= this.QuealitySelect_startTime) {
                    this.isQuealitySelecting = false;
                    if (this.state == "playing") {
                        this.startProgress();
                    }
                    else {
                    }
                }
                else {
                    if (!this.isQuealitySelecting) {
                    }
                    else if (!(this.lastTime + 2 >= this.QuealitySelect_startTime)) {
                    }
                }
                return;
            }
            if (this.isQuealitySelecting) {
                return;
            }
            if (this.isSeeking && e.type == "playing") {
                return;
            }
            if ((!this.liveModel.isLive) && (e.type == "pause" && this.getCurrentTime() == this.getTotalTime())) {
                return;
            }
            if (this.state == "complete" && e.type != "playing") {
                return;
            }
            if (e.type == "playing" && this.getCurrentTime() == 0) {
                this.inited = true;
            }
            if (this.liveModel.isLive)
                this.inited = true;
            if ((this.liveModel.isLive) && (e.type == "ended")) {
                this.setState("interrupted");
                return;
            }
            var labels = {
                playing: "playing",
                pause: "paused",
                ended: "complete"
            };
            var state = labels[e.type];
            this.setState(state);
        };
        HTML5AccessAPI.prototype.setState = function (state) {
            if (state != this.state) {
                if (state != "exit" && state != "landing") {
                    var AccessAPI = this;
                    if (AccessAPI.model.resumeVolumeEnable == "on") {
                        if (this.model.CookieDomain) {
                            var name = "EQPlayer_resume_Volume";
                            var value;
                            var path = '/';
                            var period;
                            if (AccessAPI.isMuted && AccessAPI.isMuted()) {
                                value = "mute";
                            }
                            else {
                                value = AccessAPI.getVolume().toString();
                            }
                            jstream_t3.utils.Util.SetCookie(name, value, path, period, this.model.CookieDomain);
                        }
                    }
                }
                _super.prototype.setState.call(this, state);
            }
        };
        HTML5AccessAPI.prototype._getCurrentTime = function () {
            var video = this.getElement();
            var time = this.eqPlayer.html5Player ? this.eqPlayer.html5Player.getCurrentTime() : 0;
            return Math.floor(time * 1000) / 1000;
        };
        HTML5AccessAPI.prototype.getCurrentTime = function () {
            if (this.liveModel.isLive) {
                return this._getCurrentTime();
            }
            else {
                var playhead = this._getCurrentTime();
                return playhead;
            }
        };
        HTML5AccessAPI.prototype.getTotalTime = function () {
            var time = this.getElement().duration;
            if (!isFinite(time) || time > Number(this.model.duration) + 1 || time < Number(this.model.duration) - 1) {
                time = Number(this.model.duration);
            }
            if (this.liveModel.isLive) {
                return Math.floor(time * 1000) / 1000;
            }
            else {
                return Math.floor(time * 1000) / 1000;
            }
        };
        HTML5AccessAPI.prototype.setStartTime = function (time) {
            if (!this.validateSeek(time)) {
                return;
            }
            jstream_t3.utils.Logger.stateLog({
                time: this.getCurrentTime(),
                action: "api.setStartTime"
            });
            if (!this.liveModel.isLive) {
                this.setCurrentTime(time);
                this.play();
            }
            this.sendPlayerValues();
        };
        HTML5AccessAPI.prototype.setCurrentTime = function (time) {
            if (!this.validateSeek(time)) {
                return;
            }
            if (time == 0) {
                time = 0.1;
            }
            jstream_t3.utils.Logger.stateLog({
                time: this.getCurrentTime(),
                action: "api.setCurrentTime"
            });
            if (!this.liveModel.isLive) {
                this.eqPlayer.html5Player.setCurrentTime(time);
            }
            this.sendPlayerValues();
        };
        HTML5AccessAPI.prototype.showLimitError = function () {
            if (this.LanguageResource == null) {
                var lang = "ja";
                if (jstream_t3.utils.Util.browserLanguage() != "ja") {
                    lang = "en";
                }
                this.LanguageResource = new jstream_t3.resource.LanguageResource(this.model["language_resource_" + lang]);
            }
            if (this.model.isLive) {
                this.liveModel.liveLid = this.liveModel.getLiveLidURL();
                this.showError(jstream_t3.events.ErrorEvent.LIVELIMIT_LOAD_ERROR, this.LanguageResource.kinds.P3502M, this.LanguageResource.kinds.P3502T);
                this.sendCrashReport("3502", "showLimitError");
                this.setState("complete");
                if (this.hls) {
                    this.hls.destroy();
                }
            }
            else {
                this.showError(jstream_t3.events.ErrorEvent.LIVELIMIT_LOAD_ERROR, this.LanguageResource.kinds.P3502M, this.LanguageResource.kinds.P3502T);
                this.sendCrashReport("3502", "showLimitError");
            }
        };
        HTML5AccessAPI.prototype.playCall = function (stat) {
            var _this = this;
            if (stat === void 0) { stat = ""; }
            this.model.stat = (stat == "update" ? "2" : "1");
            if ((this.model.platform["isSP"] || this.model.platform["isTablet"] || (this.model.platform["os"]["name"] == "Macintosh" && this.model.platform["isSafari"])) && (this.model.isCheckConnectionPassed == "NG" || this.model.isCheckConnectionPassed == "undefined") && stat != "update") {
                if (this.isPaused) {
                    _super.prototype.loadCheckConnectionResult.call(this, function (result) {
                        if (_this.model.connection_limit > _this.model.currentConnecting) {
                            _this.model.isCheckConnectionPassed = "OK";
                            _this.limit_error = false;
                        }
                        else {
                            if (stat != "wait") {
                                _this.showLimitError();
                                _this.hls.stopLoad();
                                _this.hls.destroy();
                                return;
                            }
                            else {
                                _this.limit_error = true;
                            }
                        }
                        if (!_this.playCallTimeout) {
                            _this.playCallTimeout = setTimeout(function () {
                                _this.playCallTimeout = null;
                                _this.model.isCheckConnectionPassed = "NG";
                                if (_this.isPaused) {
                                    _this.isWait = true;
                                }
                                else {
                                    _this.isWait = false;
                                }
                                _this.playCall("result");
                            }, 30000);
                        }
                    });
                }
                if (!this.playCallTimeout) {
                    this.playCallTimeout = setTimeout(function () {
                        _this.playCallTimeout = null;
                        _this.model.isCheckConnectionPassed = "NG";
                        if (_this.isPaused) {
                            _this.isWait = true;
                        }
                        else {
                            _this.isWait = false;
                        }
                        _this.playCall("result");
                    }, 30000);
                }
            }
            else {
                _super.prototype.loadCheckConnection.call(this, function (result) {
                    if (stat == "update") {
                        if (_this.model.isCheckConnectionPassed != "NG") {
                            _this.model.isCheckConnectionPassed = "OK";
                        }
                        if (!_this.playCallTimeout) {
                            _this.playCallTimeout = setTimeout(function () {
                                _this.model.isCheckConnectionPassed = "NG";
                                _this.playCallTimeout = null;
                                if (_this.model.platform["isSP"] || _this.model.platform["isTablet"]) {
                                    if (_this.isPaused) {
                                        _this.isWait = true;
                                    }
                                    else {
                                        _this.isWait = false;
                                    }
                                    _this.playCall("result");
                                }
                            }, 30000);
                        }
                        return;
                    }
                    if (_this.model.isCheckConnectionPassed != "NG") {
                        _this.model.isCheckConnectionPassed = "OK";
                        _this.isWait = false;
                        if (stat != "update") {
                            if (!(_this.model.platform["isSP"] || _this.model.platform["isTablet"])) {
                                _this.play();
                            }
                        }
                        if (!_this.playCallTimeout) {
                            _this.playCallTimeout = setTimeout(function () {
                                _this.model.isCheckConnectionPassed = "NG";
                                _this.playCallTimeout = null;
                            }, 30000);
                        }
                    }
                    else {
                        _this.showLimitError();
                    }
                });
            }
        };
        HTML5AccessAPI.prototype.StandByLoop = function () {
            var _this = this;
            setTimeout(function () {
                _this.eqPlayer.html5Player.setloop();
            }, 10);
        };
        HTML5AccessAPI.prototype.play = function () {
            this.eqPlayer.html5Player.play();
        };
        HTML5AccessAPI.prototype.pause = function () {
            if (!this.isPlayed)
                return;
            if (this.state == "complete" || this.state == "paused") {
                return;
            }
            jstream_t3.utils.Logger.stateLog({
                time: this.getCurrentTime(),
                action: "api.pause"
            });
            this.eqPlayer.html5Player.pause();
            _super.prototype.pause.call(this);
            this.sendPlayerValues();
        };
        HTML5AccessAPI.prototype.createPlayer = function () {
            var success;
            if (!this.liveModel.isLive) {
                success = this.model.parce();
            }
            else {
                this.isLanding = false;
                success = this.liveModel.parseLive();
            }
            if (!success) {
                return;
            }
            jstream_t3.PlatformBuilderFactory.create(this.model, this).build();
        };
        HTML5AccessAPI.prototype.changeQuality = function (value) {
            if (value == this.getQuality()) {
                return;
            }
            if (typeof value == "number" && value >= 0 && value < 7) {
                jstream_t3.utils.Logger.stateLog({
                    time: this.getCurrentTime(),
                    action: "api.changeQuality"
                });
                var index = this.getQualityLabel(value);
                if (index >= 0) {
                    if (this.model.isAuthEnable()) {
                        this.eqPlayer.html5Player.setCurrentMovieURL(this.model.movie_list[index].url);
                    }
                    else {
                        this.eqPlayer.html5Player.changeQuality(this.model.movie_list[index].url);
                    }
                }
                else {
                }
            }
            this.sendPlayerValues();
        };
        HTML5AccessAPI.prototype.getQualityLabel = function (index) {
            var movie_quality_list;
            movie_quality_list = this.MOVIE_QUALITY_LIST_JA;
            for (var i = 0; i < this.model.movie_list.length; i++) {
                if (this.model.movie_list[i].text.indexOf(movie_quality_list[index]) != -1) {
                    return i;
                }
            }
            return -1;
        };
        HTML5AccessAPI.prototype.getQualityVal = function (text) {
            var movie_quality_list;
            if (jstream_t3.utils.Util.browserLanguage() == "ja") {
                movie_quality_list = this.MOVIE_QUALITY_LIST_JA;
            }
            else {
                movie_quality_list = this.MOVIE_QUALITY_LIST_EN;
            }
            for (var i = 0; i < movie_quality_list.length; i++) {
                if (text.indexOf(movie_quality_list[i]) != -1) {
                    return i;
                }
            }
            return -1;
        };
        HTML5AccessAPI.prototype.getQuality = function () {
            if (this.eqPlayer.html5Player) {
                var src = this.eqPlayer.html5Player.getCurrentMovieURL();
                for (var i = 0; i < this.model.movie_list.length; i++) {
                    if (this.model.movie_list[i].url == src) {
                        var val = this.getQualityVal(this.model.movie_list[i].text);
                        return val;
                    }
                }
            }
            return -1;
        };
        HTML5AccessAPI.prototype.mute = function (value) {
            if (typeof value === "boolean") {
                jstream_t3.utils.Logger.stateLog({
                    time: this.getCurrentTime(),
                    action: "api.mute"
                });
                this.sendPlayerValues();
                return this.eqPlayer.html5Player.setMute(value);
            }
            else {
                return this.isMuted();
            }
        };
        HTML5AccessAPI.prototype.isMuted = function () {
            if (this.getElement()) {
                return this.getElement().muted;
            }
            else {
                return false;
            }
        };
        HTML5AccessAPI.prototype.setVolume = function (volume) {
            if (typeof volume === "number" && volume >= 0 && volume <= 100 && volume % 1 == 0) {
                jstream_t3.utils.Logger.stateLog({
                    time: this.getCurrentTime(),
                    action: "api.setVolume"
                });
                if (this.eqPlayer.html5Player.setVolume) {
                    this.eqPlayer.html5Player.setVolume(volume / 100);
                }
            }
            this.sendPlayerValues();
        };
        HTML5AccessAPI.prototype.getVolume = function () {
            if (this.getElement()) {
                return Math.floor(this.getElement().volume * 100);
            }
            else {
                return 100;
            }
        };
        HTML5AccessAPI.prototype.getPlaybackRate = function () {
            if (this.getElement().tagName.toLowerCase() == "video") {
                return this.eqPlayer.html5Player.getPlaybackRate();
            }
            return 1;
        };
        HTML5AccessAPI.prototype.setPlaybackRate = function (pr) {
            if (!this.liveModel.isLive)
                this.eqPlayer.html5Player.changePlaybackRate(pr);
            this.sendPlayerValues();
        };
        HTML5AccessAPI.prototype.getCurrentAPI = function () {
            if (!this.isLanding) {
                return "isNotReady";
            }
            if (this.model.getEnvironmentType() == jstream_t3.EnviromentKind.MOBILE_NATIVE) {
                return "NativeHLS";
            }
            return "HTML5API";
        };
        HTML5AccessAPI.prototype.getMetaId = function () {
            if (this.model.meta_id) {
                return this.model.meta_id;
            }
            return "-1";
        };
        HTML5AccessAPI.prototype.displayRefresh = function () {
            this.eqPlayer.html5Player.displayRefresh();
        };
        HTML5AccessAPI.prototype.playerSkinConfig = function (config) {
            var configObj = {
                color: {
                    controlbar: "rgba(34,34,34,0.8)",
                    seekbar: "#f8cb08",
                    titlebar: "rgba(34,34,34,0.8)",
                    highlight: "#FFAA00"
                },
                font: {
                    color: "white",
                    family: "arial,sans-serif"
                },
                thumbnail: this.model.thumbnail_url
            };
            for (var prop in config) {
                switch (prop) {
                    case "color":
                        for (var colorProp in config[prop]) {
                            configObj.color[colorProp] = config[prop][colorProp];
                        }
                        break;
                    case "font":
                        for (var fontProp in config[prop]) {
                            configObj.color[fontProp] = config[prop][fontProp];
                        }
                        break;
                    case "thumbnail":
                        configObj[prop] = config[prop];
                        break;
                }
            }
        };
        HTML5AccessAPI.prototype.changeSubtitles = function (index) {
            if (typeof index === "number" && index > 0 && index < 7) {
                this.eqPlayer.html5Player.changeSubtitles(index);
            }
            this.sendPlayerValues();
        };
        HTML5AccessAPI.prototype.getSubtitles = function () {
            if (this.getElement().tagName.toLowerCase() == "video") {
                return this.eqPlayer.html5Player.getSubtitles();
            }
            return 1;
        };
        HTML5AccessAPI.prototype.reConstruct = function (mid) {
            var _this = this;
            this.state = null;
            this.isLanding = false;
            this.analytics.resetLastBecon();
            this.model.meta_id = mid;
            this.model.default_quality = this.getQuality().toString();
            this.model.mobile_default_quality = this.getQuality().toString();
            var currntRate = this.getPlaybackRate();
            for (var i = 0; i < this.model.playbackRate_list.length; i++) {
                if (this.model.playbackRate_list[i] == currntRate) {
                    this.model.playbackRate_index = i;
                }
            }
            this.model.reset();
            if (this.model.resumeEnable == "on") {
                this.model.start_time = Number(jstream_t3.utils.Util.GetCookie("EQPlayer_resume_CurrentTime_" + this.model.meta_id + "_" + this.model.contract_id));
            }
            else {
                this.model.start_time = 0;
            }
            if (this.model.resumeVolumeEnable == "on") {
                if (this.model.CookieDomain) {
                    var name = "EQPlayer_resume_Volume";
                    var value;
                    var path = '/';
                    var period;
                    if (this.isMuted && this.isMuted()) {
                        value = "mute";
                    }
                    else {
                        value = this.getVolume().toString();
                    }
                    jstream_t3.utils.Util.SetCookie(name, value, path, period, this.model.CookieDomain);
                }
            }
            this.model.inCookieVolume = jstream_t3.utils.Util.GetCookie("EQPlayer_resume_Volume");
            this.model.playerFromPlaylist = true;
            this.eqPlayer.flashVars = this.model;
            this.stopProgress();
            this.loadMetaData(function () {
                _this.loadDeviceSetting(function () {
                    _this.loadHostCheck2(function () {
                        _this.eqPlayer.create();
                    });
                });
            });
        };
        HTML5AccessAPI.prototype.destroy = function () {
            this.canPlayHls = false;
            this.isFirstPlay = false;
            this.canLoad = false;
            this.edgeSwitchMovieSourceFlg = false;
            this.isWait = true;
        };
        return HTML5AccessAPI;
    }(jstream_t3.EQPlayerAccessAPI));
    jstream_t3.HTML5AccessAPI = HTML5AccessAPI;
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3) {
    var IFrameAccsessAPI = (function (_super) {
        __extends(IFrameAccsessAPI, _super);
        function IFrameAccsessAPI(player) {
            var _this = _super.call(this, player) || this;
            _this.UseHlsJs = false;
            _this.isSeeking = false;
            _this.isQuealitySelecting = false;
            _this.QuealitySelect_startTime = 0;
            _this.isFirstPlay = true;
            _this.video_event = "";
            _this.playCallTimeout = null;
            _this.LiveErrorCount = 0;
            _this.isTouching = false;
            _this.MOVIE_QUALITY_LIST_JA = ["自動", "低画質", "標準画質", "高画質", "ＨＤ画質", "フルＨＤ", "４Ｋ画質"];
            _this.MOVIE_QUALITY_LIST_EN = ["AUTO", "Low", "Standard", "High", "HD", "FullHD", "4K"];
            _this.isLanding = false;
            _this.jmcPlayer = player;
            if (_this.LanguageResource == null) {
                var lang = "ja";
                if (jstream_t3.utils.Util.browserLanguage() != "ja") {
                    lang = "en";
                }
                _this.LanguageResource = new jstream_t3.resource.LanguageResource(_this.model["language_resource_" + lang]);
            }
            var timer = setInterval(function () {
                _this.tryGetIframeElement();
                if (_this.iframeElement) {
                    clearInterval(timer);
                    _this.iframeElement.addEventListener("load", function () {
                        _this.setWindowMessage();
                    });
                }
            }, 100);
            return _this;
        }
        IFrameAccsessAPI.prototype.setWindowMessage = function () {
            var _this = this;
            if (this.model.platform["isIE"] && this.model.platform["browser"]["version"] < 9) {
                try {
                    this.tryGetIframeElement();
                    if (!!this.iframeElement && !!this.iframeElement.src) {
                        var msg = this.generateMessage("apiReady", this.model.iframeID);
                        this.sendMessage(msg);
                        var landingTimer = setInterval(function () {
                            if (!_this.isLanding) {
                                _this.sendMessage(msg);
                            }
                        }, 100);
                    }
                    else {
                        var timer = setInterval(function () {
                            _this.tryGetIframeElement();
                            if (!!_this.iframeElement && !!_this.iframeElement.src) {
                                clearInterval(timer);
                                var msg = _this.generateMessage("apiReady", _this.model.iframeID);
                                _this.sendMessage(msg);
                                var landingTimer = setInterval(function () {
                                    if (!_this.isLanding) {
                                        _this.sendMessage(msg);
                                    }
                                }, 100);
                            }
                        }, 100);
                    }
                }
                catch (err) {
                }
                window.attachEvent("onmessage", function (event) {
                    try {
                        var p = jstream_t3.utils.Util.parse_uri(_this.iframeElement.src);
                        var origin = p.scheme + "://" + p.authority;
                        if (event["origin"] !== origin) {
                            return;
                        }
                        if (event["srcElement"]["location"]["href"] != _this.iframeElement.src) {
                            return;
                        }
                        var data;
                        if (_this.model.platform["isIE"] && _this.model.platform["browser"]["version"] < 10) {
                            data = jstream_t3.utils.Util.messageRevertForLagacy(event["data"]);
                        }
                        else {
                            data = event["data"];
                        }
                        if (data.iframeID != _this.model.iframeID) {
                            return;
                        }
                        switch (data.msg) {
                            case "setState":
                                if (data.value == "landing") {
                                    _this.isLanding = true;
                                }
                                _this.setState(data.value);
                                break;
                            case "progress":
                                _this.setPlayerValue(data.value);
                                break;
                        }
                    }
                    catch (err) {
                    }
                });
            }
            else {
                try {
                    this.tryGetIframeElement();
                    if (!!this.iframeElement && !!this.iframeElement.src) {
                        var msg = this.generateMessage("apiReady", this.model.iframeID);
                        this.sendMessage(msg);
                        var landingTimer = setInterval(function () {
                            if (!_this.isLanding) {
                                _this.sendMessage(msg);
                            }
                        }, 100);
                    }
                    else {
                        var timer = setInterval(function () {
                            _this.tryGetIframeElement();
                            if (!!_this.iframeElement && !!_this.iframeElement.src) {
                                clearInterval(timer);
                                var msg = _this.generateMessage("apiReady", _this.model.iframeID);
                                _this.sendMessage(msg);
                                var landingTimer = setInterval(function () {
                                    if (!_this.isLanding) {
                                        _this.sendMessage(msg);
                                    }
                                }, 100);
                            }
                        }, 100);
                    }
                }
                catch (err) {
                }
                window.addEventListener("message", function (event) {
                    try {
                        var p = jstream_t3.utils.Util.parse_uri(_this.iframeElement.src);
                        var origin = p.scheme + "://" + p.authority;
                        if (event.origin !== origin) {
                            return;
                        }
                        var data;
                        if (_this.model.platform["isIE"] && _this.model.platform["browser"]["version"] < 10) {
                            data = jstream_t3.utils.Util.messageRevertForLagacy(event.data);
                        }
                        else {
                            data = event.data;
                        }
                        if (data.iframeID != _this.model.iframeID) {
                            return;
                        }
                        switch (data.msg) {
                            case "setState":
                                if (data.value == "landing") {
                                    _this.isLanding = true;
                                }
                                _this.setState(data.value);
                                break;
                            case "progress":
                                _this.setPlayerValue(data.value);
                                break;
                            case "changefullscreen":
                                _this.dispatchEvent(data.value);
                                break;
                        }
                    }
                    catch (err) {
                    }
                });
            }
        };
        IFrameAccsessAPI.prototype.playerInit = function () {
            _super.prototype.playerInit.call(this);
        };
        IFrameAccsessAPI.prototype.tryGetIframeElement = function () {
            try {
                this.iframeElement = document.getElementById(this.model.iframeID);
            }
            catch (err) {
            }
        };
        IFrameAccsessAPI.prototype.sendMessage = function (msg) {
            try {
                if (!!this.iframeElement && !!this.iframeElement.contentWindow) {
                    if (this.model.platform["isIE"] && this.model.platform["browser"]["version"] < 10) {
                        this.iframeElement.contentWindow.postMessage(msg.convertForLegacy(), this.iframeElement.src);
                    }
                    else {
                        this.iframeElement.contentWindow.postMessage(msg, this.iframeElement.src);
                    }
                }
            }
            catch (err) {
            }
        };
        IFrameAccsessAPI.prototype.generateMessage = function (func, arg) {
            var msg = new sendMessageModel(func, arg);
            return msg;
        };
        IFrameAccsessAPI.prototype.setPlayerValue = function (values) {
            this.currentTime = Number(values.currentTime);
            this.totalTime = Number(values.totalTime);
            this.quality = Number(values.quality);
            this.isMute = values.isMute;
            this.volume = Number(values.volume);
            this.playbackRate = Number(values.playbackRate);
            this.currentAPI = values.currentAPI.toString();
            this.meta_id = values.meta_id.toString();
            if (this.model.meta_id != this.meta_id) {
                this.model.meta_id = this.meta_id;
            }
            this.subtitle = values.subtitle;
        };
        IFrameAccsessAPI.prototype.setState = function (state) {
            if (state != this.state) {
                if (state != "exit" && state != "landing") {
                    var AccessAPI = this;
                    if (AccessAPI.model.resumeVolumeEnable == "on") {
                        if (this.model.CookieDomain) {
                            var name = "EQPlayer_resume_Volume";
                            var value;
                            var path = '/';
                            var period;
                            if (AccessAPI.isMuted && AccessAPI.isMuted()) {
                                value = "mute";
                            }
                            else {
                                value = AccessAPI.getVolume().toString();
                            }
                            jstream_t3.utils.Util.SetCookie(name, value, path, period, this.model.CookieDomain);
                        }
                    }
                }
                _super.prototype.setState.call(this, state);
            }
        };
        IFrameAccsessAPI.prototype.videoLog = function (e) {
            jstream_t3.utils.Logger.stateLog({
                time: this.getCurrentTime(),
                video: e.type
            });
        };
        IFrameAccsessAPI.prototype.getCurrentTime = function () {
            return this.currentTime;
        };
        IFrameAccsessAPI.prototype.getTotalTime = function () {
            return this.totalTime;
        };
        IFrameAccsessAPI.prototype.setStartTime = function (time) {
            var msg = this.generateMessage("setStartTime", time);
            this.sendMessage(msg);
        };
        IFrameAccsessAPI.prototype.setCurrentTime = function (time) {
            var msg = this.generateMessage("setCurrentTime", time);
            this.sendMessage(msg);
        };
        IFrameAccsessAPI.prototype.playCall = function (stat) {
            if (stat === void 0) { stat = ""; }
        };
        IFrameAccsessAPI.prototype.play = function () {
            var msg = this.generateMessage("play");
            this.sendMessage(msg);
        };
        IFrameAccsessAPI.prototype.pause = function () {
            var msg = this.generateMessage("pause");
            this.sendMessage(msg);
        };
        IFrameAccsessAPI.prototype.createPlayer = function () {
        };
        IFrameAccsessAPI.prototype.changeQuality = function (value) {
            var msg = this.generateMessage("changeQuality", value);
            this.sendMessage(msg);
        };
        IFrameAccsessAPI.prototype.changeSubtitles = function (value) {
            var msg = this.generateMessage("changeSubtitles", value);
            this.sendMessage(msg);
        };
        IFrameAccsessAPI.prototype.getQualityLabel = function (index) {
            return;
        };
        IFrameAccsessAPI.prototype.getQualityVal = function (text) {
            return;
        };
        IFrameAccsessAPI.prototype.getQuality = function () {
            return this.quality;
        };
        IFrameAccsessAPI.prototype.mute = function (value) {
            var msg = this.generateMessage("mute", value);
            this.sendMessage(msg);
            return;
        };
        IFrameAccsessAPI.prototype.isMuted = function () {
            return this.isMute;
        };
        IFrameAccsessAPI.prototype.setVolume = function (volume) {
            var msg = this.generateMessage("setVolume", volume);
            this.sendMessage(msg);
        };
        IFrameAccsessAPI.prototype.getVolume = function () {
            return this.volume;
        };
        IFrameAccsessAPI.prototype.getPlaybackRate = function () {
            return this.playbackRate;
        };
        IFrameAccsessAPI.prototype.setPlaybackRate = function (pr) {
            var msg = this.generateMessage("setPlaybackRate", pr);
            this.sendMessage(msg);
        };
        IFrameAccsessAPI.prototype.getCurrentAPI = function () {
            return this.currentAPI;
        };
        IFrameAccsessAPI.prototype.getMetaId = function () {
            return this.meta_id;
        };
        IFrameAccsessAPI.prototype.getSubtitles = function () {
            return this.subtitle;
        };
        IFrameAccsessAPI.prototype.displayRefresh = function () {
            var msg = this.generateMessage("displayRefresh");
            this.sendMessage(msg);
        };
        return IFrameAccsessAPI;
    }(jstream_t3.EQPlayerAccessAPI));
    jstream_t3.IFrameAccsessAPI = IFrameAccsessAPI;
    var sendMessageModel = (function () {
        function sendMessageModel(functionName, args) {
            this.func = functionName;
            this.arg = args;
        }
        sendMessageModel.prototype.convertForLegacy = function () {
            var stringMessage = "";
            stringMessage = this.func + "," + this.arg;
            return stringMessage;
        };
        return sendMessageModel;
    }());
    jstream_t3.sendMessageModel = sendMessageModel;
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3) {
    var EQPlayerAccessAPIBuilder = (function () {
        function EQPlayerAccessAPIBuilder() {
        }
        EQPlayerAccessAPIBuilder.create = function (eqPlayer) {
            var api;
            if (eqPlayer.flashVars.isIframe && !eqPlayer.flashVars.isInIframe) {
                return new jstream_t3.IFrameAccsessAPI(eqPlayer);
            }
            if (eqPlayer.flashVars.mode == "flash") {
                return new jstream_t3.SWFAccessAPI(eqPlayer);
            }
            var platform = eqPlayer.flashVars.platform;
            if (eqPlayer.flashVars.pd_enable == undefined) {
                if (platform["isSP"] || platform["isTablet"]) {
                    if (document.createElement('video').canPlayType) {
                        api = new jstream_t3.HTML5AccessAPI(eqPlayer);
                    }
                    else if (jstream_t3.utils.Util.isFlash()) {
                        api = new jstream_t3.SWFAccessAPI(eqPlayer);
                    }
                    else {
                        api = new jstream_t3.HTML5AccessAPI(eqPlayer);
                    }
                }
                else if (!document.createElement('video').canPlayType) {
                    api = new jstream_t3.SWFAccessAPI(eqPlayer);
                }
                else if (platform["isIE"] &&
                    ((platform["browser"]["version"] == "11.0" && platform["os"]["name"] == "Windows" && platform["os"]["version"] == "7")
                        || Number(platform["browser"]["version"]) <= 10) || (platform["isSafari"] && platform["os"]["name"] == "Macintosh" && Number(platform["browser"]["version"].split(".")[0]) <= 8)) {
                    api = new jstream_t3.SWFAccessAPI(eqPlayer);
                }
                else {
                    api = new jstream_t3.HTML5AccessAPI(eqPlayer);
                }
            }
            else {
                if (platform["isSP"] || platform["isTablet"]) {
                    if (document.createElement('video').canPlayType) {
                        api = new jstream_t3.HTML5AccessAPI(eqPlayer);
                    }
                    else if (jstream_t3.utils.Util.isFlash()) {
                        api = new jstream_t3.SWFAccessAPI(eqPlayer);
                    }
                    else {
                        api = new jstream_t3.HTML5AccessAPI(eqPlayer);
                    }
                }
                else if (!document.createElement('video').canPlayType) {
                    api = new jstream_t3.SWFAccessAPI(eqPlayer);
                }
                else if (eqPlayer.flashVars.pd_enable == "1") {
                    if ((platform["isIE"] && Number(platform["browser"]["version"]) < 10) || (platform["isSafari"] && platform["os"]["name"] == "Macintosh" && Number(platform["browser"]["version"].split(".")[0]) <= 8)) {
                        api = new jstream_t3.SWFAccessAPI(eqPlayer);
                    }
                    else {
                        api = new jstream_t3.HTML5AccessAPI(eqPlayer);
                    }
                }
                else {
                    if (platform["isIE"] &&
                        ((platform["browser"]["version"] == "11.0" && platform["os"]["name"] == "Windows" && platform["os"]["version"] == "7")
                            || Number(platform["browser"]["version"]) <= 10) || (platform["isSafari"] && platform["os"]["name"] == "Macintosh" && Number(platform["browser"]["version"].split(".")[0]) <= 8)) {
                        api = new jstream_t3.SWFAccessAPI(eqPlayer);
                    }
                    else if ((platform["isSafari"] && platform["os"]["name"] == "Macintosh" && Number(platform["browser"]["version"].split(".")[0]) >= 9)) {
                        api = new jstream_t3.HTML5AccessAPI(eqPlayer);
                    }
                    else {
                        api = new jstream_t3.HTML5AccessAPI(eqPlayer);
                    }
                }
            }
            return api;
        };
        return EQPlayerAccessAPIBuilder;
    }());
    jstream_t3.EQPlayerAccessAPIBuilder = EQPlayerAccessAPIBuilder;
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3) {
    var view;
    (function (view) {
        var LoginFormView = (function () {
            function LoginFormView() {
            }
            LoginFormView.show = function (accesser, parentElementId, cssDir, errorMessage) {
                if (parentElementId === void 0) { parentElementId = null; }
                if (cssDir === void 0) { cssDir = ""; }
                if (errorMessage === void 0) { errorMessage = false; }
                var targetElement = !parentElementId ? document.body : document.getElementById(parentElementId + "video_operation");
                targetElement = !targetElement ? document.getElementById(parentElementId) : targetElement;
                if (targetElement.getElementsByClassName("eq-state-auth")[0]) {
                    return;
                }
                var blockElement = document.createElement("div");
                blockElement.id = parentElementId + "block_layer";
                blockElement.className = "eq-state-auth";
                blockElement.style.display = "block";
                targetElement.appendChild(blockElement);
                if (targetElement.clientWidth < 240) {
                    blockElement.classList.add("mini");
                }
                else if (targetElement.clientWidth < 480) {
                    blockElement.classList.add("small");
                }
                var splitAuthParam = accesser.model.a.split(":");
                var id = splitAuthParam[0];
                var pass = splitAuthParam.length >= 2 ? splitAuthParam[1] : "";
                var languageResource = new jstream_t3.resource.LanguageResource();
                var headerText = languageResource.kinds.AUTH;
                if (errorMessage) {
                    headerText = languageResource.kinds.ERROR_AUTH;
                }
                var inner = document.createElement("div");
                inner.id = parentElementId + "login";
                inner.className = "eq-state-auth_inner";
                blockElement.appendChild(inner);
                var title = document.createElement("div");
                title.id = parentElementId + 'login_header';
                if (errorMessage) {
                    title.classList.add("eq-input-error");
                }
                title.innerText = headerText;
                inner.appendChild(title);
                var form = document.createElement("form");
                inner.appendChild(form);
                var loginID = document.createElement("input");
                loginID.id = parentElementId + 'loginID';
                if (errorMessage) {
                    loginID.classList.add("eq-input-error");
                }
                loginID.type = 'text';
                loginID.placeholder = languageResource.kinds.ID;
                form.appendChild(loginID);
                var loginPASS = document.createElement("input");
                loginPASS.id = parentElementId + 'loginPASS';
                if (errorMessage) {
                    loginPASS.classList.add("eq-input-error");
                }
                loginPASS.type = 'password';
                loginPASS.placeholder = languageResource.kinds.PASS;
                form.appendChild(loginPASS);
                var login_button = document.createElement('div');
                login_button.className = 'eq-btn-play';
                login_button.id = parentElementId + 'login_btn';
                inner.appendChild(login_button);
                var login_button_icon = document.createElement('div');
                login_button_icon.className = 'eq-btn-play_icon';
                login_button.appendChild(login_button_icon);
                var login_button_text = document.createElement('div');
                login_button_text.className = 'eq-btn-play_text';
                login_button_text.innerText = languageResource.kinds.PLAY;
                login_button.appendChild(login_button_text);
                loginID.focus();
                login_button.onclick = function (e) {
                    blockElement.style.display = "none";
                    targetElement.removeChild(blockElement);
                    accesser.login(loginID.value, loginPASS.value);
                };
                loginID.onkeydown = function (e) {
                    if (e.keyCode == 13) {
                        blockElement.style.display = "none";
                        targetElement.removeChild(blockElement);
                        accesser.login(loginID.value, loginPASS.value);
                    }
                };
                loginPASS.onkeydown = function (e) {
                    if (e.keyCode == 13) {
                        blockElement.style.display = "none";
                        targetElement.removeChild(blockElement);
                        accesser.login(loginID.value, loginPASS.value);
                    }
                };
            };
            return LoginFormView;
        }());
        view.LoginFormView = LoginFormView;
    })(view = jstream_t3.view || (jstream_t3.view = {}));
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3) {
    var NetService = (function () {
        function NetService() {
            this.d_hashList = ["44e98f98e536cdafbae856e39d55e59f", "1e5359952c511952eb056d3067fda4db", "973972a65c74b4f2dcd69d11a22a2cbf", "4277f84d88ae3a1e67111f062426ea10", "3e11bd70a8f2567f41d8bd68cf7559c9", "57f56bdc88a4b57dd762ed843ca0b386", "e538ecfb8e431d3fabf3ecaa45d82ea1", "fd5a733cc61698bac7141184fc607e05"];
            this.p_hashList = ["c629722cf33adb04e52ef5adeb61e5a6", "eadbb9116952e42cd59aab00b0e4e11a", "90e8da89bb462061b421c1cb7191de14"];
            this.maxRetryCount = 3;
            this.errCount = 0;
        }
        NetService.prototype.load = function () { };
        NetService.prototype.setModel = function (model) {
            this.model = model;
        };
        NetService.prototype.loadJsonp = function (url, result, errResult, checkTarget) {
            var _this = this;
            try {
                var dt = new Date().getTime();
                var script = document.createElement('script');
                script.type = 'text/javascript';
                script.charset = 'utf-8';
                script.async = true;
                script.defer = true;
                if (result === "accessControlResultEq") {
                    dt = Math.round(dt / (1000 * 60));
                    script.src = url + '&callback=' + result + '&_' + dt + '=';
                }
                else {
                    script.src = url + '?callback=' + result + '&_' + dt + '=';
                }
                if (script.addEventListener) {
                    script.onload = function () {
                        clearTimeout(timer);
                    };
                    script.onerror = function (ev) {
                        clearTimeout(timer);
                        if (_this.errCount >= _this.maxRetryCount) {
                            errResult();
                        }
                        else {
                            _this.errCount += 1;
                            setTimeout(function () { _this.loadJsonp(url, result, errResult, checkTarget); }, 500);
                        }
                    };
                }
                else if (script.readyState) {
                    script.onreadystatechange = function () {
                        if (script.readyState === 'loaded') {
                            if ((_this.model.resultObject[checkTarget] === undefined && result === result)) {
                                script.onreadystatechange = null;
                                clearTimeout(timer);
                                if (_this.errCount >= _this.maxRetryCount) {
                                    errResult();
                                }
                                else {
                                    _this.errCount += 1;
                                    setTimeout(function () { _this.loadJsonp(url, result, errResult, checkTarget); }, 500);
                                }
                            }
                            else {
                                script.onreadystatechange = null;
                                clearTimeout(timer);
                            }
                        }
                    };
                }
                document.body.appendChild(script);
                var timer = setTimeout(function () {
                    clearTimeout(timer);
                    errResult();
                }, 13000);
            }
            catch (e) {
                script.src = null;
                clearTimeout(timer);
                if (this.errCount != 0) {
                    errResult();
                }
                else {
                    this.errCount += 1;
                    this.loadJsonp(url, result, errResult, checkTarget);
                }
            }
        };
        NetService.prototype.loadJsonp_auth = function (url, result, errResult, checkTarget) {
            var _this = this;
            try {
                var dt = new Date().getTime();
                if (result === "playlistDataResult") {
                    dt = Math.round(dt / (1000 * 60));
                }
                var script = document.createElement('script');
                script.type = 'text/javascript';
                script.charset = 'utf-8';
                script.async = true;
                script.defer = true;
                script.src = url + '&callback=' + result + '&_' + dt + '=';
                if (script.addEventListener) {
                    script.onload = function () {
                        clearTimeout(timer);
                    };
                    script.onerror = function (ev) {
                        clearTimeout(timer);
                        if (_this.errCount >= _this.maxRetryCount) {
                            errResult();
                        }
                        else {
                            _this.errCount += 1;
                            setTimeout(function () { _this.loadJsonp_auth(url, result, errResult, checkTarget); }, 500);
                        }
                    };
                }
                else if (script.readyState) {
                    script.onreadystatechange = function () {
                        if (script.readyState === 'loaded') {
                            if ((_this.model.resultObject[checkTarget] === undefined && result === result)) {
                                script.onreadystatechange = null;
                                clearTimeout(timer);
                                errResult();
                            }
                            else {
                                script.onreadystatechange = null;
                                clearTimeout(timer);
                            }
                        }
                    };
                }
                document.body.appendChild(script);
                var timer = setTimeout(function () {
                    clearTimeout(timer);
                    errResult();
                }, 13000);
            }
            catch (e) {
                script.src = null;
                clearTimeout(timer);
                if (this.errCount != 0) {
                    errResult();
                }
                else {
                    this.errCount += 1;
                    this.loadJsonp_auth(url, result, errResult, checkTarget);
                }
            }
        };
        return NetService;
    }());
    jstream_t3.NetService = NetService;
    var deviceService = (function (_super) {
        __extends(deviceService, _super);
        function deviceService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        deviceService.prototype.setModel = function (params) {
            _super.prototype.setModel.call(this, params);
            var _this = this;
            var dir = params.playerDir.split("/").slice(0, -4).join("/");
            this.url = dir + "/eq_meta/v1_s/" + _this.model.resultObject["device_profile_id"] + ".jsonp";
            var win = window;
            win.deviceResult = function (json) {
                if (json.error != null) {
                    _this.fault();
                    return;
                }
                var i, prop;
                for (prop in json) {
                    switch (prop) {
                        case "pc":
                        case "sp":
                            if (json[prop]) {
                                for (i = 0; i < json[prop].length; i++) {
                                    json[prop][i] = jstream_t3.utils.Util.decodeHTMLEncode(json[prop][i]);
                                }
                            }
                            break;
                        default:
                            json[prop] = jstream_t3.utils.Util.decodeHTMLEncode(json[prop]);
                            break;
                    }
                    _this.model.resultObject[prop] = json[prop];
                }
                _this.result();
            };
        };
        deviceService.prototype.load = function () {
            var url = this.url;
            var resultHandller = "deviceResult";
            var errorHandler = this.fault;
            this.loadJsonp(url, resultHandller, errorHandler, "pc");
        };
        return deviceService;
    }(NetService));
    jstream_t3.deviceService = deviceService;
    var MetaService = (function (_super) {
        __extends(MetaService, _super);
        function MetaService() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.syndicationapi_url = "syndication-api.stream.co.jp/ec/";
            return _this;
        }
        MetaService.prototype.setModel = function (params) {
            _super.prototype.setModel.call(this, params);
            var _this = this;
            var synDir = "http://" + this.syndicationapi_url;
            if (window.location.protocol == "https:") {
                synDir = "https://" + this.syndicationapi_url;
            }
            if (!params.stype) {
                var dir = params.playerDir.split("/").slice(0, -4).join("/");
                if (!_this.model.resultObject["optionId"] || _this.model.resultObject["optionId"] == "") {
                    this.url = dir + "/eq_meta/v1/" + params.meta_id + ".jsonp";
                }
                else {
                    this.url = dir + "/eq_meta/v1_o/" + _this.model.resultObject["optionId"] + ".jsonp";
                }
            }
            else if (params.stype == "s1") {
                this.url = synDir + "get_metainfo_by_product_id?partner_id=" + params.partner_id + "&maker_id=" + params.maker_id + "&product_id=" + params.product_id + "&type=" + params.type;
            }
            else if (params.stype == "s2") {
                this.url = synDir + "get_metainfo?partner_id=" + params.partner_id + "&maker_id=" + params.maker_id + "&meta_id=" + params.meta_id + "&type=" + params.type;
            }
            var win = window;
            win.metaDataResult = function (json) {
                if (json.error != null) {
                    _this.fault();
                    return;
                }
                var i, prop;
                json = json.movie;
                for (prop in json) {
                    switch (prop) {
                        case "inbound_link":
                        case "movie_list":
                        case "movie_list_mobile":
                        case "movie_list_pd":
                        case "movie_list_hls":
                        case "exlink":
                            i = 0;
                            if (json[prop]) {
                                while (i < json[prop].length) {
                                    json[prop][i].text = jstream_t3.utils.Util.decodeHTMLEncode(json[prop][i].text);
                                    i++;
                                }
                            }
                            break;
                        case "pc":
                        case "sp":
                            if (json[prop]) {
                                for (i = 0; i < json[prop].length; i++) {
                                    json[prop][i] = jstream_t3.utils.Util.decodeHTMLEncode(json[prop][i]);
                                }
                            }
                            break;
                        case "subtitles":
                            i = 0;
                            if (json[prop]) {
                                while (i < json[prop].length) {
                                    json[prop][i].lang = jstream_t3.utils.Util.decodeHTMLEncode(json[prop][i].lang || "");
                                    json[prop][i].text = jstream_t3.utils.Util.decodeHTMLEncode(json[prop][i].text);
                                    json[prop][i]["default"] = jstream_t3.utils.Util.decodeHTMLEncode((json[prop][i]["default"] || ""));
                                    i++;
                                }
                            }
                            break;
                        default:
                            json[prop] = jstream_t3.utils.Util.decodeHTMLEncode(json[prop]);
                            break;
                    }
                    _this.model.resultObject[prop] = json[prop];
                }
                var p = jstream_t3.utils.Util.parse_uri(params.domain);
                var d = p.authority;
                for (var j = 0; j < _this.d_hashList.length; j++) {
                    if (MD5_hexhash(d) == _this.d_hashList[j]) {
                        _this.model.resultObject["auth"] = 0;
                        _this.model.resultObject["hostCheckResult"] = "ok";
                        _this.model.resultObject["enable"] = "1";
                    }
                }
                _this.result();
            };
        };
        MetaService.prototype.load = function () {
            var url = this.url;
            var resultHandller = "metaDataResult";
            var errorHandler = this.fault;
            this.loadJsonp(url, resultHandller, errorHandler, "movie_url");
        };
        return MetaService;
    }(NetService));
    jstream_t3.MetaService = MetaService;
    var PlaylistService = (function (_super) {
        __extends(PlaylistService, _super);
        function PlaylistService() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.api_domain = "api01-platform.stream.co.jp";
            _this.api_endpoint = "/apiservice/getRelatedVideo/";
            return _this;
        }
        PlaylistService.prototype.setModel = function (params) {
            _super.prototype.setModel.call(this, params);
            var _this = this;
            this.url = window.location.protocol + "//" + this.api_domain + this.api_endpoint;
            var shaObj = new jsSHA("SHA-256", "TEXT");
            shaObj.setHMACKey(params.playerDir.split("/")[4], "TEXT");
            shaObj.update(params.contract_id.toString());
            var token = shaObj.getHMAC("B64");
            var cid = params.contract_id;
            var plid = this.model.resultObject["playlist_id"];
            this.url += "?token=" + encodeURIComponent(token) + "&cid=" + cid + "&plid=" + plid;
            var win = window;
            win.playlistDataResult = function (json) {
                if (json.error != null) {
                    _this.fault();
                    return;
                }
                var prop;
                json = json.movie;
                for (var i = 0; i < json.length; i++) {
                    _this.model.resultObject["playlist"].push(json[i]);
                }
                _this.result();
            };
        };
        PlaylistService.prototype.load = function () {
            var url = this.url;
            var resultHandller = "playlistDataResult";
            var errorHandler = this.fault;
            this.loadJsonp_auth(url, resultHandller, errorHandler, "movie");
        };
        return PlaylistService;
    }(NetService));
    jstream_t3.PlaylistService = PlaylistService;
    var LiveMetaService = (function (_super) {
        __extends(LiveMetaService, _super);
        function LiveMetaService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        LiveMetaService.prototype.setModel = function (params) {
            _super.prototype.setModel.call(this, params);
            var _this = this;
            var dir = params.playerDir.split("/").slice(0, -4).join("/");
            this.url = dir + "/livemeta/" + params.lpid + ".jsonp";
            var win = window;
            win.metaDataResult = function (json) {
                if (json.error != null) {
                    _this.fault();
                    return;
                }
                var i, prop, prop2;
                json = json.movie;
                for (prop in json) {
                    if (typeof json[prop] != "number") {
                        switch (prop) {
                            case "quality":
                                for (prop2 in json[prop]) {
                                    json[prop][prop2].ja = jstream_t3.utils.Util.decodeHTMLEncode(json[prop][prop2].ja);
                                }
                                break;
                            case "exlink":
                                i = 0;
                                while (i < json[prop].length) {
                                    json[prop][i].text = jstream_t3.utils.Util.decodeHTMLEncode(json[prop][i].text);
                                    i++;
                                }
                                break;
                            case "list":
                                break;
                            default:
                                json[prop] = jstream_t3.utils.Util.decodeHTMLEncode(json[prop]);
                                break;
                        }
                    }
                    _this.model.resultObject[prop] = json[prop];
                    var p = jstream_t3.utils.Util.parse_uri(params.domain);
                    var d = p.authority;
                    for (var j = 0; j < _this.d_hashList.length; j++) {
                        if (MD5_hexhash(d) == _this.d_hashList[j]) {
                            _this.model.resultObject["auth"] = 0;
                            _this.model.resultObject["hostCheckResult"] = "ok";
                            _this.model.resultObject["enable"] = "1";
                        }
                    }
                }
                _this.result();
            };
        };
        LiveMetaService.prototype.load = function () {
            var url = this.url;
            var resultHandller = "metaDataResult";
            var errorHandler = this.fault;
            this.loadJsonp(url, resultHandller, errorHandler, "list");
        };
        return LiveMetaService;
    }(NetService));
    jstream_t3.LiveMetaService = LiveMetaService;
    var DirInfoService = (function (_super) {
        __extends(DirInfoService, _super);
        function DirInfoService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DirInfoService.prototype.setModel = function (params) {
            _super.prototype.setModel.call(this, params);
            var _this = this;
            var synDir = params.playerDir.split("/").slice(0, -2).join("/") + "/dirinfo.jsonp";
            var dir = params.playerDir.split("/").slice(0, -4).join("/");
            if (_this.model.resultObject["isLive"]) {
                this.url = dir + "/jmc_swf/liveplayer/dirinfo.jsonp";
            }
            else if (params.stype == "s1" || params.stype == "s2") {
                this.url = synDir;
            }
            else {
                this.url = dir + "/jmc_swf/player/dirinfo.jsonp";
            }
            var win = window;
            win.DirInfoResult = function (json) {
                if (json.error != null) {
                    _this.fault();
                    return;
                }
                var info = json.info;
                _this.model.resultObject["info_dir"] = info["dir"];
                _this.result();
            };
        };
        DirInfoService.prototype.load = function () {
            var url = this.url;
            var resultHandller = "DirInfoResult";
            var errorHandler = this.fault;
            this.loadJsonp(url, resultHandller, errorHandler, "info");
        };
        return DirInfoService;
    }(NetService));
    jstream_t3.DirInfoService = DirInfoService;
    var SettingService = (function (_super) {
        __extends(SettingService, _super);
        function SettingService() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.ssl_url = "https://ssl-cache.stream.ne.jp";
            return _this;
        }
        SettingService.prototype.setModel = function (params) {
            _super.prototype.setModel.call(this, params);
            var _this = this;
            if (!params.stype) {
                var dir = params.playerDir.split("/").slice(0, -3).join("/");
                this.url = dir + "/setting/player.jsonp";
            }
            else if (params.stype == "s1" || params.stype == "s2") {
                var synDir = "http://syndication.webcdn.stream.ne.jp/www50/syndication/setting/";
                if (window.location.protocol == "https:") {
                    synDir = this.ssl_url + "/www50/syndication/setting/";
                }
                this.url = synDir + "player.jsonp";
            }
            var win = window;
            win.settingResult = function (json) {
                if (json.error != null) {
                    _this.fault();
                    return;
                }
                var prop;
                json = json.Player;
                if (json == undefined) {
                    _this.fault();
                    return;
                }
                if (json[params.player_id] == null) {
                    _this.fault();
                    return;
                }
                for (prop in json[params.player_id]) {
                    if (typeof json[params.player_id][prop] === "string") {
                        json[params.player_id][prop] = jstream_t3.utils.Util.decodeHTMLEncode(json[params.player_id][prop]);
                    }
                    _this.model.resultObject[prop] = json[params.player_id][prop];
                }
                _this.setPlayerSetting(_this.model.resultObject);
                _this.result();
            };
        };
        SettingService.prototype.load = function () {
            var url = this.url;
            var resultHandller = "settingResult";
            var errorHandler = this.fault;
            this.setPlayerSetting(this.model.resultObject);
            this.result();
        };
        SettingService.prototype.setPlayerSetting = function (params) {
            var key;
            var settings = {
                "pb": ["play_use", "on"],
                "vc": ["volume_use", "on"],
                "sb": ["seak_use", "on"],
                "fs": ["fullscreen_use", "on"],
                "ft": ["footer_text", ""],
                "fa": ["footer_align", "right"],
                "ti": ["title_use", "on"],
                "is": ["init_sound", "on"],
                "ip": ["init_play", "off"],
                "va": ["va_use", "on"],
                "el": ["exlink_use", "on"],
                "tg": ["tag_use", "on"],
                "mb": ["multibitrate_use", "on"],
                "il": ["inboundlink_use", "on"],
                "rb": ["replaybtn_use", "on"],
                "wm": ["watermark_use", "on"],
                "wd": ["watermark_design", "1"],
                "cp": ["controlbar_use", "on"],
                "rs": ["resumeEnable", "off"],
                "rv": ["resumeVolumeEnable", "on"],
                "ot": ["onetimeTag", ""],
                "cc": ["closedCaption", "on"],
                "pr": ["playbackRate", ""],
                "lu": ["loop_use", "off"],
                "dq": ["default_quality", "2"],
                "mdq": ["mobile_default_quality", "2"],
                "lm": ["livemark_use", "on"]
            };
            for (key in settings) {
                if (typeof params.s[key] === "string") {
                    params.s[key] = jstream_t3.utils.Util.decodeHTMLEncode(params.s[key]);
                }
                if (key == "mdq" && !params.s["mdq"] && !!params.s["dq"]) {
                    params.s[key] = params.s["dq"];
                }
                params[settings[key][0]] = params.s[key] || settings[key][1];
            }
            if (params.stype == "s1" || params.stype == "s2") {
                params["tag_use"] = "off";
            }
            if (params["footer_text"] == "") {
                params["footer_use"] = "off";
            }
            else {
                params["footer_use"] = "on";
                params.s["ft"] = encodeURIComponent(params["footer_text"]);
                params["footer_text"] = decodeURIComponent(params["footer_text"]);
            }
            this.setSnsList(params.s);
            if (params.isLive) {
                this.model.resultObject["playbackRate_list"] = [1];
                this.model.resultObject["playbackRate_index"] = this.model.resultObject["playbackRate_list"].indexOf(1);
            }
            else {
                this.setPlaybackList(params.s);
                this.setCaptionList(params.s);
            }
        };
        SettingService.prototype.setPlaybackList = function (params) {
            this.model.resultObject["playbackRate_list"] = [1];
            if (params["pr"] && typeof (params["pr"]) == "string") {
                var prList = params["pr"].split(',');
                for (var i = 0; i < prList.length; i++) {
                    var item = Number(prList[i]);
                    if (isFinite(item)) {
                        this.model.resultObject["playbackRate_list"].push(item);
                    }
                }
                this.model.resultObject["playbackRate_list"].sort(function (a, b) {
                    if (a > b)
                        return -1;
                    if (a < b)
                        return 1;
                    return 0;
                });
            }
            if (this.model.resultObject["playbackRate_index"] < 0) {
                this.model.resultObject["playbackRate_index"] = this.model.resultObject["playbackRate_list"].indexOf(1);
            }
        };
        SettingService.prototype.setCaptionList = function (params) {
        };
        SettingService.prototype.setSnsList = function (params) {
            if (params["sn"] && typeof (params["sn"]) == "string") {
                var snsSites = ["facebook", "twitter", "LINE", "google", "mixi"];
                var snsList = params["sn"].split(",");
                this.model.resultObject["sns_id_list"] = [];
                var tempList = [];
                for (var i = 0; i < snsList.length; i++) {
                    if (snsList[i] == "f") {
                        tempList.push("facebook");
                    }
                    else if (snsList[i] == "t") {
                        tempList.push("twitter");
                    }
                    else if (snsList[i] == "m") {
                    }
                    else if (snsList[i] == "g") {
                        tempList.push("google");
                    }
                    else if (snsList[i] == "l") {
                        tempList.push("LINE");
                    }
                    else {
                        tempList = [];
                        break;
                    }
                }
                if (tempList.length > 0) {
                    if (tempList.length > 4) {
                        tempList.splice(4, 1);
                    }
                    for (var i = 0; i < snsSites.length; i++) {
                        for (var j = 0; j < tempList.length; j++) {
                            if (snsSites[i] == tempList[j]) {
                                if (!(tempList[j] == "LINE" && (!this.model.resultObject.platform["isSP"] && !this.model.resultObject.platform["isTablet"]))) {
                                    this.model.resultObject["sns_id_list"].push(snsSites[i]);
                                }
                            }
                        }
                    }
                }
            }
            else if (params["sn"] == "") {
                this.model.resultObject["sns_id_list"] = [];
            }
            else {
                if (this.model.resultObject.platform["isSP"] || this.model.resultObject.platform["isTablet"]) {
                    this.model.resultObject["sns_id_list"] = ["facebook", "twitter", "google", "LINE"];
                }
                else {
                    this.model.resultObject["sns_id_list"] = ["facebook", "twitter", "google"];
                }
            }
            if (this.model.resultObject["sns_id_list"].length == 0) {
                this.model.resultObject["sns_use"] = "off";
            }
            else {
                this.model.resultObject["sns_use"] = "on";
            }
        };
        return SettingService;
    }(NetService));
    jstream_t3.SettingService = SettingService;
    var ServiceSettingService = (function (_super) {
        __extends(ServiceSettingService, _super);
        function ServiceSettingService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ServiceSettingService.prototype.setModel = function (params) {
            _super.prototype.setModel.call(this, params);
            var _this = this;
            var dir = params.playerDir.split("/").slice(0, -3).join("/");
            this.url = dir + "/setting/service.jsonp";
            var win = window;
            win.serviceResult = function (json) {
                if (json.error != null) {
                    _this.fault();
                    return;
                }
                var prop;
                json = json.service;
                for (prop in json) {
                    if (typeof json[prop] === "string") {
                        json[prop] = jstream_t3.utils.Util.decodeHTMLEncode(json[prop]);
                    }
                    _this.model.resultObject[prop] = json[prop];
                    if (prop == "cid" && json[prop] != params.contract_id) {
                        _this.fault("illegal");
                        return;
                    }
                }
                _this.result();
            };
        };
        ServiceSettingService.prototype.load = function () {
            var url = this.url;
            var resultHandller = "serviceResult";
            var errorHandler = this.fault;
            this.loadJsonp(url, resultHandller, errorHandler, "pd_enable");
        };
        return ServiceSettingService;
    }(NetService));
    jstream_t3.ServiceSettingService = ServiceSettingService;
    var AuthenticationService = (function (_super) {
        __extends(AuthenticationService, _super);
        function AuthenticationService() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.isLoad = true;
            _this.isLive = false;
            _this.callbackNum = 0;
            _this.unixTimes = Math.round(new Date().getTime() / 1000);
            _this.api_domain = "api01-platform.stream.co.jp";
            return _this;
        }
        AuthenticationService.prototype.setModel = function (params) {
            _super.prototype.setModel.call(this, params);
            this.cid = params.contract_id || params.maker_id;
            if (params.isLive == true) {
                this.isLive = params.isLive;
                this.lpid = params.lpid;
                var qstring = "?cid=" + this.cid + "&lpid=" + this.lpid;
            }
            else {
                this.mid = params.meta_id;
                var qstring = "?cid=" + this.cid + "&mid=" + this.mid;
            }
            var _this = this;
            var qstring = qstring + "&a=" + params.a;
            this.callbackNum = parseInt(this.cid + this.mid);
            if (this.model.resultObject.api_url && this.model.resultObject.api_url.length > 0) {
                this.api_domain = this.model.resultObject.api_url;
            }
            this.url = "https://" + this.api_domain + "/apiservice/checkAuth/" + qstring;
            var win = window;
            win.authResult = function (json) {
                _this.result(false);
            };
            var win = window;
            win['checkauthresulteq' + this.callbackNum] = function (json) {
                var response = json.response;
                var responseStatus = json.response_status;
                if (json.error != null) {
                    _this.model.resultObject["tk"] = "_NG_";
                    _this.result(false);
                    return;
                }
                if (this.isLive == true) {
                    if (response === "OK") {
                        _this.result(true);
                    }
                    else {
                        _this.model.resultObject["tk"] = "_NG_";
                        _this.result(false);
                    }
                }
                else {
                    var tk = json.tk;
                    if ((response === "OK") && (tk !== "")) {
                        if (typeof json["tk"] === "string") {
                            json["tk"] = jstream_t3.utils.Util.decodeHTMLEncode(json["tk"]);
                        }
                        _this.model.resultObject["tk"] = json["tk"];
                        _this.result(true);
                    }
                    else {
                        _this.model.resultObject["tk"] = "_NG_";
                        _this.result(false);
                    }
                }
            };
        };
        AuthenticationService.prototype.load = function () {
            var url = this.url;
            var resultHandller = 'checkauthresulteq' + this.callbackNum;
            var errorHandler = this.fault;
            this.loadJsonp_auth(url, resultHandller, errorHandler, "tk");
        };
        return AuthenticationService;
    }(NetService));
    jstream_t3.AuthenticationService = AuthenticationService;
    var HostCheckService2 = (function (_super) {
        __extends(HostCheckService2, _super);
        function HostCheckService2() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.isLoad = true;
            _this.isLive = false;
            _this.api_domain = "api01-platform.stream.co.jp";
            _this.BOTH = "1";
            _this.PARAMS = "0";
            _this.HOST = "";
            return _this;
        }
        HostCheckService2.prototype.setModel = function (params) {
            _super.prototype.setModel.call(this, params);
            var _this = this;
            this.isLoad = true;
            if (params.resultObject.publish_site > 0 && !jstream_t3.utils.Util.isPublishSitePlayerSetting(params.resultObject.s)) {
                params.resultObject.publish_site = 0;
            }
            if ((params.viewlimit_flg != "1" || !params.viewlimit_url) && (!params.resultObject.start_date && !params.resultObject.end_date) && (params.resultObject.publish_site <= 0)) {
                this.isLoad = false;
                params.resultObject.hostCheckResult = "ok";
                return;
            }
            if (params.resultObject.hostCheckResult == "ok") {
                this.isLoad = false;
                return;
            }
            this.cid = params.contract_id || params.maker_id;
            var p = jstream_t3.utils.Util.parse_uri(params.domain);
            var domain = p.scheme + "://" + p.authority + p.path;
            var referer = "";
            if (jstream_t3.utils.Util.isContainApiDomain(domain)) {
                if (document.referrer) {
                    referer = document.referrer;
                }
            }
            var player = "";
            if ((params.viewlimit_flg = "1" && params.viewlimit_url) || (params.resultObject.start_date && params.resultObject.end_date)) {
                if (params.resultObject.publish_site > 0) {
                    player = this.BOTH;
                }
                else {
                    player = this.HOST;
                }
            }
            else {
                if (params.resultObject.publish_site > 0) {
                    player = this.PARAMS;
                }
            }
            if (params.isLive == true) {
                this.isLive = params.isLive;
                this.lpid = params.lpid;
                var qstring = "?cid=" + this.cid + "&lpid=" + this.lpid;
            }
            else {
                this.mid = params.meta_id;
                var qstring = "?cid=" + this.cid + "&mid=" + this.mid;
            }
            qstring = qstring + "&ot=" + params.resultObject.ot + "&domain=" + domain;
            if (referer.length > 0) {
                qstring += "&referer=" + referer;
            }
            if (player.length > 0) {
                qstring += "&player=" + player;
            }
            if (this.model.resultObject.api_url && this.model.resultObject.api_url.length > 0) {
                this.api_domain = this.model.resultObject.api_url;
            }
            this.url = "https://" + this.api_domain + "/apiservice/getAccessControl/" + qstring;
            var win = window;
            win.accessControlResultEq = function (json) {
                var response = json.response;
                var responseStatus = json.response_status;
                if (json.error != null) {
                    _this.model.resultObject["tk"] = "_NG_";
                    params.hostCheckResult = "ng";
                    _this.fault(responseStatus || "");
                    if (params.auth_mode == "or" && params.auth == "1" && responseStatus != "2003" && responseStatus != "2004")
                        _this.result();
                    return;
                }
                if (json.parameter) {
                    for (var prop in json.parameter) {
                        if (typeof json.parameter[prop] === "string") {
                            json.parameter[prop] = jstream_t3.utils.Util.decodeHTMLEncode(json.parameter[prop]);
                        }
                        _this.model.resultObject["s"][prop] = json.parameter[prop];
                    }
                }
                if (_this.isLive == true) {
                    if (response === "OK") {
                        _this.result();
                    }
                    else {
                        _this.model.resultObject["tk"] = "_NG_";
                        _this.fault(responseStatus || "");
                    }
                }
                else {
                    var tk = json.tk;
                    if ((response === "OK") && (tk !== "")) {
                        if (typeof json["tk"] === "string") {
                            json["tk"] = jstream_t3.utils.Util.decodeHTMLEncode(json["tk"]);
                        }
                        _this.model.resultObject["tk"] = json["tk"];
                        params.hostCheckResult = "ok";
                        _this.model.resultObject.hostCheckResult = "ok";
                        _this.result();
                    }
                    else {
                        _this.model.resultObject["tk"] = "_NG_";
                        params.hostCheckResult = "ng";
                        _this.fault(responseStatus || "");
                        if (params.auth_mode == "or" && params.auth == "1" && responseStatus != "2003" && responseStatus != "2004")
                            _this.result();
                    }
                }
            };
        };
        HostCheckService2.prototype.load = function () {
            if (!this.isLoad) {
                this.result();
                return;
            }
            else {
                var url = this.url;
                var resultHandller = "accessControlResultEq";
                var errorHandler = this.fault;
                this.loadJsonp(url, resultHandller, errorHandler, "tk");
            }
        };
        return HostCheckService2;
    }(NetService));
    jstream_t3.HostCheckService2 = HostCheckService2;
    var CheckConnectionService = (function (_super) {
        __extends(CheckConnectionService, _super);
        function CheckConnectionService() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.isLoad = true;
            _this.unixTimes = Math.round(new Date().getTime() / 1000);
            _this.endPoint = "count01-platform.stream.co.jp/index.php";
            return _this;
        }
        CheckConnectionService.prototype.setModel = function (params) {
            _super.prototype.setModel.call(this, params);
            var _this = this;
            this.url = this.model.resultObject["getConnectionURL"]();
            if (window.location.protocol === "http:") {
                this.url = "http://" + this.url;
            }
            else {
                this.url = "https://" + this.url;
            }
            this.cid = params.contract_id || params.maker_id;
            this.isLive = this.model.resultObject.isLive ? "2" : "1";
            this.sid = this.model.resultObject.sid;
            if (!this.sid) {
                this.fault();
                ;
            }
            this.sv = params.contract_id || params.maker_id;
            this.v = (params.meta_id || this.model.resultObject.lpid);
            var qstring = "?sv=" + this.sv +
                "&e=" + this.model.resultObject.stat +
                "&v=" + this.v +
                "&sd=" + this.sid +
                "&mode=" + (this.isLive);
            this.url += qstring;
            this.callbackNum = (this.sv + "_" + this.v);
            var win = window;
            win.connectionResult = function (json) {
                if (json.error != null) {
                    _this.fault();
                    return;
                }
                var prop;
                if (json.result != "OK") {
                    this.fault();
                    return;
                }
                _this.result();
            };
            win['connectionResult' + this.callbackNum] = function (json) {
                var result = json.result;
                var now = json.now;
                var total = json.total;
                if (json.error != null) {
                    _this.fault();
                    return;
                }
                _this.model.resultObject["isCheckConnectionPassed"] = result;
                _this.model.resultObject["currentConnecting"] = now;
                _this.model.resultObject["totalConnectiong"] = total;
                if (result != "OK") {
                    _this.fault();
                    return;
                }
                _this.result();
            };
        };
        CheckConnectionService.prototype.load = function () {
            var url = this.url;
            var resultHandller = "connectionResult";
            var errorHandler = this.fault;
            this.loadJsonp_auth(url, resultHandller, errorHandler, "result");
        };
        return CheckConnectionService;
    }(NetService));
    jstream_t3.CheckConnectionService = CheckConnectionService;
    var CheckConnectionResultService = (function (_super) {
        __extends(CheckConnectionResultService, _super);
        function CheckConnectionResultService() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.isLoad = true;
            _this.unixTimes = Math.round(new Date().getTime() / 1000);
            _this.endPoint = "count01-platform.stream.co.jp/index.php";
            return _this;
        }
        CheckConnectionResultService.prototype.setModel = function (params) {
            _super.prototype.setModel.call(this, params);
            var _this = this;
            this.url = this.model.resultObject["getConnectionURL"]();
            this.url = this.url.replace("index.php", "result.php");
            if (window.location.protocol === "http:") {
                this.url = "http://" + this.url;
            }
            else {
                this.url = "https://" + this.url;
            }
            this.cid = params.contract_id || params.maker_id;
            this.isLive = this.model.resultObject.isLive ? "2" : "1";
            this.sid = this.model.resultObject.sid;
            if (!this.sid) {
                this.fault();
            }
            this.sv = params.contract_id || params.maker_id;
            this.v = (params.meta_id || this.model.resultObject.lpid);
            var qstring = "?sv=" + this.sv +
                "&e=" + this.model.resultObject.stat +
                "&v=" + this.v +
                "&sd=" + this.sid +
                "&mode=" + (this.isLive);
            this.url += qstring;
            this.callbackNum = (this.sv + "_" + this.v);
            var win = window;
            win.connectionResult = function (json) {
                if (json.error != null) {
                    _this.fault();
                    return;
                }
                var prop;
                if (json.result != "OK") {
                    this.fault();
                    return;
                }
                _this.result();
            };
            win['connectionResult' + this.callbackNum] = function (json) {
                var result = json.result;
                var nowCount = json.nowCount;
                var total = json.total;
                if (json.error != null) {
                    _this.fault();
                    return;
                }
                _this.model.resultObject["currentConnecting"] = nowCount;
                if (result != "OK") {
                    _this.fault();
                    return;
                }
                _this.result();
            };
        };
        CheckConnectionResultService.prototype.load = function () {
            var url = this.url;
            var resultHandller = "connectionResult";
            var errorHandler = this.fault;
            this.loadJsonp_auth(url, resultHandller, errorHandler, "result");
        };
        return CheckConnectionResultService;
    }(NetService));
    jstream_t3.CheckConnectionResultService = CheckConnectionResultService;
    var ConnectionCheckService = (function (_super) {
        __extends(ConnectionCheckService, _super);
        function ConnectionCheckService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ConnectionCheckService.prototype.setModel = function (params) {
            _super.prototype.setModel.call(this, params);
            var _this = this;
            var dir = params.playerDir.split("/").slice(0, -4).join("/");
            this.mid = params.lpid;
            this.url = dir + "/livelimit/" + params.lpid + ".jsonp";
            var lpid = ('00000' + this.mid).slice(-5);
            eval("connectionResult" + lpid + "= function (json) { if (json.error != null) { _this.fault(); return; } var prop; for (prop in json) { if (typeof json[prop] === 'string') { json[prop] = jstream_t3.utils.Util.decodeHTMLEncode(json[prop]); } _this.model.resultObject[prop] = json[prop]; } _this.result(); }");
        };
        ConnectionCheckService.prototype.load = function () {
            var url = this.url;
            var resultHandller = "connectionResult" + ('00000' + this.mid).slice(-5);
            var errorHandler = this.fault;
            this.loadJsonp(url, resultHandller, errorHandler, "connection");
        };
        return ConnectionCheckService;
    }(NetService));
    jstream_t3.ConnectionCheckService = ConnectionCheckService;
    var LiveStatusService = (function (_super) {
        __extends(LiveStatusService, _super);
        function LiveStatusService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        LiveStatusService.prototype.setModel = function (params) {
            _super.prototype.setModel.call(this, params);
            var _this = this;
            var dir = params.playerDir.split("/").slice(0, -4).join("/");
            this.mid = params.lpid;
            this.url = dir + "/livelid/" + params.lpid + ".jsonp";
            var win = window;
            win["lidResult" + this.mid] = function (json) {
                if (json.error != null) {
                    _this.fault();
                    return;
                }
                var prop;
                for (prop in json) {
                    if (typeof json[prop] === 'string') {
                        json[prop] = jstream_t3.utils.Util.decodeHTMLEncode(json[prop]);
                    }
                    _this.model.resultObject[prop] = json[prop];
                }
                _this.result();
            };
        };
        LiveStatusService.prototype.load = function () {
            var url = this.url;
            var resultHandller = "lidResult" + this.mid;
            var errorHandler = this.fault;
            this.loadJsonp(url, resultHandller, errorHandler, "enabled");
        };
        return LiveStatusService;
    }(NetService));
    jstream_t3.LiveStatusService = LiveStatusService;
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3) {
    var model;
    (function (model) {
        var EQPlayerIFModel = (function (_super) {
            __extends(EQPlayerIFModel, _super);
            function EQPlayerIFModel(params) {
                if (params === void 0) { params = null; }
                var _this = _super.call(this, params) || this;
                _this.parse(params);
                return _this;
            }
            EQPlayerIFModel.prototype.parse = function (params) {
                this.contract_id = this.parseNumber(params.contract_id);
                this.meta_id = this.parseNumber(params.meta_id);
                this.player_id = this.parseNumber(params.player_id);
                this.start_time = this.parseNumber(params.start_time);
                this.cid = Analytics_t3.createCid();
                this.sid = Analytics_t3.createSid();
                this.tagType = jstream_t3.version.getVersion();
                this.parent_url = encodeURIComponent(jstream_t3.utils.Util.getCanonical() || (window.location.href));
                this.file_id = this.parseNumber(params.file_id);
                this.width = params.width || 100;
                this.height = params.height || 100;
                this.default_quality = params.default_quality || "";
                this.domain = encodeURIComponent(location.href);
                this.ref = encodeURIComponent(document.referrer || "");
                this.maker_id = this.parseNumber(params.maker_id);
                this.partner_id = this.parseNumber(params.partner_id);
                this.product_id = this.parseNumber(params.product_id);
                this.va_url = encodeURIComponent(params.va_url || "");
                this.setting = params.s;
            };
            EQPlayerIFModel.prototype.parseNumber = function (value) {
                if (typeof (value) == "undefined") {
                    return "";
                }
                return value.toString();
            };
            EQPlayerIFModel.prototype.getBase = function () {
                var path = this.base;
                if (window.location.protocol === "https:") {
                    var paths = path.split("/");
                    paths.shift();
                    return this.ssl_url + "/" + paths.join("/");
                }
                else {
                    return "http://" + path;
                }
            };
            EQPlayerIFModel.prototype.getPlayerVersion = function () {
                return jstream_t3.version.getVersion();
            };
            EQPlayerIFModel.prototype.toURL = function () {
                var url = this.base + jstream_t3.version.getVersion() + "/" + this.fileName + "?";
                if (this.stype == "s1" || this.stype == "s2") {
                    url += "b=" + this["b"] + "&";
                    if (this.contract_id)
                        url += "contract_id=" + this.contract_id + "&";
                    if (this.meta_id)
                        url += "meta_id=" + this.meta_id + "&";
                    if (this.plugins)
                        url += "plugins=" + this.plugins + "&";
                    if (this.va_url)
                        url += "va_url=" + this.va_url + "&";
                    if (this.setting)
                        url += "s=" + encodeURIComponent(jstream_t3.utils.Util.toQuery(this.setting)) + "&";
                }
                else {
                    url += "b=" + this["b"] + "&";
                    if (this.contract_id)
                        url += "c=" + jstream_t3.utils.Util.obfuscate(this.contract_id) + "&";
                    if (this.meta_id)
                        url += "m=" + jstream_t3.utils.Util.obfuscate(this.meta_id) + "&";
                    if (this.plugins)
                        url += "p=" + this.plugins + "&";
                    if (this.va_url)
                        url += "v=" + this.va_url + "&";
                    if (this.setting)
                        url += "s=" + encodeURIComponent(jstream_t3.utils.Util.toQuery(this.setting)) + "&";
                }
                if (this.playlist_id)
                    url += "playlist_id=" + this.playlist_id + "&";
                if (this.player_id)
                    url += "player_id=" + this.player_id + "&";
                if (this.start_time)
                    url += "t=" + this.start_time + "&";
                if (this.cid)
                    url += "cid=" + Analytics_t3.createCid() + "&";
                if (this.sid)
                    url += "eqplsid=" + this.sid + "&";
                if (this.file_id)
                    url += "file_id=" + this.file_id + "&";
                if (this.maker_id)
                    url += "maker_id=" + this.maker_id + "&";
                if (this.partner_id)
                    url += "partner_id=" + this.partner_id + "&";
                if (this.product_id)
                    url += "product_id=" + this.product_id + "&";
                if (this.default_quality)
                    url += "default_quality=" + this.default_quality + "&";
                if (this.parent_url)
                    url += "parent_url=" + this.parent_url + "&";
                if (this.domain)
                    url += "domain=" + this.domain + "&";
                if (this.ref)
                    url += "ref=" + this.ref + "&";
                if (this.o)
                    url += "o=" + encodeURIComponent(jstream_t3.utils.Util.toQuery(this.o)) + "&";
                if (this.a)
                    url += "a=" + this.a + "&";
                if (this.ot)
                    url += "ot=" + encodeURIComponent(this.ot) + "&";
                if (this.optionId)
                    url += "opid=" + encodeURIComponent(this.optionId) + "&";
                this.inCookieVer = jstream_t3.utils.Util.GetCookie("EQPlayerVer");
                if (this.inCookieVer)
                    url += "inCookieVer=" + this.inCookieVer + "&";
                this.inCookieCurrentTime = jstream_t3.utils.Util.GetCookie("EQPlayer_resume_CurrentTime_" + this.meta_id + "_" + this.contract_id);
                if (this.inCookieCurrentTime)
                    url += "inCookieCurrentTime=" + this.inCookieCurrentTime + "&";
                this.inCookieVolume = jstream_t3.utils.Util.GetCookie("EQPlayer_resume_Volume");
                if (this.inCookieVolume)
                    url += "inCookieVolume=" + this.inCookieVolume + "&";
                var arr_uri = location.hostname.match(/^(.*?)([a-z0-9][a-z0-9\-]{1,63}\.[a-z\.]{2,6})$/i);
                if (arr_uri == null) {
                    this.CookieDomain = ".localhost";
                }
                else {
                    this.CookieDomain = "." + arr_uri[2];
                }
                if (this.CookieDomain)
                    url += "CookieDomain=" + this.CookieDomain + "&";
                url += "tagType=" + this.getPlayerVersion();
                return url;
            };
            return EQPlayerIFModel;
        }(model.EQPlayerModel));
        model.EQPlayerIFModel = EQPlayerIFModel;
    })(model = jstream_t3.model || (jstream_t3.model = {}));
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3) {
    var PlayerFactoryIFBase = (function (_super) {
        __extends(PlayerFactoryIFBase, _super);
        function PlayerFactoryIFBase(params, embedTagID) {
            if (embedTagID === void 0) { embedTagID = null; }
            var _this = _super.call(this, "playerFactory") || this;
            _this.setUp(params, embedTagID);
            _this.parentDivID = params.parentDivID;
            _this.addTag();
            _this.setQue();
            return _this;
        }
        PlayerFactoryIFBase.prototype.getPlayerVersion = function () {
            return jstream_t3.version.getVersion();
            ;
        };
        PlayerFactoryIFBase.prototype.setUp = function (in_params, embedTagID) {
            if (embedTagID === void 0) { embedTagID = null; }
            this.params = new jstream_t3.model.EQPlayerIFModel(in_params);
            this.embedTagID = embedTagID;
            this.params.fileName = this.createFileName();
            this.createURLQuery();
            this.params.playerDir = this.params.base + this.getPlayerVersion() + "/";
            this.params.cssDir = this.params.playerDir + "resource/style/";
            this.params.stype = this.getStype();
            this.params.setEnviroment();
            this.id = "eq-" + Math.floor(Math.random() * new Date().getTime()).toString();
            this.params.iframeID = this.id;
            this.params.isIframe = true;
            this.jmcPlayer = new JMCPlayer(this.id, this.params);
        };
        PlayerFactoryIFBase.prototype.createBaseURL = function (path) {
            if (window.location.protocol === "https:") {
                var paths = path.split("/");
                paths.shift();
                return "https://ssl-cache.stream.ne.jp/" + paths.join("/");
            }
            else {
                return "http://" + path;
            }
        };
        PlayerFactoryIFBase.prototype.createURLQuery = function () {
            var params = this.params;
            params.base = this.createBaseURL(params.base);
            if (!params.isIframe) {
                params.ref = encodeURIComponent(document.referrer);
                params.parent_url = jstream_t3.utils.Util.getCanonical() || window.location.href;
                if (jstream_t3.utils.Util.isContainApiDomain(params.parent_url) && !!document.referrer) {
                    params.parent_url = document.referrer;
                }
                params.parent_url = encodeURIComponent(params.parent_url);
            }
        };
        PlayerFactoryIFBase.prototype.getStype = function () {
            return null;
        };
        PlayerFactoryIFBase.prototype.createFileName = function () {
            return "";
        };
        PlayerFactoryIFBase.prototype.addTag = function () {
            var params = this.params;
            var tag = this.createHtmlTag();
            if (this.embedTagID == null) {
                document.write(tag);
            }
            else {
                document.getElementById(this.embedTagID).innerHTML = tag;
            }
        };
        PlayerFactoryIFBase.prototype.createHtmlTag = function () {
            var params = this.params;
            var iframe = '<iframe id="' + this.id + '" frameBorder="0" style="width:#width#; height:#height#; borderStyle:none;#position#" allowfullscreen=true scrolling="no"></iframe>';
            if (params.responsive == "on") {
                if (params.width == "eq-auto" || params.height == "eq-auto") {
                    iframe = iframe.split("#width#").join("100%");
                    iframe = iframe.split("#height#").join("100%");
                }
                else {
                    iframe = iframe.split("#width#").join("100%");
                    iframe = iframe.split("#height#").join("100%");
                    var aspect = "56.25%";
                    if (params.height && params.width && params.height > 0 && params.width > 0)
                        aspect = (params.height / params.width) * 100 + "%";
                    iframe = iframe.split("#position#").join("position:absolute");
                    iframe = '<div style="max-width:' + params.width + 'px; max-height:' + params.height + 'px;"><div id="iframeplayer" style="position: relative; padding-bottom: ' + aspect + '">' + iframe + "</div></div>";
                }
            }
            else if (params.responsive == "fit") {
                iframe = iframe.split("#width#").join("100%");
                iframe = iframe.split("#height#").join("100%");
                iframe = iframe.split("#position#").join("position:absolute");
            }
            else {
                iframe = iframe.split("#width#").join(params.width + "px");
                iframe = iframe.split("#height#").join(params.height + "px");
                iframe = iframe.split("#position#").join("");
            }
            return iframe;
        };
        PlayerFactoryIFBase.prototype.setPlayerURL = function () {
            document.getElementById(this.id).src = this.params.toURL();
        };
        PlayerFactoryIFBase.prototype.exec = function () {
            this.loadServiceSettingService();
        };
        PlayerFactoryIFBase.prototype.loadServiceSettingService = function () {
            var _this = this;
            var serviceSettingService = new jstream_t3.ServiceSettingService();
            serviceSettingService.setModel(this.params.createServiceModel());
            serviceSettingService.fault = function () {
                if (_this.params.responsive == "on" || _this.params.responsive == "fit") {
                    _this.setTagSize();
                }
                _this.setPlayerURL();
                _this.next();
            };
            serviceSettingService.result = function () {
                _this.loadSettingService();
            };
            serviceSettingService.load();
        };
        PlayerFactoryIFBase.prototype.loadSettingService = function () {
            var _this = this;
            var settingService = new jstream_t3.SettingService();
            settingService.ssl_url = this.params.ssl_url;
            settingService.setModel(this.params.createServiceModel());
            settingService.fault = function () {
                if (_this.params.responsive == "on" || _this.params.responsive == "fit") {
                    _this.setTagSize();
                }
                _this.setPlayerURL();
                _this.next();
            };
            settingService.result = function () {
                _this.settingResult();
            };
            settingService.load();
        };
        PlayerFactoryIFBase.prototype.settingResult = function () {
            if (this.params.responsive == "on" || this.params.responsive == "fit") {
                this.setTagSize();
            }
            this.setPlayerURL();
            this.next();
        };
        PlayerFactoryIFBase.prototype.setTagSize = function () {
            var params = this.params;
            var movieWidth = this.params.width;
            var movieHeight = this.params.height;
            if (this.params.footer_use == "on")
                movieHeight = movieHeight - 20;
            var iframeID = this.id;
            var iframeTagMaxWidth;
            var iframeTagMaxHeight;
            var iframeTag = document.getElementById(iframeID);
            var iframeTagWidth = iframeTag.clientWidth;
            var iframeTagHeight = iframeTag.clientHeight;
            var ftHeight = (params.footer_use === 'on') ? 20 : 0;
            if (params.width == "eq-auto" || params.height == "eq-auto") {
                if (iframeTagWidth <= 0 || iframeTagWidth == null) {
                    iframeTagMaxWidth = Number(movieWidth);
                    iframeTagMaxHeight = Number(movieHeight) + ftHeight;
                }
                else if (iframeTagHeight <= 24 || iframeTagHeight == null) {
                    iframeTagMaxWidth = Number(iframeTagWidth);
                    iframeTagMaxHeight = Math.ceil((movieHeight / movieWidth) * iframeTagWidth) + ftHeight;
                }
                else {
                    iframeTagMaxWidth = Number(iframeTagWidth);
                    iframeTagMaxHeight = Number(iframeTagHeight);
                }
            }
            else if (!isNaN(parseInt(params.width)) && !isNaN(parseInt(params.height))) {
                params.width = parseInt(params.width);
                params.height = parseInt(params.height);
                if (Number(this.params.width) > iframeTagWidth && iframeTagWidth > 150) {
                    iframeTagMaxWidth = Number(iframeTagWidth);
                    iframeTagMaxHeight = Math.ceil((movieHeight / movieWidth) * iframeTagWidth) + ftHeight;
                }
                else {
                    iframeTagMaxWidth = Number(this.params.width);
                    iframeTagMaxHeight = Number(this.params.height);
                }
            }
            else {
                iframeTagMaxWidth = Number(movieWidth);
                iframeTagMaxHeight = Number(movieHeight) + ftHeight;
            }
            this.params.width = iframeTagMaxWidth;
            this.params.height = iframeTagMaxHeight;
        };
        return PlayerFactoryIFBase;
    }(jstream_t3.QueController));
    jstream_t3.PlayerFactoryIFBase = PlayerFactoryIFBase;
})(jstream_t3 || (jstream_t3 = {}));
var jstream_t3;
(function (jstream_t3) {
    var PlayerFactoryIF = (function (_super) {
        __extends(PlayerFactoryIF, _super);
        function PlayerFactoryIF(params, embedTagID) {
            if (embedTagID === void 0) { embedTagID = null; }
            return _super.call(this, params, embedTagID) || this;
        }
        PlayerFactoryIF.version = function () {
            return jstream_t3.version.getVersion();
            ;
        };
        PlayerFactoryIF.create = function (params, embedTagID) {
            if (embedTagID === void 0) { embedTagID = null; }
            jstream_t3.utils.Util.changeParamName(params);
            if (params.meta_id && isNaN(params.meta_id)) {
                params.meta_id = jstream_t3.utils.Util.unObfuscate(params.meta_id);
            }
            if (params.contract_id && isNaN(params.contract_id)) {
                params.contract_id = jstream_t3.utils.Util.unObfuscate(params.contract_id);
            }
            if (params.playlist_id && isNaN(params.playlist_id)) {
                params.playlist_id = jstream_t3.utils.Util.unObfuscate(params.playlist_id);
            }
            if (params.start_time != undefined && params.start_time > 0) {
                params.inCookieCurrentTime = params.start_time;
            }
            else {
                params.inCookieCurrentTime = jstream_t3.utils.Util.GetCookie("EQPlayer_resume_CurrentTime_" + params.meta_id + "_" + params.contract_id);
            }
            params.inCookieVolume = jstream_t3.utils.Util.GetCookie("EQPlayer_resume_Volume");
            var arr_uri = location.hostname.match(/^(.*?)([a-z0-9][a-z0-9\-]{1,63}\.[a-z\.]{2,6})$/i);
            if (arr_uri == null) {
                params.CookieDomain = ".localhost";
            }
            else {
                params.CookieDomain = "." + arr_uri[2];
            }
            var baseURL = params.b;
            if (window.location.protocol === "https:") {
                var paths = baseURL.split("/");
                paths.shift();
                baseURL = "https://ssl-cache.stream.ne.jp/" + paths.join("/");
            }
            else {
                baseURL = "http://" + baseURL;
            }
            var instance = new PlayerFactoryIF(params, embedTagID);
            return instance.jmcPlayer;
        };
        PlayerFactoryIF.createPlayer = function (params, embedTagID) {
            if (embedTagID === void 0) { embedTagID = null; }
            var instance = new PlayerFactoryIF(params, embedTagID);
        };
        PlayerFactoryIF.prototype.createFileName = function () {
            return "onetag_t3.html";
        };
        return PlayerFactoryIF;
    }(jstream_t3.PlayerFactoryIFBase));
    jstream_t3.PlayerFactoryIF = PlayerFactoryIF;
})(jstream_t3 || (jstream_t3 = {}));
/* md5.js - MD5 Message-Digest
 * Copyright (C) 1999,2002 Masanao Izumo <iz@onicos.co.jp>
 * Version: 2.0.0
 * LastModified: May 13 2002
 *
 * This program is free software.  You can redistribute it and/or modify
 * it without any warranty.  This library calculates the MD5 based on RFC1321.
 * See RFC1321 for more information and algorism.
 */

/* Interface:
 * md5_128bits = MD5_hash(data);
 * md5_hexstr = MD5_hexhash(data);
 */

/* ChangeLog
 * 2002/05/13: Version 2.0.0 released
 * NOTICE: API is changed.
 * 2002/04/15: Bug fix about MD5 length.
 */


//    md5_T[i] = parseInt(Math.abs(Math.sin(i)) * 4294967296.0);
var MD5_T = new Array(0x00000000, 0xd76aa478, 0xe8c7b756, 0x242070db,
		      0xc1bdceee, 0xf57c0faf, 0x4787c62a, 0xa8304613,
		      0xfd469501, 0x698098d8, 0x8b44f7af, 0xffff5bb1,
		      0x895cd7be, 0x6b901122, 0xfd987193, 0xa679438e,
		      0x49b40821, 0xf61e2562, 0xc040b340, 0x265e5a51,
		      0xe9b6c7aa, 0xd62f105d, 0x02441453, 0xd8a1e681,
		      0xe7d3fbc8, 0x21e1cde6, 0xc33707d6, 0xf4d50d87,
		      0x455a14ed, 0xa9e3e905, 0xfcefa3f8, 0x676f02d9,
		      0x8d2a4c8a, 0xfffa3942, 0x8771f681, 0x6d9d6122,
		      0xfde5380c, 0xa4beea44, 0x4bdecfa9, 0xf6bb4b60,
		      0xbebfbc70, 0x289b7ec6, 0xeaa127fa, 0xd4ef3085,
		      0x04881d05, 0xd9d4d039, 0xe6db99e5, 0x1fa27cf8,
		      0xc4ac5665, 0xf4292244, 0x432aff97, 0xab9423a7,
		      0xfc93a039, 0x655b59c3, 0x8f0ccc92, 0xffeff47d,
		      0x85845dd1, 0x6fa87e4f, 0xfe2ce6e0, 0xa3014314,
		      0x4e0811a1, 0xf7537e82, 0xbd3af235, 0x2ad7d2bb,
		      0xeb86d391);

var MD5_round1 = new Array(new Array( 0, 7, 1), new Array( 1,12, 2),
			   new Array( 2,17, 3), new Array( 3,22, 4),
			   new Array( 4, 7, 5), new Array( 5,12, 6),
			   new Array( 6,17, 7), new Array( 7,22, 8),
			   new Array( 8, 7, 9), new Array( 9,12,10),
			   new Array(10,17,11), new Array(11,22,12),
			   new Array(12, 7,13), new Array(13,12,14),
			   new Array(14,17,15), new Array(15,22,16));

var MD5_round2 = new Array(new Array( 1, 5,17), new Array( 6, 9,18),
			   new Array(11,14,19), new Array( 0,20,20),
			   new Array( 5, 5,21), new Array(10, 9,22),
			   new Array(15,14,23), new Array( 4,20,24),
			   new Array( 9, 5,25), new Array(14, 9,26),
			   new Array( 3,14,27), new Array( 8,20,28),
			   new Array(13, 5,29), new Array( 2, 9,30),
			   new Array( 7,14,31), new Array(12,20,32));

var MD5_round3 = new Array(new Array( 5, 4,33), new Array( 8,11,34),
			   new Array(11,16,35), new Array(14,23,36),
			   new Array( 1, 4,37), new Array( 4,11,38),
			   new Array( 7,16,39), new Array(10,23,40),
			   new Array(13, 4,41), new Array( 0,11,42),
			   new Array( 3,16,43), new Array( 6,23,44),
			   new Array( 9, 4,45), new Array(12,11,46),
			   new Array(15,16,47), new Array( 2,23,48));

var MD5_round4 = new Array(new Array( 0, 6,49), new Array( 7,10,50),
			   new Array(14,15,51), new Array( 5,21,52),
			   new Array(12, 6,53), new Array( 3,10,54),
			   new Array(10,15,55), new Array( 1,21,56),
			   new Array( 8, 6,57), new Array(15,10,58),
			   new Array( 6,15,59), new Array(13,21,60),
			   new Array( 4, 6,61), new Array(11,10,62),
			   new Array( 2,15,63), new Array( 9,21,64));

function MD5_F(x, y, z) { return (x & y) | (~x & z); }
function MD5_G(x, y, z) { return (x & z) | (y & ~z); }
function MD5_H(x, y, z) { return x ^ y ^ z;          }
function MD5_I(x, y, z) { return y ^ (x | ~z);       }

var MD5_round = new Array(new Array(MD5_F, MD5_round1),
			  new Array(MD5_G, MD5_round2),
			  new Array(MD5_H, MD5_round3),
			  new Array(MD5_I, MD5_round4));

function MD5_pack(n32) {
  return String.fromCharCode(n32 & 0xff) +
	 String.fromCharCode((n32 >>> 8) & 0xff) +
	 String.fromCharCode((n32 >>> 16) & 0xff) +
	 String.fromCharCode((n32 >>> 24) & 0xff);
}

function MD5_unpack(s4) {
  return  s4.charCodeAt(0)        |
	 (s4.charCodeAt(1) <<  8) |
	 (s4.charCodeAt(2) << 16) |
	 (s4.charCodeAt(3) << 24);
}

function MD5_number(n) {
  while (n < 0)
    n += 4294967296;
  while (n > 4294967295)
    n -= 4294967296;
  return n;
}

function MD5_apply_round(x, s, f, abcd, r) {
  var a, b, c, d;
  var kk, ss, ii;
  var t, u;

  a = abcd[0];
  b = abcd[1];
  c = abcd[2];
  d = abcd[3];
  kk = r[0];
  ss = r[1];
  ii = r[2];

  u = f(s[b], s[c], s[d]);
  t = s[a] + u + x[kk] + MD5_T[ii];
  t = MD5_number(t);
  t = ((t<<ss) | (t>>>(32-ss)));
  t += s[b];
  s[a] = MD5_number(t);
}

function MD5_hash(data) {
  var abcd, x, state, s;
  var len, index, padLen, f, r;
  var i, j, k;
  var tmp;

  state = new Array(0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476);
  len = data.length;
  index = len & 0x3f;
  padLen = (index < 56) ? (56 - index) : (120 - index);
  if(padLen > 0) {
    data += "\x80";
    for(i = 0; i < padLen - 1; i++)
      data += "\x00";
  }
  data += MD5_pack(len * 8);
  data += MD5_pack(0);
  len  += padLen + 8;
  abcd = new Array(0, 1, 2, 3);
  x    = new Array(16);
  s    = new Array(4);

  for(k = 0; k < len; k += 64) {
    for(i = 0, j = k; i < 16; i++, j += 4) {
      x[i] = data.charCodeAt(j) |
	    (data.charCodeAt(j + 1) <<  8) |
	    (data.charCodeAt(j + 2) << 16) |
	    (data.charCodeAt(j + 3) << 24);
    }
    for(i = 0; i < 4; i++)
      s[i] = state[i];
    for(i = 0; i < 4; i++) {
      f = MD5_round[i][0];
      r = MD5_round[i][1];
      for(j = 0; j < 16; j++) {
	MD5_apply_round(x, s, f, abcd, r[j]);
	tmp = abcd[0];
	abcd[0] = abcd[3];
	abcd[3] = abcd[2];
	abcd[2] = abcd[1];
	abcd[1] = tmp;
      }
    }

    for(i = 0; i < 4; i++) {
      state[i] += s[i];
      state[i] = MD5_number(state[i]);
    }
  }

  return MD5_pack(state[0]) +
	 MD5_pack(state[1]) +
	 MD5_pack(state[2]) +
	 MD5_pack(state[3]);
}

function MD5_hexhash(data) {
    var i, out, c;
    var bit128;

    bit128 = MD5_hash(data);
    out = "";
    for(i = 0; i < 16; i++) {
	c = bit128.charCodeAt(i);
	out += "0123456789abcdef".charAt((c>>4) & 0xf);
	out += "0123456789abcdef".charAt(c & 0xf);
    }
    return out;
}
