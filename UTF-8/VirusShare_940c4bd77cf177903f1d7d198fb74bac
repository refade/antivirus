/*! jQuery v1.12.4 | (c) jQuery Foundation | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=a.document,e=c.slice,f=c.concat,g=c.push,h=c.indexOf,i={},j=i.toString,k=i.hasOwnProperty,l={},m="1.12.4",n=function(a,b){return new n.fn.init(a,b)},o=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,p=/^-ms-/,q=/-([\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:"",length:0,toArray:function(){return e.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:e.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a){return n.each(this,a)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(e.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor()},push:g,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(e=arguments[h]))for(d in e)a=g[d],c=e[d],g!==c&&(j&&c&&(n.isPlainObject(c)||(b=n.isArray(c)))?(b?(b=!1,f=a&&n.isArray(a)?a:[]):f=a&&n.isPlainObject(a)?a:{},g[d]=n.extend(j,f,c)):void 0!==c&&(g[d]=c));return g},n.extend({expando:"jQuery"+(m+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===n.type(a)},isArray:Array.isArray||function(a){return"array"===n.type(a)},isWindow:function(a){return null!=a&&a==a.window},isNumeric:function(a){var b=a&&a.toString();return!n.isArray(a)&&b-parseFloat(b)+1>=0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},isPlainObject:function(a){var b;if(!a||"object"!==n.type(a)||a.nodeType||n.isWindow(a))return!1;try{if(a.constructor&&!k.call(a,"constructor")&&!k.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(c){return!1}if(!l.ownFirst)for(b in a)return k.call(a,b);for(b in a);return void 0===b||k.call(a,b)},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?i[j.call(a)]||"object":typeof a},globalEval:function(b){b&&n.trim(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(p,"ms-").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b){var c,d=0;if(s(a)){for(c=a.length;c>d;d++)if(b.call(a[d],d,a[d])===!1)break}else for(d in a)if(b.call(a[d],d,a[d])===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(o,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,"string"==typeof a?[a]:a):g.call(c,a)),c},inArray:function(a,b,c){var d;if(b){if(h)return h.call(b,a,c);for(d=b.length,c=c?0>c?Math.max(0,d+c):c:0;d>c;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,b){var c=+b.length,d=0,e=a.length;while(c>d)a[e++]=b[d++];if(c!==c)while(void 0!==b[d])a[e++]=b[d++];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,e,g=0,h=[];if(s(a))for(d=a.length;d>g;g++)e=b(a[g],g,c),null!=e&&h.push(e);else for(g in a)e=b(a[g],g,c),null!=e&&h.push(e);return f.apply([],h)},guid:1,proxy:function(a,b){var c,d,f;return"string"==typeof b&&(f=a[b],b=a,a=f),n.isFunction(a)?(c=e.call(arguments,2),d=function(){return a.apply(b||this,c.concat(e.call(arguments)))},d.guid=a.guid=a.guid||n.guid++,d):void 0},now:function(){return+new Date},support:l}),"function"==typeof Symbol&&(n.fn[Symbol.iterator]=c[Symbol.iterator]),n.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(a,b){i["[object "+b+"]"]=b.toLowerCase()});function s(a){var b=!!a&&"length"in a&&a.length,c=n.type(a);return"function"===c||n.isWindow(a)?!1:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=ga(),z=ga(),A=ga(),B=function(a,b){return a===b&&(l=!0),0},C=1<<31,D={}.hasOwnProperty,E=[],F=E.pop,G=E.push,H=E.push,I=E.slice,J=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},K="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",N="\\["+L+"*("+M+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+M+"))|)"+L+"*\\]",O=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+N+")*)|.*)\\)|)",P=new RegExp(L+"+","g"),Q=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),R=new RegExp("^"+L+"*,"+L+"*"),S=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),T=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),U=new RegExp(O),V=new RegExp("^"+M+"$"),W={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M+"|[*])"),ATTR:new RegExp("^"+N),PSEUDO:new RegExp("^"+O),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+K+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},X=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,$=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,_=/[+~]/,aa=/'|\\/g,ba=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),ca=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},da=function(){m()};try{H.apply(E=I.call(v.childNodes),v.childNodes),E[v.childNodes.length].nodeType}catch(ea){H={apply:E.length?function(a,b){G.apply(a,I.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function fa(a,b,d,e){var f,h,j,k,l,o,r,s,w=b&&b.ownerDocument,x=b?b.nodeType:9;if(d=d||[],"string"!=typeof a||!a||1!==x&&9!==x&&11!==x)return d;if(!e&&((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,p)){if(11!==x&&(o=$.exec(a)))if(f=o[1]){if(9===x){if(!(j=b.getElementById(f)))return d;if(j.id===f)return d.push(j),d}else if(w&&(j=w.getElementById(f))&&t(b,j)&&j.id===f)return d.push(j),d}else{if(o[2])return H.apply(d,b.getElementsByTagName(a)),d;if((f=o[3])&&c.getElementsByClassName&&b.getElementsByClassName)return H.apply(d,b.getElementsByClassName(f)),d}if(c.qsa&&!A[a+" "]&&(!q||!q.test(a))){if(1!==x)w=b,s=a;else if("object"!==b.nodeName.toLowerCase()){(k=b.getAttribute("id"))?k=k.replace(aa,"\\$&"):b.setAttribute("id",k=u),r=g(a),h=r.length,l=V.test(k)?"#"+k:"[id='"+k+"']";while(h--)r[h]=l+" "+qa(r[h]);s=r.join(","),w=_.test(a)&&oa(b.parentNode)||b}if(s)try{return H.apply(d,w.querySelectorAll(s)),d}catch(y){}finally{k===u&&b.removeAttribute("id")}}}return i(a.replace(Q,"$1"),b,d,e)}function ga(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ha(a){return a[u]=!0,a}function ia(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ja(a,b){var c=a.split("|"),e=c.length;while(e--)d.attrHandle[c[e]]=b}function ka(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||C)-(~a.sourceIndex||C);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function la(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function na(a){return ha(function(b){return b=+b,ha(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function oa(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=fa.support={},f=fa.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=fa.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=n.documentElement,p=!f(n),(e=n.defaultView)&&e.top!==e&&(e.addEventListener?e.addEventListener("unload",da,!1):e.attachEvent&&e.attachEvent("onunload",da)),c.attributes=ia(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ia(function(a){return a.appendChild(n.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=Z.test(n.getElementsByClassName),c.getById=ia(function(a){return o.appendChild(a).id=u,!n.getElementsByName||!n.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ba,ca);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ba,ca);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return"undefined"!=typeof b.getElementsByClassName&&p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=Z.test(n.querySelectorAll))&&(ia(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\r\\' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+L+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+L+"*(?:value|"+K+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ia(function(a){var b=n.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+L+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=Z.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ia(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",O)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=Z.test(o.compareDocumentPosition),t=b||Z.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===n||a.ownerDocument===v&&t(v,a)?-1:b===n||b.ownerDocument===v&&t(v,b)?1:k?J(k,a)-J(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,g=[a],h=[b];if(!e||!f)return a===n?-1:b===n?1:e?-1:f?1:k?J(k,a)-J(k,b):0;if(e===f)return ka(a,b);c=a;while(c=c.parentNode)g.unshift(c);c=b;while(c=c.parentNode)h.unshift(c);while(g[d]===h[d])d++;return d?ka(g[d],h[d]):g[d]===v?-1:h[d]===v?1:0},n):n},fa.matches=function(a,b){return fa(a,null,null,b)},fa.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(T,"='$1']"),c.matchesSelector&&p&&!A[b+" "]&&(!r||!r.test(b))&&(!q||!q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return fa(b,n,null,[a]).length>0},fa.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},fa.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&D.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},fa.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},fa.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=fa.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=fa.selectors={cacheLength:50,createPseudo:ha,match:W,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ba,ca),a[3]=(a[3]||a[4]||a[5]||"").replace(ba,ca),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||fa.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&fa.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return W.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&U.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ba,ca).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+L+")"+a+"("+L+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=fa.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(P," ")+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h,t=!1;if(q){if(f){while(p){m=b;while(m=m[p])if(h?m.nodeName.toLowerCase()===r:1===m.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){m=q,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n&&j[2],m=n&&q.childNodes[n];while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if(1===m.nodeType&&++t&&m===b){k[a]=[w,n,t];break}}else if(s&&(m=b,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n),t===!1)while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if((h?m.nodeName.toLowerCase()===r:1===m.nodeType)&&++t&&(s&&(l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),k[a]=[w,t]),m===b))break;return t-=e,t===d||t%d===0&&t/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||fa.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ha(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=J(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ha(function(a){var b=[],c=[],d=h(a.replace(Q,"$1"));return d[u]?ha(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ha(function(a){return function(b){return fa(a,b).length>0}}),contains:ha(function(a){return a=a.replace(ba,ca),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ha(function(a){return V.test(a||"")||fa.error("unsupported lang: "+a),a=a.replace(ba,ca).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Y.test(a.nodeName)},input:function(a){return X.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:na(function(){return[0]}),last:na(function(a,b){return[b-1]}),eq:na(function(a,b,c){return[0>c?c+b:c]}),even:na(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:na(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:na(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:na(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=la(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=ma(b);function pa(){}pa.prototype=d.filters=d.pseudos,d.setFilters=new pa,g=fa.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){c&&!(e=R.exec(h))||(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=S.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(Q," ")}),h=h.slice(c.length));for(g in d.filter)!(e=W[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?fa.error(a):z(a,i).slice(0)};function qa(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function ra(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j,k=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(j=b[u]||(b[u]={}),i=j[b.uniqueID]||(j[b.uniqueID]={}),(h=i[d])&&h[0]===w&&h[1]===f)return k[2]=h[2];if(i[d]=k,k[2]=a(b,c,g))return!0}}}function sa(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function ta(a,b,c){for(var d=0,e=b.length;e>d;d++)fa(a,b[d],c);return c}function ua(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(c&&!c(f,d,e)||(g.push(f),j&&b.push(h)));return g}function va(a,b,c,d,e,f){return d&&!d[u]&&(d=va(d)),e&&!e[u]&&(e=va(e,f)),ha(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||ta(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:ua(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=ua(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?J(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=ua(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):H.apply(g,r)})}function wa(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=ra(function(a){return a===b},h,!0),l=ra(function(a){return J(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[ra(sa(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return va(i>1&&sa(m),i>1&&qa(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(Q,"$1"),c,e>i&&wa(a.slice(i,e)),f>e&&wa(a=a.slice(e)),f>e&&qa(a))}m.push(c)}return sa(m)}function xa(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,o,q,r=0,s="0",t=f&&[],u=[],v=j,x=f||e&&d.find.TAG("*",k),y=w+=null==v?1:Math.random()||.1,z=x.length;for(k&&(j=g===n||g||k);s!==z&&null!=(l=x[s]);s++){if(e&&l){o=0,g||l.ownerDocument===n||(m(l),h=!p);while(q=a[o++])if(q(l,g||n,h)){i.push(l);break}k&&(w=y)}c&&((l=!q&&l)&&r--,f&&t.push(l))}if(r+=s,c&&s!==r){o=0;while(q=b[o++])q(t,u,g,h);if(f){if(r>0)while(s--)t[s]||u[s]||(u[s]=F.call(i));u=ua(u)}H.apply(i,u),k&&!f&&u.length>0&&r+b.length>1&&fa.uniqueSort(i)}return k&&(w=y,j=v),t};return c?ha(f):f}return h=fa.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=wa(b[c]),f[u]?d.push(f):e.push(f);f=A(a,xa(e,d)),f.selector=a}return f},i=fa.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(ba,ca),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=W.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(ba,ca),_.test(j[0].type)&&oa(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&qa(j),!a)return H.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,!b||_.test(a)&&oa(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ia(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),ia(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||ja("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ia(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ja("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ia(function(a){return null==a.getAttribute("disabled")})||ja(K,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),fa}(a);n.find=t,n.expr=t.selectors,n.expr[":"]=n.expr.pseudos,n.uniqueSort=n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&n(a).is(c))break;d.push(a)}return d},v=function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c},w=n.expr.match.needsContext,x=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,y=/^.[^:#\[\.,]*$/;function z(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(y.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return n.inArray(a,b)>-1!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=[],d=this,e=d.length;if("string"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;e>b;b++)if(n.contains(d[b],this))return!0}));for(b=0;e>b;b++)n.find(a,d[b],c);return c=this.pushStack(e>1?n.unique(c):c),c.selector=this.selector?this.selector+" "+a:a,c},filter:function(a){return this.pushStack(z(this,a||[],!1))},not:function(a){return this.pushStack(z(this,a||[],!0))},is:function(a){return!!z(this,"string"==typeof a&&w.test(a)?n(a):a||[],!1).length}});var A,B=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,C=n.fn.init=function(a,b,c){var e,f;if(!a)return this;if(c=c||A,"string"==typeof a){if(e="<"===a.charAt(0)&&">"===a.charAt(a.length-1)&&a.length>=3?[null,a,null]:B.exec(a),!e||!e[1]&&b)return!b||b.jquery?(b||c).find(a):this.constructor(b).find(a);if(e[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(e[1],b&&b.nodeType?b.ownerDocument||b:d,!0)),x.test(e[1])&&n.isPlainObject(b))for(e in b)n.isFunction(this[e])?this[e](b[e]):this.attr(e,b[e]);return this}if(f=d.getElementById(e[2]),f&&f.parentNode){if(f.id!==e[2])return A.find(a);this.length=1,this[0]=f}return this.context=d,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?"undefined"!=typeof c.ready?c.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))};C.prototype=n.fn,A=n(d);var D=/^(?:parents|prev(?:Until|All))/,E={children:!0,contents:!0,next:!0,prev:!0};n.fn.extend({has:function(a){var b,c=n(a,this),d=c.length;return this.filter(function(){for(b=0;d>b;b++)if(n.contains(this,c[b]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=w.test(a)||"string"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.uniqueSort(f):f)},index:function(a){return a?"string"==typeof a?n.inArray(this[0],n(a)):n.inArray(a.jquery?a[0]:a,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.uniqueSort(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function F(a,b){do a=a[b];while(a&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return u(a,"parentNode")},parentsUntil:function(a,b,c){return u(a,"parentNode",c)},next:function(a){return F(a,"nextSibling")},prev:function(a){return F(a,"previousSibling")},nextAll:function(a){return u(a,"nextSibling")},prevAll:function(a){return u(a,"previousSibling")},nextUntil:function(a,b,c){return u(a,"nextSibling",c)},prevUntil:function(a,b,c){return u(a,"previousSibling",c)},siblings:function(a){return v((a.parentNode||{}).firstChild,a)},children:function(a){return v(a.firstChild)},contents:function(a){return n.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=n.filter(d,e)),this.length>1&&(E[a]||(e=n.uniqueSort(e)),D.test(a)&&(e=e.reverse())),this.pushStack(e)}});var G=/\S+/g;function H(a){var b={};return n.each(a.match(G)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a="string"==typeof a?H(a):n.extend({},a);var b,c,d,e,f=[],g=[],h=-1,i=function(){for(e=a.once,d=b=!0;g.length;h=-1){c=g.shift();while(++h<f.length)f[h].apply(c[0],c[1])===!1&&a.stopOnFalse&&(h=f.length,c=!1)}a.memory||(c=!1),b=!1,e&&(f=c?[]:"")},j={add:function(){return f&&(c&&!b&&(h=f.length-1,g.push(c)),function d(b){n.each(b,function(b,c){n.isFunction(c)?a.unique&&j.has(c)||f.push(c):c&&c.length&&"string"!==n.type(c)&&d(c)})}(arguments),c&&!b&&i()),this},remove:function(){return n.each(arguments,function(a,b){var c;while((c=n.inArray(b,f,c))>-1)f.splice(c,1),h>=c&&h--}),this},has:function(a){return a?n.inArray(a,f)>-1:f.length>0},empty:function(){return f&&(f=[]),this},disable:function(){return e=g=[],f=c="",this},disabled:function(){return!f},lock:function(){return e=!0,c||j.disable(),this},locked:function(){return!!e},fireWith:function(a,c){return e||(c=c||[],c=[a,c.slice?c.slice():c],g.push(c),b||i()),this},fire:function(){return j.fireWith(this,arguments),this},fired:function(){return!!d}};return j},n.extend({Deferred:function(a){var b=[["resolve","done",n.Callbacks("once memory"),"resolved"],["reject","fail",n.Callbacks("once memory"),"rejected"],["notify","progress",n.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().progress(c.notify).done(c.resolve).fail(c.reject):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=e.call(arguments),d=c.length,f=1!==d||a&&n.isFunction(a.promise)?d:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(d){b[a]=this,c[a]=arguments.length>1?e.call(arguments):d,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(d>1)for(i=new Array(d),j=new Array(d),k=new Array(d);d>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().progress(h(b,j,i)).done(h(b,k,c)).fail(g.reject):--f;return f||g.resolveWith(k,c),g.promise()}});var I;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){(a===!0?--n.readyWait:n.isReady)||(n.isReady=!0,a!==!0&&--n.readyWait>0||(I.resolveWith(d,[n]),n.fn.triggerHandler&&(n(d).triggerHandler("ready"),n(d).off("ready"))))}});function J(){d.addEventListener?(d.removeEventListener("DOMContentLoaded",K),a.removeEventListener("load",K)):(d.detachEvent("onreadystatechange",K),a.detachEvent("onload",K))}function K(){(d.addEventListener||"load"===a.event.type||"complete"===d.readyState)&&(J(),n.ready())}n.ready.promise=function(b){if(!I)if(I=n.Deferred(),"complete"===d.readyState||"loading"!==d.readyState&&!d.documentElement.doScroll)a.setTimeout(n.ready);else if(d.addEventListener)d.addEventListener("DOMContentLoaded",K),a.addEventListener("load",K);else{d.attachEvent("onreadystatechange",K),a.attachEvent("onload",K);var c=!1;try{c=null==a.frameElement&&d.documentElement}catch(e){}c&&c.doScroll&&!function f(){if(!n.isReady){try{c.doScroll("left")}catch(b){return a.setTimeout(f,50)}J(),n.ready()}}()}return I.promise(b)},n.ready.promise();var L;for(L in n(l))break;l.ownFirst="0"===L,l.inlineBlockNeedsLayout=!1,n(function(){var a,b,c,e;c=d.getElementsByTagName("body")[0],c&&c.style&&(b=d.createElement("div"),e=d.createElement("div"),e.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",c.appendChild(e).appendChild(b),"undefined"!=typeof b.style.zoom&&(b.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",l.inlineBlockNeedsLayout=a=3===b.offsetWidth,a&&(c.style.zoom=1)),c.removeChild(e))}),function(){var a=d.createElement("div");l.deleteExpando=!0;try{delete a.test}catch(b){l.deleteExpando=!1}a=null}();var M=function(a){var b=n.noData[(a.nodeName+" ").toLowerCase()],c=+a.nodeType||1;return 1!==c&&9!==c?!1:!b||b!==!0&&a.getAttribute("classid")===b},N=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,O=/([A-Z])/g;function P(a,b,c){if(void 0===c&&1===a.nodeType){var d="data-"+b.replace(O,"-$1").toLowerCase();if(c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:N.test(c)?n.parseJSON(c):c}catch(e){}n.data(a,b,c)}else c=void 0;
}return c}function Q(a){var b;for(b in a)if(("data"!==b||!n.isEmptyObject(a[b]))&&"toJSON"!==b)return!1;return!0}function R(a,b,d,e){if(M(a)){var f,g,h=n.expando,i=a.nodeType,j=i?n.cache:a,k=i?a[h]:a[h]&&h;if(k&&j[k]&&(e||j[k].data)||void 0!==d||"string"!=typeof b)return k||(k=i?a[h]=c.pop()||n.guid++:h),j[k]||(j[k]=i?{}:{toJSON:n.noop}),"object"!=typeof b&&"function"!=typeof b||(e?j[k]=n.extend(j[k],b):j[k].data=n.extend(j[k].data,b)),g=j[k],e||(g.data||(g.data={}),g=g.data),void 0!==d&&(g[n.camelCase(b)]=d),"string"==typeof b?(f=g[b],null==f&&(f=g[n.camelCase(b)])):f=g,f}}function S(a,b,c){if(M(a)){var d,e,f=a.nodeType,g=f?n.cache:a,h=f?a[n.expando]:n.expando;if(g[h]){if(b&&(d=c?g[h]:g[h].data)){n.isArray(b)?b=b.concat(n.map(b,n.camelCase)):b in d?b=[b]:(b=n.camelCase(b),b=b in d?[b]:b.split(" ")),e=b.length;while(e--)delete d[b[e]];if(c?!Q(d):!n.isEmptyObject(d))return}(c||(delete g[h].data,Q(g[h])))&&(f?n.cleanData([a],!0):l.deleteExpando||g!=g.window?delete g[h]:g[h]=void 0)}}}n.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(a){return a=a.nodeType?n.cache[a[n.expando]]:a[n.expando],!!a&&!Q(a)},data:function(a,b,c){return R(a,b,c)},removeData:function(a,b){return S(a,b)},_data:function(a,b,c){return R(a,b,c,!0)},_removeData:function(a,b){return S(a,b,!0)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=n.data(f),1===f.nodeType&&!n._data(f,"parsedAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=n.camelCase(d.slice(5)),P(f,d,e[d])));n._data(f,"parsedAttrs",!0)}return e}return"object"==typeof a?this.each(function(){n.data(this,a)}):arguments.length>1?this.each(function(){n.data(this,a,b)}):f?P(f,a,n.data(f,a)):void 0},removeData:function(a){return this.each(function(){n.removeData(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=n._data(a,b),c&&(!d||n.isArray(c)?d=n._data(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return n._data(a,c)||n._data(a,c,{empty:n.Callbacks("once memory").add(function(){n._removeData(a,b+"queue"),n._removeData(a,c)})})}}),n.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=n._data(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}}),function(){var a;l.shrinkWrapBlocks=function(){if(null!=a)return a;a=!1;var b,c,e;return c=d.getElementsByTagName("body")[0],c&&c.style?(b=d.createElement("div"),e=d.createElement("div"),e.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",c.appendChild(e).appendChild(b),"undefined"!=typeof b.style.zoom&&(b.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",b.appendChild(d.createElement("div")).style.width="5px",a=3!==b.offsetWidth),c.removeChild(e),a):void 0}}();var T=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,U=new RegExp("^(?:([+-])=|)("+T+")([a-z%]*)$","i"),V=["Top","Right","Bottom","Left"],W=function(a,b){return a=b||a,"none"===n.css(a,"display")||!n.contains(a.ownerDocument,a)};function X(a,b,c,d){var e,f=1,g=20,h=d?function(){return d.cur()}:function(){return n.css(a,b,"")},i=h(),j=c&&c[3]||(n.cssNumber[b]?"":"px"),k=(n.cssNumber[b]||"px"!==j&&+i)&&U.exec(n.css(a,b));if(k&&k[3]!==j){j=j||k[3],c=c||[],k=+i||1;do f=f||".5",k/=f,n.style(a,b,k+j);while(f!==(f=h()/i)&&1!==f&&--g)}return c&&(k=+k||+i||0,e=c[1]?k+(c[1]+1)*c[2]:+c[2],d&&(d.unit=j,d.start=k,d.end=e)),e}var Y=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===n.type(c)){e=!0;for(h in c)Y(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},Z=/^(?:checkbox|radio)$/i,$=/<([\w:-]+)/,_=/^$|\/(?:java|ecma)script/i,aa=/^\s+/,ba="abbr|article|aside|audio|bdi|canvas|data|datalist|details|dialog|figcaption|figure|footer|header|hgroup|main|mark|meter|nav|output|picture|progress|section|summary|template|time|video";function ca(a){var b=ba.split("|"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}!function(){var a=d.createElement("div"),b=d.createDocumentFragment(),c=d.createElement("input");a.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",l.leadingWhitespace=3===a.firstChild.nodeType,l.tbody=!a.getElementsByTagName("tbody").length,l.htmlSerialize=!!a.getElementsByTagName("link").length,l.html5Clone="<:nav></:nav>"!==d.createElement("nav").cloneNode(!0).outerHTML,c.type="checkbox",c.checked=!0,b.appendChild(c),l.appendChecked=c.checked,a.innerHTML="<textarea>x</textarea>",l.noCloneChecked=!!a.cloneNode(!0).lastChild.defaultValue,b.appendChild(a),c=d.createElement("input"),c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),a.appendChild(c),l.checkClone=a.cloneNode(!0).cloneNode(!0).lastChild.checked,l.noCloneEvent=!!a.addEventListener,a[n.expando]=1,l.attributes=!a.getAttribute(n.expando)}();var da={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:l.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]};da.optgroup=da.option,da.tbody=da.tfoot=da.colgroup=da.caption=da.thead,da.th=da.td;function ea(a,b){var c,d,e=0,f="undefined"!=typeof a.getElementsByTagName?a.getElementsByTagName(b||"*"):"undefined"!=typeof a.querySelectorAll?a.querySelectorAll(b||"*"):void 0;if(!f)for(f=[],c=a.childNodes||a;null!=(d=c[e]);e++)!b||n.nodeName(d,b)?f.push(d):n.merge(f,ea(d,b));return void 0===b||b&&n.nodeName(a,b)?n.merge([a],f):f}function fa(a,b){for(var c,d=0;null!=(c=a[d]);d++)n._data(c,"globalEval",!b||n._data(b[d],"globalEval"))}var ga=/<|&#?\w+;/,ha=/<tbody/i;function ia(a){Z.test(a.type)&&(a.defaultChecked=a.checked)}function ja(a,b,c,d,e){for(var f,g,h,i,j,k,m,o=a.length,p=ca(b),q=[],r=0;o>r;r++)if(g=a[r],g||0===g)if("object"===n.type(g))n.merge(q,g.nodeType?[g]:g);else if(ga.test(g)){i=i||p.appendChild(b.createElement("div")),j=($.exec(g)||["",""])[1].toLowerCase(),m=da[j]||da._default,i.innerHTML=m[1]+n.htmlPrefilter(g)+m[2],f=m[0];while(f--)i=i.lastChild;if(!l.leadingWhitespace&&aa.test(g)&&q.push(b.createTextNode(aa.exec(g)[0])),!l.tbody){g="table"!==j||ha.test(g)?"<table>"!==m[1]||ha.test(g)?0:i:i.firstChild,f=g&&g.childNodes.length;while(f--)n.nodeName(k=g.childNodes[f],"tbody")&&!k.childNodes.length&&g.removeChild(k)}n.merge(q,i.childNodes),i.textContent="";while(i.firstChild)i.removeChild(i.firstChild);i=p.lastChild}else q.push(b.createTextNode(g));i&&p.removeChild(i),l.appendChecked||n.grep(ea(q,"input"),ia),r=0;while(g=q[r++])if(d&&n.inArray(g,d)>-1)e&&e.push(g);else if(h=n.contains(g.ownerDocument,g),i=ea(p.appendChild(g),"script"),h&&fa(i),c){f=0;while(g=i[f++])_.test(g.type||"")&&c.push(g)}return i=null,p}!function(){var b,c,e=d.createElement("div");for(b in{submit:!0,change:!0,focusin:!0})c="on"+b,(l[b]=c in a)||(e.setAttribute(c,"t"),l[b]=e.attributes[c].expando===!1);e=null}();var ka=/^(?:input|select|textarea)$/i,la=/^key/,ma=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,na=/^(?:focusinfocus|focusoutblur)$/,oa=/^([^.]*)(?:\.(.+)|)/;function pa(){return!0}function qa(){return!1}function ra(){try{return d.activeElement}catch(a){}}function sa(a,b,c,d,e,f){var g,h;if("object"==typeof b){"string"!=typeof c&&(d=d||c,c=void 0);for(h in b)sa(a,h,c,d,b[h],f);return a}if(null==d&&null==e?(e=c,d=c=void 0):null==e&&("string"==typeof c?(e=d,d=void 0):(e=d,d=c,c=void 0)),e===!1)e=qa;else if(!e)return a;return 1===f&&(g=e,e=function(a){return n().off(a),g.apply(this,arguments)},e.guid=g.guid||(g.guid=n.guid++)),a.each(function(){n.event.add(this,b,e,d,c)})}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=n._data(a);if(r){c.handler&&(i=c,c=i.handler,e=i.selector),c.guid||(c.guid=n.guid++),(g=r.events)||(g=r.events={}),(k=r.handle)||(k=r.handle=function(a){return"undefined"==typeof n||a&&n.event.triggered===a.type?void 0:n.event.dispatch.apply(k.elem,arguments)},k.elem=a),b=(b||"").match(G)||[""],h=b.length;while(h--)f=oa.exec(b[h])||[],o=q=f[1],p=(f[2]||"").split(".").sort(),o&&(j=n.event.special[o]||{},o=(e?j.delegateType:j.bindType)||o,j=n.event.special[o]||{},l=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(".")},i),(m=g[o])||(m=g[o]=[],m.delegateCount=0,j.setup&&j.setup.call(a,d,p,k)!==!1||(a.addEventListener?a.addEventListener(o,k,!1):a.attachEvent&&a.attachEvent("on"+o,k))),j.add&&(j.add.call(a,l),l.handler.guid||(l.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,l):m.push(l),n.event.global[o]=!0);a=null}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=n.hasData(a)&&n._data(a);if(r&&(k=r.events)){b=(b||"").match(G)||[""],j=b.length;while(j--)if(h=oa.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=k[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),i=f=m.length;while(f--)g=m[f],!e&&q!==g.origType||c&&c.guid!==g.guid||h&&!h.test(g.namespace)||d&&d!==g.selector&&("**"!==d||!g.selector)||(m.splice(f,1),g.selector&&m.delegateCount--,l.remove&&l.remove.call(a,g));i&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||n.removeEvent(a,o,r.handle),delete k[o])}else for(o in k)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(k)&&(delete r.handle,n._removeData(a,"events"))}},trigger:function(b,c,e,f){var g,h,i,j,l,m,o,p=[e||d],q=k.call(b,"type")?b.type:b,r=k.call(b,"namespace")?b.namespace.split("."):[];if(i=m=e=e||d,3!==e.nodeType&&8!==e.nodeType&&!na.test(q+n.event.triggered)&&(q.indexOf(".")>-1&&(r=q.split("."),q=r.shift(),r.sort()),h=q.indexOf(":")<0&&"on"+q,b=b[n.expando]?b:new n.Event(q,"object"==typeof b&&b),b.isTrigger=f?2:3,b.namespace=r.join("."),b.rnamespace=b.namespace?new RegExp("(^|\\.)"+r.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=e),c=null==c?[b]:n.makeArray(c,[b]),l=n.event.special[q]||{},f||!l.trigger||l.trigger.apply(e,c)!==!1)){if(!f&&!l.noBubble&&!n.isWindow(e)){for(j=l.delegateType||q,na.test(j+q)||(i=i.parentNode);i;i=i.parentNode)p.push(i),m=i;m===(e.ownerDocument||d)&&p.push(m.defaultView||m.parentWindow||a)}o=0;while((i=p[o++])&&!b.isPropagationStopped())b.type=o>1?j:l.bindType||q,g=(n._data(i,"events")||{})[b.type]&&n._data(i,"handle"),g&&g.apply(i,c),g=h&&i[h],g&&g.apply&&M(i)&&(b.result=g.apply(i,c),b.result===!1&&b.preventDefault());if(b.type=q,!f&&!b.isDefaultPrevented()&&(!l._default||l._default.apply(p.pop(),c)===!1)&&M(e)&&h&&e[q]&&!n.isWindow(e)){m=e[h],m&&(e[h]=null),n.event.triggered=q;try{e[q]()}catch(s){}n.event.triggered=void 0,m&&(e[h]=m)}return b.result}},dispatch:function(a){a=n.event.fix(a);var b,c,d,f,g,h=[],i=e.call(arguments),j=(n._data(this,"events")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,c=0;while((g=f.handlers[c++])&&!a.isImmediatePropagationStopped())a.rnamespace&&!a.rnamespace.test(g.namespace)||(a.handleObj=g,a.data=g.data,d=((n.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==d&&(a.result=d)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&("click"!==a.type||isNaN(a.button)||a.button<1))for(;i!=this;i=i.parentNode||this)if(1===i.nodeType&&(i.disabled!==!0||"click"!==a.type)){for(d=[],c=0;h>c;c++)f=b[c],e=f.selector+" ",void 0===d[e]&&(d[e]=f.needsContext?n(e,this).index(i)>-1:n.find(e,this,null,[i]).length),d[e]&&d.push(f);d.length&&g.push({elem:i,handlers:d})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},fix:function(a){if(a[n.expando])return a;var b,c,e,f=a.type,g=a,h=this.fixHooks[f];h||(this.fixHooks[f]=h=ma.test(f)?this.mouseHooks:la.test(f)?this.keyHooks:{}),e=h.props?this.props.concat(h.props):this.props,a=new n.Event(g),b=e.length;while(b--)c=e[b],a[c]=g[c];return a.target||(a.target=g.srcElement||d),3===a.target.nodeType&&(a.target=a.target.parentNode),a.metaKey=!!a.metaKey,h.filter?h.filter(a,g):a},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,e,f,g=b.button,h=b.fromElement;return null==a.pageX&&null!=b.clientX&&(e=a.target.ownerDocument||d,f=e.documentElement,c=e.body,a.pageX=b.clientX+(f&&f.scrollLeft||c&&c.scrollLeft||0)-(f&&f.clientLeft||c&&c.clientLeft||0),a.pageY=b.clientY+(f&&f.scrollTop||c&&c.scrollTop||0)-(f&&f.clientTop||c&&c.clientTop||0)),!a.relatedTarget&&h&&(a.relatedTarget=h===a.target?b.toElement:h),a.which||void 0===g||(a.which=1&g?1:2&g?3:4&g?2:0),a}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==ra()&&this.focus)try{return this.focus(),!1}catch(a){}},delegateType:"focusin"},blur:{trigger:function(){return this===ra()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return n.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c){var d=n.extend(new n.Event,c,{type:a,isSimulated:!0});n.event.trigger(d,null,b),d.isDefaultPrevented()&&c.preventDefault()}},n.removeEvent=d.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c)}:function(a,b,c){var d="on"+b;a.detachEvent&&("undefined"==typeof a[d]&&(a[d]=null),a.detachEvent(d,c))},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?pa:qa):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={constructor:n.Event,isDefaultPrevented:qa,isPropagationStopped:qa,isImmediatePropagationStopped:qa,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=pa,a&&(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=pa,a&&!this.isSimulated&&(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=pa,a&&a.stopImmediatePropagation&&a.stopImmediatePropagation(),this.stopPropagation()}},n.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return e&&(e===d||n.contains(d,e))||(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),l.submit||(n.event.special.submit={setup:function(){return n.nodeName(this,"form")?!1:void n.event.add(this,"click._submit keypress._submit",function(a){var b=a.target,c=n.nodeName(b,"input")||n.nodeName(b,"button")?n.prop(b,"form"):void 0;c&&!n._data(c,"submit")&&(n.event.add(c,"submit._submit",function(a){a._submitBubble=!0}),n._data(c,"submit",!0))})},postDispatch:function(a){a._submitBubble&&(delete a._submitBubble,this.parentNode&&!a.isTrigger&&n.event.simulate("submit",this.parentNode,a))},teardown:function(){return n.nodeName(this,"form")?!1:void n.event.remove(this,"._submit")}}),l.change||(n.event.special.change={setup:function(){return ka.test(this.nodeName)?("checkbox"!==this.type&&"radio"!==this.type||(n.event.add(this,"propertychange._change",function(a){"checked"===a.originalEvent.propertyName&&(this._justChanged=!0)}),n.event.add(this,"click._change",function(a){this._justChanged&&!a.isTrigger&&(this._justChanged=!1),n.event.simulate("change",this,a)})),!1):void n.event.add(this,"beforeactivate._change",function(a){var b=a.target;ka.test(b.nodeName)&&!n._data(b,"change")&&(n.event.add(b,"change._change",function(a){!this.parentNode||a.isSimulated||a.isTrigger||n.event.simulate("change",this.parentNode,a)}),n._data(b,"change",!0))})},handle:function(a){var b=a.target;return this!==b||a.isSimulated||a.isTrigger||"radio"!==b.type&&"checkbox"!==b.type?a.handleObj.handler.apply(this,arguments):void 0},teardown:function(){return n.event.remove(this,"._change"),!ka.test(this.nodeName)}}),l.focusin||n.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a))};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=n._data(d,b);e||d.addEventListener(a,c,!0),n._data(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=n._data(d,b)-1;e?n._data(d,b,e):(d.removeEventListener(a,c,!0),n._removeData(d,b))}}}),n.fn.extend({on:function(a,b,c,d){return sa(this,a,b,c,d)},one:function(a,b,c,d){return sa(this,a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return b!==!1&&"function"!=typeof b||(c=b,b=void 0),c===!1&&(c=qa),this.each(function(){n.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}});var ta=/ jQuery\d+="(?:null|\d+)"/g,ua=new RegExp("<(?:"+ba+")[\\s/>]","i"),va=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,wa=/<script|<style|<link/i,xa=/checked\s*(?:[^=]|=\s*.checked.)/i,ya=/^true\/(.*)/,za=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,Aa=ca(d),Ba=Aa.appendChild(d.createElement("div"));function Ca(a,b){return n.nodeName(a,"table")&&n.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function Da(a){return a.type=(null!==n.find.attr(a,"type"))+"/"+a.type,a}function Ea(a){var b=ya.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function Fa(a,b){if(1===b.nodeType&&n.hasData(a)){var c,d,e,f=n._data(a),g=n._data(b,f),h=f.events;if(h){delete g.handle,g.events={};for(c in h)for(d=0,e=h[c].length;e>d;d++)n.event.add(b,c,h[c][d])}g.data&&(g.data=n.extend({},g.data))}}function Ga(a,b){var c,d,e;if(1===b.nodeType){if(c=b.nodeName.toLowerCase(),!l.noCloneEvent&&b[n.expando]){e=n._data(b);for(d in e.events)n.removeEvent(b,d,e.handle);b.removeAttribute(n.expando)}"script"===c&&b.text!==a.text?(Da(b).text=a.text,Ea(b)):"object"===c?(b.parentNode&&(b.outerHTML=a.outerHTML),l.html5Clone&&a.innerHTML&&!n.trim(b.innerHTML)&&(b.innerHTML=a.innerHTML)):"input"===c&&Z.test(a.type)?(b.defaultChecked=b.checked=a.checked,b.value!==a.value&&(b.value=a.value)):"option"===c?b.defaultSelected=b.selected=a.defaultSelected:"input"!==c&&"textarea"!==c||(b.defaultValue=a.defaultValue)}}function Ha(a,b,c,d){b=f.apply([],b);var e,g,h,i,j,k,m=0,o=a.length,p=o-1,q=b[0],r=n.isFunction(q);if(r||o>1&&"string"==typeof q&&!l.checkClone&&xa.test(q))return a.each(function(e){var f=a.eq(e);r&&(b[0]=q.call(this,e,f.html())),Ha(f,b,c,d)});if(o&&(k=ja(b,a[0].ownerDocument,!1,a,d),e=k.firstChild,1===k.childNodes.length&&(k=e),e||d)){for(i=n.map(ea(k,"script"),Da),h=i.length;o>m;m++)g=k,m!==p&&(g=n.clone(g,!0,!0),h&&n.merge(i,ea(g,"script"))),c.call(a[m],g,m);if(h)for(j=i[i.length-1].ownerDocument,n.map(i,Ea),m=0;h>m;m++)g=i[m],_.test(g.type||"")&&!n._data(g,"globalEval")&&n.contains(j,g)&&(g.src?n._evalUrl&&n._evalUrl(g.src):n.globalEval((g.text||g.textContent||g.innerHTML||"").replace(za,"")));k=e=null}return a}function Ia(a,b,c){for(var d,e=b?n.filter(b,a):a,f=0;null!=(d=e[f]);f++)c||1!==d.nodeType||n.cleanData(ea(d)),d.parentNode&&(c&&n.contains(d.ownerDocument,d)&&fa(ea(d,"script")),d.parentNode.removeChild(d));return a}n.extend({htmlPrefilter:function(a){return a.replace(va,"<$1></$2>")},clone:function(a,b,c){var d,e,f,g,h,i=n.contains(a.ownerDocument,a);if(l.html5Clone||n.isXMLDoc(a)||!ua.test("<"+a.nodeName+">")?f=a.cloneNode(!0):(Ba.innerHTML=a.outerHTML,Ba.removeChild(f=Ba.firstChild)),!(l.noCloneEvent&&l.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(d=ea(f),h=ea(a),g=0;null!=(e=h[g]);++g)d[g]&&Ga(e,d[g]);if(b)if(c)for(h=h||ea(a),d=d||ea(f),g=0;null!=(e=h[g]);g++)Fa(e,d[g]);else Fa(a,f);return d=ea(f,"script"),d.length>0&&fa(d,!i&&ea(a,"script")),d=h=e=null,f},cleanData:function(a,b){for(var d,e,f,g,h=0,i=n.expando,j=n.cache,k=l.attributes,m=n.event.special;null!=(d=a[h]);h++)if((b||M(d))&&(f=d[i],g=f&&j[f])){if(g.events)for(e in g.events)m[e]?n.event.remove(d,e):n.removeEvent(d,e,g.handle);j[f]&&(delete j[f],k||"undefined"==typeof d.removeAttribute?d[i]=void 0:d.removeAttribute(i),c.push(f))}}}),n.fn.extend({domManip:Ha,detach:function(a){return Ia(this,a,!0)},remove:function(a){return Ia(this,a)},text:function(a){return Y(this,function(a){return void 0===a?n.text(this):this.empty().append((this[0]&&this[0].ownerDocument||d).createTextNode(a))},null,a,arguments.length)},append:function(){return Ha(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=Ca(this,a);b.appendChild(a)}})},prepend:function(){return Ha(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=Ca(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return Ha(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return Ha(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},empty:function(){for(var a,b=0;null!=(a=this[b]);b++){1===a.nodeType&&n.cleanData(ea(a,!1));while(a.firstChild)a.removeChild(a.firstChild);a.options&&n.nodeName(a,"select")&&(a.options.length=0)}return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return Y(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a)return 1===b.nodeType?b.innerHTML.replace(ta,""):void 0;if("string"==typeof a&&!wa.test(a)&&(l.htmlSerialize||!ua.test(a))&&(l.leadingWhitespace||!aa.test(a))&&!da[($.exec(a)||["",""])[1].toLowerCase()]){a=n.htmlPrefilter(a);try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(ea(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=[];return Ha(this,arguments,function(b){var c=this.parentNode;n.inArray(this,a)<0&&(n.cleanData(ea(this)),c&&c.replaceChild(b,this))},a)}}),n.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){n.fn[a]=function(a){for(var c,d=0,e=[],f=n(a),h=f.length-1;h>=d;d++)c=d===h?this:this.clone(!0),n(f[d])[b](c),g.apply(e,c.get());return this.pushStack(e)}});var Ja,Ka={HTML:"block",BODY:"block"};function La(a,b){var c=n(b.createElement(a)).appendTo(b.body),d=n.css(c[0],"display");return c.detach(),d}function Ma(a){var b=d,c=Ka[a];return c||(c=La(a,b),"none"!==c&&c||(Ja=(Ja||n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=(Ja[0].contentWindow||Ja[0].contentDocument).document,b.write(),b.close(),c=La(a,b),Ja.detach()),Ka[a]=c),c}var Na=/^margin/,Oa=new RegExp("^("+T+")(?!px)[a-z%]+$","i"),Pa=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e},Qa=d.documentElement;!function(){var b,c,e,f,g,h,i=d.createElement("div"),j=d.createElement("div");if(j.style){j.style.cssText="float:left;opacity:.5",l.opacity="0.5"===j.style.opacity,l.cssFloat=!!j.style.cssFloat,j.style.backgroundClip="content-box",j.cloneNode(!0).style.backgroundClip="",l.clearCloneStyle="content-box"===j.style.backgroundClip,i=d.createElement("div"),i.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",j.innerHTML="",i.appendChild(j),l.boxSizing=""===j.style.boxSizing||""===j.style.MozBoxSizing||""===j.style.WebkitBoxSizing,n.extend(l,{reliableHiddenOffsets:function(){return null==b&&k(),f},boxSizingReliable:function(){return null==b&&k(),e},pixelMarginRight:function(){return null==b&&k(),c},pixelPosition:function(){return null==b&&k(),b},reliableMarginRight:function(){return null==b&&k(),g},reliableMarginLeft:function(){return null==b&&k(),h}});function k(){var k,l,m=d.documentElement;m.appendChild(i),j.style.cssText="-webkit-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",b=e=h=!1,c=g=!0,a.getComputedStyle&&(l=a.getComputedStyle(j),b="1%"!==(l||{}).top,h="2px"===(l||{}).marginLeft,e="4px"===(l||{width:"4px"}).width,j.style.marginRight="50%",c="4px"===(l||{marginRight:"4px"}).marginRight,k=j.appendChild(d.createElement("div")),k.style.cssText=j.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",k.style.marginRight=k.style.width="0",j.style.width="1px",g=!parseFloat((a.getComputedStyle(k)||{}).marginRight),j.removeChild(k)),j.style.display="none",f=0===j.getClientRects().length,f&&(j.style.display="",j.innerHTML="<table><tr><td></td><td>t</td></tr></table>",j.childNodes[0].style.borderCollapse="separate",k=j.getElementsByTagName("td"),k[0].style.cssText="margin:0;border:0;padding:0;display:none",f=0===k[0].offsetHeight,f&&(k[0].style.display="",k[1].style.display="none",f=0===k[0].offsetHeight)),m.removeChild(i)}}}();var Ra,Sa,Ta=/^(top|right|bottom|left)$/;a.getComputedStyle?(Ra=function(b){var c=b.ownerDocument.defaultView;return c&&c.opener||(c=a),c.getComputedStyle(b)},Sa=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Ra(a),g=c?c.getPropertyValue(b)||c[b]:void 0,""!==g&&void 0!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),c&&!l.pixelMarginRight()&&Oa.test(g)&&Na.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f),void 0===g?g:g+""}):Qa.currentStyle&&(Ra=function(a){return a.currentStyle},Sa=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Ra(a),g=c?c[b]:void 0,null==g&&h&&h[b]&&(g=h[b]),Oa.test(g)&&!Ta.test(b)&&(d=h.left,e=a.runtimeStyle,f=e&&e.left,f&&(e.left=a.currentStyle.left),h.left="fontSize"===b?"1em":g,g=h.pixelLeft+"px",h.left=d,f&&(e.left=f)),void 0===g?g:g+""||"auto"});function Ua(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}var Va=/alpha\([^)]*\)/i,Wa=/opacity\s*=\s*([^)]*)/i,Xa=/^(none|table(?!-c[ea]).+)/,Ya=new RegExp("^("+T+")(.*)$","i"),Za={position:"absolute",visibility:"hidden",display:"block"},$a={letterSpacing:"0",fontWeight:"400"},_a=["Webkit","O","Moz","ms"],ab=d.createElement("div").style;function bb(a){if(a in ab)return a;var b=a.charAt(0).toUpperCase()+a.slice(1),c=_a.length;while(c--)if(a=_a[c]+b,a in ab)return a}function cb(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=n._data(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&W(d)&&(f[g]=n._data(d,"olddisplay",Ma(d.nodeName)))):(e=W(d),(c&&"none"!==c||!e)&&n._data(d,"olddisplay",e?c:n.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}function db(a,b,c){var d=Ya.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function eb(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=n.css(a,c+V[f],!0,e)),d?("content"===c&&(g-=n.css(a,"padding"+V[f],!0,e)),"margin"!==c&&(g-=n.css(a,"border"+V[f]+"Width",!0,e))):(g+=n.css(a,"padding"+V[f],!0,e),"padding"!==c&&(g+=n.css(a,"border"+V[f]+"Width",!0,e)));return g}function fb(a,b,c){var d=!0,e="width"===b?a.offsetWidth:a.offsetHeight,f=Ra(a),g=l.boxSizing&&"border-box"===n.css(a,"boxSizing",!1,f);if(0>=e||null==e){if(e=Sa(a,b,f),(0>e||null==e)&&(e=a.style[b]),Oa.test(e))return e;d=g&&(l.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+eb(a,b,c||(g?"border":"content"),d,f)+"px"}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Sa(a,"opacity");return""===c?"1":c}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":l.cssFloat?"cssFloat":"styleFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;if(b=n.cssProps[h]||(n.cssProps[h]=bb(h)||h),g=n.cssHooks[b]||n.cssHooks[h],void 0===c)return g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b];if(f=typeof c,"string"===f&&(e=U.exec(c))&&e[1]&&(c=X(a,b,e),f="number"),null!=c&&c===c&&("number"===f&&(c+=e&&e[3]||(n.cssNumber[h]?"":"px")),l.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),!(g&&"set"in g&&void 0===(c=g.set(a,c,d)))))try{i[b]=c}catch(j){}}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=bb(h)||h),g=n.cssHooks[b]||n.cssHooks[h],g&&"get"in g&&(f=g.get(a,!0,c)),void 0===f&&(f=Sa(a,b,d)),"normal"===f&&b in $a&&(f=$a[b]),""===c||c?(e=parseFloat(f),c===!0||isFinite(e)?e||0:f):f}}),n.each(["height","width"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?Xa.test(n.css(a,"display"))&&0===a.offsetWidth?Pa(a,Za,function(){return fb(a,b,d)}):fb(a,b,d):void 0},set:function(a,c,d){var e=d&&Ra(a);return db(a,c,d?eb(a,b,d,l.boxSizing&&"border-box"===n.css(a,"boxSizing",!1,e),e):0)}}}),l.opacity||(n.cssHooks.opacity={get:function(a,b){return Wa.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle,e=n.isNumeric(b)?"alpha(opacity="+100*b+")":"",f=d&&d.filter||c.filter||"";c.zoom=1,(b>=1||""===b)&&""===n.trim(f.replace(Va,""))&&c.removeAttribute&&(c.removeAttribute("filter"),""===b||d&&!d.filter)||(c.filter=Va.test(f)?f.replace(Va,e):f+" "+e)}}),n.cssHooks.marginRight=Ua(l.reliableMarginRight,function(a,b){return b?Pa(a,{display:"inline-block"},Sa,[a,"marginRight"]):void 0}),n.cssHooks.marginLeft=Ua(l.reliableMarginLeft,function(a,b){return b?(parseFloat(Sa(a,"marginLeft"))||(n.contains(a.ownerDocument,a)?a.getBoundingClientRect().left-Pa(a,{
marginLeft:0},function(){return a.getBoundingClientRect().left}):0))+"px":void 0}),n.each({margin:"",padding:"",border:"Width"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+V[d]+b]=f[d]||f[d-2]||f[0];return e}},Na.test(a)||(n.cssHooks[a+b].set=db)}),n.fn.extend({css:function(a,b){return Y(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=Ra(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)},a,b,arguments.length>1)},show:function(){return cb(this,!0)},hide:function(){return cb(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){W(this)?n(this).show():n(this).hide()})}});function gb(a,b,c,d,e){return new gb.prototype.init(a,b,c,d,e)}n.Tween=gb,gb.prototype={constructor:gb,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||n.easing._default,this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?"":"px")},cur:function(){var a=gb.propHooks[this.prop];return a&&a.get?a.get(this):gb.propHooks._default.get(this)},run:function(a){var b,c=gb.propHooks[this.prop];return this.options.duration?this.pos=b=n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):gb.propHooks._default.set(this),this}},gb.prototype.init.prototype=gb.prototype,gb.propHooks={_default:{get:function(a){var b;return 1!==a.elem.nodeType||null!=a.elem[a.prop]&&null==a.elem.style[a.prop]?a.elem[a.prop]:(b=n.css(a.elem,a.prop,""),b&&"auto"!==b?b:0)},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):1!==a.elem.nodeType||null==a.elem.style[n.cssProps[a.prop]]&&!n.cssHooks[a.prop]?a.elem[a.prop]=a.now:n.style(a.elem,a.prop,a.now+a.unit)}}},gb.propHooks.scrollTop=gb.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2},_default:"swing"},n.fx=gb.prototype.init,n.fx.step={};var hb,ib,jb=/^(?:toggle|show|hide)$/,kb=/queueHooks$/;function lb(){return a.setTimeout(function(){hb=void 0}),hb=n.now()}function mb(a,b){var c,d={height:a},e=0;for(b=b?1:0;4>e;e+=2-b)c=V[e],d["margin"+c]=d["padding"+c]=a;return b&&(d.opacity=d.width=a),d}function nb(a,b,c){for(var d,e=(qb.tweeners[b]||[]).concat(qb.tweeners["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function ob(a,b,c){var d,e,f,g,h,i,j,k,m=this,o={},p=a.style,q=a.nodeType&&W(a),r=n._data(a,"fxshow");c.queue||(h=n._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,m.always(function(){m.always(function(){h.unqueued--,n.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[p.overflow,p.overflowX,p.overflowY],j=n.css(a,"display"),k="none"===j?n._data(a,"olddisplay")||Ma(a.nodeName):j,"inline"===k&&"none"===n.css(a,"float")&&(l.inlineBlockNeedsLayout&&"inline"!==Ma(a.nodeName)?p.zoom=1:p.display="inline-block")),c.overflow&&(p.overflow="hidden",l.shrinkWrapBlocks()||m.always(function(){p.overflow=c.overflow[0],p.overflowX=c.overflow[1],p.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],jb.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(q?"hide":"show")){if("show"!==e||!r||void 0===r[d])continue;q=!0}o[d]=r&&r[d]||n.style(a,d)}else j=void 0;if(n.isEmptyObject(o))"inline"===("none"===j?Ma(a.nodeName):j)&&(p.display=j);else{r?"hidden"in r&&(q=r.hidden):r=n._data(a,"fxshow",{}),f&&(r.hidden=!q),q?n(a).show():m.done(function(){n(a).hide()}),m.done(function(){var b;n._removeData(a,"fxshow");for(b in o)n.style(a,b,o[b])});for(d in o)g=nb(q?r[d]:0,d,m),d in r||(r[d]=g.start,q&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function pb(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=n.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function qb(a,b,c){var d,e,f=0,g=qb.prefilters.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=hb||lb(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{},easing:n.easing._default},c),originalProperties:b,originalOptions:c,startTime:hb||lb(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?(h.notifyWith(a,[j,1,0]),h.resolveWith(a,[j,b])):h.rejectWith(a,[j,b]),this}}),k=j.props;for(pb(k,j.opts.specialEasing);g>f;f++)if(d=qb.prefilters[f].call(j,a,k,j.opts))return n.isFunction(d.stop)&&(n._queueHooks(j.elem,j.opts.queue).stop=n.proxy(d.stop,d)),d;return n.map(k,nb,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend(qb,{tweeners:{"*":[function(a,b){var c=this.createTween(a,b);return X(c.elem,a,U.exec(b),c),c}]},tweener:function(a,b){n.isFunction(a)?(b=a,a=["*"]):a=a.match(G);for(var c,d=0,e=a.length;e>d;d++)c=a[d],qb.tweeners[c]=qb.tweeners[c]||[],qb.tweeners[c].unshift(b)},prefilters:[ob],prefilter:function(a,b){b?qb.prefilters.unshift(a):qb.prefilters.push(a)}}),n.speed=function(a,b,c){var d=a&&"object"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,null!=d.queue&&d.queue!==!0||(d.queue="fx"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(W).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=qb(this,n.extend({},a),f);(e||n._data(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=n.timers,g=n._data(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&kb.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));!b&&c||n.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=n._data(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each(["toggle","show","hide"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(mb(b,!0),a,d,e)}}),n.each({slideDown:mb("show"),slideUp:mb("hide"),slideToggle:mb("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=n.timers,c=0;for(hb=n.now();c<b.length;c++)a=b[c],a()||b[c]!==a||b.splice(c--,1);b.length||n.fx.stop(),hb=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){ib||(ib=a.setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){a.clearInterval(ib),ib=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(b,c){return b=n.fx?n.fx.speeds[b]||b:b,c=c||"fx",this.queue(c,function(c,d){var e=a.setTimeout(c,b);d.stop=function(){a.clearTimeout(e)}})},function(){var a,b=d.createElement("input"),c=d.createElement("div"),e=d.createElement("select"),f=e.appendChild(d.createElement("option"));c=d.createElement("div"),c.setAttribute("className","t"),c.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",a=c.getElementsByTagName("a")[0],b.setAttribute("type","checkbox"),c.appendChild(b),a=c.getElementsByTagName("a")[0],a.style.cssText="top:1px",l.getSetAttribute="t"!==c.className,l.style=/top/.test(a.getAttribute("style")),l.hrefNormalized="/a"===a.getAttribute("href"),l.checkOn=!!b.value,l.optSelected=f.selected,l.enctype=!!d.createElement("form").enctype,e.disabled=!0,l.optDisabled=!f.disabled,b=d.createElement("input"),b.setAttribute("value",""),l.input=""===b.getAttribute("value"),b.value="t",b.setAttribute("type","radio"),l.radioValue="t"===b.value}();var rb=/\r/g,sb=/[\x20\t\r\n\f]+/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e="":"number"==typeof e?e+="":n.isArray(e)&&(e=n.map(e,function(a){return null==a?"":a+""})),b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(rb,""):null==c?"":c)}}}),n.extend({valHooks:{option:{get:function(a){var b=n.find.attr(a,"value");return null!=b?b:n.trim(n.text(a)).replace(sb," ")}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],(c.selected||i===e)&&(l.optDisabled?!c.disabled:null===c.getAttribute("disabled"))&&(!c.parentNode.disabled||!n.nodeName(c.parentNode,"optgroup"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)if(d=e[g],n.inArray(n.valHooks.option.get(d),f)>-1)try{d.selected=c=!0}catch(h){d.scrollHeight}else d.selected=!1;return c||(a.selectedIndex=-1),e}}}}),n.each(["radio","checkbox"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>-1:void 0}},l.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})});var tb,ub,vb=n.expr.attrHandle,wb=/^(?:checked|selected)$/i,xb=l.getSetAttribute,yb=l.input;n.fn.extend({attr:function(a,b){return Y(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return"undefined"==typeof a.getAttribute?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),e=n.attrHooks[b]||(n.expr.match.bool.test(b)?ub:tb)),void 0!==c?null===c?void n.removeAttr(a,b):e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:(a.setAttribute(b,c+""),c):e&&"get"in e&&null!==(d=e.get(a,b))?d:(d=n.find.attr(a,b),null==d?void 0:d))},attrHooks:{type:{set:function(a,b){if(!l.radioValue&&"radio"===b&&n.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(G);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)?yb&&xb||!wb.test(c)?a[d]=!1:a[n.camelCase("default-"+c)]=a[d]=!1:n.attr(a,c,""),a.removeAttribute(xb?c:d)}}),ub={set:function(a,b,c){return b===!1?n.removeAttr(a,c):yb&&xb||!wb.test(c)?a.setAttribute(!xb&&n.propFix[c]||c,c):a[n.camelCase("default-"+c)]=a[c]=!0,c}},n.each(n.expr.match.bool.source.match(/\w+/g),function(a,b){var c=vb[b]||n.find.attr;yb&&xb||!wb.test(b)?vb[b]=function(a,b,d){var e,f;return d||(f=vb[b],vb[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,vb[b]=f),e}:vb[b]=function(a,b,c){return c?void 0:a[n.camelCase("default-"+b)]?b.toLowerCase():null}}),yb&&xb||(n.attrHooks.value={set:function(a,b,c){return n.nodeName(a,"input")?void(a.defaultValue=b):tb&&tb.set(a,b,c)}}),xb||(tb={set:function(a,b,c){var d=a.getAttributeNode(c);return d||a.setAttributeNode(d=a.ownerDocument.createAttribute(c)),d.value=b+="","value"===c||b===a.getAttribute(c)?b:void 0}},vb.id=vb.name=vb.coords=function(a,b,c){var d;return c?void 0:(d=a.getAttributeNode(b))&&""!==d.value?d.value:null},n.valHooks.button={get:function(a,b){var c=a.getAttributeNode(b);return c&&c.specified?c.value:void 0},set:tb.set},n.attrHooks.contenteditable={set:function(a,b,c){tb.set(a,""===b?!1:b,c)}},n.each(["width","height"],function(a,b){n.attrHooks[b]={set:function(a,c){return""===c?(a.setAttribute(b,"auto"),c):void 0}}})),l.style||(n.attrHooks.style={get:function(a){return a.style.cssText||void 0},set:function(a,b){return a.style.cssText=b+""}});var zb=/^(?:input|select|textarea|button|object)$/i,Ab=/^(?:a|area)$/i;n.fn.extend({prop:function(a,b){return Y(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return a=n.propFix[a]||a,this.each(function(){try{this[a]=void 0,delete this[a]}catch(b){}})}}),n.extend({prop:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return 1===f&&n.isXMLDoc(a)||(b=n.propFix[b]||b,e=n.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=n.find.attr(a,"tabindex");return b?parseInt(b,10):zb.test(a.nodeName)||Ab.test(a.nodeName)&&a.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),l.hrefNormalized||n.each(["href","src"],function(a,b){n.propHooks[b]={get:function(a){return a.getAttribute(b,4)}}}),l.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex),null},set:function(a){var b=a.parentNode;b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex)}}),n.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){n.propFix[this.toLowerCase()]=this}),l.enctype||(n.propFix.enctype="encoding");var Bb=/[\t\r\n\f]/g;function Cb(a){return n.attr(a,"class")||""}n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h,i=0;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,Cb(this)))});if("string"==typeof a&&a){b=a.match(G)||[];while(c=this[i++])if(e=Cb(c),d=1===c.nodeType&&(" "+e+" ").replace(Bb," ")){g=0;while(f=b[g++])d.indexOf(" "+f+" ")<0&&(d+=f+" ");h=n.trim(d),e!==h&&n.attr(c,"class",h)}}return this},removeClass:function(a){var b,c,d,e,f,g,h,i=0;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,Cb(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof a&&a){b=a.match(G)||[];while(c=this[i++])if(e=Cb(c),d=1===c.nodeType&&(" "+e+" ").replace(Bb," ")){g=0;while(f=b[g++])while(d.indexOf(" "+f+" ")>-1)d=d.replace(" "+f+" "," ");h=n.trim(d),e!==h&&n.attr(c,"class",h)}}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):n.isFunction(a)?this.each(function(c){n(this).toggleClass(a.call(this,c,Cb(this),b),b)}):this.each(function(){var b,d,e,f;if("string"===c){d=0,e=n(this),f=a.match(G)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else void 0!==a&&"boolean"!==c||(b=Cb(this),b&&n._data(this,"__className__",b),n.attr(this,"class",b||a===!1?"":n._data(this,"__className__")||""))})},hasClass:function(a){var b,c,d=0;b=" "+a+" ";while(c=this[d++])if(1===c.nodeType&&(" "+Cb(c)+" ").replace(Bb," ").indexOf(b)>-1)return!0;return!1}}),n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}});var Db=a.location,Eb=n.now(),Fb=/\?/,Gb=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;n.parseJSON=function(b){if(a.JSON&&a.JSON.parse)return a.JSON.parse(b+"");var c,d=null,e=n.trim(b+"");return e&&!n.trim(e.replace(Gb,function(a,b,e,f){return c&&b&&(d=0),0===d?a:(c=e||b,d+=!f-!e,"")}))?Function("return "+e)():n.error("Invalid JSON: "+b)},n.parseXML=function(b){var c,d;if(!b||"string"!=typeof b)return null;try{a.DOMParser?(d=new a.DOMParser,c=d.parseFromString(b,"text/xml")):(c=new a.ActiveXObject("Microsoft.XMLDOM"),c.async="false",c.loadXML(b))}catch(e){c=void 0}return c&&c.documentElement&&!c.getElementsByTagName("parsererror").length||n.error("Invalid XML: "+b),c};var Hb=/#.*$/,Ib=/([?&])_=[^&]*/,Jb=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Kb=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Lb=/^(?:GET|HEAD)$/,Mb=/^\/\//,Nb=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,Ob={},Pb={},Qb="*/".concat("*"),Rb=Db.href,Sb=Nb.exec(Rb.toLowerCase())||[];function Tb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(G)||[];if(n.isFunction(c))while(d=f[e++])"+"===d.charAt(0)?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function Ub(a,b,c,d){var e={},f=a===Pb;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function Vb(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(d in b)void 0!==b[d]&&((e[d]?a:c||(c={}))[d]=b[d]);return c&&n.extend(!0,a,c),a}function Wb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===e&&(e=a.mimeType||b.getResponseHeader("Content-Type"));if(e)for(g in h)if(h[g]&&h[g].test(e)){i.unshift(g);break}if(i[0]in c)f=i[0];else{for(g in c){if(!i[0]||a.converters[g+" "+i[0]]){f=g;break}d||(d=g)}f=f||d}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function Xb(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Rb,type:"GET",isLocal:Kb.test(Sb[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Qb,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":n.parseJSON,"text xml":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?Vb(Vb(a,n.ajaxSettings),b):Vb(n.ajaxSettings,a)},ajaxPrefilter:Tb(Ob),ajaxTransport:Tb(Pb),ajax:function(b,c){"object"==typeof b&&(c=b,b=void 0),c=c||{};var d,e,f,g,h,i,j,k,l=n.ajaxSetup({},c),m=l.context||l,o=l.context&&(m.nodeType||m.jquery)?n(m):n.event,p=n.Deferred(),q=n.Callbacks("once memory"),r=l.statusCode||{},s={},t={},u=0,v="canceled",w={readyState:0,getResponseHeader:function(a){var b;if(2===u){if(!k){k={};while(b=Jb.exec(g))k[b[1].toLowerCase()]=b[2]}b=k[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===u?g:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return u||(a=t[c]=t[c]||a,s[a]=b),this},overrideMimeType:function(a){return u||(l.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>u)for(b in a)r[b]=[r[b],a[b]];else w.always(a[w.status]);return this},abort:function(a){var b=a||v;return j&&j.abort(b),y(0,b),this}};if(p.promise(w).complete=q.add,w.success=w.done,w.error=w.fail,l.url=((b||l.url||Rb)+"").replace(Hb,"").replace(Mb,Sb[1]+"//"),l.type=c.method||c.type||l.method||l.type,l.dataTypes=n.trim(l.dataType||"*").toLowerCase().match(G)||[""],null==l.crossDomain&&(d=Nb.exec(l.url.toLowerCase()),l.crossDomain=!(!d||d[1]===Sb[1]&&d[2]===Sb[2]&&(d[3]||("http:"===d[1]?"80":"443"))===(Sb[3]||("http:"===Sb[1]?"80":"443")))),l.data&&l.processData&&"string"!=typeof l.data&&(l.data=n.param(l.data,l.traditional)),Ub(Ob,l,c,w),2===u)return w;i=n.event&&l.global,i&&0===n.active++&&n.event.trigger("ajaxStart"),l.type=l.type.toUpperCase(),l.hasContent=!Lb.test(l.type),f=l.url,l.hasContent||(l.data&&(f=l.url+=(Fb.test(f)?"&":"?")+l.data,delete l.data),l.cache===!1&&(l.url=Ib.test(f)?f.replace(Ib,"$1_="+Eb++):f+(Fb.test(f)?"&":"?")+"_="+Eb++)),l.ifModified&&(n.lastModified[f]&&w.setRequestHeader("If-Modified-Since",n.lastModified[f]),n.etag[f]&&w.setRequestHeader("If-None-Match",n.etag[f])),(l.data&&l.hasContent&&l.contentType!==!1||c.contentType)&&w.setRequestHeader("Content-Type",l.contentType),w.setRequestHeader("Accept",l.dataTypes[0]&&l.accepts[l.dataTypes[0]]?l.accepts[l.dataTypes[0]]+("*"!==l.dataTypes[0]?", "+Qb+"; q=0.01":""):l.accepts["*"]);for(e in l.headers)w.setRequestHeader(e,l.headers[e]);if(l.beforeSend&&(l.beforeSend.call(m,w,l)===!1||2===u))return w.abort();v="abort";for(e in{success:1,error:1,complete:1})w[e](l[e]);if(j=Ub(Pb,l,c,w)){if(w.readyState=1,i&&o.trigger("ajaxSend",[w,l]),2===u)return w;l.async&&l.timeout>0&&(h=a.setTimeout(function(){w.abort("timeout")},l.timeout));try{u=1,j.send(s,y)}catch(x){if(!(2>u))throw x;y(-1,x)}}else y(-1,"No Transport");function y(b,c,d,e){var k,s,t,v,x,y=c;2!==u&&(u=2,h&&a.clearTimeout(h),j=void 0,g=e||"",w.readyState=b>0?4:0,k=b>=200&&300>b||304===b,d&&(v=Wb(l,w,d)),v=Xb(l,v,w,k),k?(l.ifModified&&(x=w.getResponseHeader("Last-Modified"),x&&(n.lastModified[f]=x),x=w.getResponseHeader("etag"),x&&(n.etag[f]=x)),204===b||"HEAD"===l.type?y="nocontent":304===b?y="notmodified":(y=v.state,s=v.data,t=v.error,k=!t)):(t=y,!b&&y||(y="error",0>b&&(b=0))),w.status=b,w.statusText=(c||y)+"",k?p.resolveWith(m,[s,y,w]):p.rejectWith(m,[w,y,t]),w.statusCode(r),r=void 0,i&&o.trigger(k?"ajaxSuccess":"ajaxError",[w,l,k?s:t]),q.fireWith(m,[w,y]),i&&(o.trigger("ajaxComplete",[w,l]),--n.active||n.event.trigger("ajaxStop")))}return w},getJSON:function(a,b,c){return n.get(a,b,c,"json")},getScript:function(a,b){return n.get(a,void 0,b,"script")}}),n.each(["get","post"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax(n.extend({url:a,type:b,dataType:e,data:c,success:d},n.isPlainObject(a)&&a))}}),n._evalUrl=function(a){return n.ajax({url:a,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})},n.fn.extend({wrapAll:function(a){if(n.isFunction(a))return this.each(function(b){n(this).wrapAll(a.call(this,b))});if(this[0]){var b=n(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&1===a.firstChild.nodeType)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){return n.isFunction(a)?this.each(function(b){n(this).wrapInner(a.call(this,b))}):this.each(function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,"body")||n(this).replaceWith(this.childNodes)}).end()}});function Yb(a){return a.style&&a.style.display||n.css(a,"display")}function Zb(a){if(!n.contains(a.ownerDocument||d,a))return!0;while(a&&1===a.nodeType){if("none"===Yb(a)||"hidden"===a.type)return!0;a=a.parentNode}return!1}n.expr.filters.hidden=function(a){return l.reliableHiddenOffsets()?a.offsetWidth<=0&&a.offsetHeight<=0&&!a.getClientRects().length:Zb(a)},n.expr.filters.visible=function(a){return!n.expr.filters.hidden(a)};var $b=/%20/g,_b=/\[\]$/,ac=/\r?\n/g,bc=/^(?:submit|button|image|reset|file)$/i,cc=/^(?:input|select|textarea|keygen)/i;function dc(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||_b.test(a)?d(a,e):dc(a+"["+("object"==typeof e&&null!=e?b:"")+"]",e,c,d)});else if(c||"object"!==n.type(b))d(a,b);else for(e in b)dc(a+"["+e+"]",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)dc(c,a[c],b,e);return d.join("&").replace($b,"+")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,"elements");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(":disabled")&&cc.test(this.nodeName)&&!bc.test(a)&&(this.checked||!Z.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(ac,"\r\n")}}):{name:b.name,value:c.replace(ac,"\r\n")}}).get()}}),n.ajaxSettings.xhr=void 0!==a.ActiveXObject?function(){return this.isLocal?ic():d.documentMode>8?hc():/^(get|post|head|put|delete|options)$/i.test(this.type)&&hc()||ic()}:hc;var ec=0,fc={},gc=n.ajaxSettings.xhr();a.attachEvent&&a.attachEvent("onunload",function(){for(var a in fc)fc[a](void 0,!0)}),l.cors=!!gc&&"withCredentials"in gc,gc=l.ajax=!!gc,gc&&n.ajaxTransport(function(b){if(!b.crossDomain||l.cors){var c;return{send:function(d,e){var f,g=b.xhr(),h=++ec;if(g.open(b.type,b.url,b.async,b.username,b.password),b.xhrFields)for(f in b.xhrFields)g[f]=b.xhrFields[f];b.mimeType&&g.overrideMimeType&&g.overrideMimeType(b.mimeType),b.crossDomain||d["X-Requested-With"]||(d["X-Requested-With"]="XMLHttpRequest");for(f in d)void 0!==d[f]&&g.setRequestHeader(f,d[f]+"");g.send(b.hasContent&&b.data||null),c=function(a,d){var f,i,j;if(c&&(d||4===g.readyState))if(delete fc[h],c=void 0,g.onreadystatechange=n.noop,d)4!==g.readyState&&g.abort();else{j={},f=g.status,"string"==typeof g.responseText&&(j.text=g.responseText);try{i=g.statusText}catch(k){i=""}f||!b.isLocal||b.crossDomain?1223===f&&(f=204):f=j.text?200:404}j&&e(f,i,j,g.getAllResponseHeaders())},b.async?4===g.readyState?a.setTimeout(c):g.onreadystatechange=fc[h]=c:c()},abort:function(){c&&c(void 0,!0)}}}});function hc(){try{return new a.XMLHttpRequest}catch(b){}}function ic(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}n.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),n.ajaxTransport("script",function(a){if(a.crossDomain){var b,c=d.head||n("head")[0]||d.documentElement;return{send:function(e,f){b=d.createElement("script"),b.async=!0,a.scriptCharset&&(b.charset=a.scriptCharset),b.src=a.url,b.onload=b.onreadystatechange=function(a,c){(c||!b.readyState||/loaded|complete/.test(b.readyState))&&(b.onload=b.onreadystatechange=null,b.parentNode&&b.parentNode.removeChild(b),b=null,c||f(200,"success"))},c.insertBefore(b,c.firstChild)},abort:function(){b&&b.onload(void 0,!0)}}}});var jc=[],kc=/(=)\?(?=&|$)|\?\?/;n.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=jc.pop()||n.expando+"_"+Eb++;return this[a]=!0,a}}),n.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(kc.test(b.url)?"url":"string"==typeof b.data&&0===(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&kc.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(kc,"$1"+e):b.jsonp!==!1&&(b.url+=(Fb.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||n.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){void 0===f?n(a).removeProp(e):a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,jc.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),n.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||d;var e=x.exec(a),f=!c&&[];return e?[b.createElement(e[1])]:(e=ja([a],b,f),f&&f.length&&n(f).remove(),n.merge([],e.childNodes))};var lc=n.fn.load;n.fn.load=function(a,b,c){if("string"!=typeof a&&lc)return lc.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>-1&&(d=n.trim(a.slice(h,a.length)),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&n.ajax({url:a,type:e||"GET",dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?n("<div>").append(n.parseHTML(a)).find(d):a)}).always(c&&function(a,b){g.each(function(){c.apply(this,f||[a.responseText,b,a])})}),this},n.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};function mc(a){return n.isWindow(a)?a:9===a.nodeType?a.defaultView||a.parentWindow:!1}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,"position"),l=n(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=n.css(a,"top"),i=n.css(a,"left"),j=("absolute"===k||"fixed"===k)&&n.inArray("auto",[f,i])>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,n.extend({},h))),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d={top:0,left:0},e=this[0],f=e&&e.ownerDocument;if(f)return b=f.documentElement,n.contains(b,e)?("undefined"!=typeof e.getBoundingClientRect&&(d=e.getBoundingClientRect()),c=mc(f),{top:d.top+(c.pageYOffset||b.scrollTop)-(b.clientTop||0),left:d.left+(c.pageXOffset||b.scrollLeft)-(b.clientLeft||0)}):d},position:function(){if(this[0]){var a,b,c={top:0,left:0},d=this[0];return"fixed"===n.css(d,"position")?b=d.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],"html")||(c=a.offset()),c.top+=n.css(a[0],"borderTopWidth",!0),c.left+=n.css(a[0],"borderLeftWidth",!0)),{top:b.top-c.top-n.css(d,"marginTop",!0),left:b.left-c.left-n.css(d,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent;while(a&&!n.nodeName(a,"html")&&"static"===n.css(a,"position"))a=a.offsetParent;return a||Qa})}}),n.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,b){var c=/Y/.test(b);n.fn[a]=function(d){return Y(this,function(a,d,e){var f=mc(a);return void 0===e?f?b in f?f[b]:f.document.documentElement[d]:a[d]:void(f?f.scrollTo(c?n(f).scrollLeft():e,c?e:n(f).scrollTop()):a[d]=e)},a,d,arguments.length,null)}}),n.each(["top","left"],function(a,b){n.cssHooks[b]=Ua(l.pixelPosition,function(a,c){return c?(c=Sa(a,b),Oa.test(c)?n(a).position()[b]+"px":c):void 0})}),n.each({Height:"height",Width:"width"},function(a,b){n.each({
padding:"inner"+a,content:b,"":"outer"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return Y(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.extend({bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}}),n.fn.size=function(){return this.length},n.fn.andSelf=n.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return n});var nc=a.jQuery,oc=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=oc),b&&a.jQuery===n&&(a.jQuery=nc),n},b||(a.jQuery=a.$=n),n});
jQuery.noConflict();
;
/*! jQuery Migrate v1.4.1 | (c) jQuery Foundation and other contributors | jquery.org/license */
"undefined"==typeof jQuery.migrateMute&&(jQuery.migrateMute=!0),function(a,b,c){function d(c){var d=b.console;f[c]||(f[c]=!0,a.migrateWarnings.push(c),d&&d.warn&&!a.migrateMute&&(d.warn("JQMIGRATE: "+c),a.migrateTrace&&d.trace&&d.trace()))}function e(b,c,e,f){if(Object.defineProperty)try{return void Object.defineProperty(b,c,{configurable:!0,enumerable:!0,get:function(){return d(f),e},set:function(a){d(f),e=a}})}catch(g){}a._definePropertyBroken=!0,b[c]=e}a.migrateVersion="1.4.1";var f={};a.migrateWarnings=[],b.console&&b.console.log&&b.console.log("JQMIGRATE: Migrate is installed"+(a.migrateMute?"":" with logging active")+", version "+a.migrateVersion),a.migrateTrace===c&&(a.migrateTrace=!0),a.migrateReset=function(){f={},a.migrateWarnings.length=0},"BackCompat"===document.compatMode&&d("jQuery is not compatible with Quirks Mode");var g=a("<input/>",{size:1}).attr("size")&&a.attrFn,h=a.attr,i=a.attrHooks.value&&a.attrHooks.value.get||function(){return null},j=a.attrHooks.value&&a.attrHooks.value.set||function(){return c},k=/^(?:input|button)$/i,l=/^[238]$/,m=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,n=/^(?:checked|selected)$/i;e(a,"attrFn",g||{},"jQuery.attrFn is deprecated"),a.attr=function(b,e,f,i){var j=e.toLowerCase(),o=b&&b.nodeType;return i&&(h.length<4&&d("jQuery.fn.attr( props, pass ) is deprecated"),b&&!l.test(o)&&(g?e in g:a.isFunction(a.fn[e])))?a(b)[e](f):("type"===e&&f!==c&&k.test(b.nodeName)&&b.parentNode&&d("Can't change the 'type' of an input or button in IE 6/7/8"),!a.attrHooks[j]&&m.test(j)&&(a.attrHooks[j]={get:function(b,d){var e,f=a.prop(b,d);return f===!0||"boolean"!=typeof f&&(e=b.getAttributeNode(d))&&e.nodeValue!==!1?d.toLowerCase():c},set:function(b,c,d){var e;return c===!1?a.removeAttr(b,d):(e=a.propFix[d]||d,e in b&&(b[e]=!0),b.setAttribute(d,d.toLowerCase())),d}},n.test(j)&&d("jQuery.fn.attr('"+j+"') might use property instead of attribute")),h.call(a,b,e,f))},a.attrHooks.value={get:function(a,b){var c=(a.nodeName||"").toLowerCase();return"button"===c?i.apply(this,arguments):("input"!==c&&"option"!==c&&d("jQuery.fn.attr('value') no longer gets properties"),b in a?a.value:null)},set:function(a,b){var c=(a.nodeName||"").toLowerCase();return"button"===c?j.apply(this,arguments):("input"!==c&&"option"!==c&&d("jQuery.fn.attr('value', val) no longer sets properties"),void(a.value=b))}};var o,p,q=a.fn.init,r=a.find,s=a.parseJSON,t=/^\s*</,u=/\[(\s*[-\w]+\s*)([~|^$*]?=)\s*([-\w#]*?#[-\w#]*)\s*\]/,v=/\[(\s*[-\w]+\s*)([~|^$*]?=)\s*([-\w#]*?#[-\w#]*)\s*\]/g,w=/^([^<]*)(<[\w\W]+>)([^>]*)$/;a.fn.init=function(b,e,f){var g,h;return b&&"string"==typeof b&&!a.isPlainObject(e)&&(g=w.exec(a.trim(b)))&&g[0]&&(t.test(b)||d("$(html) HTML strings must start with '<' character"),g[3]&&d("$(html) HTML text after last tag is ignored"),"#"===g[0].charAt(0)&&(d("HTML string cannot start with a '#' character"),a.error("JQMIGRATE: Invalid selector string (XSS)")),e&&e.context&&e.context.nodeType&&(e=e.context),a.parseHTML)?q.call(this,a.parseHTML(g[2],e&&e.ownerDocument||e||document,!0),e,f):(h=q.apply(this,arguments),b&&b.selector!==c?(h.selector=b.selector,h.context=b.context):(h.selector="string"==typeof b?b:"",b&&(h.context=b.nodeType?b:e||document)),h)},a.fn.init.prototype=a.fn,a.find=function(a){var b=Array.prototype.slice.call(arguments);if("string"==typeof a&&u.test(a))try{document.querySelector(a)}catch(c){a=a.replace(v,function(a,b,c,d){return"["+b+c+'"'+d+'"]'});try{document.querySelector(a),d("Attribute selector with '#' must be quoted: "+b[0]),b[0]=a}catch(e){d("Attribute selector with '#' was not fixed: "+b[0])}}return r.apply(this,b)};var x;for(x in r)Object.prototype.hasOwnProperty.call(r,x)&&(a.find[x]=r[x]);a.parseJSON=function(a){return a?s.apply(this,arguments):(d("jQuery.parseJSON requires a valid JSON string"),null)},a.uaMatch=function(a){a=a.toLowerCase();var b=/(chrome)[ \/]([\w.]+)/.exec(a)||/(webkit)[ \/]([\w.]+)/.exec(a)||/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(a)||/(msie) ([\w.]+)/.exec(a)||a.indexOf("compatible")<0&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(a)||[];return{browser:b[1]||"",version:b[2]||"0"}},a.browser||(o=a.uaMatch(navigator.userAgent),p={},o.browser&&(p[o.browser]=!0,p.version=o.version),p.chrome?p.webkit=!0:p.webkit&&(p.safari=!0),a.browser=p),e(a,"browser",a.browser,"jQuery.browser is deprecated"),a.boxModel=a.support.boxModel="CSS1Compat"===document.compatMode,e(a,"boxModel",a.boxModel,"jQuery.boxModel is deprecated"),e(a.support,"boxModel",a.support.boxModel,"jQuery.support.boxModel is deprecated"),a.sub=function(){function b(a,c){return new b.fn.init(a,c)}a.extend(!0,b,this),b.superclass=this,b.fn=b.prototype=this(),b.fn.constructor=b,b.sub=this.sub,b.fn.init=function(d,e){var f=a.fn.init.call(this,d,e,c);return f instanceof b?f:b(f)},b.fn.init.prototype=b.fn;var c=b(document);return d("jQuery.sub() is deprecated"),b},a.fn.size=function(){return d("jQuery.fn.size() is deprecated; use the .length property"),this.length};var y=!1;a.swap&&a.each(["height","width","reliableMarginRight"],function(b,c){var d=a.cssHooks[c]&&a.cssHooks[c].get;d&&(a.cssHooks[c].get=function(){var a;return y=!0,a=d.apply(this,arguments),y=!1,a})}),a.swap=function(a,b,c,e){var f,g,h={};y||d("jQuery.swap() is undocumented and deprecated");for(g in b)h[g]=a.style[g],a.style[g]=b[g];f=c.apply(a,e||[]);for(g in b)a.style[g]=h[g];return f},a.ajaxSetup({converters:{"text json":a.parseJSON}});var z=a.fn.data;a.fn.data=function(b){var e,f,g=this[0];return!g||"events"!==b||1!==arguments.length||(e=a.data(g,b),f=a._data(g,b),e!==c&&e!==f||f===c)?z.apply(this,arguments):(d("Use of jQuery.fn.data('events') is deprecated"),f)};var A=/\/(java|ecma)script/i;a.clean||(a.clean=function(b,c,e,f){c=c||document,c=!c.nodeType&&c[0]||c,c=c.ownerDocument||c,d("jQuery.clean() is deprecated");var g,h,i,j,k=[];if(a.merge(k,a.buildFragment(b,c).childNodes),e)for(i=function(a){return!a.type||A.test(a.type)?f?f.push(a.parentNode?a.parentNode.removeChild(a):a):e.appendChild(a):void 0},g=0;null!=(h=k[g]);g++)a.nodeName(h,"script")&&i(h)||(e.appendChild(h),"undefined"!=typeof h.getElementsByTagName&&(j=a.grep(a.merge([],h.getElementsByTagName("script")),i),k.splice.apply(k,[g+1,0].concat(j)),g+=j.length));return k});var B=a.event.add,C=a.event.remove,D=a.event.trigger,E=a.fn.toggle,F=a.fn.live,G=a.fn.die,H=a.fn.load,I="ajaxStart|ajaxStop|ajaxSend|ajaxComplete|ajaxError|ajaxSuccess",J=new RegExp("\\b(?:"+I+")\\b"),K=/(?:^|\s)hover(\.\S+|)\b/,L=function(b){return"string"!=typeof b||a.event.special.hover?b:(K.test(b)&&d("'hover' pseudo-event is deprecated, use 'mouseenter mouseleave'"),b&&b.replace(K,"mouseenter$1 mouseleave$1"))};a.event.props&&"attrChange"!==a.event.props[0]&&a.event.props.unshift("attrChange","attrName","relatedNode","srcElement"),a.event.dispatch&&e(a.event,"handle",a.event.dispatch,"jQuery.event.handle is undocumented and deprecated"),a.event.add=function(a,b,c,e,f){a!==document&&J.test(b)&&d("AJAX events should be attached to document: "+b),B.call(this,a,L(b||""),c,e,f)},a.event.remove=function(a,b,c,d,e){C.call(this,a,L(b)||"",c,d,e)},a.each(["load","unload","error"],function(b,c){a.fn[c]=function(){var a=Array.prototype.slice.call(arguments,0);return"load"===c&&"string"==typeof a[0]?H.apply(this,a):(d("jQuery.fn."+c+"() is deprecated"),a.splice(0,0,c),arguments.length?this.bind.apply(this,a):(this.triggerHandler.apply(this,a),this))}}),a.fn.toggle=function(b,c){if(!a.isFunction(b)||!a.isFunction(c))return E.apply(this,arguments);d("jQuery.fn.toggle(handler, handler...) is deprecated");var e=arguments,f=b.guid||a.guid++,g=0,h=function(c){var d=(a._data(this,"lastToggle"+b.guid)||0)%g;return a._data(this,"lastToggle"+b.guid,d+1),c.preventDefault(),e[d].apply(this,arguments)||!1};for(h.guid=f;g<e.length;)e[g++].guid=f;return this.click(h)},a.fn.live=function(b,c,e){return d("jQuery.fn.live() is deprecated"),F?F.apply(this,arguments):(a(this.context).on(b,this.selector,c,e),this)},a.fn.die=function(b,c){return d("jQuery.fn.die() is deprecated"),G?G.apply(this,arguments):(a(this.context).off(b,this.selector||"**",c),this)},a.event.trigger=function(a,b,c,e){return c||J.test(a)||d("Global events are undocumented and deprecated"),D.call(this,a,b,c||document,e)},a.each(I.split("|"),function(b,c){a.event.special[c]={setup:function(){var b=this;return b!==document&&(a.event.add(document,c+"."+a.guid,function(){a.event.trigger(c,Array.prototype.slice.call(arguments,1),b,!0)}),a._data(this,c,a.guid++)),!1},teardown:function(){return this!==document&&a.event.remove(document,c+"."+a._data(this,c)),!1}}}),a.event.special.ready={setup:function(){this===document&&d("'ready' event is deprecated")}};var M=a.fn.andSelf||a.fn.addBack,N=a.fn.find;if(a.fn.andSelf=function(){return d("jQuery.fn.andSelf() replaced by jQuery.fn.addBack()"),M.apply(this,arguments)},a.fn.find=function(a){var b=N.apply(this,arguments);return b.context=this.context,b.selector=this.selector?this.selector+" "+a:a,b},a.Callbacks){var O=a.Deferred,P=[["resolve","done",a.Callbacks("once memory"),a.Callbacks("once memory"),"resolved"],["reject","fail",a.Callbacks("once memory"),a.Callbacks("once memory"),"rejected"],["notify","progress",a.Callbacks("memory"),a.Callbacks("memory")]];a.Deferred=function(b){var c=O(),e=c.promise();return c.pipe=e.pipe=function(){var b=arguments;return d("deferred.pipe() is deprecated"),a.Deferred(function(d){a.each(P,function(f,g){var h=a.isFunction(b[f])&&b[f];c[g[1]](function(){var b=h&&h.apply(this,arguments);b&&a.isFunction(b.promise)?b.promise().done(d.resolve).fail(d.reject).progress(d.notify):d[g[0]+"With"](this===e?d.promise():this,h?[b]:arguments)})}),b=null}).promise()},c.isResolved=function(){return d("deferred.isResolved is deprecated"),"resolved"===c.state()},c.isRejected=function(){return d("deferred.isRejected is deprecated"),"rejected"===c.state()},b&&b.call(c,c),c}}}(jQuery,window);;
var wpcom_mobile_user_agent_info = {
		
		PLATFORM_WINDOWS : 'windows',
		PLATFORM_IPHONE : 'iphone',
		PLATFORM_IPOD : 'ipod',
		PLATFORM_IPAD : 'ipad',
		PLATFORM_BLACKBERRY : 'blackberry',
		PLATFORM_BLACKBERRY_10 : 'blackberry_10',
		PLATFORM_SYMBIAN : 'symbian_series60',
		PLATFORM_SYMBIAN_S40 : 'symbian_series40',
		PLATFORM_J2ME_MIDP : 'j2me_midp',
		PLATFORM_ANDROID : 'android',
		PLATFORM_ANDROID_TABLET : 'android_tablet',
		PLATFORM_FIREFOX_OS : 'firefoxOS',
		PLATFORM_MOBILE_GENERIC : 'mobile_generic',

		userAgent : false, //Shortcut to the browser User Agent String
		matchedPlatformName : false, //Matched platform name. False otherwise.
		matchedUserAgentName : false, //Matched UA String. False otherwise.
		
		init: function() {
			var t = this;
			try{
				t.userAgent = navigator.userAgent.toLowerCase();
				t.getPlatformName();
				t.getMobileUserAgentName();
			}
			catch(e){
				console.error(e);
			}
		},
		
		initForTest: function(userAgent) {
			var t = this;
			t.matchedPlatformName = false;
			t.matchedUserAgentName = false;
			try{
				t.userAgent = userAgent.toLowerCase();
				t.getPlatformName();
				t.getMobileUserAgentName();
			}
			catch(e){
				console.error(e);
			}
		},
		
		
		/**
		 * This method detects the mobile User Agent name.
		 *
		 * @return string The matched User Agent name, false otherwise.
		 */
		getMobileUserAgentName : function() {
			var t = this;
			if ( false !== t.matchedUserAgentName )
				return t.matchedUserAgentName;

			if ( false === t.userAgent )
				return false;

			if( t.isChromeForIOS() )
				t.matchedUserAgentName = 'chrome-for-ios';
			else if( t.isTwitterForIpad() )
				t.matchedUserAgentName =  'twitter-for-ipad';
			else if( t.isTwitterForIphone() )
				t.matchedUserAgentName =  'twitter-for-iphone';
			else if( t.isIPhoneOrIPod() ) 
				t.matchedUserAgentName = 'iphone';
			else if ( t.isIPad() )
				t.matchedUserAgentName = 'ipad';
			else if( t.isAndroidTablet() )
				t.matchedUserAgentName = 'android_tablet';
			else if( t.isAndroid() )
				t.matchedUserAgentName = 'android';
			else if( t.isBlackberry10() )
				t.matchedUserAgentName = 'blackberry_10';
			else if( t.userAgent.indexOf('blackberry') != -1 )
				t.matchedUserAgentName = 'blackberry';
			else if( t.isBlackberryTablet() )
				t.matchedUserAgentName = 'blackberry_tablet';
			else if( t.isWindowsPhone7() )
				t.matchedUserAgentName = 'win7';
			else if( t.isWindowsPhone8() )
				t.matchedUserAgentName = 'winphone8';
			else if( t.isOperaMini() )
				t.matchedUserAgentName = 'opera-mini';
			else if( t.isOperaMobile() )
				t.matchedUserAgentName = 'opera-mobi';
			else if( t.isKindleFire() )
				t.matchedUserAgentName = 'kindle-fire';
			else if( t.isSymbianPlatform() )
				t.matchedUserAgentName = 'series60';
			else if( t.isFirefoxMobile() )
				t.matchedUserAgentName = 'firefox_mobile';
			else if( t.isFirefoxOS() )
				t.matchedUserAgentName = 'firefoxOS';
			else if( t.isFacebookForIphone() )
				t.matchedUserAgentName = 'facebook-for-iphone';
			else if( t.isFacebookForIpad() )
				t.matchedUserAgentName = 'facebook-for-ipad';
			else if( t.isWordPressForIos())
				t.matchedUserAgentName = 'ios-app';
			else if( t.userAgent.indexOf('iphone') != -1 )
				t.matchedUserAgentName = 'iphone-unknown';
			else if( t.userAgent.indexOf('ipad') != -1 )
				t.matchedUserAgentName = 'ipad-unknown';
			
			return t.matchedUserAgentName ;
		},
		
		getPlatformName : function() {
			var t = this;
			if ( false !== t.matchedPlatformName )
				return t.matchedPlatformName;
			
			if ( false === t.userAgent )
				return false;
			
			if( t.userAgent.indexOf('windows ce') != -1 || t.userAgent.indexOf('windows phone') != -1) {
				t.matchedPlatformName = t.PLATFORM_WINDOWS;
			} else if( t.userAgent.indexOf('ipad') != -1 ) {
				t.matchedPlatformName = t.PLATFORM_IPAD;
			} else if( t.userAgent.indexOf('ipod') != -1 ) {
				t.matchedPlatformName = t.PLATFORM_IPOD;
			} else if( t.userAgent.indexOf('iphone') != -1 ) {
				t.matchedPlatformName = t.PLATFORM_IPHONE;
			} else if( t.userAgent.indexOf('android') != -1 ) {
				if ( t.isAndroidTablet() )
					t.matchedPlatformName = t.PLATFORM_ANDROID_TABLET;
				else
					t.matchedPlatformName = t.PLATFORM_ANDROID;
			} else if( t.isKindleFire() ) {
				t.matchedPlatformName = t.PLATFORM_ANDROID_TABLET;
			} else if( t.isBlackberry10() ) {
				t.matchedPlatformName = t.PLATFORM_BLACKBERRY_10;
			} else if( t.userAgent.indexOf('blackberry') != -1 ) {
				t.matchedPlatformName = t.PLATFORM_BLACKBERRY;
			} else if( t.isBlackberryTablet() ) {
				t.matchedPlatformName = t.PLATFORM_BLACKBERRY;
			} else if( t.isSymbianPlatform() ) {
				t.matchedPlatformName = t.PLATFORM_SYMBIAN;
			} else if( t.isSymbianS40Platform() ) {
				t.matchedPlatformName = t.PLATFORM_SYMBIAN_S40;
			} else if( t.isJ2MEPlatform() ) {
				t.matchedPlatformName = t.PLATFORM_J2ME_MIDP;
			} else if (t.isFirefoxOS()) {			
				t.matchedPlatformName = t.PLATFORM_FIREFOX_OS;
			} else if (t.isFirefoxMobile()) {			
				t.matchedPlatformName = t.PLATFORM_MOBILE_GENERIC;
			}
			
			return t.matchedPlatformName;
		},
		
		
		/**
		 * Detect the blackBerry OS version.
		 * 
		 * Note: This is for smartphones only. Do not work on BB tablets.
		 *
		 */
		getBlackBerryOSVersion : function() {
			var t = this;
			
			if ( false === t.userAgent )
				return false;
			
			if( t.isBlackberry10() )
				return '10';
			
			if( t.userAgent.indexOf('blackberry') == -1)
				return false;
			
			var rv = -1; // Return value assumes failure.
			if ( t.userAgent.indexOf('webkit') != -1 ) { //detecting the BB OS version for devices running OS 6.0 or higher
				var re  = new RegExp(/Version\/([\d\.]+)/i);
			} else {
				//blackberry devices <= 5.XX
				//BlackBerry9000/5.0.0.93 Profile/MIDP-2.0 Configuration/CLDC-1.1 VendorID/179
				var re  = new RegExp(/BlackBerry\w+\/([\d\.]+)/i);
			}
			if (re.exec(t.userAgent) != null)
				rv =  RegExp.$1.toString();
			
			if( -1 == rv )
				return false;
			
			return rv;
		},
		
		/**
		 * Detects if the current UA is iPhone Mobile Safari or another iPhone or iPod Touch Browser.
		 */
		isIPhoneOrIPod : function() {
			var t = this;

			if ( false === t.userAgent )
				return false;

			var isIphone = ( t.userAgent.indexOf('iphone') != -1 || t.userAgent.indexOf('ipod') != -1 );
			var isSafari = ( t.userAgent.indexOf('safari') != -1 );
			
			return( isIphone && isSafari );
		},

		/**
		 * Detects if the current device is an iPad.
		 */
		isIPad : function() {
			var t = this;

			if ( false === t.userAgent )
				return false;

			return( t.userAgent.indexOf('ipad') != -1 && t.userAgent.indexOf('safari') != -1);
		},
		
		
		/**
		*  Detects if the current UA is Chrome for iOS
		*
		*/
		isChromeForIOS : function() {
			var t = this;

			if ( false === t.userAgent )
				return false;
			
			return( t.isIPhoneOrIPod() && t.userAgent.indexOf('crios/') != -1);
		},
		
	    /**
	     * Detects if the current browser is the Native Android browser.
	     * @return boolean true if the browser is Android otherwise false
	     */
		 isAndroid : function() {
			var t = this;
			
			if ( false === t.userAgent )
				return false;
			
			if ( t.userAgent.indexOf('android') != -1 ) {
				if ( t.isOperaMini() || t.isOperaMobile() || t.isFirefoxMobile() )
					return false;
				else
					return true;
			} 
			return false;
		},
		
		/**
		 * Detects if the current browser is the Native Android Tablet browser.
		 * 	Assumes 'Android' should be in the user agent, but not 'mobile'
		 *
		 * @return boolean true if the browser is Android and not 'mobile' otherwise false
		 */
		 isAndroidTablet : function() {
			var t = this;
			
			if ( false === t.userAgent )
				return false;
			
			if( t.userAgent.indexOf('android') != -1 && t.userAgent.indexOf('mobile') == -1) {
				if ( t.isOperaMini() || t.isOperaMobile() || t.isFirefoxMobile() )
					return false;
				else
					return true;
			}
			return false;
		},
		
		
		/**
		 * Detects if the current browser is Opera Mobile
		 *
		 * What is the difference between Opera Mobile and Opera Mini?
		 * - Opera Mobile is a full Internet browser for mobile devices.
		 * - Opera Mini always uses a transcoder to convert the page for a small display.
		 * (it uses Opera advanced server compression technology to compress web content before it gets to a device.
		 *  The rendering engine is on Opera's server.)
		 *
		 * Opera/9.80 (Windows NT 6.1; Opera Mobi/14316; U; en) Presto/2.7.81 Version/11.00"
		 */
		isOperaMobile : function() {
			var t = this;

			if ( false === t.userAgent )
				return false;

			return( t.userAgent.indexOf('opera') != -1 && t.userAgent.indexOf('mobi') != -1);
		},

		/**
		 * Detects if the current browser is Opera Mini
		 *
		 * Opera/8.01 (J2ME/MIDP; Opera Mini/3.0.6306/1528; en; U; ssr)
		 * Opera/9.80 (Android;Opera Mini/6.0.24212/24.746 U;en) Presto/2.5.25 Version/10.5454
		 * Opera/9.80 (iPhone; Opera Mini/5.0.019802/18.738; U; en) Presto/2.4.15
		 * Opera/9.80 (J2ME/iPhone;Opera Mini/5.0.019802/886; U; ja) Presto/2.4.15
		 * Opera/9.80 (J2ME/iPhone;Opera Mini/5.0.019802/886; U; ja) Presto/2.4.15
		 * Opera/9.80 (Series 60; Opera Mini/5.1.22783/23.334; U; en) Presto/2.5.25 Version/10.54
		 * Opera/9.80 (BlackBerry; Opera Mini/5.1.22303/22.387; U; en) Presto/2.5.25 Version/10.54
		 *
		 */
		isOperaMini : function() {
			var t = this;

			if ( false === t.userAgent )
				return false;

			return( t.userAgent.indexOf('opera') != -1 && t.userAgent.indexOf('mini') != -1);
		},

		
		/**
		 * isBlackberry10() can be used to check the User Agent for a BlackBerry 10 device.
		 */
		isBlackberry10 : function() {
			var t = this;

			if ( false === t.userAgent )
				return false;
			
			return( t.userAgent.indexOf('bb10') != -1 && t.userAgent.indexOf('mobile') != -1);
		},
		
		/**
		 * isBlackberryTablet() can be used to check the User Agent for a RIM blackberry tablet
		 * The user agent of the BlackBerry® Tablet OS follows a format similar to the following:
		 * Mozilla/5.0 (PlayBook; U; RIM Tablet OS 1.0.0; en-US) AppleWebKit/534.8+ (KHTML, like Gecko) Version/0.0.1 Safari/534.8+
		 *
		 */
		 isBlackberryTablet : function() {
			var t = this;
			
			if ( false === t.userAgent )
				return false;
			
			return( t.userAgent.indexOf('playbook') != -1 && t.userAgent.indexOf('rim tablet') != -1);
		},
		
		/**
		 * Detects if the current browser is a Windows Phone 7 device.
		 * ex: Mozilla/4.0 (compatible; MSIE 7.0; Windows Phone OS 7.0; Trident/3.1; IEMobile/7.0; LG; GW910)
		 */
		isWindowsPhone7 : function () {
			var t = this;

			if ( false === t.userAgent )
				return false;

			return ( t.userAgent.indexOf('windows phone os 7') != -1 ); 
		},
		
		/**
		 * Detects if the current browser is a Windows Phone 8 device.
		 * ex: Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0; ARM; Touch; IEMobile/10.0; <Manufacturer>; <Device> [;<Operator>])
		 */
		isWindowsPhone8 : function () {
			var t = this;

			if ( false === t.userAgent )
				return false;

			return ( t.userAgent.indexOf('windows phone 8') != -1 );
		},
		
		/**
		 *
		 * Detects if the device platform is J2ME.
		 *
		 */
		isJ2MEPlatform : function () {
			var t = this;

			if ( false === t.userAgent )
				return false;

			if ( t.userAgent.indexOf('j2me/midp') != -1 ) 
				return true;

			if ( t.userAgent.indexOf('midp') != -1 && t.userAgent.indexOf('cldc') != -1 ) 
				return true;

			return false;
		},
		
		
		/**
		 *
		 * Detects if the device platform is the Symbian Series 40.
		 * Nokia Browser for Series 40 is a proxy based browser, previously known as Ovi Browser.
		 * This browser will report 'NokiaBrowser' in the header, however some older version will also report 'OviBrowser'.
		 *
		 */
		isSymbianS40Platform : function() {
			var t = this;

			if ( false === t.userAgent )
				return false;

			if ( t.userAgent.indexOf('series40') != -1 ) {
				if ( t.userAgent.indexOf('nokia') != -1 || t.userAgent.indexOf('ovibrowser') != -1 || t.userAgent.indexOf('nokiabrowser') != -1)
					return true;
			}

			return false;
		},
		
		
		/**
		 *
		 * Detects if the device platform is the Symbian Series 60.
		 *
		 */
		isSymbianPlatform : function() {

			var t = this;

			if ( false === t.userAgent )
				return false;

			if ( t.userAgent.indexOf('webkit') != -1 ) {
				//First, test for WebKit, then make sure it's either Symbian or S60.
				if ( t.userAgent.indexOf('symbian') != -1 || t.userAgent.indexOf('series60') != -1 )
					return true;
				else
					return false;
			} else if ( t.userAgent.indexOf('symbianos') != -1 && t.userAgent.indexOf('series60') != -1 ) {
				return true;
			} else if ( t.userAgent.indexOf('nokia') != -1 && t.userAgent.indexOf('series60') != -1 ) {
				return true;
			} else if (  t.userAgent.indexOf('opera mini') != -1) {
				if( t.userAgent.indexOf('symbianos') != -1 || t.userAgent.indexOf('symbos') != -1 || t.userAgent.indexOf('series 60') != -1 )
					return true;
			}

			return false;
		},

		
		/**
		 * Detects if the current browser is the Kindle Fire Native browser.
		 *
		 * Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_3; en-us; Silk/1.1.0-84) AppleWebKit/533.16 (KHTML, like Gecko) Version/5.0 Safari/533.16 Silk-Accelerated=true
		 * Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_3; en-us; Silk/1.1.0-84) AppleWebKit/533.16 (KHTML, like Gecko) Version/5.0 Safari/533.16 Silk-Accelerated=false
		 *
		 * @return boolean true if the browser is Kindle Fire Native browser otherwise false
		 */
		isKindleFire : function() {
			var t = this;
			
			if ( false === t.userAgent )
				return false;
			
			return( t.userAgent.indexOf('silk/') != -1 && t.userAgent.indexOf('silk-accelerated=') != -1);
		},
		
		/**
		 * Detects if the current browser is Firefox Mobile (Fennec)
		 *
		 * http://www.userAgentstring.com/pages/Fennec/
		 * Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.1.1) Gecko/20110415 Firefox/4.0.2pre Fennec/4.0.1
		 * Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.1b2pre) Gecko/20081015 Fennec/1.0a1
		 */
		isFirefoxMobile : function() {
			var t = this;
		
			if ( false === t.userAgent )
				return false;
			
			if ( t.userAgent.indexOf('fennec') != -1 )
				return true;

			return false;
		},
		
		
		/**
		 * Detects if the current browser is the native FirefoxOS browser
		 * 
		 * Mozilla/5.0 (Mobile; rv:14.0) Gecko/14.0 Firefox/14.0
		 * 
		 */
		isFirefoxOS : function() {
			var t = this;
		
			if ( false === t.userAgent )
				return false;
			
			if ( t.userAgent.indexOf('mozilla') != -1 && t.userAgent.indexOf('mobile') != -1 && t.userAgent.indexOf('gecko') != -1 &&  t.userAgent.indexOf('firefox') != -1 )
				return true;

			return false;
		},
		
		
		/**
		 * Detects if the current UA is Facebook for iPad
		 * - Facebook 4020.0 (iPad; iPhone OS 5.0.1; en_US)
		 * - Mozilla/5.0 (iPad; U; CPU iPhone OS 5_0 like Mac OS X; en_US) AppleWebKit (KHTML, like Gecko) Mobile [FBAN/FBForIPhone;FBAV/4.0.2;FBBV/4020.0;FBDV/iPad2,1;FBMD/iPad;FBSN/iPhone OS;FBSV/5.0;FBSS/1; FBCR/;FBID/tablet;FBLC/en_US;FBSF/1.0]
		 * - Mozilla/5.0 (iPad; CPU OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10A403 [FBAN/FBIOS;FBAV/5.0;FBBV/47423;FBDV/iPad2,1;FBMD/iPad;FBSN/iPhone OS;FBSV/6.0;FBSS/1; FBCR/;FBID/tablet;FBLC/en_US]
		 */
		isFacebookForIpad : function() {
			var t = this;
			
			if ( false === t.userAgent )
				return false;
			
			if ( t.userAgent.indexOf('ipad') == -1 )
				return false;

			if ( t.userAgent.indexOf('facebook') != -1 || t.userAgent.indexOf('fbforiphone') != -1 ||  t.userAgent.indexOf('fban/fbios;') != -1 )
				return true;
			
			return false;
		},
		
		/**
		 * Detects if the current UA is Facebook for iPhone
		 * - Facebook 4020.0 (iPhone; iPhone OS 5.0.1; fr_FR)
		 * - Mozilla/5.0 (iPhone; U; CPU iPhone OS 5_0 like Mac OS X; en_US) AppleWebKit (KHTML, like Gecko) Mobile [FBAN/FBForIPhone;FBAV/4.0.2;FBBV/4020.0;FBDV/iPhone3,1;FBMD/iPhone;FBSN/iPhone OS;FBSV/5.0;FBSS/2; FBCR/O2;FBID/phone;FBLC/en_US;FBSF/2.0]
		 * - Mozilla/5.0 (iPhone; CPU iPhone OS 5_1_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Mobile/9B206 [FBAN/FBIOS;FBAV/5.0;FBBV/47423;FBDV/iPhone3,1;FBMD/iPhone;FBSN/iPhone OS;FBSV/5.1.1;FBSS/2; FBCR/3ITA;FBID/phone;FBLC/en_US]
		 */
		isFacebookForIphone : function() {
			var t = this;
			
			if ( false === t.userAgent )
				return false;
			
			if ( t.userAgent.indexOf('iphone') == -1 )
				return false;

			if ( t.userAgent.indexOf('facebook') != -1 && t.userAgent.indexOf('ipad') == -1  )
				return true;
			else if ( t.userAgent.indexOf('fbforiphone') != -1 && t.userAgent.indexOf('tablet') == -1  )
				return true;
			else if ( t.userAgent.indexOf('fban/fbios;') != -1 && t.userAgent.indexOf('tablet') == -1  ) //FB app v5.0 or higher
				return true;

			return false;
		},
		
		/**
		 *  Detects if the current UA is Twitter for iPhone
		 *  
		 * Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_5 like Mac OS X; nb-no) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8L1 Twitter for iPhone
		 * Mozilla/5.0 (iPhone; CPU iPhone OS 5_1_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Mobile/9B206 Twitter for iPhone
		 */
		isTwitterForIphone : function() {
			var t = this;
			
			if ( false === t.userAgent )
				return false;

			if ( t.userAgent.indexOf('ipad') != -1 )
				return false;

			if ( t.userAgent.indexOf('twitter for iphone') != -1 )
				return true;

			return false;
		},
		
		/**
		 * Detects if the current UA is Twitter for iPad
		 * 
		 * Old version 4.X - Mozilla/5.0 (iPad; U; CPU OS 4_3_5 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Mobile/8L1 Twitter for iPad
		 * Ver 5.0 or Higher - Mozilla/5.0 (iPad; CPU OS 5_1_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Mobile/9B206 Twitter for iPhone 
		 */
		isTwitterForIpad : function() {
			var t = this;
			
			if ( false === t.userAgent )
				return false;

			if ( t.userAgent.indexOf('twitter for ipad') != -1 )
				return true;

			if ( t.userAgent.indexOf('ipad') != -1 && t.userAgent.indexOf('twitter for iphone') != -1  )
				return true;

			return false;
		},
		
		
		/**
		 *  Detects if the current UA is WordPress for iOS
		 */
		isWordPressForIos : function() {
			var t = this;
			
			if ( false === t.userAgent )
				return false;

			if ( t.userAgent.indexOf('wp-iphone') != -1 )
				return true;

			return false;
		}
		
};;
/**
 The MIT License

 Copyright (c) 2010 Daniel Park (http://metaweb.com, http://postmessage.freebaseapps.com)

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 **/
var NO_JQUERY = {};
(function(window, $, undefined) {

     if (!("console" in window)) {
         var c = window.console = {};
         c.log = c.warn = c.error = c.debug = function(){};
     }

     if ($ === NO_JQUERY) {
         // jQuery is optional
         $ = {
             fn: {},
             extend: function() {
                 var a = arguments[0];
                 for (var i=1,len=arguments.length; i<len; i++) {
                     var b = arguments[i];
                     for (var prop in b) {
                         a[prop] = b[prop];
                     }
                 }
                 return a;
             }
         };
     }

     $.fn.pm = function() {
         console.log("usage: \nto send:    $.pm(options)\nto receive: $.pm.bind(type, fn, [origin])");
         return this;
     };

     // send postmessage
     $.pm = window.pm = function(options) {
         pm.send(options);
     };

     // bind postmessage handler
     $.pm.bind = window.pm.bind = function(type, fn, origin, hash, async_reply) {
         pm.bind(type, fn, origin, hash, async_reply === true);
     };

     // unbind postmessage handler
     $.pm.unbind = window.pm.unbind = function(type, fn) {
         pm.unbind(type, fn);
     };

     // default postmessage origin on bind
     $.pm.origin = window.pm.origin = null;

     // default postmessage polling if using location hash to pass postmessages
     $.pm.poll = window.pm.poll = 200;

     var pm = {

         send: function(options) {
             var o = $.extend({}, pm.defaults, options),
             target = o.target;
             if (!o.target) {
                 console.warn("postmessage target window required");
                 return;
             }
             if (!o.type) {
                 console.warn("postmessage type required");
                 return;
             }
             var msg = {data:o.data, type:o.type};
             if (o.success) {
                 msg.callback = pm._callback(o.success);
             }
             if (o.error) {
                 msg.errback = pm._callback(o.error);
             }
             if (("postMessage" in target) && !o.hash) {
                 pm._bind();
                 target.postMessage(JSON.stringify(msg), o.origin || '*');
             }
             else {
                 pm.hash._bind();
                 pm.hash.send(o, msg);
             }
         },

         bind: function(type, fn, origin, hash, async_reply) {
           pm._replyBind ( type, fn, origin, hash, async_reply );
         },

         _replyBind: function(type, fn, origin, hash, isCallback) {
           if (("postMessage" in window) && !hash) {
               pm._bind();
           }
           else {
               pm.hash._bind();
           }
           var l = pm.data("listeners.postmessage");
           if (!l) {
               l = {};
               pm.data("listeners.postmessage", l);
           }
           var fns = l[type];
           if (!fns) {
               fns = [];
               l[type] = fns;
           }
           fns.push({fn:fn, callback: isCallback, origin:origin || $.pm.origin});
         },

         unbind: function(type, fn) {
             var l = pm.data("listeners.postmessage");
             if (l) {
                 if (type) {
                     if (fn) {
                         // remove specific listener
                         var fns = l[type];
                         if (fns) {
                             var m = [];
                             for (var i=0,len=fns.length; i<len; i++) {
                                 var o = fns[i];
                                 if (o.fn !== fn) {
                                     m.push(o);
                                 }
                             }
                             l[type] = m;
                         }
                     }
                     else {
                         // remove all listeners by type
                         delete l[type];
                     }
                 }
                 else {
                     // unbind all listeners of all type
                     for (var i in l) {
                       delete l[i];
                     }
                 }
             }
         },

         data: function(k, v) {
             if (v === undefined) {
                 return pm._data[k];
             }
             pm._data[k] = v;
             return v;
         },

         _data: {},

         _CHARS: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split(''),

         _random: function() {
             var r = [];
             for (var i=0; i<32; i++) {
                 r[i] = pm._CHARS[0 | Math.random() * 32];
             };
             return r.join("");
         },

         _callback: function(fn) {
             var cbs = pm.data("callbacks.postmessage");
             if (!cbs) {
                 cbs = {};
                 pm.data("callbacks.postmessage", cbs);
             }
             var r = pm._random();
             cbs[r] = fn;
             return r;
         },

         _bind: function() {
             // are we already listening to message events on this w?
             if (!pm.data("listening.postmessage")) {
                 if (window.addEventListener) {
                     window.addEventListener("message", pm._dispatch, false);
                 }
                 else if (window.attachEvent) {
                     window.attachEvent("onmessage", pm._dispatch);
                 }
                 pm.data("listening.postmessage", 1);
             }
         },

         _dispatch: function(e) {
             //console.log("$.pm.dispatch", e, this);
             try {
                 var msg = JSON.parse(e.data);
             }
             catch (ex) {
                 //console.warn("postmessage data invalid json: ", ex); //message wasn't meant for pm
                 return;
             }
             if (!msg.type) {
                 //console.warn("postmessage message type required"); //message wasn't meant for pm
                 return;
             }
             var cbs = pm.data("callbacks.postmessage") || {},
             cb = cbs[msg.type];
             if (cb) {
                 cb(msg.data);
             }
             else {
                 var l = pm.data("listeners.postmessage") || {};
                 var fns = l[msg.type] || [];
                 for (var i=0,len=fns.length; i<len; i++) {
                     var o = fns[i];
                     if (o.origin && o.origin !== '*' && e.origin !== o.origin) {
                         console.warn("postmessage message origin mismatch", e.origin, o.origin);
                         if (msg.errback) {
                             // notify post message errback
                             var error = {
                                 message: "postmessage origin mismatch",
                                 origin: [e.origin, o.origin]
                             };
                             pm.send({target:e.source, data:error, type:msg.errback});
                         }
                         continue;
                     }

                     function sendReply ( data ) {
                       if (msg.callback) {
                           pm.send({target:e.source, data:data, type:msg.callback});
                       }
                     }

                     try {
                         if ( o.callback ) {
                           o.fn(msg.data, sendReply, e);
                         } else {
                           sendReply ( o.fn(msg.data, e) );
                         }
                     }
                     catch (ex) {
                         if (msg.errback) {
                             // notify post message errback
                             pm.send({target:e.source, data:ex, type:msg.errback});
                         } else {
                             throw ex;
                         }
                     }
                 };
             }
         }
     };

     // location hash polling
     pm.hash = {

         send: function(options, msg) {
             //console.log("hash.send", target_window, options, msg);
             var target_window = options.target,
             target_url = options.url;
             if (!target_url) {
                 console.warn("postmessage target window url is required");
                 return;
             }
             target_url = pm.hash._url(target_url);
             var source_window,
             source_url = pm.hash._url(window.location.href);
             if (window == target_window.parent) {
                 source_window = "parent";
             }
             else {
                 try {
                     for (var i=0,len=parent.frames.length; i<len; i++) {
                         var f = parent.frames[i];
                         if (f == window) {
                             source_window = i;
                             break;
                         }
                     };
                 }
                 catch(ex) {
                     // Opera: security error trying to access parent.frames x-origin
                     // juse use window.name
                     source_window = window.name;
                 }
             }
             if (source_window == null) {
                 console.warn("postmessage windows must be direct parent/child windows and the child must be available through the parent window.frames list");
                 return;
             }
             var hashmessage = {
                 "x-requested-with": "postmessage",
                 source: {
                     name: source_window,
                     url: source_url
                 },
                 postmessage: msg
             };
             var hash_id = "#x-postmessage-id=" + pm._random();
             target_window.location = target_url + hash_id + encodeURIComponent(JSON.stringify(hashmessage));
         },

         _regex: /^\#x\-postmessage\-id\=(\w{32})/,

         _regex_len: "#x-postmessage-id=".length + 32,

         _bind: function() {
             // are we already listening to message events on this w?
             if (!pm.data("polling.postmessage")) {
                 setInterval(function() {
                                 var hash = "" + window.location.hash,
                                 m = pm.hash._regex.exec(hash);
                                 if (m) {
                                     var id = m[1];
                                     if (pm.hash._last !== id) {
                                         pm.hash._last = id;
                                         pm.hash._dispatch(hash.substring(pm.hash._regex_len));
                                     }
                                 }
                             }, $.pm.poll || 200);
                 pm.data("polling.postmessage", 1);
             }
         },

         _dispatch: function(hash) {
             if (!hash) {
                 return;
             }
             try {
                 hash = JSON.parse(decodeURIComponent(hash));
                 if (!(hash['x-requested-with'] === 'postmessage' &&
                       hash.source && hash.source.name != null && hash.source.url && hash.postmessage)) {
                     // ignore since hash could've come from somewhere else
                     return;
                 }
             }
             catch (ex) {
                 // ignore since hash could've come from somewhere else
                 return;
             }
             var msg = hash.postmessage,
             cbs = pm.data("callbacks.postmessage") || {},
             cb = cbs[msg.type];
             if (cb) {
                 cb(msg.data);
             }
             else {
                 var source_window;
                 if (hash.source.name === "parent") {
                     source_window = window.parent;
                 }
                 else {
                     source_window = window.frames[hash.source.name];
                 }
                 var l = pm.data("listeners.postmessage") || {};
                 var fns = l[msg.type] || [];
                 for (var i=0,len=fns.length; i<len; i++) {
                     var o = fns[i];
                     if (o.origin) {
                         var origin = /https?\:\/\/[^\/]*/.exec(hash.source.url)[0];
                         if (o.origin !== '*' && origin !== o.origin) {
                             console.warn("postmessage message origin mismatch", origin, o.origin);
                             if (msg.errback) {
                                 // notify post message errback
                                 var error = {
                                     message: "postmessage origin mismatch",
                                     origin: [origin, o.origin]
                                 };
                                 pm.send({target:source_window, data:error, type:msg.errback, hash:true, url:hash.source.url});
                             }
                             continue;
                         }
                     }

                     function sendReply ( data ) {
                       if (msg.callback) {
                         pm.send({target:source_window, data:data, type:msg.callback, hash:true, url:hash.source.url});
                       }
                     }

                     try {
                         if ( o.callback ) {
                           o.fn(msg.data, sendReply);
                         } else {
                           sendReply ( o.fn(msg.data) );
                         }
                     }
                     catch (ex) {
                         if (msg.errback) {
                             // notify post message errback
                             pm.send({target:source_window, data:ex, type:msg.errback, hash:true, url:hash.source.url});
                         } else {
                             throw ex;
                         }
                     }
                 };
             }
         },

         _url: function(url) {
             // url minus hash part
             return (""+url).replace(/#.*$/, "");
         }

     };

     $.extend(pm, {
                  defaults: {
                      target: null,  /* target window (required) */
                      url: null,     /* target window url (required if no window.postMessage or hash == true) */
                      type: null,    /* message type (required) */
                      data: null,    /* message data (required) */
                      success: null, /* success callback (optional) */
                      error: null,   /* error callback (optional) */
                      origin: "*",   /* postmessage origin (optional) */
                      hash: false    /* use location hash for message passing (optional) */
                  }
              });

 })(this, typeof jQuery === "undefined" ? NO_JQUERY : jQuery);

/**
 * http://www.JSON.org/json2.js
 **/
if (! ("JSON" in window && window.JSON)){JSON={}}(function(){function f(n){return n<10?"0"+n:n}if(typeof Date.prototype.toJSON!=="function"){Date.prototype.toJSON=function(key){return this.getUTCFullYear()+"-"+f(this.getUTCMonth()+1)+"-"+f(this.getUTCDate())+"T"+f(this.getUTCHours())+":"+f(this.getUTCMinutes())+":"+f(this.getUTCSeconds())+"Z"};String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(key){return this.valueOf()}}var cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,escapable=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,gap,indent,meta={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"},rep;function quote(string){escapable.lastIndex=0;return escapable.test(string)?'"'+string.replace(escapable,function(a){var c=meta[a];return typeof c==="string"?c:"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)})+'"':'"'+string+'"'}function str(key,holder){var i,k,v,length,mind=gap,partial,value=holder[key];if(value&&typeof value==="object"&&typeof value.toJSON==="function"){value=value.toJSON(key)}if(typeof rep==="function"){value=rep.call(holder,key,value)}switch(typeof value){case"string":return quote(value);case"number":return isFinite(value)?String(value):"null";case"boolean":case"null":return String(value);case"object":if(!value){return"null"}gap+=indent;partial=[];if(Object.prototype.toString.apply(value)==="[object Array]"){length=value.length;for(i=0;i<length;i+=1){partial[i]=str(i,value)||"null"}v=partial.length===0?"[]":gap?"[\n"+gap+partial.join(",\n"+gap)+"\n"+mind+"]":"["+partial.join(",")+"]";gap=mind;return v}if(rep&&typeof rep==="object"){length=rep.length;for(i=0;i<length;i+=1){k=rep[i];if(typeof k==="string"){v=str(k,value);if(v){partial.push(quote(k)+(gap?": ":":")+v)}}}}else{for(k in value){if(Object.hasOwnProperty.call(value,k)){v=str(k,value);if(v){partial.push(quote(k)+(gap?": ":":")+v)}}}}v=partial.length===0?"{}":gap?"{\n"+gap+partial.join(",\n"+gap)+"\n"+mind+"}":"{"+partial.join(",")+"}";gap=mind;return v}}if(typeof JSON.stringify!=="function"){JSON.stringify=function(value,replacer,space){var i;gap="";indent="";if(typeof space==="number"){for(i=0;i<space;i+=1){indent+=" "}}else{if(typeof space==="string"){indent=space}}rep=replacer;if(replacer&&typeof replacer!=="function"&&(typeof replacer!=="object"||typeof replacer.length!=="number")){throw new Error("JSON.stringify")}return str("",{"":value})}}if(typeof JSON.parse!=="function"){JSON.parse=function(text,reviver){var j;function walk(holder,key){var k,v,value=holder[key];if(value&&typeof value==="object"){for(k in value){if(Object.hasOwnProperty.call(value,k)){v=walk(value,k);if(v!==undefined){value[k]=v}else{delete value[k]}}}}return reviver.call(holder,key,value)}cx.lastIndex=0;if(cx.test(text)){text=text.replace(cx,function(a){return"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)})}if(/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,"@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:\s*\[)+/g,""))){j=eval("("+text+")");return typeof reviver==="function"?walk({"":j},""):j}throw new SyntaxError("JSON.parse")}}}());
;
/**
 * author Christopher Blum
 *    - based on the idea of Remy Sharp, http://remysharp.com/2009/01/26/element-in-view-event-plugin/
 *    - forked from http://github.com/zuk/jquery.inview/
 */
(function ($) {
  var inviewObjects = {}, viewportSize, viewportOffset,
      d = document, w = window, documentElement = d.documentElement, expando = $.expando;

  $.event.special.inview = {
    add: function(data) {
      inviewObjects[data.guid + "-" + this[expando]] = { data: data, $element: $(this) };
    },

    remove: function(data) {
      try { delete inviewObjects[data.guid + "-" + this[expando]]; } catch(e) {}
    }
  };

  function getViewportSize() {
    var mode, domObject, size = { height: w.innerHeight, width: w.innerWidth };

    // if this is correct then return it. iPad has compat Mode, so will
    // go into check clientHeight/clientWidth (which has the wrong value).
    if (!size.height) {
      mode = d.compatMode;
      if (mode || !$.support.boxModel) { // IE, Gecko
        domObject = mode === 'CSS1Compat' ?
          documentElement : // Standards
          d.body; // Quirks
        size = {
          height: domObject.clientHeight,
          width:  domObject.clientWidth
        };
      }
    }

    return size;
  }

  function getViewportOffset() {
    return {
      top:  w.pageYOffset || documentElement.scrollTop   || d.body.scrollTop,
      left: w.pageXOffset || documentElement.scrollLeft  || d.body.scrollLeft
    };
  }

  function checkInView() {
    var $elements = $(), elementsLength, i = 0;

    $.each(inviewObjects, function(i, inviewObject) {
      var selector  = inviewObject.data.selector,
          $element  = inviewObject.$element;
      $elements = $elements.add(selector ? $element.find(selector) : $element);
    });

    elementsLength = $elements.length;
    if (elementsLength) {
      viewportSize   = viewportSize   || getViewportSize();
      viewportOffset = viewportOffset || getViewportOffset();

      for (; i<elementsLength; i++) {
        // Ignore elements that are not in the DOM tree
        if (!$.contains(documentElement, $elements[i])) {
          continue;
        }

        var element       = $elements[i],
            $element      = $(element),
            elementSize   = {},
            elementOffset = {},
            inView        = $element.data('inview'),
            visiblePartX,
            visiblePartY,
            visiblePartsMerged;

        // for the case where 'display:none' is used in place of 'visibility:hidden'
        // count and sum the above items to get and move closer to the correct values
        // IMPORTANT :: insert element into container empty
        if($element.css('display') == 'none')
        {
            var parentElement = $element.parent();

            elementOffset.top = parentElement.offset().top;
            elementOffset.left = parentElement.offset().left;
            elementSize.height = parentElement.height();
            elementSize.width = parentElement.width();
        } else {
       	    elementSize = { height: $element.height(), width: $element.width() }
       	    elementOffset = $element.offset();
       	}

        // Don't ask me why because I haven't figured out yet:
        // viewportOffset and viewportSize are sometimes suddenly null in Firefox 5.
        // Even though it sounds weird:
        // It seems that the execution of this function is interferred by the onresize/onscroll event
        // where viewportOffset and viewportSize are unset
        if (!viewportOffset || !viewportSize) {
          return;
        }

        if (element.offsetWidth >= 0 && element.offsetHeight >= 0 && element.style.display != "none" &&
            elementOffset.top + elementSize.height > viewportOffset.top &&
            elementOffset.top < viewportOffset.top + viewportSize.height &&
            elementOffset.left + elementSize.width > viewportOffset.left &&
            elementOffset.left < viewportOffset.left + viewportSize.width) {
          visiblePartX = (viewportOffset.left > elementOffset.left ?
            'right' : (viewportOffset.left + viewportSize.width) < (elementOffset.left + elementSize.width) ?
            'left' : 'both');
          visiblePartY = (viewportOffset.top > elementOffset.top ?
            'bottom' : (viewportOffset.top + viewportSize.height) < (elementOffset.top + elementSize.height) ?
            'top' : 'both');
          visiblePartsMerged = visiblePartX + "-" + visiblePartY;
          if (!inView || inView !== visiblePartsMerged) {
            $element.data('inview', visiblePartsMerged).trigger('inview', [true, visiblePartX, visiblePartY]);
          }
        } else if (inView) {
          $element.data('inview', false).trigger('inview', [false]);
        }
      }
    }
  }

  $(w).bind("scroll resize", function() {
    viewportSize = viewportOffset = null;
  });

  // IE < 9 scrolls to focused elements without firing the "scroll" event
  if (!documentElement.addEventListener && documentElement.attachEvent) {
    documentElement.attachEvent("onfocusin", function() {
      viewportOffset = null;
    });
  }

  // Use setInterval in order to also make sure this captures elements within
  // "overflow:scroll" elements or elements that appeared in the dom tree due to
  // dom manipulation and reflow
  // old: $(window).scroll(checkInView);
  //
  // By the way, iOS (iPad, iPhone, ...) seems to not execute, or at least delays
  // intervals while the user scrolls. Therefore the inview event might fire a bit late there
  setInterval(checkInView, 250);
})(jQuery);;
/* global Jetpack, JSON */
/**
 * Resizeable Iframes.
 *
 * Start listening to resize postMessage events for selected iframes:
 * $( selector ).Jetpack( 'resizeable' );
 * - OR -
 * Jetpack.resizeable( 'on', context );
 *
 * Resize selected iframes:
 * $( selector ).Jetpack( 'resizeable', 'resize', { width: 100, height: 200 } );
 * - OR -
 * Jetpack.resizeable( 'resize', { width: 100, height: 200 }, context );
 *
 * Stop listening to resize postMessage events for selected iframes:
 * $( selector ).Jetpack( 'resizeable', 'off' );
 * - OR -
 * Jetpack.resizeable( 'off', context );
 *
 * Stop listening to all resize postMessage events:
 * Jetpack.resizeable( 'off' );
 */
(function($) {
	var listening     = false, // Are we listening for resize postMessage events
		sourceOrigins = [],    // What origins are allowed to send resize postMessage events
		$sources      = false, // What iframe elements are we tracking resize postMessage events from

		URLtoOrigin,     // Utility to convert URLs into origins
		setupListener,   // Binds global resize postMessage event handler
		destroyListener, // Unbinds global resize postMessage event handler

		methods; // Jetpack.resizeable methods

	// Setup the Jetpack global
	if ( 'undefined' === typeof window.Jetpack ) {
		window.Jetpack = {
			/**
			 * Handles the two different calling methods:
			 * $( selector ).Jetpack( 'namespace', 'method', context ) // here, context is optional and is used to filter the collection
			 * - vs. -
			 * Jetpack.namespace( 'method', context ) // here context defines the collection
			 *
			 * @internal
			 *
			 * Call as: Jetpack.getTarget.call( this, context )
			 *
			 * @param string context: jQuery selector
			 * @return jQuery|undefined object on which to perform operations or undefined when context cannot be determined
			 */
			getTarget: function( context ) {
				if ( this instanceof jQuery ) {
					return context ? this.filter( context ) : this;
				}

				return context ? $( context ) : context;
			}
		};
	}

	// Setup the Jetpack jQuery method
	if ( 'undefined' === typeof $.fn.Jetpack ) {
		/**
		 * Dispatches calls to the correct namespace
		 *
		 * @param string namespace
		 * @param ...
		 * @return mixed|jQuery (chainable)
		 */
		$.fn.Jetpack = function( namespace ) {
			if ( 'function' === typeof Jetpack[namespace] ) {
				// Send the call to the correct Jetpack.namespace
				return Jetpack[namespace].apply( this, Array.prototype.slice.call( arguments, 1 ) );
			} else {
				$.error( 'Namespace "' + namespace + '" does not exist on jQuery.Jetpack' );
			}
		};
	}

	// Define Jetpack.resizeable() namespace to just always bail if no postMessage
	if ( 'function' !== typeof window.postMessage ) {
		$.extend( window.Jetpack, {
			/**
			 * Defines the Jetpack.resizeable() namespace.
			 * See below for non-trivial definition for browsers with postMessage.
			 */
			resizeable: function() {
				$.error( 'Browser does not support window.postMessage' );
			}
		} );

		return;
	}

	/**
	 * Utility to convert URLs into origins
	 *
	 * http://example.com:port/path?query#fragment -> http://example.com:port
	 *
	 * @param string URL
	 * @return string origin
	 */
	URLtoOrigin = function( URL ) {
		if ( ! URL.match( /^https?:\/\// ) ) {
			URL = document.location.href;
		}
		return URL.split( '/' ).slice( 0, 3 ).join( '/' );
	};

	/**
	 * Binds global resize postMessage event handler
	 */
	setupListener = function() {
		listening = true;

		$( window ).on( 'message.JetpackResizeableIframe', function( e ) {
			var event = e.originalEvent,
				data;

			// Ensure origin is allowed
			if ( -1 === $.inArray( event.origin, sourceOrigins ) ) {
				return;
			}

			// Some browsers send structured data, some send JSON strings
			if ( 'object' === typeof event.data ) {
				data = event.data.data;
			} else {
				try {
					data = JSON.parse( event.data );
				} catch ( err ) {
					data = false;
				}
			}

			if ( !data.data ) {
				return;
			}

			// Un-nest
			data = data.data;

			// Is it a resize event?
			if ( 'undefined' === typeof data.action || 'resize' !== data.action ) {
				return;
			}

			// Find the correct iframe and resize it
			$sources.filter( function() {
				if ( 'undefined' !== typeof data.name ) {
					return this.name === data.name;
				} else {
					return event.source === this.contentWindow;
				}
			} ).first().Jetpack( 'resizeable', 'resize', data );
		} );
	};

	/**
	 * Unbinds global resize postMessage event handler
	 */
	destroyListener = function() {
		listening = false;
		$( window ).off( 'message.JetpackResizeableIframe' );

		sourceOrigins = [];
		$( '.jetpack-resizeable' ).removeClass( 'jetpack-resizeable' );
		$sources = false;
	};

	// Methods for Jetpack.resizeable() namespace
	methods = {
		/**
		 * Start listening for resize postMessage events on the given iframes
		 *
		 * Call statically as: Jetpack.resizeable( 'on', context )
		 * Call as: $( selector ).Jetpack( 'resizeable', 'on', context ) // context optional: used to filter the collectino
		 *
		 * @param string context jQuery selector.
		 * @return jQuery (chainable)
		 */
		on: function( context ) {
			var target = Jetpack.getTarget.call( this, context );

			if ( ! listening ) {
				setupListener();
			}

			target.each( function() {
				sourceOrigins.push( URLtoOrigin( $( this ).attr( 'src' ) ) );
			} ).addClass( 'jetpack-resizeable' );

			$sources = $( '.jetpack-resizeable' );

			return target;
		},

		/**
		 * Stop listening for resize postMessage events on the given iframes
		 *
		 * Call statically as: Jetpack.resizeable( 'off', context )
		 * Call as: $( selector ).Jetpack( 'resizeable', 'off', context ) // context optional: used to filter the collectino
		 *
		 * @param string context jQuery selector
		 * @return jQuery (chainable)
		 */
		off: function( context ) {
			var target = Jetpack.getTarget.call( this, context );

			if ( 'undefined' === typeof target ) {
				destroyListener();

				return target;
			}

			target.each( function() {
				var origin = URLtoOrigin( $( this ).attr( 'src' ) ),
					pos = $.inArray( origin, sourceOrigins );

				if ( -1 !== pos ) {
					sourceOrigins.splice( pos, 1 );
				}
			} ).removeClass( 'jetpack-resizeable' );

			$sources = $( '.jetpack-resizeable' );

			return target;
		},

		/**
		 * Resize the given iframes
		 *
		 * Call statically as: Jetpack.resizeable( 'resize', dimensions, context )
		 * Call as: $( selector ).Jetpack( 'resizeable', 'resize', dimensions, context ) // context optional: used to filter the collectino
		 *
		 * @param object dimensions in pixels: { width: (int), height: (int) }
		 * @param string context jQuery selector
		 * @return jQuery (chainable)
		 */
		resize: function( dimensions, context ) {
			var target = Jetpack.getTarget.call( this, context );

			$.each( [ 'width', 'height' ], function( i, variable ) {
				var value = 0,
					container;
				if ( 'undefined' !== typeof dimensions[variable] ) {
					value = parseInt( dimensions[variable], 10 );
				}

				if ( 0 !== value ) {
					target[variable]( value );
					container = target.parent();
					if ( container.hasClass( 'slim-likes-widget' ) ) {
						container[variable]( value );
					}
				}
			} );

			return target;
		}
	};

	// Define Jetpack.resizeable() namespace
	$.extend( window.Jetpack, {
		/**
		 * Defines the Jetpack.resizeable() namespace.
		 * See above for trivial definition for browsers with no postMessage.
		 *
		 * @param string method
		 * @param ...
		 * @return mixed|jQuery (chainable)
		 */
		resizeable: function( method ) {
			if ( methods[method] ) {
				// Send the call to the correct Jetpack.resizeable() method
				return methods[method].apply( this, Array.prototype.slice.call( arguments, 1 ) );
			} else if ( ! method ) {
				// By default, send to Jetpack.resizeable( 'on' ), which isn't useful in that form but is when called as
				// jQuery( selector ).Jetpack( 'resizeable' )
				return methods.on.apply( this );
			} else {
				$.error( 'Method ' +  method + ' does not exist on Jetpack.resizeable' );
			}
		}
	} );
})(jQuery);
;
/*! jquery.caret 2014-09-14 */
(function(){!function(a){return"function"==typeof define&&define.amd?define(["jquery"],a):a(window.jQuery)}(function(a){"use strict";var b,c,d,e,f,g,h,i,j,k,l;return k="caret",b=function(){function b(a){this.$inputor=a,this.domInputor=this.$inputor[0]}return b.prototype.setPos=function(){return this.domInputor},b.prototype.getIEPosition=function(){return this.getPosition()},b.prototype.getPosition=function(){var a,b;return b=this.getOffset(),a=this.$inputor.offset(),b.left-=a.left,b.top-=a.top,b},b.prototype.getOldIEPos=function(){var a,b;return b=h.selection.createRange(),a=h.body.createTextRange(),a.moveToElementText(this.domInputor),a.setEndPoint("EndToEnd",b),a.text.length},b.prototype.getPos=function(){var a,b,c;return(c=this.range())?(a=c.cloneRange(),a.selectNodeContents(this.domInputor),a.setEnd(c.endContainer,c.endOffset),b=a.toString().length,a.detach(),b):h.selection?this.getOldIEPos():void 0},b.prototype.getOldIEOffset=function(){var a,b;return a=h.selection.createRange().duplicate(),a.moveStart("character",-1),b=a.getBoundingClientRect(),{height:b.bottom-b.top,left:b.left,top:b.top}},b.prototype.getOffset=function(){var b,c,d,e;if(j.getSelection&&(d=this.range())){if(d.endOffset-1<0)return null;b=d.cloneRange(),b.setStart(d.endContainer,d.endOffset-1),b.setEnd(d.endContainer,d.endOffset),e=b.getBoundingClientRect(),c={height:e.height,left:e.left+e.width,top:e.top},b.detach()}else h.selection&&(c=this.getOldIEOffset());return c&&(c.top+=a(j).scrollTop(),c.left+=a(j).scrollLeft()),c},b.prototype.range=function(){var a;if(j.getSelection)return a=j.getSelection(),a.rangeCount>0?a.getRangeAt(0):null},b}(),c=function(){function b(a){this.$inputor=a,this.domInputor=this.$inputor[0]}return b.prototype.getIEPos=function(){var a,b,c,d,e,f,g;return b=this.domInputor,f=h.selection.createRange(),e=0,f&&f.parentElement()===b&&(d=b.value.replace(/\r\n/g,"\n"),c=d.length,g=b.createTextRange(),g.moveToBookmark(f.getBookmark()),a=b.createTextRange(),a.collapse(!1),e=g.compareEndPoints("StartToEnd",a)>-1?c:-g.moveStart("character",-c)),e},b.prototype.getPos=function(){return h.selection?this.getIEPos():this.domInputor.selectionStart},b.prototype.setPos=function(a){var b,c;return b=this.domInputor,h.selection?(c=b.createTextRange(),c.move("character",a),c.select()):b.setSelectionRange&&b.setSelectionRange(a,a),b},b.prototype.getIEOffset=function(a){var b,c,d,e;return c=this.domInputor.createTextRange(),a||(a=this.getPos()),c.move("character",a),d=c.boundingLeft,e=c.boundingTop,b=c.boundingHeight,{left:d,top:e,height:b}},b.prototype.getOffset=function(b){var c,d,e;return c=this.$inputor,h.selection?(d=this.getIEOffset(b),d.top+=a(j).scrollTop()+c.scrollTop(),d.left+=a(j).scrollLeft()+c.scrollLeft(),d):(d=c.offset(),e=this.getPosition(b),d={left:d.left+e.left-c.scrollLeft(),top:d.top+e.top-c.scrollTop(),height:e.height})},b.prototype.getPosition=function(b){var c,e,f,g,h,i,j;return c=this.$inputor,g=function(b){return a("<div></div>").text(b).html()},void 0===b&&(b=this.getPos()),j=c.val().slice(0,b),f=c.val().slice(b),h="<span style='position: relative; display: inline;'>"+g(j)+"</span>",h+="<span id='caret' style='position: relative; display: inline;'>|</span>",h+="<span style='position: relative; display: inline;'>"+g(f)+"</span>",i=new d(c),e=i.create(h).rect()},b.prototype.getIEPosition=function(a){var b,c,d,e,f;return d=this.getIEOffset(a),c=this.$inputor.offset(),e=d.left-c.left,f=d.top-c.top,b=d.height,{left:e,top:f,height:b}},b}(),d=function(){function b(a){this.$inputor=a}return b.prototype.css_attr=["borderBottomWidth","borderLeftWidth","borderRightWidth","borderTopStyle","borderRightStyle","borderBottomStyle","borderLeftStyle","borderTopWidth","boxSizing","fontFamily","fontSize","fontWeight","height","letterSpacing","lineHeight","marginBottom","marginLeft","marginRight","marginTop","outlineWidth","overflow","overflowX","overflowY","paddingBottom","paddingLeft","paddingRight","paddingTop","textAlign","textOverflow","textTransform","whiteSpace","wordBreak","wordWrap"],b.prototype.mirrorCss=function(){var b,c=this;return b={position:"absolute",left:-9999,top:0,zIndex:-2e4},"TEXTAREA"===this.$inputor.prop("tagName")&&this.css_attr.push("width"),a.each(this.css_attr,function(a,d){return b[d]=c.$inputor.css(d)}),b},b.prototype.create=function(b){return this.$mirror=a("<div></div>"),this.$mirror.css(this.mirrorCss()),this.$mirror.html(b),this.$inputor.after(this.$mirror),this},b.prototype.rect=function(){var a,b,c;return a=this.$mirror.find("#caret"),b=a.position(),c={left:b.left,top:b.top,height:a.height()},this.$mirror.remove(),c},b}(),e={contentEditable:function(a){return!(!a[0].contentEditable||"true"!==a[0].contentEditable)}},g={pos:function(a){return a||0===a?this.setPos(a):this.getPos()},position:function(a){return h.selection?this.getIEPosition(a):this.getPosition(a)},offset:function(a){var b;return b=this.getOffset(a)}},h=null,j=null,i=null,l=function(a){var b;return(b=null!=a?a.iframe:void 0)?(i=b,j=b.contentWindow,h=b.contentDocument||j.document):(i=void 0,j=window,h=document)},f=function(a){var b;h=a[0].ownerDocument,j=h.defaultView||h.parentWindow;try{return i=j.frameElement}catch(c){b=c}},a.fn.caret=function(d,f,h){var i;return g[d]?(a.isPlainObject(f)?(l(f),f=void 0):l(h),i=e.contentEditable(this)?new b(this):new c(this),g[d].apply(i,[f])):a.error("Method "+d+" does not exist on jQuery.caret")},a.fn.caret.EditableCaret=b,a.fn.caret.InputCaret=c,a.fn.caret.Utils=e,a.fn.caret.apis=g})}).call(this);;(function(){!function(a){return"function"==typeof define&&define.amd?define(["jquery"],a):a(window.jQuery)}(function(a){var b,c,d,e,f,g,h,i=[].slice;c=function(){function b(b){this.current_flag=null,this.controllers={},this.alias_maps={},this.$inputor=a(b),this.setIframe(),this.listen()}return b.prototype.createContainer=function(b){return 0===(this.$el=a("#atwho-container",b)).length?a(b.body).append(this.$el=a("<div id='atwho-container'></div>")):void 0},b.prototype.setIframe=function(a,b){var c;return null==b&&(b=!1),a?(this.window=a.contentWindow,this.document=a.contentDocument||this.window.document,this.iframe=a):(this.document=document,this.window=window,this.iframe=null),(this.iframeStandalone=b)?(null!=(c=this.$el)&&c.remove(),this.createContainer(this.document)):this.createContainer(document)},b.prototype.controller=function(a){var b,c,d,e;if(this.alias_maps[a])c=this.controllers[this.alias_maps[a]];else{e=this.controllers;for(d in e)if(b=e[d],d===a){c=b;break}}return c?c:this.controllers[this.current_flag]},b.prototype.set_context_for=function(a){return this.current_flag=a,this},b.prototype.reg=function(a,b){var c,e;return c=(e=this.controllers)[a]||(e[a]=new d(this,a)),b.alias&&(this.alias_maps[b.alias]=a),c.init(b),this},b.prototype.listen=function(){return this.$inputor.on("keyup.atwhoInner",function(a){return function(b){return a.on_keyup(b)}}(this)).on("keydown.atwhoInner",function(a){return function(b){return a.on_keydown(b)}}(this)).on("scroll.atwhoInner",function(a){return function(b){var c;return null!=(c=a.controller())?c.view.hide(b):void 0}}(this)).on("blur.atwhoInner",function(a){return function(b){var c;return(c=a.controller())?c.view.hide(b,c.get_opt("display_timeout")):void 0}}(this)).on("click.atwhoInner",function(a){return function(b){var c;return null!=(c=a.controller())?c.view.hide(b):void 0}}(this))},b.prototype.shutdown=function(){var a,b,c;c=this.controllers;for(b in c)a=c[b],a.destroy(),delete this.controllers[b];return this.$inputor.off(".atwhoInner"),this.$el.remove()},b.prototype.dispatch=function(){return a.map(this.controllers,function(a){return function(b){var c;return(c=b.get_opt("delay"))?(clearTimeout(a.delayedCallback),a.delayedCallback=setTimeout(function(){return b.look_up()?a.set_context_for(b.at):void 0},c)):b.look_up()?a.set_context_for(b.at):void 0}}(this))},b.prototype.on_keyup=function(b){var c;switch(b.keyCode){case f.ESC:b.preventDefault(),null!=(c=this.controller())&&c.view.hide();break;case f.DOWN:case f.UP:case f.CTRL:a.noop();break;case f.P:case f.N:b.ctrlKey||this.dispatch();break;default:this.dispatch()}},b.prototype.on_keydown=function(b){var c,d;if(c=null!=(d=this.controller())?d.view:void 0,c&&c.visible())switch(b.keyCode){case f.ESC:b.preventDefault(),c.hide(b);break;case f.UP:b.preventDefault(),c.prev();break;case f.DOWN:b.preventDefault(),c.next();break;case f.P:if(!b.ctrlKey)return;b.preventDefault(),c.prev();break;case f.N:if(!b.ctrlKey)return;b.preventDefault(),c.next();break;case f.TAB:case f.ENTER:if(!c.visible())return;b.preventDefault(),c.choose(b);break;default:a.noop()}},b}(),d=function(){function b(b,c){this.app=b,this.at=c,this.$inputor=this.app.$inputor,this.id=this.$inputor[0].id||this.uid(),this.setting=null,this.query=null,this.pos=0,this.cur_rect=null,this.range=null,0===(this.$el=a("#atwho-ground-"+this.id,this.app.$el)).length&&this.app.$el.append(this.$el=a("<div id='atwho-ground-"+this.id+"'></div>")),this.model=new g(this),this.view=new h(this)}return b.prototype.uid=function(){return(Math.random().toString(16)+"000000000").substr(2,8)+(new Date).getTime()},b.prototype.init=function(b){return this.setting=a.extend({},this.setting||a.fn.atwho["default"],b),this.view.init(),this.model.reload(this.setting.data)},b.prototype.destroy=function(){return this.trigger("beforeDestroy"),this.model.destroy(),this.view.destroy(),this.$el.remove()},b.prototype.call_default=function(){var b,c,d;d=arguments[0],b=2<=arguments.length?i.call(arguments,1):[];try{return e[d].apply(this,b)}catch(f){return c=f,a.error(""+c+" Or maybe At.js doesn't have function "+d)}},b.prototype.trigger=function(a,b){var c,d;return null==b&&(b=[]),b.push(this),c=this.get_opt("alias"),d=c?""+a+"-"+c+".atwho":""+a+".atwho",this.$inputor.trigger(d,b)},b.prototype.callbacks=function(a){return this.get_opt("callbacks")[a]||e[a]},b.prototype.get_opt=function(a){var b;try{return this.setting[a]}catch(c){return b=c,null}},b.prototype.content=function(){return this.$inputor.is("textarea, input")?this.$inputor.val():this.$inputor.text()},b.prototype.catch_query=function(){var a,b,c,d,e,f;return b=this.content(),a=this.$inputor.caret("pos",{iframe:this.app.iframe}),f=b.slice(0,a),d=this.callbacks("matcher").call(this,this.at,f,this.get_opt("start_with_space")),"string"==typeof d&&d.length<=this.get_opt("max_len",20)?(e=a-d.length,c=e+d.length,this.pos=e,d={text:d,head_pos:e,end_pos:c},this.trigger("matched",[this.at,d.text])):(d=null,this.view.hide()),this.query=d},b.prototype.rect=function(){var b,c,d;if(b=this.$inputor.caret("offset",this.pos-1,{iframe:this.app.iframe}))return this.app.iframe&&!this.app.iframeStandalone&&(c=a(this.app.iframe).offset(),b.left+=c.left,b.top+=c.top),this.$inputor.is("[contentEditable]")&&(b=this.cur_rect||(this.cur_rect=b)),d=this.app.document.selection?0:2,{left:b.left,top:b.top,bottom:b.top+b.height+d}},b.prototype.reset_rect=function(){return this.$inputor.is("[contentEditable]")?this.cur_rect=null:void 0},b.prototype.mark_range=function(){var a;if(this.$inputor.is("[contentEditable]"))return this.app.window.getSelection&&(a=this.app.window.getSelection()).rangeCount>0?this.range=a.getRangeAt(0):this.app.document.selection?this.ie8_range=this.app.document.selection.createRange():void 0},b.prototype.insert_content_for=function(b){var c,d,e;return d=b.data("value"),e=this.get_opt("insert_tpl"),this.$inputor.is("textarea, input")||!e?d:(c=a.extend({},b.data("item-data"),{"atwho-data-value":d,"atwho-at":this.at}),this.callbacks("tpl_eval").call(this,e,c))},b.prototype.insert=function(b){var c,d,e,f,g,h,i,j,k;return c=this.$inputor,k=this.callbacks("inserting_wrapper").call(this,c,b,this.get_opt("suffix")),c.is("textarea, input")?(h=c.val(),i=h.slice(0,Math.max(this.query.head_pos-this.at.length,0)),j=""+i+k+h.slice(this.query.end_pos||0),c.val(j),c.caret("pos",i.length+k.length,{iframe:this.app.iframe})):(f=this.range)?(e=f.startOffset-(this.query.end_pos-this.query.head_pos)-this.at.length,f.setStart(f.endContainer,Math.max(e,0)),f.setEnd(f.endContainer,f.endOffset),f.deleteContents(),d=a(k,this.app.document)[0],f.insertNode(d),f.setEndAfter(d),f.collapse(!1),g=this.app.window.getSelection(),g.removeAllRanges(),g.addRange(f)):(f=this.ie8_range)&&(f.moveStart("character",this.query.end_pos-this.query.head_pos-this.at.length),f.pasteHTML(k),f.collapse(!1),f.select()),c.is(":focus")||c.focus(),c.change()},b.prototype.render_view=function(a){var b;return b=this.get_opt("search_key"),a=this.callbacks("sorter").call(this,this.query.text,a.slice(0,1001),b),this.view.render(a.slice(0,this.get_opt("limit")))},b.prototype.look_up=function(){var b,c;if(b=this.catch_query())return c=function(a){return a&&a.length>0?this.render_view(a):this.view.hide()},this.model.query(b.text,a.proxy(c,this)),b},b}(),g=function(){function b(a){this.context=a,this.at=this.context.at,this.storage=this.context.$inputor}return b.prototype.destroy=function(){return this.storage.data(this.at,null)},b.prototype.saved=function(){return this.fetch()>0},b.prototype.query=function(a,b){var c,d,e;return c=this.fetch(),d=this.context.get_opt("search_key"),c=this.context.callbacks("filter").call(this.context,a,c,d)||[],e=this.context.callbacks("remote_filter"),c.length>0||!e&&0===c.length?b(c):e.call(this.context,a,b)},b.prototype.fetch=function(){return this.storage.data(this.at)||[]},b.prototype.save=function(a){return this.storage.data(this.at,this.context.callbacks("before_save").call(this.context,a||[]))},b.prototype.load=function(a){return!this.saved()&&a?this._load(a):void 0},b.prototype.reload=function(a){return this._load(a)},b.prototype._load=function(b){return"string"==typeof b?a.ajax(b,{dataType:"json"}).done(function(a){return function(b){return a.save(b)}}(this)):this.save(b)},b}(),h=function(){function b(b){this.context=b,this.$el=a("<div class='atwho-view'><ul class='atwho-view-ul'></ul></div>"),this.timeout_id=null,this.context.$el.append(this.$el),this.bind_event()}return b.prototype.init=function(){var a;return a=this.context.get_opt("alias")||this.context.at.charCodeAt(0),this.$el.attr({id:"at-view-"+a})},b.prototype.destroy=function(){return this.$el.remove()},b.prototype.bind_event=function(){var b;return b=this.$el.find("ul"),b.on("mouseenter.atwho-view","li",function(c){return b.find(".cur").removeClass("cur"),a(c.currentTarget).addClass("cur")}).on("click",function(a){return function(b){return a.choose(b),b.preventDefault()}}(this))},b.prototype.visible=function(){return this.$el.is(":visible")},b.prototype.choose=function(a){var b,c;return(b=this.$el.find(".cur")).length&&(c=this.context.insert_content_for(b),this.context.insert(this.context.callbacks("before_insert").call(this.context,c,b),b),this.context.trigger("inserted",[b,a]),this.hide(a)),this.context.get_opt("hide_without_suffix")?this.stop_showing=!0:void 0},b.prototype.reposition=function(b){var c,d,e,f;return f=this.context.app.iframeStandalone?this.context.app.window:window,b.bottom+this.$el.height()-a(f).scrollTop()>a(f).height()&&(b.bottom=b.top-this.$el.height()),b.left>(d=a(f).width()-this.$el.width()-5)&&(b.left=d),c={left:b.left,top:b.bottom},null!=(e=this.context.callbacks("before_reposition"))&&e.call(this.context,c),this.$el.offset(c),this.context.trigger("reposition",[c])},b.prototype.next=function(){var a,b;return a=this.$el.find(".cur").removeClass("cur"),b=a.next(),b.length||(b=this.$el.find("li:first")),b.addClass("cur")},b.prototype.prev=function(){var a,b;return a=this.$el.find(".cur").removeClass("cur"),b=a.prev(),b.length||(b=this.$el.find("li:last")),b.addClass("cur")},b.prototype.show=function(){var a;return this.stop_showing?void(this.stop_showing=!1):(this.context.mark_range(),this.visible()||(this.$el.show(),this.context.trigger("shown")),(a=this.context.rect())?this.reposition(a):void 0)},b.prototype.hide=function(a,b){var c;if(this.visible())return isNaN(b)?(this.context.reset_rect(),this.$el.hide(),this.context.trigger("hidden",[a])):(c=function(a){return function(){return a.hide()}}(this),clearTimeout(this.timeout_id),this.timeout_id=setTimeout(c,b))},b.prototype.render=function(b){var c,d,e,f,g,h,i;if(!(a.isArray(b)&&b.length>0))return void this.hide();for(this.$el.find("ul").empty(),d=this.$el.find("ul"),g=this.context.get_opt("tpl"),h=0,i=b.length;i>h;h++)e=b[h],e=a.extend({},e,{"atwho-at":this.context.at}),f=this.context.callbacks("tpl_eval").call(this.context,g,e),c=a(this.context.callbacks("highlighter").call(this.context,f,this.context.query.text)),c.data("item-data",e),d.append(c);return this.show(),this.context.get_opt("highlight_first")?d.find("li:first").addClass("cur"):void 0},b}(),f={DOWN:40,UP:38,ESC:27,TAB:9,ENTER:13,CTRL:17,P:80,N:78},e={before_save:function(b){var c,d,e,f;if(!a.isArray(b))return b;for(f=[],d=0,e=b.length;e>d;d++)c=b[d],f.push(a.isPlainObject(c)?c:{name:c});return f},matcher:function(a,b,c){var d,e;return a=a.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&"),c&&(a="(?:^|\\s)"+a),e=new RegExp(a+"([A-Za-zÀ-ÿ0-9_+-]*)$|"+a+"([^\\x00-\\xff]*)$","gi"),d=e.exec(b),d?d[2]||d[1]:null},filter:function(a,b,c){var d,e,f,g;for(g=[],e=0,f=b.length;f>e;e++)d=b[e],~new String(d[c]).toLowerCase().indexOf(a.toLowerCase())&&g.push(d);return g},remote_filter:null,sorter:function(a,b,c){var d,e,f,g;if(!a)return b;for(g=[],e=0,f=b.length;f>e;e++)d=b[e],d.atwho_order=new String(d[c]).toLowerCase().indexOf(a.toLowerCase()),d.atwho_order>-1&&g.push(d);return g.sort(function(a,b){return a.atwho_order-b.atwho_order})},tpl_eval:function(a,b){var c;try{return a.replace(/\$\{([^\}]*)\}/g,function(a,c){return b[c]})}catch(d){return c=d,""}},highlighter:function(a,b){var c;return b?(c=new RegExp(">\\s*(\\w*?)("+b.replace("+","\\+")+")(\\w*)\\s*<","ig"),a.replace(c,function(a,b,c,d){return"> "+b+"<strong>"+c+"</strong>"+d+" <"})):a},before_insert:function(a){return a},inserting_wrapper:function(a,b,c){var d,e;return d=""===c?c:c||" ",a.is("textarea, input")?""+b+d:"true"===a.attr("contentEditable")?(d=""===c?c:c||"&nbsp;",/firefox/i.test(navigator.userAgent)?e="<span>"+b+d+"</span>":(c="<span contenteditable='false'>"+d+"<span>",e="<span contenteditable='false'>"+b+c+"</span>"),this.app.document.selection&&(e="<span contenteditable='true'>"+b+"</span>"),e):void 0}},b={load:function(a,b){var c;return(c=this.controller(a))?c.model.load(b):void 0},setIframe:function(a,b){return this.setIframe(a,b),null},run:function(){return this.dispatch()},destroy:function(){return this.shutdown(),this.$inputor.data("atwho",null)}},a.fn.atwho=function(d){var e,f;return f=arguments,e=null,this.filter('textarea, input, [contenteditable=""], [contenteditable=true]').each(function(){var g,h;return(h=(g=a(this)).data("atwho"))||g.data("atwho",h=new c(this)),"object"!=typeof d&&d?b[d]&&h?e=b[d].apply(h,Array.prototype.slice.call(f,1)):a.error("Method "+d+" does not exist on jQuery.caret"):h.reg(d.at,d)}),e||this},a.fn.atwho["default"]={at:void 0,alias:void 0,data:null,tpl:"<li data-value='${atwho-at}${name}'>${name}</li>",insert_tpl:"<span id='${id}'>${atwho-data-value}</span>",callbacks:e,search_key:"name",suffix:void 0,hide_without_suffix:!1,start_with_space:!0,highlight_first:!0,limit:5,max_len:20,display_timeout:300,delay:null}})}).call(this);;
var jetpackSuggestUIDefaults=function(t){return{start_with_space:!0,suffix:"",hide_without_suffix:!0,insert_tpl:"</>${atwho-data-value}</>",limit:10,callbacks:{filter:function(t,e,i){var r,n,o,s=[],f=new RegExp("^"+t+"| "+t,"ig");for(n=0,o=e.length;n<o;n++)(r=e[n])[i].toLowerCase().match(f)&&s.push(r);return s},inserting_wrapper:function(t,e,i){return""+e+i},highlighter:function(t,e){if(!e)return t;var i=new RegExp(">(\\s*|[\\w\\s]*)("+this.at.replace("+","\\+")+"?"+e.replace("+","\\+")+")([\\w ]*)\\s*<","ig");return t.replace(i,function(t,e,i,r){return">"+e+"<strong>"+i+"</strong>"+r+"<"})},before_reposition:function(e){this.$inputor.offset().left;var i,r,n=t("#atwho-ground-"+this.id+" .atwho-view"),o=t("body"),s=this.$inputor.data("atwho");if("undefined"!==s&&"undefined"!==s.iframe&&null!==s.iframe){i=this.$inputor.caret("offset",{iframe:s.iframe});var f=t(s.iframe).offset();"undefined"!==f&&(i.left+=f.left,i.top+=f.top)}else i=this.$inputor.caret("offset");i.left>o.width()/2?(n.addClass("right"),move=i.left-e.left-this.view.$el.width()):(n.removeClass("right"),move=i.left-e.left+1),o.width()<=400&&t(document).scrollTop(i.top-6),(!(r=parseInt(this.$inputor.css("line-height").substr(0,this.$inputor.css("line-height").length-2),10))||r<5)&&(r=19),e.top=i.top+r,e.left+=move}}}}(jQuery);
;
!function(a){a.fn.xposts=function(t){a.isArray(t)&&(t={data:t});var n={at:"+",data:a.map(t.data,function(a){return a.name=a.name||a.subdomain+" "+a.title,a}),tpl:"<li data-value='+${subdomain}'>${blavatar}<span class='username'>+${subdomain}</span><small>${title}</small></li>"},s=a.extend(!0,{},jetpackSuggestUIDefaults,n,t);return a.fn.atwho.call(this,s)}}(jQuery);
;
!function(t){var e=[];t.fn.hashtags=function(a){var n={at:"#",start_with_space:!0,data:[],delay:200,tpl:"<li data-value='#${slug}'><span class='username'>#${value}</span><small>${count_posts}</small></li>",search_key:"value",callbacks:{filter:function(t,e,a){var n,r,s,l;for(l=[],r=0,s=e.length;r<s;r++)~(n=e[r])[a].toLowerCase().indexOf(t.toLowerCase())&&l.push(n);return l},remote_filter:function(a,n){if(!(a.length<=1)){var r=this;r.$inputor.addClass("autocomplete-loading"),t.getJSON(_wpUtilSettings.ajax.url,{action:"o2_tag_search",term:a},function(t){t.success&&t.data&&(t=t.data,r.$inputor.removeClass("autocomplete-loading"),e[a]=t,r.query&&n(t))})}},sorter:function(t,e,a){return e.sort(function(t,e){return-(parseFloat(t.count)-parseFloat(e.count))}),e},matcher:function(t,e,a){var n,r;return t=t.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&"),a&&(t="(?:^|\\s)"+t),r=new RegExp(t+"([A-Za-z0-9_+-.]*)$|"+t+"([^\\x00-\\xff]*)$","gi"),(n=r.exec(e))?n[2]||n[1]:null},highlighter:function(t,e){if(!e)return t;var a=new RegExp(">(#[\\w.-]*)("+e.replace("+","\\+")+")([\\w.-]*)<","ig");return t.replace(a,function(t,e,a,n){return">"+e+"<strong>"+a+"</strong>"+n+"<"})}}},r=t.extend(!0,{},jetpackSuggestUIDefaults,n,a);return t.fn.atwho.call(this,r)}}(jQuery);
;
var o2 = o2 || {};

o2.PostActionStates = ( function( $ ) {
	return ( {
		stateDictionary: {},

		getCurrentState: function( element ) {
			var target = $( element );
			if ( 'undefined' !== typeof target ) {
				return target.data( 'actionstate' );
			}
		},

		getAction: function( element ) {
			var target = $( element );
			var action = target.data( 'action' );
			return action;
		},

		getStateData: function( action, state ) {
			var actionData = this.stateDictionary[ action ];
			if ( 'undefined' !== typeof actionData ) {
				return this.stateDictionary[ action ][ state ];
			}
		},

		getNextState: function( action, state ) {
			var stateData = this.getStateData( action, state );
			if ( 'undefined' !== typeof stateData ) {
				return stateData.nextState;
			}
		},

		setState: function( element, newState ) {
			var action = this.getAction( element );
			var currentState = this.getCurrentState( element );

			if ( ( 'undefined' !== typeof action ) && ( 'undefined' !== typeof currentState ) ) {
				var oldStateData = this.getStateData( action, currentState );
				var newStateData = this.getStateData( action, newState );
				var target = $( element );
				var post = target.closest( o2.options.threadContainer );
				var i;

				// Remove classes from post for the old state
				for ( i = 0; i < oldStateData.classes.length; i++ ) {
					post.removeClass( oldStateData.classes[i] );
				}

				// Remove genericon classes from the target for the old state
				if ( 'undefined' !== typeof oldStateData.genericon ) {
					target.removeClass( oldStateData.genericon );
				}

				// Add classes to the post for the new state
				for ( i = 0; i < newStateData.classes.length; i++ ) {
					post.addClass( newStateData.classes[i] );
				}

				// Add genericon classes to the target for the new state
				if ( 'undefined' !== typeof newStateData.genericon ) {
					target.addClass( newStateData.genericon );
				}

				target.data( 'actionstate', newState );
				target.attr( 'title', newStateData.title ); // TODO only on <a>s?
				target.text( newStateData.shortText );
			}
		} // setState
	} );
} )( jQuery );
;
var o2 = o2 || {};

o2.Offline = {
	windowUnloading: false,

	init: function() {

		jQuery( document ).ajaxError( function( event, jqxhr, settings ) {
			if ( settings.url.indexOf( 'action=o2_read' ) !== -1 ) {
				// We add a somewhat long delay since the error handler may fire
				// before a window unload that caused it.  This gives us
				// time to capture the unload first and set the windowUnloading flag
				setTimeout( function() {
					o2.Offline.onConnectionDown();
				}, 5000 );
			}
		} );

		jQuery( document ).ajaxSuccess( function( event, jqxhr, settings ) {
			if ( settings.url.indexOf( 'action=o2_read' ) !== -1 ) {
				o2.Offline.onConnectionUp();
			}
		} );

		// beforeunload is not triggered on all browsers, but gives the
		// best experience on those that do
		jQuery( window ).on( 'beforeunload', function() {
			o2.Offline.onWindowUnloading();
		} );

		jQuery( window ).unload( function() {
			o2.Offline.onWindowUnloading();
		} );
	},

	onConnectionDown: function() {
		if ( o2.Offline.windowUnloading ) {
			return;
		}

		var firstWithLostType = o2.Notifications.notifications.findFirst( 'connectionlost' );

		// If there is no connectionlost notification, add one
		if ( 'undefined' === typeof firstWithLostType ) {
			o2.Notifications.add( {
				text: o2.strings.connectionLostPrompt,
				url: false,
				type: 'connectionlost',
				sticky: true,
				popup: true,
				dismissable: false
			} );
		}
	},

	onConnectionUp: function() {
		var firstWithLostType = o2.Notifications.notifications.findFirst( 'connectionlost' );

		if ( 'undefined' !== typeof firstWithLostType ) {
			firstWithLostType.destroy();
		}
	},

	onWindowUnloading: function() {
		// Avoid false alerts when reloading
		o2.Offline.windowUnloading = true;
	}
};
;
//     Underscore.js 1.8.3
//     http://underscorejs.org
//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.
(function(){function n(n){function t(t,r,e,u,i,o){for(;i>=0&&o>i;i+=n){var a=u?u[i]:i;e=r(e,t[a],a,t)}return e}return function(r,e,u,i){e=b(e,i,4);var o=!k(r)&&m.keys(r),a=(o||r).length,c=n>0?0:a-1;return arguments.length<3&&(u=r[o?o[c]:c],c+=n),t(r,e,u,o,c,a)}}function t(n){return function(t,r,e){r=x(r,e);for(var u=O(t),i=n>0?0:u-1;i>=0&&u>i;i+=n)if(r(t[i],i,t))return i;return-1}}function r(n,t,r){return function(e,u,i){var o=0,a=O(e);if("number"==typeof i)n>0?o=i>=0?i:Math.max(i+a,o):a=i>=0?Math.min(i+1,a):i+a+1;else if(r&&i&&a)return i=r(e,u),e[i]===u?i:-1;if(u!==u)return i=t(l.call(e,o,a),m.isNaN),i>=0?i+o:-1;for(i=n>0?o:a-1;i>=0&&a>i;i+=n)if(e[i]===u)return i;return-1}}function e(n,t){var r=I.length,e=n.constructor,u=m.isFunction(e)&&e.prototype||a,i="constructor";for(m.has(n,i)&&!m.contains(t,i)&&t.push(i);r--;)i=I[r],i in n&&n[i]!==u[i]&&!m.contains(t,i)&&t.push(i)}var u=this,i=u._,o=Array.prototype,a=Object.prototype,c=Function.prototype,f=o.push,l=o.slice,s=a.toString,p=a.hasOwnProperty,h=Array.isArray,v=Object.keys,g=c.bind,y=Object.create,d=function(){},m=function(n){return n instanceof m?n:this instanceof m?void(this._wrapped=n):new m(n)};"undefined"!=typeof exports?("undefined"!=typeof module&&module.exports&&(exports=module.exports=m),exports._=m):u._=m,m.VERSION="1.8.3";var b=function(n,t,r){if(t===void 0)return n;switch(null==r?3:r){case 1:return function(r){return n.call(t,r)};case 2:return function(r,e){return n.call(t,r,e)};case 3:return function(r,e,u){return n.call(t,r,e,u)};case 4:return function(r,e,u,i){return n.call(t,r,e,u,i)}}return function(){return n.apply(t,arguments)}},x=function(n,t,r){return null==n?m.identity:m.isFunction(n)?b(n,t,r):m.isObject(n)?m.matcher(n):m.property(n)};m.iteratee=function(n,t){return x(n,t,1/0)};var _=function(n,t){return function(r){var e=arguments.length;if(2>e||null==r)return r;for(var u=1;e>u;u++)for(var i=arguments[u],o=n(i),a=o.length,c=0;a>c;c++){var f=o[c];t&&r[f]!==void 0||(r[f]=i[f])}return r}},j=function(n){if(!m.isObject(n))return{};if(y)return y(n);d.prototype=n;var t=new d;return d.prototype=null,t},w=function(n){return function(t){return null==t?void 0:t[n]}},A=Math.pow(2,53)-1,O=w("length"),k=function(n){var t=O(n);return"number"==typeof t&&t>=0&&A>=t};m.each=m.forEach=function(n,t,r){t=b(t,r);var e,u;if(k(n))for(e=0,u=n.length;u>e;e++)t(n[e],e,n);else{var i=m.keys(n);for(e=0,u=i.length;u>e;e++)t(n[i[e]],i[e],n)}return n},m.map=m.collect=function(n,t,r){t=x(t,r);for(var e=!k(n)&&m.keys(n),u=(e||n).length,i=Array(u),o=0;u>o;o++){var a=e?e[o]:o;i[o]=t(n[a],a,n)}return i},m.reduce=m.foldl=m.inject=n(1),m.reduceRight=m.foldr=n(-1),m.find=m.detect=function(n,t,r){var e;return e=k(n)?m.findIndex(n,t,r):m.findKey(n,t,r),e!==void 0&&e!==-1?n[e]:void 0},m.filter=m.select=function(n,t,r){var e=[];return t=x(t,r),m.each(n,function(n,r,u){t(n,r,u)&&e.push(n)}),e},m.reject=function(n,t,r){return m.filter(n,m.negate(x(t)),r)},m.every=m.all=function(n,t,r){t=x(t,r);for(var e=!k(n)&&m.keys(n),u=(e||n).length,i=0;u>i;i++){var o=e?e[i]:i;if(!t(n[o],o,n))return!1}return!0},m.some=m.any=function(n,t,r){t=x(t,r);for(var e=!k(n)&&m.keys(n),u=(e||n).length,i=0;u>i;i++){var o=e?e[i]:i;if(t(n[o],o,n))return!0}return!1},m.contains=m.includes=m.include=function(n,t,r,e){return k(n)||(n=m.values(n)),("number"!=typeof r||e)&&(r=0),m.indexOf(n,t,r)>=0},m.invoke=function(n,t){var r=l.call(arguments,2),e=m.isFunction(t);return m.map(n,function(n){var u=e?t:n[t];return null==u?u:u.apply(n,r)})},m.pluck=function(n,t){return m.map(n,m.property(t))},m.where=function(n,t){return m.filter(n,m.matcher(t))},m.findWhere=function(n,t){return m.find(n,m.matcher(t))},m.max=function(n,t,r){var e,u,i=-1/0,o=-1/0;if(null==t&&null!=n){n=k(n)?n:m.values(n);for(var a=0,c=n.length;c>a;a++)e=n[a],e>i&&(i=e)}else t=x(t,r),m.each(n,function(n,r,e){u=t(n,r,e),(u>o||u===-1/0&&i===-1/0)&&(i=n,o=u)});return i},m.min=function(n,t,r){var e,u,i=1/0,o=1/0;if(null==t&&null!=n){n=k(n)?n:m.values(n);for(var a=0,c=n.length;c>a;a++)e=n[a],i>e&&(i=e)}else t=x(t,r),m.each(n,function(n,r,e){u=t(n,r,e),(o>u||1/0===u&&1/0===i)&&(i=n,o=u)});return i},m.shuffle=function(n){for(var t,r=k(n)?n:m.values(n),e=r.length,u=Array(e),i=0;e>i;i++)t=m.random(0,i),t!==i&&(u[i]=u[t]),u[t]=r[i];return u},m.sample=function(n,t,r){return null==t||r?(k(n)||(n=m.values(n)),n[m.random(n.length-1)]):m.shuffle(n).slice(0,Math.max(0,t))},m.sortBy=function(n,t,r){return t=x(t,r),m.pluck(m.map(n,function(n,r,e){return{value:n,index:r,criteria:t(n,r,e)}}).sort(function(n,t){var r=n.criteria,e=t.criteria;if(r!==e){if(r>e||r===void 0)return 1;if(e>r||e===void 0)return-1}return n.index-t.index}),"value")};var F=function(n){return function(t,r,e){var u={};return r=x(r,e),m.each(t,function(e,i){var o=r(e,i,t);n(u,e,o)}),u}};m.groupBy=F(function(n,t,r){m.has(n,r)?n[r].push(t):n[r]=[t]}),m.indexBy=F(function(n,t,r){n[r]=t}),m.countBy=F(function(n,t,r){m.has(n,r)?n[r]++:n[r]=1}),m.toArray=function(n){return n?m.isArray(n)?l.call(n):k(n)?m.map(n,m.identity):m.values(n):[]},m.size=function(n){return null==n?0:k(n)?n.length:m.keys(n).length},m.partition=function(n,t,r){t=x(t,r);var e=[],u=[];return m.each(n,function(n,r,i){(t(n,r,i)?e:u).push(n)}),[e,u]},m.first=m.head=m.take=function(n,t,r){return null==n?void 0:null==t||r?n[0]:m.initial(n,n.length-t)},m.initial=function(n,t,r){return l.call(n,0,Math.max(0,n.length-(null==t||r?1:t)))},m.last=function(n,t,r){return null==n?void 0:null==t||r?n[n.length-1]:m.rest(n,Math.max(0,n.length-t))},m.rest=m.tail=m.drop=function(n,t,r){return l.call(n,null==t||r?1:t)},m.compact=function(n){return m.filter(n,m.identity)};var S=function(n,t,r,e){for(var u=[],i=0,o=e||0,a=O(n);a>o;o++){var c=n[o];if(k(c)&&(m.isArray(c)||m.isArguments(c))){t||(c=S(c,t,r));var f=0,l=c.length;for(u.length+=l;l>f;)u[i++]=c[f++]}else r||(u[i++]=c)}return u};m.flatten=function(n,t){return S(n,t,!1)},m.without=function(n){return m.difference(n,l.call(arguments,1))},m.uniq=m.unique=function(n,t,r,e){m.isBoolean(t)||(e=r,r=t,t=!1),null!=r&&(r=x(r,e));for(var u=[],i=[],o=0,a=O(n);a>o;o++){var c=n[o],f=r?r(c,o,n):c;t?(o&&i===f||u.push(c),i=f):r?m.contains(i,f)||(i.push(f),u.push(c)):m.contains(u,c)||u.push(c)}return u},m.union=function(){return m.uniq(S(arguments,!0,!0))},m.intersection=function(n){for(var t=[],r=arguments.length,e=0,u=O(n);u>e;e++){var i=n[e];if(!m.contains(t,i)){for(var o=1;r>o&&m.contains(arguments[o],i);o++);o===r&&t.push(i)}}return t},m.difference=function(n){var t=S(arguments,!0,!0,1);return m.filter(n,function(n){return!m.contains(t,n)})},m.zip=function(){return m.unzip(arguments)},m.unzip=function(n){for(var t=n&&m.max(n,O).length||0,r=Array(t),e=0;t>e;e++)r[e]=m.pluck(n,e);return r},m.object=function(n,t){for(var r={},e=0,u=O(n);u>e;e++)t?r[n[e]]=t[e]:r[n[e][0]]=n[e][1];return r},m.findIndex=t(1),m.findLastIndex=t(-1),m.sortedIndex=function(n,t,r,e){r=x(r,e,1);for(var u=r(t),i=0,o=O(n);o>i;){var a=Math.floor((i+o)/2);r(n[a])<u?i=a+1:o=a}return i},m.indexOf=r(1,m.findIndex,m.sortedIndex),m.lastIndexOf=r(-1,m.findLastIndex),m.range=function(n,t,r){null==t&&(t=n||0,n=0),r=r||1;for(var e=Math.max(Math.ceil((t-n)/r),0),u=Array(e),i=0;e>i;i++,n+=r)u[i]=n;return u};var E=function(n,t,r,e,u){if(!(e instanceof t))return n.apply(r,u);var i=j(n.prototype),o=n.apply(i,u);return m.isObject(o)?o:i};m.bind=function(n,t){if(g&&n.bind===g)return g.apply(n,l.call(arguments,1));if(!m.isFunction(n))throw new TypeError("Bind must be called on a function");var r=l.call(arguments,2),e=function(){return E(n,e,t,this,r.concat(l.call(arguments)))};return e},m.partial=function(n){var t=l.call(arguments,1),r=function(){for(var e=0,u=t.length,i=Array(u),o=0;u>o;o++)i[o]=t[o]===m?arguments[e++]:t[o];for(;e<arguments.length;)i.push(arguments[e++]);return E(n,r,this,this,i)};return r},m.bindAll=function(n){var t,r,e=arguments.length;if(1>=e)throw new Error("bindAll must be passed function names");for(t=1;e>t;t++)r=arguments[t],n[r]=m.bind(n[r],n);return n},m.memoize=function(n,t){var r=function(e){var u=r.cache,i=""+(t?t.apply(this,arguments):e);return m.has(u,i)||(u[i]=n.apply(this,arguments)),u[i]};return r.cache={},r},m.delay=function(n,t){var r=l.call(arguments,2);return setTimeout(function(){return n.apply(null,r)},t)},m.defer=m.partial(m.delay,m,1),m.throttle=function(n,t,r){var e,u,i,o=null,a=0;r||(r={});var c=function(){a=r.leading===!1?0:m.now(),o=null,i=n.apply(e,u),o||(e=u=null)};return function(){var f=m.now();a||r.leading!==!1||(a=f);var l=t-(f-a);return e=this,u=arguments,0>=l||l>t?(o&&(clearTimeout(o),o=null),a=f,i=n.apply(e,u),o||(e=u=null)):o||r.trailing===!1||(o=setTimeout(c,l)),i}},m.debounce=function(n,t,r){var e,u,i,o,a,c=function(){var f=m.now()-o;t>f&&f>=0?e=setTimeout(c,t-f):(e=null,r||(a=n.apply(i,u),e||(i=u=null)))};return function(){i=this,u=arguments,o=m.now();var f=r&&!e;return e||(e=setTimeout(c,t)),f&&(a=n.apply(i,u),i=u=null),a}},m.wrap=function(n,t){return m.partial(t,n)},m.negate=function(n){return function(){return!n.apply(this,arguments)}},m.compose=function(){var n=arguments,t=n.length-1;return function(){for(var r=t,e=n[t].apply(this,arguments);r--;)e=n[r].call(this,e);return e}},m.after=function(n,t){return function(){return--n<1?t.apply(this,arguments):void 0}},m.before=function(n,t){var r;return function(){return--n>0&&(r=t.apply(this,arguments)),1>=n&&(t=null),r}},m.once=m.partial(m.before,2);var M=!{toString:null}.propertyIsEnumerable("toString"),I=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"];m.keys=function(n){if(!m.isObject(n))return[];if(v)return v(n);var t=[];for(var r in n)m.has(n,r)&&t.push(r);return M&&e(n,t),t},m.allKeys=function(n){if(!m.isObject(n))return[];var t=[];for(var r in n)t.push(r);return M&&e(n,t),t},m.values=function(n){for(var t=m.keys(n),r=t.length,e=Array(r),u=0;r>u;u++)e[u]=n[t[u]];return e},m.mapObject=function(n,t,r){t=x(t,r);for(var e,u=m.keys(n),i=u.length,o={},a=0;i>a;a++)e=u[a],o[e]=t(n[e],e,n);return o},m.pairs=function(n){for(var t=m.keys(n),r=t.length,e=Array(r),u=0;r>u;u++)e[u]=[t[u],n[t[u]]];return e},m.invert=function(n){for(var t={},r=m.keys(n),e=0,u=r.length;u>e;e++)t[n[r[e]]]=r[e];return t},m.functions=m.methods=function(n){var t=[];for(var r in n)m.isFunction(n[r])&&t.push(r);return t.sort()},m.extend=_(m.allKeys),m.extendOwn=m.assign=_(m.keys),m.findKey=function(n,t,r){t=x(t,r);for(var e,u=m.keys(n),i=0,o=u.length;o>i;i++)if(e=u[i],t(n[e],e,n))return e},m.pick=function(n,t,r){var e,u,i={},o=n;if(null==o)return i;m.isFunction(t)?(u=m.allKeys(o),e=b(t,r)):(u=S(arguments,!1,!1,1),e=function(n,t,r){return t in r},o=Object(o));for(var a=0,c=u.length;c>a;a++){var f=u[a],l=o[f];e(l,f,o)&&(i[f]=l)}return i},m.omit=function(n,t,r){if(m.isFunction(t))t=m.negate(t);else{var e=m.map(S(arguments,!1,!1,1),String);t=function(n,t){return!m.contains(e,t)}}return m.pick(n,t,r)},m.defaults=_(m.allKeys,!0),m.create=function(n,t){var r=j(n);return t&&m.extendOwn(r,t),r},m.clone=function(n){return m.isObject(n)?m.isArray(n)?n.slice():m.extend({},n):n},m.tap=function(n,t){return t(n),n},m.isMatch=function(n,t){var r=m.keys(t),e=r.length;if(null==n)return!e;for(var u=Object(n),i=0;e>i;i++){var o=r[i];if(t[o]!==u[o]||!(o in u))return!1}return!0};var N=function(n,t,r,e){if(n===t)return 0!==n||1/n===1/t;if(null==n||null==t)return n===t;n instanceof m&&(n=n._wrapped),t instanceof m&&(t=t._wrapped);var u=s.call(n);if(u!==s.call(t))return!1;switch(u){case"[object RegExp]":case"[object String]":return""+n==""+t;case"[object Number]":return+n!==+n?+t!==+t:0===+n?1/+n===1/t:+n===+t;case"[object Date]":case"[object Boolean]":return+n===+t}var i="[object Array]"===u;if(!i){if("object"!=typeof n||"object"!=typeof t)return!1;var o=n.constructor,a=t.constructor;if(o!==a&&!(m.isFunction(o)&&o instanceof o&&m.isFunction(a)&&a instanceof a)&&"constructor"in n&&"constructor"in t)return!1}r=r||[],e=e||[];for(var c=r.length;c--;)if(r[c]===n)return e[c]===t;if(r.push(n),e.push(t),i){if(c=n.length,c!==t.length)return!1;for(;c--;)if(!N(n[c],t[c],r,e))return!1}else{var f,l=m.keys(n);if(c=l.length,m.keys(t).length!==c)return!1;for(;c--;)if(f=l[c],!m.has(t,f)||!N(n[f],t[f],r,e))return!1}return r.pop(),e.pop(),!0};m.isEqual=function(n,t){return N(n,t)},m.isEmpty=function(n){return null==n?!0:k(n)&&(m.isArray(n)||m.isString(n)||m.isArguments(n))?0===n.length:0===m.keys(n).length},m.isElement=function(n){return!(!n||1!==n.nodeType)},m.isArray=h||function(n){return"[object Array]"===s.call(n)},m.isObject=function(n){var t=typeof n;return"function"===t||"object"===t&&!!n},m.each(["Arguments","Function","String","Number","Date","RegExp","Error"],function(n){m["is"+n]=function(t){return s.call(t)==="[object "+n+"]"}}),m.isArguments(arguments)||(m.isArguments=function(n){return m.has(n,"callee")}),"function"!=typeof/./&&"object"!=typeof Int8Array&&(m.isFunction=function(n){return"function"==typeof n||!1}),m.isFinite=function(n){return isFinite(n)&&!isNaN(parseFloat(n))},m.isNaN=function(n){return m.isNumber(n)&&n!==+n},m.isBoolean=function(n){return n===!0||n===!1||"[object Boolean]"===s.call(n)},m.isNull=function(n){return null===n},m.isUndefined=function(n){return n===void 0},m.has=function(n,t){return null!=n&&p.call(n,t)},m.noConflict=function(){return u._=i,this},m.identity=function(n){return n},m.constant=function(n){return function(){return n}},m.noop=function(){},m.property=w,m.propertyOf=function(n){return null==n?function(){}:function(t){return n[t]}},m.matcher=m.matches=function(n){return n=m.extendOwn({},n),function(t){return m.isMatch(t,n)}},m.times=function(n,t,r){var e=Array(Math.max(0,n));t=b(t,r,1);for(var u=0;n>u;u++)e[u]=t(u);return e},m.random=function(n,t){return null==t&&(t=n,n=0),n+Math.floor(Math.random()*(t-n+1))},m.now=Date.now||function(){return(new Date).getTime()};var B={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},T=m.invert(B),R=function(n){var t=function(t){return n[t]},r="(?:"+m.keys(n).join("|")+")",e=RegExp(r),u=RegExp(r,"g");return function(n){return n=null==n?"":""+n,e.test(n)?n.replace(u,t):n}};m.escape=R(B),m.unescape=R(T),m.result=function(n,t,r){var e=null==n?void 0:n[t];return e===void 0&&(e=r),m.isFunction(e)?e.call(n):e};var q=0;m.uniqueId=function(n){var t=++q+"";return n?n+t:t},m.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var K=/(.)^/,z={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},D=/\\|'|\r|\n|\u2028|\u2029/g,L=function(n){return"\\"+z[n]};m.template=function(n,t,r){!t&&r&&(t=r),t=m.defaults({},t,m.templateSettings);var e=RegExp([(t.escape||K).source,(t.interpolate||K).source,(t.evaluate||K).source].join("|")+"|$","g"),u=0,i="__p+='";n.replace(e,function(t,r,e,o,a){return i+=n.slice(u,a).replace(D,L),u=a+t.length,r?i+="'+\n((__t=("+r+"))==null?'':_.escape(__t))+\n'":e?i+="'+\n((__t=("+e+"))==null?'':__t)+\n'":o&&(i+="';\n"+o+"\n__p+='"),t}),i+="';\n",t.variable||(i="with(obj||{}){\n"+i+"}\n"),i="var __t,__p='',__j=Array.prototype.join,"+"print=function(){__p+=__j.call(arguments,'');};\n"+i+"return __p;\n";try{var o=new Function(t.variable||"obj","_",i)}catch(a){throw a.source=i,a}var c=function(n){return o.call(this,n,m)},f=t.variable||"obj";return c.source="function("+f+"){\n"+i+"}",c},m.chain=function(n){var t=m(n);return t._chain=!0,t};var P=function(n,t){return n._chain?m(t).chain():t};m.mixin=function(n){m.each(m.functions(n),function(t){var r=m[t]=n[t];m.prototype[t]=function(){var n=[this._wrapped];return f.apply(n,arguments),P(this,r.apply(m,n))}})},m.mixin(m),m.each(["pop","push","reverse","shift","sort","splice","unshift"],function(n){var t=o[n];m.prototype[n]=function(){var r=this._wrapped;return t.apply(r,arguments),"shift"!==n&&"splice"!==n||0!==r.length||delete r[0],P(this,r)}}),m.each(["concat","join","slice"],function(n){var t=o[n];m.prototype[n]=function(){return P(this,t.apply(this._wrapped,arguments))}}),m.prototype.value=function(){return this._wrapped},m.prototype.valueOf=m.prototype.toJSON=m.prototype.value,m.prototype.toString=function(){return""+this._wrapped},"function"==typeof define&&define.amd&&define("underscore",[],function(){return m})}).call(this);
;
(function(t){var e=typeof self=="object"&&self.self===self&&self||typeof global=="object"&&global.global===global&&global;if(typeof define==="function"&&define.amd){define(["underscore","jquery","exports"],function(i,r,n){e.Backbone=t(e,n,i,r)})}else if(typeof exports!=="undefined"){var i=require("underscore"),r;try{r=require("jquery")}catch(n){}t(e,exports,i,r)}else{e.Backbone=t(e,{},e._,e.jQuery||e.Zepto||e.ender||e.$)}})(function(t,e,i,r){var n=t.Backbone;var s=Array.prototype.slice;e.VERSION="1.3.3";e.$=r;e.noConflict=function(){t.Backbone=n;return this};e.emulateHTTP=false;e.emulateJSON=false;var a=function(t,e,r){switch(t){case 1:return function(){return i[e](this[r])};case 2:return function(t){return i[e](this[r],t)};case 3:return function(t,n){return i[e](this[r],o(t,this),n)};case 4:return function(t,n,s){return i[e](this[r],o(t,this),n,s)};default:return function(){var t=s.call(arguments);t.unshift(this[r]);return i[e].apply(i,t)}}};var h=function(t,e,r){i.each(e,function(e,n){if(i[n])t.prototype[n]=a(e,n,r)})};var o=function(t,e){if(i.isFunction(t))return t;if(i.isObject(t)&&!e._isModel(t))return l(t);if(i.isString(t))return function(e){return e.get(t)};return t};var l=function(t){var e=i.matches(t);return function(t){return e(t.attributes)}};var u=e.Events={};var c=/\s+/;var f=function(t,e,r,n,s){var a=0,h;if(r&&typeof r==="object"){if(n!==void 0&&"context"in s&&s.context===void 0)s.context=n;for(h=i.keys(r);a<h.length;a++){e=f(t,e,h[a],r[h[a]],s)}}else if(r&&c.test(r)){for(h=r.split(c);a<h.length;a++){e=t(e,h[a],n,s)}}else{e=t(e,r,n,s)}return e};u.on=function(t,e,i){return d(this,t,e,i)};var d=function(t,e,i,r,n){t._events=f(v,t._events||{},e,i,{context:r,ctx:t,listening:n});if(n){var s=t._listeners||(t._listeners={});s[n.id]=n}return t};u.listenTo=function(t,e,r){if(!t)return this;var n=t._listenId||(t._listenId=i.uniqueId("l"));var s=this._listeningTo||(this._listeningTo={});var a=s[n];if(!a){var h=this._listenId||(this._listenId=i.uniqueId("l"));a=s[n]={obj:t,objId:n,id:h,listeningTo:s,count:0}}d(t,e,r,this,a);return this};var v=function(t,e,i,r){if(i){var n=t[e]||(t[e]=[]);var s=r.context,a=r.ctx,h=r.listening;if(h)h.count++;n.push({callback:i,context:s,ctx:s||a,listening:h})}return t};u.off=function(t,e,i){if(!this._events)return this;this._events=f(g,this._events,t,e,{context:i,listeners:this._listeners});return this};u.stopListening=function(t,e,r){var n=this._listeningTo;if(!n)return this;var s=t?[t._listenId]:i.keys(n);for(var a=0;a<s.length;a++){var h=n[s[a]];if(!h)break;h.obj.off(e,r,this)}return this};var g=function(t,e,r,n){if(!t)return;var s=0,a;var h=n.context,o=n.listeners;if(!e&&!r&&!h){var l=i.keys(o);for(;s<l.length;s++){a=o[l[s]];delete o[a.id];delete a.listeningTo[a.objId]}return}var u=e?[e]:i.keys(t);for(;s<u.length;s++){e=u[s];var c=t[e];if(!c)break;var f=[];for(var d=0;d<c.length;d++){var v=c[d];if(r&&r!==v.callback&&r!==v.callback._callback||h&&h!==v.context){f.push(v)}else{a=v.listening;if(a&&--a.count===0){delete o[a.id];delete a.listeningTo[a.objId]}}}if(f.length){t[e]=f}else{delete t[e]}}return t};u.once=function(t,e,r){var n=f(p,{},t,e,i.bind(this.off,this));if(typeof t==="string"&&r==null)e=void 0;return this.on(n,e,r)};u.listenToOnce=function(t,e,r){var n=f(p,{},e,r,i.bind(this.stopListening,this,t));return this.listenTo(t,n)};var p=function(t,e,r,n){if(r){var s=t[e]=i.once(function(){n(e,s);r.apply(this,arguments)});s._callback=r}return t};u.trigger=function(t){if(!this._events)return this;var e=Math.max(0,arguments.length-1);var i=Array(e);for(var r=0;r<e;r++)i[r]=arguments[r+1];f(m,this._events,t,void 0,i);return this};var m=function(t,e,i,r){if(t){var n=t[e];var s=t.all;if(n&&s)s=s.slice();if(n)_(n,r);if(s)_(s,[e].concat(r))}return t};var _=function(t,e){var i,r=-1,n=t.length,s=e[0],a=e[1],h=e[2];switch(e.length){case 0:while(++r<n)(i=t[r]).callback.call(i.ctx);return;case 1:while(++r<n)(i=t[r]).callback.call(i.ctx,s);return;case 2:while(++r<n)(i=t[r]).callback.call(i.ctx,s,a);return;case 3:while(++r<n)(i=t[r]).callback.call(i.ctx,s,a,h);return;default:while(++r<n)(i=t[r]).callback.apply(i.ctx,e);return}};u.bind=u.on;u.unbind=u.off;i.extend(e,u);var y=e.Model=function(t,e){var r=t||{};e||(e={});this.cid=i.uniqueId(this.cidPrefix);this.attributes={};if(e.collection)this.collection=e.collection;if(e.parse)r=this.parse(r,e)||{};var n=i.result(this,"defaults");r=i.defaults(i.extend({},n,r),n);this.set(r,e);this.changed={};this.initialize.apply(this,arguments)};i.extend(y.prototype,u,{changed:null,validationError:null,idAttribute:"id",cidPrefix:"c",initialize:function(){},toJSON:function(t){return i.clone(this.attributes)},sync:function(){return e.sync.apply(this,arguments)},get:function(t){return this.attributes[t]},escape:function(t){return i.escape(this.get(t))},has:function(t){return this.get(t)!=null},matches:function(t){return!!i.iteratee(t,this)(this.attributes)},set:function(t,e,r){if(t==null)return this;var n;if(typeof t==="object"){n=t;r=e}else{(n={})[t]=e}r||(r={});if(!this._validate(n,r))return false;var s=r.unset;var a=r.silent;var h=[];var o=this._changing;this._changing=true;if(!o){this._previousAttributes=i.clone(this.attributes);this.changed={}}var l=this.attributes;var u=this.changed;var c=this._previousAttributes;for(var f in n){e=n[f];if(!i.isEqual(l[f],e))h.push(f);if(!i.isEqual(c[f],e)){u[f]=e}else{delete u[f]}s?delete l[f]:l[f]=e}if(this.idAttribute in n)this.id=this.get(this.idAttribute);if(!a){if(h.length)this._pending=r;for(var d=0;d<h.length;d++){this.trigger("change:"+h[d],this,l[h[d]],r)}}if(o)return this;if(!a){while(this._pending){r=this._pending;this._pending=false;this.trigger("change",this,r)}}this._pending=false;this._changing=false;return this},unset:function(t,e){return this.set(t,void 0,i.extend({},e,{unset:true}))},clear:function(t){var e={};for(var r in this.attributes)e[r]=void 0;return this.set(e,i.extend({},t,{unset:true}))},hasChanged:function(t){if(t==null)return!i.isEmpty(this.changed);return i.has(this.changed,t)},changedAttributes:function(t){if(!t)return this.hasChanged()?i.clone(this.changed):false;var e=this._changing?this._previousAttributes:this.attributes;var r={};for(var n in t){var s=t[n];if(i.isEqual(e[n],s))continue;r[n]=s}return i.size(r)?r:false},previous:function(t){if(t==null||!this._previousAttributes)return null;return this._previousAttributes[t]},previousAttributes:function(){return i.clone(this._previousAttributes)},fetch:function(t){t=i.extend({parse:true},t);var e=this;var r=t.success;t.success=function(i){var n=t.parse?e.parse(i,t):i;if(!e.set(n,t))return false;if(r)r.call(t.context,e,i,t);e.trigger("sync",e,i,t)};B(this,t);return this.sync("read",this,t)},save:function(t,e,r){var n;if(t==null||typeof t==="object"){n=t;r=e}else{(n={})[t]=e}r=i.extend({validate:true,parse:true},r);var s=r.wait;if(n&&!s){if(!this.set(n,r))return false}else if(!this._validate(n,r)){return false}var a=this;var h=r.success;var o=this.attributes;r.success=function(t){a.attributes=o;var e=r.parse?a.parse(t,r):t;if(s)e=i.extend({},n,e);if(e&&!a.set(e,r))return false;if(h)h.call(r.context,a,t,r);a.trigger("sync",a,t,r)};B(this,r);if(n&&s)this.attributes=i.extend({},o,n);var l=this.isNew()?"create":r.patch?"patch":"update";if(l==="patch"&&!r.attrs)r.attrs=n;var u=this.sync(l,this,r);this.attributes=o;return u},destroy:function(t){t=t?i.clone(t):{};var e=this;var r=t.success;var n=t.wait;var s=function(){e.stopListening();e.trigger("destroy",e,e.collection,t)};t.success=function(i){if(n)s();if(r)r.call(t.context,e,i,t);if(!e.isNew())e.trigger("sync",e,i,t)};var a=false;if(this.isNew()){i.defer(t.success)}else{B(this,t);a=this.sync("delete",this,t)}if(!n)s();return a},url:function(){var t=i.result(this,"urlRoot")||i.result(this.collection,"url")||F();if(this.isNew())return t;var e=this.get(this.idAttribute);return t.replace(/[^\/]$/,"$&/")+encodeURIComponent(e)},parse:function(t,e){return t},clone:function(){return new this.constructor(this.attributes)},isNew:function(){return!this.has(this.idAttribute)},isValid:function(t){return this._validate({},i.extend({},t,{validate:true}))},_validate:function(t,e){if(!e.validate||!this.validate)return true;t=i.extend({},this.attributes,t);var r=this.validationError=this.validate(t,e)||null;if(!r)return true;this.trigger("invalid",this,r,i.extend(e,{validationError:r}));return false}});var b={keys:1,values:1,pairs:1,invert:1,pick:0,omit:0,chain:1,isEmpty:1};h(y,b,"attributes");var x=e.Collection=function(t,e){e||(e={});if(e.model)this.model=e.model;if(e.comparator!==void 0)this.comparator=e.comparator;this._reset();this.initialize.apply(this,arguments);if(t)this.reset(t,i.extend({silent:true},e))};var w={add:true,remove:true,merge:true};var E={add:true,remove:false};var I=function(t,e,i){i=Math.min(Math.max(i,0),t.length);var r=Array(t.length-i);var n=e.length;var s;for(s=0;s<r.length;s++)r[s]=t[s+i];for(s=0;s<n;s++)t[s+i]=e[s];for(s=0;s<r.length;s++)t[s+n+i]=r[s]};i.extend(x.prototype,u,{model:y,initialize:function(){},toJSON:function(t){return this.map(function(e){return e.toJSON(t)})},sync:function(){return e.sync.apply(this,arguments)},add:function(t,e){return this.set(t,i.extend({merge:false},e,E))},remove:function(t,e){e=i.extend({},e);var r=!i.isArray(t);t=r?[t]:t.slice();var n=this._removeModels(t,e);if(!e.silent&&n.length){e.changes={added:[],merged:[],removed:n};this.trigger("update",this,e)}return r?n[0]:n},set:function(t,e){if(t==null)return;e=i.extend({},w,e);if(e.parse&&!this._isModel(t)){t=this.parse(t,e)||[]}var r=!i.isArray(t);t=r?[t]:t.slice();var n=e.at;if(n!=null)n=+n;if(n>this.length)n=this.length;if(n<0)n+=this.length+1;var s=[];var a=[];var h=[];var o=[];var l={};var u=e.add;var c=e.merge;var f=e.remove;var d=false;var v=this.comparator&&n==null&&e.sort!==false;var g=i.isString(this.comparator)?this.comparator:null;var p,m;for(m=0;m<t.length;m++){p=t[m];var _=this.get(p);if(_){if(c&&p!==_){var y=this._isModel(p)?p.attributes:p;if(e.parse)y=_.parse(y,e);_.set(y,e);h.push(_);if(v&&!d)d=_.hasChanged(g)}if(!l[_.cid]){l[_.cid]=true;s.push(_)}t[m]=_}else if(u){p=t[m]=this._prepareModel(p,e);if(p){a.push(p);this._addReference(p,e);l[p.cid]=true;s.push(p)}}}if(f){for(m=0;m<this.length;m++){p=this.models[m];if(!l[p.cid])o.push(p)}if(o.length)this._removeModels(o,e)}var b=false;var x=!v&&u&&f;if(s.length&&x){b=this.length!==s.length||i.some(this.models,function(t,e){return t!==s[e]});this.models.length=0;I(this.models,s,0);this.length=this.models.length}else if(a.length){if(v)d=true;I(this.models,a,n==null?this.length:n);this.length=this.models.length}if(d)this.sort({silent:true});if(!e.silent){for(m=0;m<a.length;m++){if(n!=null)e.index=n+m;p=a[m];p.trigger("add",p,this,e)}if(d||b)this.trigger("sort",this,e);if(a.length||o.length||h.length){e.changes={added:a,removed:o,merged:h};this.trigger("update",this,e)}}return r?t[0]:t},reset:function(t,e){e=e?i.clone(e):{};for(var r=0;r<this.models.length;r++){this._removeReference(this.models[r],e)}e.previousModels=this.models;this._reset();t=this.add(t,i.extend({silent:true},e));if(!e.silent)this.trigger("reset",this,e);return t},push:function(t,e){return this.add(t,i.extend({at:this.length},e))},pop:function(t){var e=this.at(this.length-1);return this.remove(e,t)},unshift:function(t,e){return this.add(t,i.extend({at:0},e))},shift:function(t){var e=this.at(0);return this.remove(e,t)},slice:function(){return s.apply(this.models,arguments)},get:function(t){if(t==null)return void 0;return this._byId[t]||this._byId[this.modelId(t.attributes||t)]||t.cid&&this._byId[t.cid]},has:function(t){return this.get(t)!=null},at:function(t){if(t<0)t+=this.length;return this.models[t]},where:function(t,e){return this[e?"find":"filter"](t)},findWhere:function(t){return this.where(t,true)},sort:function(t){var e=this.comparator;if(!e)throw new Error("Cannot sort a set without a comparator");t||(t={});var r=e.length;if(i.isFunction(e))e=i.bind(e,this);if(r===1||i.isString(e)){this.models=this.sortBy(e)}else{this.models.sort(e)}if(!t.silent)this.trigger("sort",this,t);return this},pluck:function(t){return this.map(t+"")},fetch:function(t){t=i.extend({parse:true},t);var e=t.success;var r=this;t.success=function(i){var n=t.reset?"reset":"set";r[n](i,t);if(e)e.call(t.context,r,i,t);r.trigger("sync",r,i,t)};B(this,t);return this.sync("read",this,t)},create:function(t,e){e=e?i.clone(e):{};var r=e.wait;t=this._prepareModel(t,e);if(!t)return false;if(!r)this.add(t,e);var n=this;var s=e.success;e.success=function(t,e,i){if(r)n.add(t,i);if(s)s.call(i.context,t,e,i)};t.save(null,e);return t},parse:function(t,e){return t},clone:function(){return new this.constructor(this.models,{model:this.model,comparator:this.comparator})},modelId:function(t){return t[this.model.prototype.idAttribute||"id"]},_reset:function(){this.length=0;this.models=[];this._byId={}},_prepareModel:function(t,e){if(this._isModel(t)){if(!t.collection)t.collection=this;return t}e=e?i.clone(e):{};e.collection=this;var r=new this.model(t,e);if(!r.validationError)return r;this.trigger("invalid",this,r.validationError,e);return false},_removeModels:function(t,e){var i=[];for(var r=0;r<t.length;r++){var n=this.get(t[r]);if(!n)continue;var s=this.indexOf(n);this.models.splice(s,1);this.length--;delete this._byId[n.cid];var a=this.modelId(n.attributes);if(a!=null)delete this._byId[a];if(!e.silent){e.index=s;n.trigger("remove",n,this,e)}i.push(n);this._removeReference(n,e)}return i},_isModel:function(t){return t instanceof y},_addReference:function(t,e){this._byId[t.cid]=t;var i=this.modelId(t.attributes);if(i!=null)this._byId[i]=t;t.on("all",this._onModelEvent,this)},_removeReference:function(t,e){delete this._byId[t.cid];var i=this.modelId(t.attributes);if(i!=null)delete this._byId[i];if(this===t.collection)delete t.collection;t.off("all",this._onModelEvent,this)},_onModelEvent:function(t,e,i,r){if(e){if((t==="add"||t==="remove")&&i!==this)return;if(t==="destroy")this.remove(e,r);if(t==="change"){var n=this.modelId(e.previousAttributes());var s=this.modelId(e.attributes);if(n!==s){if(n!=null)delete this._byId[n];if(s!=null)this._byId[s]=e}}}this.trigger.apply(this,arguments)}});var S={forEach:3,each:3,map:3,collect:3,reduce:0,foldl:0,inject:0,reduceRight:0,foldr:0,find:3,detect:3,filter:3,select:3,reject:3,every:3,all:3,some:3,any:3,include:3,includes:3,contains:3,invoke:0,max:3,min:3,toArray:1,size:1,first:3,head:3,take:3,initial:3,rest:3,tail:3,drop:3,last:3,without:0,difference:0,indexOf:3,shuffle:1,lastIndexOf:3,isEmpty:1,chain:1,sample:3,partition:3,groupBy:3,countBy:3,sortBy:3,indexBy:3,findIndex:3,findLastIndex:3};h(x,S,"models");var k=e.View=function(t){this.cid=i.uniqueId("view");i.extend(this,i.pick(t,P));this._ensureElement();this.initialize.apply(this,arguments)};var T=/^(\S+)\s*(.*)$/;var P=["model","collection","el","id","attributes","className","tagName","events"];i.extend(k.prototype,u,{tagName:"div",$:function(t){return this.$el.find(t)},initialize:function(){},render:function(){return this},remove:function(){this._removeElement();this.stopListening();return this},_removeElement:function(){this.$el.remove()},setElement:function(t){this.undelegateEvents();this._setElement(t);this.delegateEvents();return this},_setElement:function(t){this.$el=t instanceof e.$?t:e.$(t);this.el=this.$el[0]},delegateEvents:function(t){t||(t=i.result(this,"events"));if(!t)return this;this.undelegateEvents();for(var e in t){var r=t[e];if(!i.isFunction(r))r=this[r];if(!r)continue;var n=e.match(T);this.delegate(n[1],n[2],i.bind(r,this))}return this},delegate:function(t,e,i){this.$el.on(t+".delegateEvents"+this.cid,e,i);return this},undelegateEvents:function(){if(this.$el)this.$el.off(".delegateEvents"+this.cid);return this},undelegate:function(t,e,i){this.$el.off(t+".delegateEvents"+this.cid,e,i);return this},_createElement:function(t){return document.createElement(t)},_ensureElement:function(){if(!this.el){var t=i.extend({},i.result(this,"attributes"));if(this.id)t.id=i.result(this,"id");if(this.className)t["class"]=i.result(this,"className");this.setElement(this._createElement(i.result(this,"tagName")));this._setAttributes(t)}else{this.setElement(i.result(this,"el"))}},_setAttributes:function(t){this.$el.attr(t)}});e.sync=function(t,r,n){var s=H[t];i.defaults(n||(n={}),{emulateHTTP:e.emulateHTTP,emulateJSON:e.emulateJSON});var a={type:s,dataType:"json"};if(!n.url){a.url=i.result(r,"url")||F()}if(n.data==null&&r&&(t==="create"||t==="update"||t==="patch")){a.contentType="application/json";a.data=JSON.stringify(n.attrs||r.toJSON(n))}if(n.emulateJSON){a.contentType="application/x-www-form-urlencoded";a.data=a.data?{model:a.data}:{}}if(n.emulateHTTP&&(s==="PUT"||s==="DELETE"||s==="PATCH")){a.type="POST";if(n.emulateJSON)a.data._method=s;var h=n.beforeSend;n.beforeSend=function(t){t.setRequestHeader("X-HTTP-Method-Override",s);if(h)return h.apply(this,arguments)}}if(a.type!=="GET"&&!n.emulateJSON){a.processData=false}var o=n.error;n.error=function(t,e,i){n.textStatus=e;n.errorThrown=i;if(o)o.call(n.context,t,e,i)};var l=n.xhr=e.ajax(i.extend(a,n));r.trigger("request",r,l,n);return l};var H={create:"POST",update:"PUT",patch:"PATCH","delete":"DELETE",read:"GET"};e.ajax=function(){return e.$.ajax.apply(e.$,arguments)};var $=e.Router=function(t){t||(t={});if(t.routes)this.routes=t.routes;this._bindRoutes();this.initialize.apply(this,arguments)};var A=/\((.*?)\)/g;var C=/(\(\?)?:\w+/g;var R=/\*\w+/g;var j=/[\-{}\[\]+?.,\\\^$|#\s]/g;i.extend($.prototype,u,{initialize:function(){},route:function(t,r,n){if(!i.isRegExp(t))t=this._routeToRegExp(t);if(i.isFunction(r)){n=r;r=""}if(!n)n=this[r];var s=this;e.history.route(t,function(i){var a=s._extractParameters(t,i);if(s.execute(n,a,r)!==false){s.trigger.apply(s,["route:"+r].concat(a));s.trigger("route",r,a);e.history.trigger("route",s,r,a)}});return this},execute:function(t,e,i){if(t)t.apply(this,e)},navigate:function(t,i){e.history.navigate(t,i);return this},_bindRoutes:function(){if(!this.routes)return;this.routes=i.result(this,"routes");var t,e=i.keys(this.routes);while((t=e.pop())!=null){this.route(t,this.routes[t])}},_routeToRegExp:function(t){t=t.replace(j,"\\$&").replace(A,"(?:$1)?").replace(C,function(t,e){return e?t:"([^/?]+)"}).replace(R,"([^?]*?)");return new RegExp("^"+t+"(?:\\?([\\s\\S]*))?$")},_extractParameters:function(t,e){var r=t.exec(e).slice(1);return i.map(r,function(t,e){if(e===r.length-1)return t||null;return t?decodeURIComponent(t):null})}});var N=e.History=function(){this.handlers=[];this.checkUrl=i.bind(this.checkUrl,this);if(typeof window!=="undefined"){this.location=window.location;this.history=window.history}};var M=/^[#\/]|\s+$/g;var O=/^\/+|\/+$/g;var U=/#.*$/;N.started=false;i.extend(N.prototype,u,{interval:50,atRoot:function(){var t=this.location.pathname.replace(/[^\/]$/,"$&/");return t===this.root&&!this.getSearch()},matchRoot:function(){var t=this.decodeFragment(this.location.pathname);var e=t.slice(0,this.root.length-1)+"/";return e===this.root},decodeFragment:function(t){return decodeURI(t.replace(/%25/g,"%2525"))},getSearch:function(){var t=this.location.href.replace(/#.*/,"").match(/\?.+/);return t?t[0]:""},getHash:function(t){var e=(t||this).location.href.match(/#(.*)$/);return e?e[1]:""},getPath:function(){var t=this.decodeFragment(this.location.pathname+this.getSearch()).slice(this.root.length-1);return t.charAt(0)==="/"?t.slice(1):t},getFragment:function(t){if(t==null){if(this._usePushState||!this._wantsHashChange){t=this.getPath()}else{t=this.getHash()}}return t.replace(M,"")},start:function(t){if(N.started)throw new Error("Backbone.history has already been started");N.started=true;this.options=i.extend({root:"/"},this.options,t);this.root=this.options.root;this._wantsHashChange=this.options.hashChange!==false;this._hasHashChange="onhashchange"in window&&(document.documentMode===void 0||document.documentMode>7);this._useHashChange=this._wantsHashChange&&this._hasHashChange;this._wantsPushState=!!this.options.pushState;this._hasPushState=!!(this.history&&this.history.pushState);this._usePushState=this._wantsPushState&&this._hasPushState;this.fragment=this.getFragment();this.root=("/"+this.root+"/").replace(O,"/");if(this._wantsHashChange&&this._wantsPushState){if(!this._hasPushState&&!this.atRoot()){var e=this.root.slice(0,-1)||"/";this.location.replace(e+"#"+this.getPath());return true}else if(this._hasPushState&&this.atRoot()){this.navigate(this.getHash(),{replace:true})}}if(!this._hasHashChange&&this._wantsHashChange&&!this._usePushState){this.iframe=document.createElement("iframe");this.iframe.src="javascript:0";this.iframe.style.display="none";this.iframe.tabIndex=-1;var r=document.body;var n=r.insertBefore(this.iframe,r.firstChild).contentWindow;n.document.open();n.document.close();n.location.hash="#"+this.fragment}var s=window.addEventListener||function(t,e){return attachEvent("on"+t,e)};if(this._usePushState){s("popstate",this.checkUrl,false)}else if(this._useHashChange&&!this.iframe){s("hashchange",this.checkUrl,false)}else if(this._wantsHashChange){this._checkUrlInterval=setInterval(this.checkUrl,this.interval)}if(!this.options.silent)return this.loadUrl()},stop:function(){var t=window.removeEventListener||function(t,e){return detachEvent("on"+t,e)};if(this._usePushState){t("popstate",this.checkUrl,false)}else if(this._useHashChange&&!this.iframe){t("hashchange",this.checkUrl,false)}if(this.iframe){document.body.removeChild(this.iframe);this.iframe=null}if(this._checkUrlInterval)clearInterval(this._checkUrlInterval);N.started=false},route:function(t,e){this.handlers.unshift({route:t,callback:e})},checkUrl:function(t){var e=this.getFragment();if(e===this.fragment&&this.iframe){e=this.getHash(this.iframe.contentWindow)}if(e===this.fragment)return false;if(this.iframe)this.navigate(e);this.loadUrl()},loadUrl:function(t){if(!this.matchRoot())return false;t=this.fragment=this.getFragment(t);return i.some(this.handlers,function(e){if(e.route.test(t)){e.callback(t);return true}})},navigate:function(t,e){if(!N.started)return false;if(!e||e===true)e={trigger:!!e};t=this.getFragment(t||"");var i=this.root;if(t===""||t.charAt(0)==="?"){i=i.slice(0,-1)||"/"}var r=i+t;t=this.decodeFragment(t.replace(U,""));if(this.fragment===t)return;this.fragment=t;if(this._usePushState){this.history[e.replace?"replaceState":"pushState"]({},document.title,r)}else if(this._wantsHashChange){this._updateHash(this.location,t,e.replace);if(this.iframe&&t!==this.getHash(this.iframe.contentWindow)){var n=this.iframe.contentWindow;if(!e.replace){n.document.open();n.document.close()}this._updateHash(n.location,t,e.replace)}}else{return this.location.assign(r)}if(e.trigger)return this.loadUrl(t)},_updateHash:function(t,e,i){if(i){var r=t.href.replace(/(javascript:|#).*$/,"");t.replace(r+"#"+e)}else{t.hash="#"+e}}});e.history=new N;var q=function(t,e){var r=this;var n;if(t&&i.has(t,"constructor")){n=t.constructor}else{n=function(){return r.apply(this,arguments)}}i.extend(n,r,e);n.prototype=i.create(r.prototype,t);n.prototype.constructor=n;n.__super__=r.prototype;return n};y.extend=x.extend=$.extend=k.extend=N.extend=q;var F=function(){throw new Error('A "url" property or function must be specified')};var B=function(t,e){var i=e.error;e.error=function(r){if(i)i.call(e.context,t,r,e);t.trigger("error",t,r,e)}};return e});
;
var o2 = o2 || {};

o2.Models = o2.Models || {};

o2.Models.User = ( function( Backbone ) {
	return Backbone.Model.extend( {
		defaults: function() {
			return {
				userLogin    : '',
				displayName  : '',
				userNicename : '',
				url          : '',
				urlTitle     : '',
				hash         : '00000000000000000000000000000000',
				modelClass   : '',
				avatar       : '',
				avatarSize   : 100
			};
		},

		initialize: function( options ) {
			options = options || {};
			if ( ! o2.options.showAvatars ) {
				options.avatar = false;
				options.avatarSize = false;
			}
		}
	} );
} )( Backbone );
;
var o2 = o2 || {};

o2.Collections = o2.Collections || {};

o2.Collections.Users = ( function( $, Backbone ) {
	return Backbone.Collection.extend( {

		model: o2.Models.User,

		userLoginRequestQueue: [],
		queueTimer: false,

		defaults: {
			userDataURL: ''
		},

		initialize: function( options ) {
			this.options = _.extend( this.defaults, options );
			_.bindAll( this, 'userDataCallback', 'ajaxGetUserData' );
		},

		/**
		  * getUserModel returns the user model (attributes only) for the given object (post, comment or currentUser),
		  * with the avatar (url) and avatarSize added for easy passing to templates
		  *
		  * If not in the cache, and not nopriv, it requests it from the server and passes a temporary
		  * model back to the caller
		  */
		getUserFor: function( object, avatarSize ) {
			// construct from userLogin if present
			var user;

			if ( 'undefined' !== typeof object.userLogin && object.userLogin && object.userLogin.length ) {
				user = this.findWhere( { userLogin: object.userLogin } );
				if ( 'undefined' === typeof user ) {
					// we don't have it, create an new one with some temporary values
					user = new o2.Models.User( {
						userLogin    : object.userLogin,
						userNicename : object.userNicename,
						displayName  : object.userLogin,
						modelClass   : 'o2-incomplete-' + object.userNicename
					} );

					// add it to the collection
					this.add( user );

					if ( this.options.userDataURL.length ) {
						// Add it to the queue
						this.userLoginRequestQueue.push( object.userLogin );
						// Reset the timer
						if ( this.queueTimer ) {
							clearTimeout( this.queueTimer );
						}
						this.queueTimer = setTimeout( this.ajaxGetUserData, 1000 );
					}
				}
			} else {
				// otherwise, construct it from nopriv attributes
				user = new o2.Models.User( {
					displayName : object.noprivUserName,
					url         : object.noprivUserURL,
					urlTitle    : object.noprivUserName,
					hash        : object.noprivUserHash
				} );
			}

			var userAttributes = _.clone( user.attributes );

			// Add the avatar info
			var defaultAvatar = ( 'undefined' !== typeof o2.options.defaultAvatar ) ? o2.options.defaultAvatar : 'identicon';
			userAttributes.avatar = 'https://gravatar.com/avatar/' + userAttributes.hash + '?d=' + defaultAvatar;
			userAttributes.avatarSize = avatarSize;

			return userAttributes;
		},

		ajaxGetUserData: function() {
			$.ajax( {
				dataType: 'json',
				url: this.options.userDataURL,
				xhrFields: {
					withCredentials: true
				},
				data: {
					action: 'o2_userdata',
					userlogins: this.userLoginRequestQueue
				},
				success: this.userDataCallback
			} );
			this.userLoginRequestQueue = [];
		},

		addOrUpdate: function( user ) {
			// Since it is possible this userLogin has already been added, and with a different ID,
			// we need to check for it before we simply add it
			var foundUser = this.findWhere( { userLogin: user.userLogin } );
			if ( 'undefined' === typeof foundUser ) {
				this.add( user );
			} else {
				foundUser.set( user );
			}

			// We can update incompletes for this user now
			this.updateIncompletes( user.userLogin );
		},

		userDataCallback: function( data ) {
			var that = this;
			_.each( data.data, function( datum ) {
				that.addOrUpdate( datum );
			} );
		},

		updateIncompletes: function( userLogin ) {
			// crawl the DOM and update tags that need the deets

			var user = this.getUserFor( { userLogin: userLogin } );

			// update img src's and a href's with .o2-incomplete-{userLogin}
			var selectorClass = 'o2-incomplete-' + user.userNicename;

			$( 'a.' + selectorClass ).each( function() {
				$( this ).attr( 'href', user.url ).removeClass( selectorClass );

				// if the anchor contains text child nodes which contain text equal to the userLogin,
				// update the text to the displayName -- we use filter to be careful not
				// to damage children that might be parented by the a
				$( this ).contents().filter( function() {
					if ( this.nodeType === Node.TEXT_NODE ) {
						this.nodeValue = this.nodeValue.replace( user.userLogin, user.displayName );
					}
				} );
			} );

			$( 'img.' + selectorClass ).each( function() {
				$( this ).attr( 'src', user.avatar ).removeClass( selectorClass );
			} );
		}

	} );
} )( jQuery, Backbone );

;
var o2 = o2 || {};

( function( $ ) {

o2.Events = {
	actions: {},
	filters: {},
	events: {},
	currentActions: [],
	currentFilters: [],
	doneActions: [],
	doneFilters: [],

	reset: function() {
	},

	compare: function( a, b ) {
		if ( a.priority < b.priority ) {
			return -1;
		}
		if ( a.priority > b.priority ) {
			return 1;
		}
		return 0;
	},

	_addCallback: function( type, hook, callback, currentObject, priority, args ) {
		var r = this._getHook( type, hook );
		if ( ! this._callbackExists( type, hook, callback, priority ) ) {
			r.push( {
				callback: callback,
				priority: priority,
				currentObject: currentObject,
				args: args
			} );
			this._setHook( type, hook, r );
		}
	},

	_callbackExists: function( type, hook, callback, priority ) {
		var r = this._getHook( type, hook );
		r.forEach( function( e ) {
			if ( e.callback.toString() === callback.toString() && e.priority === priority ) {
				return true;
			}
		} );
		return false;
	},

	_getCurrentHook: function( type ) {
		var l;
		if ( 'actions' === type ) {
			l = this.currentActions.length;
			if ( l > 0 ) {
				return this.currentActions[ l - 1 ];
			}
		} else if ( 'filters' === type ) {
			l = this.currentFilters.length;
			if ( l > 0 ) {
				return this.currentFilters[ l - 1 ];
			}
		}
		return false;
	},

	_getHook: function( type, hook ) {
		var r = this[ type ][ hook ];
		if ( 'undefined' === typeof r ) {
			r = [];
		}
		r.sort( this.compare );
		return r;
	},

	_removeCallback: function( type, hook, callback, priority ) {
		var r = this._getHook( type, hook),
			filtered = [];
		r.forEach( function( e ) {
			if ( e.callback.toString() === callback.toString() && e.priority === priority ) {
				// Do nothing.
			} else {
				filtered.push( e );
			}
		} );
		this._setHook( type, hook, filtered );
	},

	_setHook: function( type, hook, r ) {
		o2.Events[ type ][ hook ] = r;
	},

	addAction: function( /* hook, callback */ ) {
	},

	currentAction: function() {
		return this._getCurrentHook( 'actions' );
	},

	doAction: function( hook /*, args */ ) {
		if ( 'string' === typeof hook ) {
			var args = Array.prototype.slice.call( arguments, 1 );
			this.currentActions.push( hook );
			o2.$appContainer.trigger( hook, args );
			if ( ! this.didAction( hook ) ) {
				this.doneActions.push( hook );
			}
			this.currentActions.pop();
		}
	},

	didAction: function( hook ) {
		if ( -1 === $.inArray( hook, this.doneActions ) ) {
			return false;
		}
		return true;
	},

	removeAction: function( /* hook, callback */ ) {
	},

	removeAllActions: function( /* hook */ ) {
	},

	addFilter: function( hook, callback, currentObject, priority, args ) {
		if ( 'string' === typeof hook && 'function' === typeof callback ) {
			priority = parseInt( ( priority || 10 ), 10 );
			args = parseInt( ( args || 1 ), 10 );
			this._addCallback( 'filters', hook, callback, currentObject, priority, args );
		}
	},

	applyFilters: function() {
		if ( arguments.length > 1 && 'string' === typeof arguments[0] ) {
			this.currentFilters.push( arguments[0] );
			var callbacks = this._getHook( 'filters', arguments[0] );
			var args = Array.prototype.slice.call( arguments, 1 );
			$.each( callbacks, function( i, filter ) {
				if ( filter.args === args.length ) {
					args[0] = filter.callback.apply( filter.currentObject, args );
				}
			} );
			this.doneFilters.push( this.currentFilters.pop() );
			return args[0];
		}
	},

	currentFilter: function() {
		return this._getCurrentHook( 'filters' );
	},

	removeFilter: function( hook, callback, priority ) {
		if ( arguments.length > 1 && 'string' === typeof arguments[0] ) {
			priority = parseInt( ( priority || 10 ), 10 );
			this._removeCallback( 'filters', hook, callback, priority );
		}
	},

	removeAllFilters: function( /* hook, priority */ ) {
	},

	addEvent: function( hook, args ) {
		var priority = +new Date(),
			maxPriority = 0;
		var events = this._getHook( 'events', hook );
		$.each( events, function( i, e ) {
			if ( e.priority > maxPriority ) {
				maxPriority = e.priority;
			}
		} );
		if ( priority < maxPriority ) {
			priority = maxPriority + 1;
		}
		this._addCallback( 'events', hook, function() { return; }, null, priority, args );
		return priority;
	},

	hasPriorEvents: function( hook, priority ) {
		var hasPriorEvents = false;
		var events = this._getHook( 'events', hook );
		$.each( events, function( i, e ) {
			if ( e.priority < priority ) {
				hasPriorEvents = true;
				return false;
			}
		} );
		return hasPriorEvents;
	},

	removeEvent: function( hook, priority ) {
		this._removeCallback( 'events', hook, function() { return; }, priority );
	}
};

} )( jQuery );

o2.Events.dispatcher = _.clone( Backbone.Events );
;
var o2Keyboard;

( function( $ ) {

o2Keyboard = {

	page:        false,
	searchInput: false,
	lastPosted:  false,
	atWhoFlag:   false,
	yOffset:     80,

	mainEditor:        false,
	mainEditorWrapper: false,
	threadContainer:   'article',
	currentItem:       false,

	init: function( pageMeta ) {
		var $doc = $( document );
		o2Keyboard.page = pageMeta.attributes;

		if ( o2Keyboard.page.isSingle || o2Keyboard.page.isPage ) {
			o2Keyboard.mainEditor = '.o2-editor-text';
			o2Keyboard.mainEditorWrapper = '.o2-editor';
		} else {
			o2Keyboard.mainEditor = '.o2-app-new-post .o2-editor-text';
			o2Keyboard.mainEditorWrapper = '.o2-app-new-post .o2-editor';
		}

		if ( 'undefined' !== typeof( o2.options.threadContainer ) ) {
			o2Keyboard.threadContainer = o2.options.threadContainer;
		}

		$doc.ready( function () {
			$( '.o2-toggle-keyboard-help' ).click( function( e ) {
				$( '#help' ).toggle();
				e.preventDefault();
				e.stopPropagation();
			});

			$doc.click( function() {
				$( '#help' ).hide();
			});

			$( '#help' ).click( function( e ) {
				// consume, discard - just let the help stay open if they click in it
				e.preventDefault();
				e.stopPropagation();
			});

			/*
			 * Since atwho esc key handler runs first, we listen to the hidden event for atwho,
			 * and then set a flag and timeout to prevent closing atwho suggestions and reply
			 * boxes based on one esc keypress.
			*/
			$doc.on( 'hidden.atwho', function() {
				o2Keyboard.atWhoFlag = true;

				setTimeout( function(){
					o2Keyboard.atWhoFlag = false;
				}, 200);
			});
		});


		$doc.on( 'keydown', null, 't', this.jumpToTop );
		$doc.on( 'keydown', null, 'j', this.jumpToNext );
		$doc.on( 'keydown', null, 'k', this.jumpToPrevious );
		$doc.on( 'keydown', null, 'c', this.compose );
		$doc.on( 'keydown', null, 's', this.search );
		$doc.on( 'keydown', null, '/', this.search );
		$doc.on( 'keydown', null, 'e', this.edit );
		$doc.on( 'keydown', null, 'r', this.reply );
		$doc.on( 'keydown', null, 'o', this.toggleComments );
		$doc.on( 'keydown', null, 'esc', this.cancel );
		$doc.on( 'keydown', '.o2-editor-text', 'esc', this.cancel );

		o2.$appContainer.on( 'post-post-save.o2',    this.updateLastPosted );
		o2.$appContainer.on( 'post-new-post.o2',     this.updateLastPosted );
		o2.$appContainer.on( 'post-comment-save.o2', this.updateLastPosted );
	},

	jumpTo: function( y, argSpeed ) {
		var speed = ( 'undefined' === typeof argSpeed ) ? 600 : argSpeed;
		$( 'html, body' ).animate( { scrollTop: y }, speed );
	},

	jumpToTop: function( e ) {
		o2Keyboard.jumpTo( 0 );
		e.preventDefault();
	},

	jumpToNext: function( e ) {
		var previousItem = false;

		if ( ! o2Keyboard.currentItem ) {
			// Nothing is selected, jump to the first post.
			o2Keyboard.currentItem = $( '.o2-post' ).first();
		} else if ( o2Keyboard.currentItem.hasClass( 'o2-post' ) ) {
			// A post is selected.
			if ( o2Keyboard.currentItem.parent().find( '.o2-comment' ).length ) {
				// If there are comments, jump to the first comment.
				previousItem = o2Keyboard.currentItem;
				o2Keyboard.currentItem = o2Keyboard.currentItem.parent().find( '.o2-comment' ).first();
			} else if ( o2Keyboard.currentItem.parents( '.post' ).next().find( '.o2-post' ).length ) {
				// If there are no comments, jump to the next post.
				previousItem = o2Keyboard.currentItem;
				o2Keyboard.currentItem = o2Keyboard.currentItem.parents( '.post' ).next().find( '.o2-post' ).first();
			}
			// If there are no more posts or comments, do nothing.

		} else if ( o2Keyboard.currentItem.hasClass( 'o2-comment' ) ) {
			// A comment is selected.
			if ( o2Keyboard.currentItem.find( '.o2-comment' ).length ) {
				// If there are child comments, jump to the first comment.
				previousItem = o2Keyboard.currentItem;
				o2Keyboard.currentItem = o2Keyboard.currentItem.find( '.o2-comment' ).first();
			} else if ( o2Keyboard.currentItem.next().length ) {
				// If the current comment has a next sibling, jump to it.
				previousItem = o2Keyboard.currentItem;
				o2Keyboard.currentItem = o2Keyboard.currentItem.next();
			} else if ( o2Keyboard.currentItem.parents( '.o2-comment' ).next().length ) {
				// If one of the parent comments has a next sibling, jump to that comment.
				previousItem = o2Keyboard.currentItem;
				o2Keyboard.currentItem = o2Keyboard.currentItem.parents( '.o2-comment' ).next().first();
			} else if ( o2Keyboard.currentItem.parents( '.post' ).next().find( '.o2-post' ).length ) {
				// If there are no more comments, jump to the next post.
				previousItem = o2Keyboard.currentItem;
				o2Keyboard.currentItem = o2Keyboard.currentItem.parents( '.post' ).next().find( '.o2-post' ).first();
			}
			// If there are no more posts or comments, do nothing.
		}

		if ( previousItem ) {
			previousItem.removeClass( 'keyselected' );
		}

		if ( ! o2Keyboard.currentItem.hasClass( 'keyselected' ) ) {
			o2Keyboard.currentItem.addClass( 'keyselected' );
			o2Keyboard.jumpTo( o2Keyboard.currentItem.offset().top - 50 );
		}
		e.preventDefault();
	},

	jumpToPrevious: function( e ) {
		var previousItem = false;

		if ( ! o2Keyboard.currentItem ) {
			// Nothing is selected, do nothing.
		} else if ( o2Keyboard.currentItem.hasClass( 'o2-post' ) ) {
			// A post is selected.
			var previousPost = o2Keyboard.currentItem.parent().prev();
			if ( previousPost.length ) {
				// There is a previous post
				if ( previousPost.find( '.o2-comment' ).length ) {
					// There are comments on the post, jump to the last one.
					previousItem = o2Keyboard.currentItem;
					o2Keyboard.currentItem = previousPost.find( '.o2-comment' ).last();
				} else {
					// No comments, jump to the post.
					previousItem = o2Keyboard.currentItem;
					o2Keyboard.currentItem = previousPost.find( '.o2-post' ).first();
				}
			}
			// No previous post, do nothing.

		} else if ( o2Keyboard.currentItem.hasClass( 'o2-comment' ) ) {
			// A comment is selected.
			if ( o2Keyboard.currentItem.prev().find( '.o2-comment' ).length ) {
				// If the current comment has a previous sibling with child comments, jump to the last one.
				previousItem = o2Keyboard.currentItem;
				o2Keyboard.currentItem = o2Keyboard.currentItem.prev().find( '.o2-comment' ).last();
			} else if ( o2Keyboard.currentItem.prev().length ) {
				// If the current comment has a previous sibling, jump to it.
				previousItem = o2Keyboard.currentItem;
				o2Keyboard.currentItem = o2Keyboard.currentItem.prev();
			} else if ( o2Keyboard.currentItem.parents( '.o2-comment' ).length ) {
				// If the current comment has a parent, jump to it.
				previousItem = o2Keyboard.currentItem;
				o2Keyboard.currentItem = o2Keyboard.currentItem.parents( '.o2-comment' ).first();
			} else {
				// Go to the post.
					previousItem = o2Keyboard.currentItem;
					o2Keyboard.currentItem = o2Keyboard.currentItem.parents( '.post' ).find( '.o2-post' ).first();
			}
		}

		if ( previousItem ) {
			previousItem.removeClass( 'keyselected' );
		}

		if ( ! o2Keyboard.currentItem.hasClass( 'keyselected' ) ) {
			o2Keyboard.currentItem.addClass( 'keyselected' );
			o2Keyboard.jumpTo( o2Keyboard.currentItem.offset().top - 50 );
		}
		e.preventDefault();
	},

	compose: function( e ) {
		var mainEditor = $( o2Keyboard.mainEditor );

		o2Keyboard.jumpTo( o2Keyboard.getElementTop( mainEditor ) );
		mainEditor.focus();

		e.preventDefault();
	},

	search: function( e ) {
		var inPage = $( '#s' );
		if ( inPage.length ) { // attempt widget
			o2Keyboard.jumpTo( o2Keyboard.getElementTop( inPage ) );
			o2Keyboard.searchInput = inPage;
		} else {
			o2Keyboard.searchInput = $( '#q' );
		}

		o2Keyboard.searchInput.focus();
		e.preventDefault();
	},

	edit: function( e ) {
		var editMe = false;
		if ( o2Keyboard.page.isPage || o2Keyboard.page.isSingle ) {
			editMe = $( '.o2-posts > ' + o2Keyboard.threadContainer );
			editMe.find( 'a.edit-post-link:first').click();
			editMe.find( '.o2-editor-text' ).focus();
		} else {
			if ( false !== o2Keyboard.lastPosted ) {
				var type = o2Keyboard.lastPosted.get( 'type' ),
					id   = o2Keyboard.lastPosted.get( 'id' );

				if ( 'post' === type ) {
					editMe = $( '#post-' + id );
					editMe.find( 'a.edit-post-link:first').click();
				} else {
					editMe = $( '#comment-' + id );
					editMe.find( 'a.o2-comment-edit:first').click();
				}
				editMe.find( '.o2-editor-text' ).focus();

			} else {
				o2Keyboard.reply( e );
			}
		}

		e.preventDefault();
	},

	reply: function( e ) {
		o2Keyboard.closeReplies();

		if ( window.getSelection().toString().length ) {
			var target = $( window.getSelection().baseNode.parentNode );

			// First, check if there is a comment parent. If so, assume we're replying to that comment.
			// Else, we're replying to the post.
			var commentParent = target.closest( '.o2-comment' );
			if ( commentParent.length ) {
				commentParent.find( 'a.o2-comment-reply:first' ).click();
			} else {
				target.closest( '.o2-post' ).find( 'a.o2-post-reply:first' ).click();
			}
		} else {
			if ( o2Keyboard.page.isPage || o2Keyboard.page.isSingle ) {
				$( '.o2-posts > ' + o2Keyboard.threadContainer ).find( 'a.o2-post-reply:first' ).click();
			} else {

				//Let's create a grid of points in the top half of the viewport.
				var viewPortWidth  = $( window ).width(),
					viewPortHeight = $( window ).height(),
					xCoords = _.map( [    0.2, 0.4, 0.6, 0.8 ], function( num ){ return num * viewPortWidth; } ),
					yCoords = _.map( [ 0, 0.1, 0.2, 0.3, 0.4 ], function( num ){ return num * viewPortHeight; } );

				/*
				 * For each coordiante pair (x,y), get element at point,
				 * traverse up to find a post, and add post ID to elems.
				 */
				var elems = [];
				_.each( yCoords, function( y ){
					_.each( xCoords, function( x ){
						var element = $( document.elementFromPoint( x, y ) ),
							closest = element.closest( o2Keyboard.threadContainer + '.post' );

						if ( closest.length > 0 ) {
							elems.push( closest.attr( 'id' ) );
						}
					});
				});

				// Find most frequent (mode) post ID in elems array.
				// Thanks Matthew Flaschen - http://stackoverflow.com/a/1053865
				if ( elems.length > 0 ) {
					var modeMap = {};

					var maxEl = elems[0],
						maxCount = 1;

					_.each( elems, function( el ){
						if ( modeMap[ el ] == null ) {
							modeMap[ el ] = 1;
						} else {
							modeMap[ el ]++;
						}

						if ( modeMap[ el ] > maxCount ) {
							maxEl = el;
							maxCount = modeMap[ el ];
						}
					});

					$( '.o2-posts #' + maxEl ).find( 'a.o2-post-reply:first' ).click();
				}
			}
		}

		e.preventDefault();
	},

	toggleComments: function( e ) {
		var commentToggle = $( '.o2-toggle-comments' );
		if ( commentToggle.length ) {
			commentToggle.click();
			e.preventDefault();
		}
	},

	getElementTop: function( element ) {
		var offset = element.offset();

		if ( offset.top < o2Keyboard.yOffset ) {
			return 0;
		} else {
			return offset.top - o2Keyboard.yOffset;
		}
	},

	closeReplies: function() {
		$( '.o2-new-comment-cancel' ).click();
		$( '.o2-comment-cancel' ).click();
		$( '.o2-cancel' ).click();
	},

	cancel: function( e ) {
		var help = $( '#help' );
		if ( help.is( ':visible' ) ) {
			help.hide();
		} else if ( false === o2Keyboard.atWhoFlag ) {
			o2Keyboard.closeReplies();
		}

		e.preventDefault();
	},

	updateLastPosted: function( event, model ) {
		if ( 'undefined' !== typeof model ) {
			o2Keyboard.lastPosted = model;
		}
	}
};

} )( jQuery );
;
var o2 = o2 || {};

o2.Models = o2.Models || {};

o2.Models.PageMeta = ( function( Backbone ) {
	return Backbone.Model.extend( {
		defaults: {
			pageTitle: ''
		}
	} );
} )( Backbone );
;
//! moment.js
//! version : 2.18.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

;(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
}(this, (function () { 'use strict';

var hookCallback;

function hooks () {
    return hookCallback.apply(null, arguments);
}

// This is done to register the method called with moment()
// without creating circular dependencies.
function setHookCallback (callback) {
    hookCallback = callback;
}

function isArray(input) {
    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
}

function isObject(input) {
    // IE8 will treat undefined and null as object if it wasn't for
    // input != null
    return input != null && Object.prototype.toString.call(input) === '[object Object]';
}

function isObjectEmpty(obj) {
    var k;
    for (k in obj) {
        // even if its not own property I'd still call it non-empty
        return false;
    }
    return true;
}

function isUndefined(input) {
    return input === void 0;
}

function isNumber(input) {
    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
}

function isDate(input) {
    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
}

function map(arr, fn) {
    var res = [], i;
    for (i = 0; i < arr.length; ++i) {
        res.push(fn(arr[i], i));
    }
    return res;
}

function hasOwnProp(a, b) {
    return Object.prototype.hasOwnProperty.call(a, b);
}

function extend(a, b) {
    for (var i in b) {
        if (hasOwnProp(b, i)) {
            a[i] = b[i];
        }
    }

    if (hasOwnProp(b, 'toString')) {
        a.toString = b.toString;
    }

    if (hasOwnProp(b, 'valueOf')) {
        a.valueOf = b.valueOf;
    }

    return a;
}

function createUTC (input, format, locale, strict) {
    return createLocalOrUTC(input, format, locale, strict, true).utc();
}

function defaultParsingFlags() {
    // We need to deep clone this object.
    return {
        empty           : false,
        unusedTokens    : [],
        unusedInput     : [],
        overflow        : -2,
        charsLeftOver   : 0,
        nullInput       : false,
        invalidMonth    : null,
        invalidFormat   : false,
        userInvalidated : false,
        iso             : false,
        parsedDateParts : [],
        meridiem        : null,
        rfc2822         : false,
        weekdayMismatch : false
    };
}

function getParsingFlags(m) {
    if (m._pf == null) {
        m._pf = defaultParsingFlags();
    }
    return m._pf;
}

var some;
if (Array.prototype.some) {
    some = Array.prototype.some;
} else {
    some = function (fun) {
        var t = Object(this);
        var len = t.length >>> 0;

        for (var i = 0; i < len; i++) {
            if (i in t && fun.call(this, t[i], i, t)) {
                return true;
            }
        }

        return false;
    };
}

var some$1 = some;

function isValid(m) {
    if (m._isValid == null) {
        var flags = getParsingFlags(m);
        var parsedParts = some$1.call(flags.parsedDateParts, function (i) {
            return i != null;
        });
        var isNowValid = !isNaN(m._d.getTime()) &&
            flags.overflow < 0 &&
            !flags.empty &&
            !flags.invalidMonth &&
            !flags.invalidWeekday &&
            !flags.nullInput &&
            !flags.invalidFormat &&
            !flags.userInvalidated &&
            (!flags.meridiem || (flags.meridiem && parsedParts));

        if (m._strict) {
            isNowValid = isNowValid &&
                flags.charsLeftOver === 0 &&
                flags.unusedTokens.length === 0 &&
                flags.bigHour === undefined;
        }

        if (Object.isFrozen == null || !Object.isFrozen(m)) {
            m._isValid = isNowValid;
        }
        else {
            return isNowValid;
        }
    }
    return m._isValid;
}

function createInvalid (flags) {
    var m = createUTC(NaN);
    if (flags != null) {
        extend(getParsingFlags(m), flags);
    }
    else {
        getParsingFlags(m).userInvalidated = true;
    }

    return m;
}

// Plugins that add properties should also add the key here (null value),
// so we can properly clone ourselves.
var momentProperties = hooks.momentProperties = [];

function copyConfig(to, from) {
    var i, prop, val;

    if (!isUndefined(from._isAMomentObject)) {
        to._isAMomentObject = from._isAMomentObject;
    }
    if (!isUndefined(from._i)) {
        to._i = from._i;
    }
    if (!isUndefined(from._f)) {
        to._f = from._f;
    }
    if (!isUndefined(from._l)) {
        to._l = from._l;
    }
    if (!isUndefined(from._strict)) {
        to._strict = from._strict;
    }
    if (!isUndefined(from._tzm)) {
        to._tzm = from._tzm;
    }
    if (!isUndefined(from._isUTC)) {
        to._isUTC = from._isUTC;
    }
    if (!isUndefined(from._offset)) {
        to._offset = from._offset;
    }
    if (!isUndefined(from._pf)) {
        to._pf = getParsingFlags(from);
    }
    if (!isUndefined(from._locale)) {
        to._locale = from._locale;
    }

    if (momentProperties.length > 0) {
        for (i = 0; i < momentProperties.length; i++) {
            prop = momentProperties[i];
            val = from[prop];
            if (!isUndefined(val)) {
                to[prop] = val;
            }
        }
    }

    return to;
}

var updateInProgress = false;

// Moment prototype object
function Moment(config) {
    copyConfig(this, config);
    this._d = new Date(config._d != null ? config._d.getTime() : NaN);
    if (!this.isValid()) {
        this._d = new Date(NaN);
    }
    // Prevent infinite loop in case updateOffset creates new moment
    // objects.
    if (updateInProgress === false) {
        updateInProgress = true;
        hooks.updateOffset(this);
        updateInProgress = false;
    }
}

function isMoment (obj) {
    return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
}

function absFloor (number) {
    if (number < 0) {
        // -0 -> 0
        return Math.ceil(number) || 0;
    } else {
        return Math.floor(number);
    }
}

function toInt(argumentForCoercion) {
    var coercedNumber = +argumentForCoercion,
        value = 0;

    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
        value = absFloor(coercedNumber);
    }

    return value;
}

// compare two arrays, return the number of differences
function compareArrays(array1, array2, dontConvert) {
    var len = Math.min(array1.length, array2.length),
        lengthDiff = Math.abs(array1.length - array2.length),
        diffs = 0,
        i;
    for (i = 0; i < len; i++) {
        if ((dontConvert && array1[i] !== array2[i]) ||
            (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
            diffs++;
        }
    }
    return diffs + lengthDiff;
}

function warn(msg) {
    if (hooks.suppressDeprecationWarnings === false &&
            (typeof console !==  'undefined') && console.warn) {
        console.warn('Deprecation warning: ' + msg);
    }
}

function deprecate(msg, fn) {
    var firstTime = true;

    return extend(function () {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(null, msg);
        }
        if (firstTime) {
            var args = [];
            var arg;
            for (var i = 0; i < arguments.length; i++) {
                arg = '';
                if (typeof arguments[i] === 'object') {
                    arg += '\n[' + i + '] ';
                    for (var key in arguments[0]) {
                        arg += key + ': ' + arguments[0][key] + ', ';
                    }
                    arg = arg.slice(0, -2); // Remove trailing comma and space
                } else {
                    arg = arguments[i];
                }
                args.push(arg);
            }
            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
            firstTime = false;
        }
        return fn.apply(this, arguments);
    }, fn);
}

var deprecations = {};

function deprecateSimple(name, msg) {
    if (hooks.deprecationHandler != null) {
        hooks.deprecationHandler(name, msg);
    }
    if (!deprecations[name]) {
        warn(msg);
        deprecations[name] = true;
    }
}

hooks.suppressDeprecationWarnings = false;
hooks.deprecationHandler = null;

function isFunction(input) {
    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
}

function set (config) {
    var prop, i;
    for (i in config) {
        prop = config[i];
        if (isFunction(prop)) {
            this[i] = prop;
        } else {
            this['_' + i] = prop;
        }
    }
    this._config = config;
    // Lenient ordinal parsing accepts just a number in addition to
    // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
    // TODO: Remove "ordinalParse" fallback in next major release.
    this._dayOfMonthOrdinalParseLenient = new RegExp(
        (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
            '|' + (/\d{1,2}/).source);
}

function mergeConfigs(parentConfig, childConfig) {
    var res = extend({}, parentConfig), prop;
    for (prop in childConfig) {
        if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                res[prop] = {};
                extend(res[prop], parentConfig[prop]);
                extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) {
                res[prop] = childConfig[prop];
            } else {
                delete res[prop];
            }
        }
    }
    for (prop in parentConfig) {
        if (hasOwnProp(parentConfig, prop) &&
                !hasOwnProp(childConfig, prop) &&
                isObject(parentConfig[prop])) {
            // make sure changes to properties don't modify parent config
            res[prop] = extend({}, res[prop]);
        }
    }
    return res;
}

function Locale(config) {
    if (config != null) {
        this.set(config);
    }
}

var keys;

if (Object.keys) {
    keys = Object.keys;
} else {
    keys = function (obj) {
        var i, res = [];
        for (i in obj) {
            if (hasOwnProp(obj, i)) {
                res.push(i);
            }
        }
        return res;
    };
}

var keys$1 = keys;

var defaultCalendar = {
    sameDay : '[Today at] LT',
    nextDay : '[Tomorrow at] LT',
    nextWeek : 'dddd [at] LT',
    lastDay : '[Yesterday at] LT',
    lastWeek : '[Last] dddd [at] LT',
    sameElse : 'L'
};

function calendar (key, mom, now) {
    var output = this._calendar[key] || this._calendar['sameElse'];
    return isFunction(output) ? output.call(mom, now) : output;
}

var defaultLongDateFormat = {
    LTS  : 'h:mm:ss A',
    LT   : 'h:mm A',
    L    : 'MM/DD/YYYY',
    LL   : 'MMMM D, YYYY',
    LLL  : 'MMMM D, YYYY h:mm A',
    LLLL : 'dddd, MMMM D, YYYY h:mm A'
};

function longDateFormat (key) {
    var format = this._longDateFormat[key],
        formatUpper = this._longDateFormat[key.toUpperCase()];

    if (format || !formatUpper) {
        return format;
    }

    this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
        return val.slice(1);
    });

    return this._longDateFormat[key];
}

var defaultInvalidDate = 'Invalid date';

function invalidDate () {
    return this._invalidDate;
}

var defaultOrdinal = '%d';
var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

function ordinal (number) {
    return this._ordinal.replace('%d', number);
}

var defaultRelativeTime = {
    future : 'in %s',
    past   : '%s ago',
    s  : 'a few seconds',
    ss : '%d seconds',
    m  : 'a minute',
    mm : '%d minutes',
    h  : 'an hour',
    hh : '%d hours',
    d  : 'a day',
    dd : '%d days',
    M  : 'a month',
    MM : '%d months',
    y  : 'a year',
    yy : '%d years'
};

function relativeTime (number, withoutSuffix, string, isFuture) {
    var output = this._relativeTime[string];
    return (isFunction(output)) ?
        output(number, withoutSuffix, string, isFuture) :
        output.replace(/%d/i, number);
}

function pastFuture (diff, output) {
    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
    return isFunction(format) ? format(output) : format.replace(/%s/i, output);
}

var aliases = {};

function addUnitAlias (unit, shorthand) {
    var lowerCase = unit.toLowerCase();
    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
}

function normalizeUnits(units) {
    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
}

function normalizeObjectUnits(inputObject) {
    var normalizedInput = {},
        normalizedProp,
        prop;

    for (prop in inputObject) {
        if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) {
                normalizedInput[normalizedProp] = inputObject[prop];
            }
        }
    }

    return normalizedInput;
}

var priorities = {};

function addUnitPriority(unit, priority) {
    priorities[unit] = priority;
}

function getPrioritizedUnits(unitsObj) {
    var units = [];
    for (var u in unitsObj) {
        units.push({unit: u, priority: priorities[u]});
    }
    units.sort(function (a, b) {
        return a.priority - b.priority;
    });
    return units;
}

function makeGetSet (unit, keepTime) {
    return function (value) {
        if (value != null) {
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this;
        } else {
            return get(this, unit);
        }
    };
}

function get (mom, unit) {
    return mom.isValid() ?
        mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
}

function set$1 (mom, unit, value) {
    if (mom.isValid()) {
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
    }
}

// MOMENTS

function stringGet (units) {
    units = normalizeUnits(units);
    if (isFunction(this[units])) {
        return this[units]();
    }
    return this;
}


function stringSet (units, value) {
    if (typeof units === 'object') {
        units = normalizeObjectUnits(units);
        var prioritized = getPrioritizedUnits(units);
        for (var i = 0; i < prioritized.length; i++) {
            this[prioritized[i].unit](units[prioritized[i].unit]);
        }
    } else {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units](value);
        }
    }
    return this;
}

function zeroFill(number, targetLength, forceSign) {
    var absNumber = '' + Math.abs(number),
        zerosToFill = targetLength - absNumber.length,
        sign = number >= 0;
    return (sign ? (forceSign ? '+' : '') : '-') +
        Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
}

var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

var formatFunctions = {};

var formatTokenFunctions = {};

// token:    'M'
// padded:   ['MM', 2]
// ordinal:  'Mo'
// callback: function () { this.month() + 1 }
function addFormatToken (token, padded, ordinal, callback) {
    var func = callback;
    if (typeof callback === 'string') {
        func = function () {
            return this[callback]();
        };
    }
    if (token) {
        formatTokenFunctions[token] = func;
    }
    if (padded) {
        formatTokenFunctions[padded[0]] = function () {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
        };
    }
    if (ordinal) {
        formatTokenFunctions[ordinal] = function () {
            return this.localeData().ordinal(func.apply(this, arguments), token);
        };
    }
}

function removeFormattingTokens(input) {
    if (input.match(/\[[\s\S]/)) {
        return input.replace(/^\[|\]$/g, '');
    }
    return input.replace(/\\/g, '');
}

function makeFormatFunction(format) {
    var array = format.match(formattingTokens), i, length;

    for (i = 0, length = array.length; i < length; i++) {
        if (formatTokenFunctions[array[i]]) {
            array[i] = formatTokenFunctions[array[i]];
        } else {
            array[i] = removeFormattingTokens(array[i]);
        }
    }

    return function (mom) {
        var output = '', i;
        for (i = 0; i < length; i++) {
            output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
        }
        return output;
    };
}

// format date using native date object
function formatMoment(m, format) {
    if (!m.isValid()) {
        return m.localeData().invalidDate();
    }

    format = expandFormat(format, m.localeData());
    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

    return formatFunctions[format](m);
}

function expandFormat(format, locale) {
    var i = 5;

    function replaceLongDateFormatTokens(input) {
        return locale.longDateFormat(input) || input;
    }

    localFormattingTokens.lastIndex = 0;
    while (i >= 0 && localFormattingTokens.test(format)) {
        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
        localFormattingTokens.lastIndex = 0;
        i -= 1;
    }

    return format;
}

var match1         = /\d/;            //       0 - 9
var match2         = /\d\d/;          //      00 - 99
var match3         = /\d{3}/;         //     000 - 999
var match4         = /\d{4}/;         //    0000 - 9999
var match6         = /[+-]?\d{6}/;    // -999999 - 999999
var match1to2      = /\d\d?/;         //       0 - 99
var match3to4      = /\d\d\d\d?/;     //     999 - 9999
var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
var match1to3      = /\d{1,3}/;       //       0 - 999
var match1to4      = /\d{1,4}/;       //       0 - 9999
var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

var matchUnsigned  = /\d+/;           //       0 - inf
var matchSigned    = /[+-]?\d+/;      //    -inf - inf

var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

// any word (or two) characters or numbers including two/three word month in arabic.
// includes scottish gaelic two word and hyphenated months
var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;


var regexes = {};

function addRegexToken (token, regex, strictRegex) {
    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
        return (isStrict && strictRegex) ? strictRegex : regex;
    };
}

function getParseRegexForToken (token, config) {
    if (!hasOwnProp(regexes, token)) {
        return new RegExp(unescapeFormat(token));
    }

    return regexes[token](config._strict, config._locale);
}

// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
function unescapeFormat(s) {
    return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
        return p1 || p2 || p3 || p4;
    }));
}

function regexEscape(s) {
    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
}

var tokens = {};

function addParseToken (token, callback) {
    var i, func = callback;
    if (typeof token === 'string') {
        token = [token];
    }
    if (isNumber(callback)) {
        func = function (input, array) {
            array[callback] = toInt(input);
        };
    }
    for (i = 0; i < token.length; i++) {
        tokens[token[i]] = func;
    }
}

function addWeekParseToken (token, callback) {
    addParseToken(token, function (input, array, config, token) {
        config._w = config._w || {};
        callback(input, config._w, config, token);
    });
}

function addTimeToArrayFromToken(token, input, config) {
    if (input != null && hasOwnProp(tokens, token)) {
        tokens[token](input, config._a, config, token);
    }
}

var YEAR = 0;
var MONTH = 1;
var DATE = 2;
var HOUR = 3;
var MINUTE = 4;
var SECOND = 5;
var MILLISECOND = 6;
var WEEK = 7;
var WEEKDAY = 8;

var indexOf;

if (Array.prototype.indexOf) {
    indexOf = Array.prototype.indexOf;
} else {
    indexOf = function (o) {
        // I know
        var i;
        for (i = 0; i < this.length; ++i) {
            if (this[i] === o) {
                return i;
            }
        }
        return -1;
    };
}

var indexOf$1 = indexOf;

function daysInMonth(year, month) {
    return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
}

// FORMATTING

addFormatToken('M', ['MM', 2], 'Mo', function () {
    return this.month() + 1;
});

addFormatToken('MMM', 0, 0, function (format) {
    return this.localeData().monthsShort(this, format);
});

addFormatToken('MMMM', 0, 0, function (format) {
    return this.localeData().months(this, format);
});

// ALIASES

addUnitAlias('month', 'M');

// PRIORITY

addUnitPriority('month', 8);

// PARSING

addRegexToken('M',    match1to2);
addRegexToken('MM',   match1to2, match2);
addRegexToken('MMM',  function (isStrict, locale) {
    return locale.monthsShortRegex(isStrict);
});
addRegexToken('MMMM', function (isStrict, locale) {
    return locale.monthsRegex(isStrict);
});

addParseToken(['M', 'MM'], function (input, array) {
    array[MONTH] = toInt(input) - 1;
});

addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
    var month = config._locale.monthsParse(input, token, config._strict);
    // if we didn't find a month name, mark the date as invalid.
    if (month != null) {
        array[MONTH] = month;
    } else {
        getParsingFlags(config).invalidMonth = input;
    }
});

// LOCALES

var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
function localeMonths (m, format) {
    if (!m) {
        return isArray(this._months) ? this._months :
            this._months['standalone'];
    }
    return isArray(this._months) ? this._months[m.month()] :
        this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
}

var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
function localeMonthsShort (m, format) {
    if (!m) {
        return isArray(this._monthsShort) ? this._monthsShort :
            this._monthsShort['standalone'];
    }
    return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
        this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
}

function handleStrictParse(monthName, format, strict) {
    var i, ii, mom, llc = monthName.toLocaleLowerCase();
    if (!this._monthsParse) {
        // this is not used
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
        for (i = 0; i < 12; ++i) {
            mom = createUTC([2000, i]);
            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
        }
    }

    if (strict) {
        if (format === 'MMM') {
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
        }
    } else {
        if (format === 'MMM') {
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._longMonthsParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
        }
    }
}

function localeMonthsParse (monthName, format, strict) {
    var i, mom, regex;

    if (this._monthsParseExact) {
        return handleStrictParse.call(this, monthName, format, strict);
    }

    if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
    }

    // TODO: add sorting
    // Sorting makes sure if one month (or abbr) is a prefix of another
    // see sorting in computeMonthsParse
    for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, i]);
        if (strict && !this._longMonthsParse[i]) {
            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
        }
        if (!strict && !this._monthsParse[i]) {
            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        // test the regex
        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
            return i;
        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
            return i;
        } else if (!strict && this._monthsParse[i].test(monthName)) {
            return i;
        }
    }
}

// MOMENTS

function setMonth (mom, value) {
    var dayOfMonth;

    if (!mom.isValid()) {
        // No op
        return mom;
    }

    if (typeof value === 'string') {
        if (/^\d+$/.test(value)) {
            value = toInt(value);
        } else {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (!isNumber(value)) {
                return mom;
            }
        }
    }

    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
    return mom;
}

function getSetMonth (value) {
    if (value != null) {
        setMonth(this, value);
        hooks.updateOffset(this, true);
        return this;
    } else {
        return get(this, 'Month');
    }
}

function getDaysInMonth () {
    return daysInMonth(this.year(), this.month());
}

var defaultMonthsShortRegex = matchWord;
function monthsShortRegex (isStrict) {
    if (this._monthsParseExact) {
        if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
        }
        if (isStrict) {
            return this._monthsShortStrictRegex;
        } else {
            return this._monthsShortRegex;
        }
    } else {
        if (!hasOwnProp(this, '_monthsShortRegex')) {
            this._monthsShortRegex = defaultMonthsShortRegex;
        }
        return this._monthsShortStrictRegex && isStrict ?
            this._monthsShortStrictRegex : this._monthsShortRegex;
    }
}

var defaultMonthsRegex = matchWord;
function monthsRegex (isStrict) {
    if (this._monthsParseExact) {
        if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
        }
        if (isStrict) {
            return this._monthsStrictRegex;
        } else {
            return this._monthsRegex;
        }
    } else {
        if (!hasOwnProp(this, '_monthsRegex')) {
            this._monthsRegex = defaultMonthsRegex;
        }
        return this._monthsStrictRegex && isStrict ?
            this._monthsStrictRegex : this._monthsRegex;
    }
}

function computeMonthsParse () {
    function cmpLenRev(a, b) {
        return b.length - a.length;
    }

    var shortPieces = [], longPieces = [], mixedPieces = [],
        i, mom;
    for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, i]);
        shortPieces.push(this.monthsShort(mom, ''));
        longPieces.push(this.months(mom, ''));
        mixedPieces.push(this.months(mom, ''));
        mixedPieces.push(this.monthsShort(mom, ''));
    }
    // Sorting makes sure if one month (or abbr) is a prefix of another it
    // will match the longer piece.
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    for (i = 0; i < 12; i++) {
        shortPieces[i] = regexEscape(shortPieces[i]);
        longPieces[i] = regexEscape(longPieces[i]);
    }
    for (i = 0; i < 24; i++) {
        mixedPieces[i] = regexEscape(mixedPieces[i]);
    }

    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._monthsShortRegex = this._monthsRegex;
    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
}

// FORMATTING

addFormatToken('Y', 0, 0, function () {
    var y = this.year();
    return y <= 9999 ? '' + y : '+' + y;
});

addFormatToken(0, ['YY', 2], 0, function () {
    return this.year() % 100;
});

addFormatToken(0, ['YYYY',   4],       0, 'year');
addFormatToken(0, ['YYYYY',  5],       0, 'year');
addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

// ALIASES

addUnitAlias('year', 'y');

// PRIORITIES

addUnitPriority('year', 1);

// PARSING

addRegexToken('Y',      matchSigned);
addRegexToken('YY',     match1to2, match2);
addRegexToken('YYYY',   match1to4, match4);
addRegexToken('YYYYY',  match1to6, match6);
addRegexToken('YYYYYY', match1to6, match6);

addParseToken(['YYYYY', 'YYYYYY'], YEAR);
addParseToken('YYYY', function (input, array) {
    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
});
addParseToken('YY', function (input, array) {
    array[YEAR] = hooks.parseTwoDigitYear(input);
});
addParseToken('Y', function (input, array) {
    array[YEAR] = parseInt(input, 10);
});

// HELPERS

function daysInYear(year) {
    return isLeapYear(year) ? 366 : 365;
}

function isLeapYear(year) {
    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
}

// HOOKS

hooks.parseTwoDigitYear = function (input) {
    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
};

// MOMENTS

var getSetYear = makeGetSet('FullYear', true);

function getIsLeapYear () {
    return isLeapYear(this.year());
}

function createDate (y, m, d, h, M, s, ms) {
    // can't just apply() to create a date:
    // https://stackoverflow.com/q/181348
    var date = new Date(y, m, d, h, M, s, ms);

    // the date constructor remaps years 0-99 to 1900-1999
    if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
        date.setFullYear(y);
    }
    return date;
}

function createUTCDate (y) {
    var date = new Date(Date.UTC.apply(null, arguments));

    // the Date.UTC function remaps years 0-99 to 1900-1999
    if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
        date.setUTCFullYear(y);
    }
    return date;
}

// start-of-first-week - start-of-year
function firstWeekOffset(year, dow, doy) {
    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
        fwd = 7 + dow - doy,
        // first-week day local weekday -- which local weekday is fwd
        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

    return -fwdlw + fwd - 1;
}

// https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
    var localWeekday = (7 + weekday - dow) % 7,
        weekOffset = firstWeekOffset(year, dow, doy),
        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
        resYear, resDayOfYear;

    if (dayOfYear <= 0) {
        resYear = year - 1;
        resDayOfYear = daysInYear(resYear) + dayOfYear;
    } else if (dayOfYear > daysInYear(year)) {
        resYear = year + 1;
        resDayOfYear = dayOfYear - daysInYear(year);
    } else {
        resYear = year;
        resDayOfYear = dayOfYear;
    }

    return {
        year: resYear,
        dayOfYear: resDayOfYear
    };
}

function weekOfYear(mom, dow, doy) {
    var weekOffset = firstWeekOffset(mom.year(), dow, doy),
        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
        resWeek, resYear;

    if (week < 1) {
        resYear = mom.year() - 1;
        resWeek = week + weeksInYear(resYear, dow, doy);
    } else if (week > weeksInYear(mom.year(), dow, doy)) {
        resWeek = week - weeksInYear(mom.year(), dow, doy);
        resYear = mom.year() + 1;
    } else {
        resYear = mom.year();
        resWeek = week;
    }

    return {
        week: resWeek,
        year: resYear
    };
}

function weeksInYear(year, dow, doy) {
    var weekOffset = firstWeekOffset(year, dow, doy),
        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
}

// FORMATTING

addFormatToken('w', ['ww', 2], 'wo', 'week');
addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

// ALIASES

addUnitAlias('week', 'w');
addUnitAlias('isoWeek', 'W');

// PRIORITIES

addUnitPriority('week', 5);
addUnitPriority('isoWeek', 5);

// PARSING

addRegexToken('w',  match1to2);
addRegexToken('ww', match1to2, match2);
addRegexToken('W',  match1to2);
addRegexToken('WW', match1to2, match2);

addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
    week[token.substr(0, 1)] = toInt(input);
});

// HELPERS

// LOCALES

function localeWeek (mom) {
    return weekOfYear(mom, this._week.dow, this._week.doy).week;
}

var defaultLocaleWeek = {
    dow : 0, // Sunday is the first day of the week.
    doy : 6  // The week that contains Jan 1st is the first week of the year.
};

function localeFirstDayOfWeek () {
    return this._week.dow;
}

function localeFirstDayOfYear () {
    return this._week.doy;
}

// MOMENTS

function getSetWeek (input) {
    var week = this.localeData().week(this);
    return input == null ? week : this.add((input - week) * 7, 'd');
}

function getSetISOWeek (input) {
    var week = weekOfYear(this, 1, 4).week;
    return input == null ? week : this.add((input - week) * 7, 'd');
}

// FORMATTING

addFormatToken('d', 0, 'do', 'day');

addFormatToken('dd', 0, 0, function (format) {
    return this.localeData().weekdaysMin(this, format);
});

addFormatToken('ddd', 0, 0, function (format) {
    return this.localeData().weekdaysShort(this, format);
});

addFormatToken('dddd', 0, 0, function (format) {
    return this.localeData().weekdays(this, format);
});

addFormatToken('e', 0, 0, 'weekday');
addFormatToken('E', 0, 0, 'isoWeekday');

// ALIASES

addUnitAlias('day', 'd');
addUnitAlias('weekday', 'e');
addUnitAlias('isoWeekday', 'E');

// PRIORITY
addUnitPriority('day', 11);
addUnitPriority('weekday', 11);
addUnitPriority('isoWeekday', 11);

// PARSING

addRegexToken('d',    match1to2);
addRegexToken('e',    match1to2);
addRegexToken('E',    match1to2);
addRegexToken('dd',   function (isStrict, locale) {
    return locale.weekdaysMinRegex(isStrict);
});
addRegexToken('ddd',   function (isStrict, locale) {
    return locale.weekdaysShortRegex(isStrict);
});
addRegexToken('dddd',   function (isStrict, locale) {
    return locale.weekdaysRegex(isStrict);
});

addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
    var weekday = config._locale.weekdaysParse(input, token, config._strict);
    // if we didn't get a weekday name, mark the date as invalid
    if (weekday != null) {
        week.d = weekday;
    } else {
        getParsingFlags(config).invalidWeekday = input;
    }
});

addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
    week[token] = toInt(input);
});

// HELPERS

function parseWeekday(input, locale) {
    if (typeof input !== 'string') {
        return input;
    }

    if (!isNaN(input)) {
        return parseInt(input, 10);
    }

    input = locale.weekdaysParse(input);
    if (typeof input === 'number') {
        return input;
    }

    return null;
}

function parseIsoWeekday(input, locale) {
    if (typeof input === 'string') {
        return locale.weekdaysParse(input) % 7 || 7;
    }
    return isNaN(input) ? null : input;
}

// LOCALES

var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
function localeWeekdays (m, format) {
    if (!m) {
        return isArray(this._weekdays) ? this._weekdays :
            this._weekdays['standalone'];
    }
    return isArray(this._weekdays) ? this._weekdays[m.day()] :
        this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
}

var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
function localeWeekdaysShort (m) {
    return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
}

var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
function localeWeekdaysMin (m) {
    return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
}

function handleStrictParse$1(weekdayName, format, strict) {
    var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
    if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._minWeekdaysParse = [];

        for (i = 0; i < 7; ++i) {
            mom = createUTC([2000, 1]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
        }
    }

    if (strict) {
        if (format === 'dddd') {
            ii = indexOf$1.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else if (format === 'ddd') {
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        }
    } else {
        if (format === 'dddd') {
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else if (format === 'ddd') {
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        }
    }
}

function localeWeekdaysParse (weekdayName, format, strict) {
    var i, mom, regex;

    if (this._weekdaysParseExact) {
        return handleStrictParse$1.call(this, weekdayName, format, strict);
    }

    if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._minWeekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._fullWeekdaysParse = [];
    }

    for (i = 0; i < 7; i++) {
        // make the regex if we don't have it already

        mom = createUTC([2000, 1]).day(i);
        if (strict && !this._fullWeekdaysParse[i]) {
            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
        }
        if (!this._weekdaysParse[i]) {
            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        // test the regex
        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
            return i;
        }
    }
}

// MOMENTS

function getSetDayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
    if (input != null) {
        input = parseWeekday(input, this.localeData());
        return this.add(input - day, 'd');
    } else {
        return day;
    }
}

function getSetLocaleDayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
    return input == null ? weekday : this.add(input - weekday, 'd');
}

function getSetISODayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }

    // behaves the same as moment#day except
    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
    // as a setter, sunday should belong to the previous week.

    if (input != null) {
        var weekday = parseIsoWeekday(input, this.localeData());
        return this.day(this.day() % 7 ? weekday : weekday - 7);
    } else {
        return this.day() || 7;
    }
}

var defaultWeekdaysRegex = matchWord;
function weekdaysRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysStrictRegex;
        } else {
            return this._weekdaysRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            this._weekdaysRegex = defaultWeekdaysRegex;
        }
        return this._weekdaysStrictRegex && isStrict ?
            this._weekdaysStrictRegex : this._weekdaysRegex;
    }
}

var defaultWeekdaysShortRegex = matchWord;
function weekdaysShortRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysShortStrictRegex;
        } else {
            return this._weekdaysShortRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysShortRegex')) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
        }
        return this._weekdaysShortStrictRegex && isStrict ?
            this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
    }
}

var defaultWeekdaysMinRegex = matchWord;
function weekdaysMinRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysMinStrictRegex;
        } else {
            return this._weekdaysMinRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysMinRegex')) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
        }
        return this._weekdaysMinStrictRegex && isStrict ?
            this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
    }
}


function computeWeekdaysParse () {
    function cmpLenRev(a, b) {
        return b.length - a.length;
    }

    var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
        i, mom, minp, shortp, longp;
    for (i = 0; i < 7; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, 1]).day(i);
        minp = this.weekdaysMin(mom, '');
        shortp = this.weekdaysShort(mom, '');
        longp = this.weekdays(mom, '');
        minPieces.push(minp);
        shortPieces.push(shortp);
        longPieces.push(longp);
        mixedPieces.push(minp);
        mixedPieces.push(shortp);
        mixedPieces.push(longp);
    }
    // Sorting makes sure if one weekday (or abbr) is a prefix of another it
    // will match the longer piece.
    minPieces.sort(cmpLenRev);
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    for (i = 0; i < 7; i++) {
        shortPieces[i] = regexEscape(shortPieces[i]);
        longPieces[i] = regexEscape(longPieces[i]);
        mixedPieces[i] = regexEscape(mixedPieces[i]);
    }

    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._weekdaysShortRegex = this._weekdaysRegex;
    this._weekdaysMinRegex = this._weekdaysRegex;

    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
}

// FORMATTING

function hFormat() {
    return this.hours() % 12 || 12;
}

function kFormat() {
    return this.hours() || 24;
}

addFormatToken('H', ['HH', 2], 0, 'hour');
addFormatToken('h', ['hh', 2], 0, hFormat);
addFormatToken('k', ['kk', 2], 0, kFormat);

addFormatToken('hmm', 0, 0, function () {
    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
});

addFormatToken('hmmss', 0, 0, function () {
    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
        zeroFill(this.seconds(), 2);
});

addFormatToken('Hmm', 0, 0, function () {
    return '' + this.hours() + zeroFill(this.minutes(), 2);
});

addFormatToken('Hmmss', 0, 0, function () {
    return '' + this.hours() + zeroFill(this.minutes(), 2) +
        zeroFill(this.seconds(), 2);
});

function meridiem (token, lowercase) {
    addFormatToken(token, 0, 0, function () {
        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
    });
}

meridiem('a', true);
meridiem('A', false);

// ALIASES

addUnitAlias('hour', 'h');

// PRIORITY
addUnitPriority('hour', 13);

// PARSING

function matchMeridiem (isStrict, locale) {
    return locale._meridiemParse;
}

addRegexToken('a',  matchMeridiem);
addRegexToken('A',  matchMeridiem);
addRegexToken('H',  match1to2);
addRegexToken('h',  match1to2);
addRegexToken('k',  match1to2);
addRegexToken('HH', match1to2, match2);
addRegexToken('hh', match1to2, match2);
addRegexToken('kk', match1to2, match2);

addRegexToken('hmm', match3to4);
addRegexToken('hmmss', match5to6);
addRegexToken('Hmm', match3to4);
addRegexToken('Hmmss', match5to6);

addParseToken(['H', 'HH'], HOUR);
addParseToken(['k', 'kk'], function (input, array, config) {
    var kInput = toInt(input);
    array[HOUR] = kInput === 24 ? 0 : kInput;
});
addParseToken(['a', 'A'], function (input, array, config) {
    config._isPm = config._locale.isPM(input);
    config._meridiem = input;
});
addParseToken(['h', 'hh'], function (input, array, config) {
    array[HOUR] = toInt(input);
    getParsingFlags(config).bigHour = true;
});
addParseToken('hmm', function (input, array, config) {
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
    getParsingFlags(config).bigHour = true;
});
addParseToken('hmmss', function (input, array, config) {
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
    getParsingFlags(config).bigHour = true;
});
addParseToken('Hmm', function (input, array, config) {
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
});
addParseToken('Hmmss', function (input, array, config) {
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
});

// LOCALES

function localeIsPM (input) {
    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
    // Using charAt should be more compatible.
    return ((input + '').toLowerCase().charAt(0) === 'p');
}

var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
function localeMeridiem (hours, minutes, isLower) {
    if (hours > 11) {
        return isLower ? 'pm' : 'PM';
    } else {
        return isLower ? 'am' : 'AM';
    }
}


// MOMENTS

// Setting the hour should keep the time, because the user explicitly
// specified which hour he wants. So trying to maintain the same hour (in
// a new timezone) makes sense. Adding/subtracting hours does not follow
// this rule.
var getSetHour = makeGetSet('Hours', true);

// months
// week
// weekdays
// meridiem
var baseConfig = {
    calendar: defaultCalendar,
    longDateFormat: defaultLongDateFormat,
    invalidDate: defaultInvalidDate,
    ordinal: defaultOrdinal,
    dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
    relativeTime: defaultRelativeTime,

    months: defaultLocaleMonths,
    monthsShort: defaultLocaleMonthsShort,

    week: defaultLocaleWeek,

    weekdays: defaultLocaleWeekdays,
    weekdaysMin: defaultLocaleWeekdaysMin,
    weekdaysShort: defaultLocaleWeekdaysShort,

    meridiemParse: defaultLocaleMeridiemParse
};

// internal storage for locale config files
var locales = {};
var localeFamilies = {};
var globalLocale;

function normalizeLocale(key) {
    return key ? key.toLowerCase().replace('_', '-') : key;
}

// pick the locale from the array
// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
function chooseLocale(names) {
    var i = 0, j, next, locale, split;

    while (i < names.length) {
        split = normalizeLocale(names[i]).split('-');
        j = split.length;
        next = normalizeLocale(names[i + 1]);
        next = next ? next.split('-') : null;
        while (j > 0) {
            locale = loadLocale(split.slice(0, j).join('-'));
            if (locale) {
                return locale;
            }
            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                //the next array item is better than a shallower substring of this one
                break;
            }
            j--;
        }
        i++;
    }
    return null;
}

function loadLocale(name) {
    var oldLocale = null;
    // TODO: Find a better way to register and load all the locales in Node
    if (!locales[name] && (typeof module !== 'undefined') &&
            module && module.exports) {
        try {
            oldLocale = globalLocale._abbr;
            require('./locale/' + name);
            // because defineLocale currently also sets the global locale, we
            // want to undo that for lazy loaded locales
            getSetGlobalLocale(oldLocale);
        } catch (e) { }
    }
    return locales[name];
}

// This function will load locale and then set the global locale.  If
// no arguments are passed in, it will simply return the current global
// locale key.
function getSetGlobalLocale (key, values) {
    var data;
    if (key) {
        if (isUndefined(values)) {
            data = getLocale(key);
        }
        else {
            data = defineLocale(key, values);
        }

        if (data) {
            // moment.duration._locale = moment._locale = data;
            globalLocale = data;
        }
    }

    return globalLocale._abbr;
}

function defineLocale (name, config) {
    if (config !== null) {
        var parentConfig = baseConfig;
        config.abbr = name;
        if (locales[name] != null) {
            deprecateSimple('defineLocaleOverride',
                    'use moment.updateLocale(localeName, config) to change ' +
                    'an existing locale. moment.defineLocale(localeName, ' +
                    'config) should only be used for creating a new locale ' +
                    'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
            parentConfig = locales[name]._config;
        } else if (config.parentLocale != null) {
            if (locales[config.parentLocale] != null) {
                parentConfig = locales[config.parentLocale]._config;
            } else {
                if (!localeFamilies[config.parentLocale]) {
                    localeFamilies[config.parentLocale] = [];
                }
                localeFamilies[config.parentLocale].push({
                    name: name,
                    config: config
                });
                return null;
            }
        }
        locales[name] = new Locale(mergeConfigs(parentConfig, config));

        if (localeFamilies[name]) {
            localeFamilies[name].forEach(function (x) {
                defineLocale(x.name, x.config);
            });
        }

        // backwards compat for now: also set the locale
        // make sure we set the locale AFTER all child locales have been
        // created, so we won't end up with the child locale set.
        getSetGlobalLocale(name);


        return locales[name];
    } else {
        // useful for testing
        delete locales[name];
        return null;
    }
}

function updateLocale(name, config) {
    if (config != null) {
        var locale, parentConfig = baseConfig;
        // MERGE
        if (locales[name] != null) {
            parentConfig = locales[name]._config;
        }
        config = mergeConfigs(parentConfig, config);
        locale = new Locale(config);
        locale.parentLocale = locales[name];
        locales[name] = locale;

        // backwards compat for now: also set the locale
        getSetGlobalLocale(name);
    } else {
        // pass null for config to unupdate, useful for tests
        if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
                locales[name] = locales[name].parentLocale;
            } else if (locales[name] != null) {
                delete locales[name];
            }
        }
    }
    return locales[name];
}

// returns locale data
function getLocale (key) {
    var locale;

    if (key && key._locale && key._locale._abbr) {
        key = key._locale._abbr;
    }

    if (!key) {
        return globalLocale;
    }

    if (!isArray(key)) {
        //short-circuit everything else
        locale = loadLocale(key);
        if (locale) {
            return locale;
        }
        key = [key];
    }

    return chooseLocale(key);
}

function listLocales() {
    return keys$1(locales);
}

function checkOverflow (m) {
    var overflow;
    var a = m._a;

    if (a && getParsingFlags(m).overflow === -2) {
        overflow =
            a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
            a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
            a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
            a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
            a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
            a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
            -1;

        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
            overflow = DATE;
        }
        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
            overflow = WEEK;
        }
        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY;
        }

        getParsingFlags(m).overflow = overflow;
    }

    return m;
}

// iso 8601 regex
// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

var isoDates = [
    ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
    ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
    ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
    ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
    ['YYYY-DDD', /\d{4}-\d{3}/],
    ['YYYY-MM', /\d{4}-\d\d/, false],
    ['YYYYYYMMDD', /[+-]\d{10}/],
    ['YYYYMMDD', /\d{8}/],
    // YYYYMM is NOT allowed by the standard
    ['GGGG[W]WWE', /\d{4}W\d{3}/],
    ['GGGG[W]WW', /\d{4}W\d{2}/, false],
    ['YYYYDDD', /\d{7}/]
];

// iso time formats and regexes
var isoTimes = [
    ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
    ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
    ['HH:mm:ss', /\d\d:\d\d:\d\d/],
    ['HH:mm', /\d\d:\d\d/],
    ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
    ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
    ['HHmmss', /\d\d\d\d\d\d/],
    ['HHmm', /\d\d\d\d/],
    ['HH', /\d\d/]
];

var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

// date from iso format
function configFromISO(config) {
    var i, l,
        string = config._i,
        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
        allowTime, dateFormat, timeFormat, tzFormat;

    if (match) {
        getParsingFlags(config).iso = true;

        for (i = 0, l = isoDates.length; i < l; i++) {
            if (isoDates[i][1].exec(match[1])) {
                dateFormat = isoDates[i][0];
                allowTime = isoDates[i][2] !== false;
                break;
            }
        }
        if (dateFormat == null) {
            config._isValid = false;
            return;
        }
        if (match[3]) {
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(match[3])) {
                    // match[2] should be 'T' or space
                    timeFormat = (match[2] || ' ') + isoTimes[i][0];
                    break;
                }
            }
            if (timeFormat == null) {
                config._isValid = false;
                return;
            }
        }
        if (!allowTime && timeFormat != null) {
            config._isValid = false;
            return;
        }
        if (match[4]) {
            if (tzRegex.exec(match[4])) {
                tzFormat = 'Z';
            } else {
                config._isValid = false;
                return;
            }
        }
        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
        configFromStringAndFormat(config);
    } else {
        config._isValid = false;
    }
}

// RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
var basicRfcRegex = /^((?:Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d?\d\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(?:\d\d)?\d\d\s)(\d\d:\d\d)(\:\d\d)?(\s(?:UT|GMT|[ECMP][SD]T|[A-IK-Za-ik-z]|[+-]\d{4}))$/;

// date and time from ref 2822 format
function configFromRFC2822(config) {
    var string, match, dayFormat,
        dateFormat, timeFormat, tzFormat;
    var timezones = {
        ' GMT': ' +0000',
        ' EDT': ' -0400',
        ' EST': ' -0500',
        ' CDT': ' -0500',
        ' CST': ' -0600',
        ' MDT': ' -0600',
        ' MST': ' -0700',
        ' PDT': ' -0700',
        ' PST': ' -0800'
    };
    var military = 'YXWVUTSRQPONZABCDEFGHIKLM';
    var timezone, timezoneIndex;

    string = config._i
        .replace(/\([^\)]*\)|[\n\t]/g, ' ') // Remove comments and folding whitespace
        .replace(/(\s\s+)/g, ' ') // Replace multiple-spaces with a single space
        .replace(/^\s|\s$/g, ''); // Remove leading and trailing spaces
    match = basicRfcRegex.exec(string);

    if (match) {
        dayFormat = match[1] ? 'ddd' + ((match[1].length === 5) ? ', ' : ' ') : '';
        dateFormat = 'D MMM ' + ((match[2].length > 10) ? 'YYYY ' : 'YY ');
        timeFormat = 'HH:mm' + (match[4] ? ':ss' : '');

        // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
        if (match[1]) { // day of week given
            var momentDate = new Date(match[2]);
            var momentDay = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'][momentDate.getDay()];

            if (match[1].substr(0,3) !== momentDay) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return;
            }
        }

        switch (match[5].length) {
            case 2: // military
                if (timezoneIndex === 0) {
                    timezone = ' +0000';
                } else {
                    timezoneIndex = military.indexOf(match[5][1].toUpperCase()) - 12;
                    timezone = ((timezoneIndex < 0) ? ' -' : ' +') +
                        (('' + timezoneIndex).replace(/^-?/, '0')).match(/..$/)[0] + '00';
                }
                break;
            case 4: // Zone
                timezone = timezones[match[5]];
                break;
            default: // UT or +/-9999
                timezone = timezones[' GMT'];
        }
        match[5] = timezone;
        config._i = match.splice(1).join('');
        tzFormat = ' ZZ';
        config._f = dayFormat + dateFormat + timeFormat + tzFormat;
        configFromStringAndFormat(config);
        getParsingFlags(config).rfc2822 = true;
    } else {
        config._isValid = false;
    }
}

// date from iso format or fallback
function configFromString(config) {
    var matched = aspNetJsonRegex.exec(config._i);

    if (matched !== null) {
        config._d = new Date(+matched[1]);
        return;
    }

    configFromISO(config);
    if (config._isValid === false) {
        delete config._isValid;
    } else {
        return;
    }

    configFromRFC2822(config);
    if (config._isValid === false) {
        delete config._isValid;
    } else {
        return;
    }

    // Final attempt, use Input Fallback
    hooks.createFromInputFallback(config);
}

hooks.createFromInputFallback = deprecate(
    'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
    'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
    'discouraged and will be removed in an upcoming major release. Please refer to ' +
    'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
    function (config) {
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    }
);

// Pick the first defined of two or three arguments.
function defaults(a, b, c) {
    if (a != null) {
        return a;
    }
    if (b != null) {
        return b;
    }
    return c;
}

function currentDateArray(config) {
    // hooks is actually the exported moment object
    var nowValue = new Date(hooks.now());
    if (config._useUTC) {
        return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
    }
    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
}

// convert an array to a date.
// the array should mirror the parameters below
// note: all values past the year are optional and will default to the lowest possible value.
// [year, month, day , hour, minute, second, millisecond]
function configFromArray (config) {
    var i, date, input = [], currentDate, yearToUse;

    if (config._d) {
        return;
    }

    currentDate = currentDateArray(config);

    //compute day of the year from weeks and weekdays
    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
        dayOfYearFromWeekInfo(config);
    }

    //if the day of the year is set, figure out what it is
    if (config._dayOfYear != null) {
        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

        if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
            getParsingFlags(config)._overflowDayOfYear = true;
        }

        date = createUTCDate(yearToUse, 0, config._dayOfYear);
        config._a[MONTH] = date.getUTCMonth();
        config._a[DATE] = date.getUTCDate();
    }

    // Default to current date.
    // * if no year, month, day of month are given, default to today
    // * if day of month is given, default month and year
    // * if month is given, default only year
    // * if year is given, don't default anything
    for (i = 0; i < 3 && config._a[i] == null; ++i) {
        config._a[i] = input[i] = currentDate[i];
    }

    // Zero out whatever was not defaulted, including time
    for (; i < 7; i++) {
        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
    }

    // Check for 24:00:00.000
    if (config._a[HOUR] === 24 &&
            config._a[MINUTE] === 0 &&
            config._a[SECOND] === 0 &&
            config._a[MILLISECOND] === 0) {
        config._nextDay = true;
        config._a[HOUR] = 0;
    }

    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
    // Apply timezone offset from input. The actual utcOffset can be changed
    // with parseZone.
    if (config._tzm != null) {
        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
    }

    if (config._nextDay) {
        config._a[HOUR] = 24;
    }
}

function dayOfYearFromWeekInfo(config) {
    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

    w = config._w;
    if (w.GG != null || w.W != null || w.E != null) {
        dow = 1;
        doy = 4;

        // TODO: We need to take the current isoWeekYear, but that depends on
        // how we interpret now (local, utc, fixed offset). So create
        // a now version of current config (take local/utc/offset flags, and
        // create now).
        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
        week = defaults(w.W, 1);
        weekday = defaults(w.E, 1);
        if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true;
        }
    } else {
        dow = config._locale._week.dow;
        doy = config._locale._week.doy;

        var curWeek = weekOfYear(createLocal(), dow, doy);

        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

        // Default to current week.
        week = defaults(w.w, curWeek.week);

        if (w.d != null) {
            // weekday -- low day numbers are considered next week
            weekday = w.d;
            if (weekday < 0 || weekday > 6) {
                weekdayOverflow = true;
            }
        } else if (w.e != null) {
            // local weekday -- counting starts from begining of week
            weekday = w.e + dow;
            if (w.e < 0 || w.e > 6) {
                weekdayOverflow = true;
            }
        } else {
            // default to begining of week
            weekday = dow;
        }
    }
    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
        getParsingFlags(config)._overflowWeeks = true;
    } else if (weekdayOverflow != null) {
        getParsingFlags(config)._overflowWeekday = true;
    } else {
        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    }
}

// constant that refers to the ISO standard
hooks.ISO_8601 = function () {};

// constant that refers to the RFC 2822 form
hooks.RFC_2822 = function () {};

// date from string and format string
function configFromStringAndFormat(config) {
    // TODO: Move this to another part of the creation flow to prevent circular deps
    if (config._f === hooks.ISO_8601) {
        configFromISO(config);
        return;
    }
    if (config._f === hooks.RFC_2822) {
        configFromRFC2822(config);
        return;
    }
    config._a = [];
    getParsingFlags(config).empty = true;

    // This array is used to make a Date, either with `new Date` or `Date.UTC`
    var string = '' + config._i,
        i, parsedInput, tokens, token, skipped,
        stringLength = string.length,
        totalParsedInputLength = 0;

    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

    for (i = 0; i < tokens.length; i++) {
        token = tokens[i];
        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
        // console.log('token', token, 'parsedInput', parsedInput,
        //         'regex', getParseRegexForToken(token, config));
        if (parsedInput) {
            skipped = string.substr(0, string.indexOf(parsedInput));
            if (skipped.length > 0) {
                getParsingFlags(config).unusedInput.push(skipped);
            }
            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
            totalParsedInputLength += parsedInput.length;
        }
        // don't parse if it's not a known token
        if (formatTokenFunctions[token]) {
            if (parsedInput) {
                getParsingFlags(config).empty = false;
            }
            else {
                getParsingFlags(config).unusedTokens.push(token);
            }
            addTimeToArrayFromToken(token, parsedInput, config);
        }
        else if (config._strict && !parsedInput) {
            getParsingFlags(config).unusedTokens.push(token);
        }
    }

    // add remaining unparsed input length to the string
    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
    if (string.length > 0) {
        getParsingFlags(config).unusedInput.push(string);
    }

    // clear _12h flag if hour is <= 12
    if (config._a[HOUR] <= 12 &&
        getParsingFlags(config).bigHour === true &&
        config._a[HOUR] > 0) {
        getParsingFlags(config).bigHour = undefined;
    }

    getParsingFlags(config).parsedDateParts = config._a.slice(0);
    getParsingFlags(config).meridiem = config._meridiem;
    // handle meridiem
    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

    configFromArray(config);
    checkOverflow(config);
}


function meridiemFixWrap (locale, hour, meridiem) {
    var isPm;

    if (meridiem == null) {
        // nothing to do
        return hour;
    }
    if (locale.meridiemHour != null) {
        return locale.meridiemHour(hour, meridiem);
    } else if (locale.isPM != null) {
        // Fallback
        isPm = locale.isPM(meridiem);
        if (isPm && hour < 12) {
            hour += 12;
        }
        if (!isPm && hour === 12) {
            hour = 0;
        }
        return hour;
    } else {
        // this is not supposed to happen
        return hour;
    }
}

// date from string and array of format strings
function configFromStringAndArray(config) {
    var tempConfig,
        bestMoment,

        scoreToBeat,
        i,
        currentScore;

    if (config._f.length === 0) {
        getParsingFlags(config).invalidFormat = true;
        config._d = new Date(NaN);
        return;
    }

    for (i = 0; i < config._f.length; i++) {
        currentScore = 0;
        tempConfig = copyConfig({}, config);
        if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC;
        }
        tempConfig._f = config._f[i];
        configFromStringAndFormat(tempConfig);

        if (!isValid(tempConfig)) {
            continue;
        }

        // if there is any input that was not parsed add a penalty for that format
        currentScore += getParsingFlags(tempConfig).charsLeftOver;

        //or tokens
        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

        getParsingFlags(tempConfig).score = currentScore;

        if (scoreToBeat == null || currentScore < scoreToBeat) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
        }
    }

    extend(config, bestMoment || tempConfig);
}

function configFromObject(config) {
    if (config._d) {
        return;
    }

    var i = normalizeObjectUnits(config._i);
    config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
        return obj && parseInt(obj, 10);
    });

    configFromArray(config);
}

function createFromConfig (config) {
    var res = new Moment(checkOverflow(prepareConfig(config)));
    if (res._nextDay) {
        // Adding is smart enough around DST
        res.add(1, 'd');
        res._nextDay = undefined;
    }

    return res;
}

function prepareConfig (config) {
    var input = config._i,
        format = config._f;

    config._locale = config._locale || getLocale(config._l);

    if (input === null || (format === undefined && input === '')) {
        return createInvalid({nullInput: true});
    }

    if (typeof input === 'string') {
        config._i = input = config._locale.preparse(input);
    }

    if (isMoment(input)) {
        return new Moment(checkOverflow(input));
    } else if (isDate(input)) {
        config._d = input;
    } else if (isArray(format)) {
        configFromStringAndArray(config);
    } else if (format) {
        configFromStringAndFormat(config);
    }  else {
        configFromInput(config);
    }

    if (!isValid(config)) {
        config._d = null;
    }

    return config;
}

function configFromInput(config) {
    var input = config._i;
    if (isUndefined(input)) {
        config._d = new Date(hooks.now());
    } else if (isDate(input)) {
        config._d = new Date(input.valueOf());
    } else if (typeof input === 'string') {
        configFromString(config);
    } else if (isArray(input)) {
        config._a = map(input.slice(0), function (obj) {
            return parseInt(obj, 10);
        });
        configFromArray(config);
    } else if (isObject(input)) {
        configFromObject(config);
    } else if (isNumber(input)) {
        // from milliseconds
        config._d = new Date(input);
    } else {
        hooks.createFromInputFallback(config);
    }
}

function createLocalOrUTC (input, format, locale, strict, isUTC) {
    var c = {};

    if (locale === true || locale === false) {
        strict = locale;
        locale = undefined;
    }

    if ((isObject(input) && isObjectEmpty(input)) ||
            (isArray(input) && input.length === 0)) {
        input = undefined;
    }
    // object construction must be done this way.
    // https://github.com/moment/moment/issues/1423
    c._isAMomentObject = true;
    c._useUTC = c._isUTC = isUTC;
    c._l = locale;
    c._i = input;
    c._f = format;
    c._strict = strict;

    return createFromConfig(c);
}

function createLocal (input, format, locale, strict) {
    return createLocalOrUTC(input, format, locale, strict, false);
}

var prototypeMin = deprecate(
    'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
    function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other < this ? this : other;
        } else {
            return createInvalid();
        }
    }
);

var prototypeMax = deprecate(
    'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
    function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other > this ? this : other;
        } else {
            return createInvalid();
        }
    }
);

// Pick a moment m from moments so that m[fn](other) is true for all
// other. This relies on the function fn to be transitive.
//
// moments should either be an array of moment objects or an array, whose
// first element is an array of moment objects.
function pickBy(fn, moments) {
    var res, i;
    if (moments.length === 1 && isArray(moments[0])) {
        moments = moments[0];
    }
    if (!moments.length) {
        return createLocal();
    }
    res = moments[0];
    for (i = 1; i < moments.length; ++i) {
        if (!moments[i].isValid() || moments[i][fn](res)) {
            res = moments[i];
        }
    }
    return res;
}

// TODO: Use [].sort instead?
function min () {
    var args = [].slice.call(arguments, 0);

    return pickBy('isBefore', args);
}

function max () {
    var args = [].slice.call(arguments, 0);

    return pickBy('isAfter', args);
}

var now = function () {
    return Date.now ? Date.now() : +(new Date());
};

var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

function isDurationValid(m) {
    for (var key in m) {
        if (!(ordering.indexOf(key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
            return false;
        }
    }

    var unitHasDecimal = false;
    for (var i = 0; i < ordering.length; ++i) {
        if (m[ordering[i]]) {
            if (unitHasDecimal) {
                return false; // only allow non-integers for smallest unit
            }
            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                unitHasDecimal = true;
            }
        }
    }

    return true;
}

function isValid$1() {
    return this._isValid;
}

function createInvalid$1() {
    return createDuration(NaN);
}

function Duration (duration) {
    var normalizedInput = normalizeObjectUnits(duration),
        years = normalizedInput.year || 0,
        quarters = normalizedInput.quarter || 0,
        months = normalizedInput.month || 0,
        weeks = normalizedInput.week || 0,
        days = normalizedInput.day || 0,
        hours = normalizedInput.hour || 0,
        minutes = normalizedInput.minute || 0,
        seconds = normalizedInput.second || 0,
        milliseconds = normalizedInput.millisecond || 0;

    this._isValid = isDurationValid(normalizedInput);

    // representation for dateAddRemove
    this._milliseconds = +milliseconds +
        seconds * 1e3 + // 1000
        minutes * 6e4 + // 1000 * 60
        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
    // Because of dateAddRemove treats 24 hours as different from a
    // day when working around DST, we need to store them separately
    this._days = +days +
        weeks * 7;
    // It is impossible translate months into days without knowing
    // which months you are are talking about, so we have to store
    // it separately.
    this._months = +months +
        quarters * 3 +
        years * 12;

    this._data = {};

    this._locale = getLocale();

    this._bubble();
}

function isDuration (obj) {
    return obj instanceof Duration;
}

function absRound (number) {
    if (number < 0) {
        return Math.round(-1 * number) * -1;
    } else {
        return Math.round(number);
    }
}

// FORMATTING

function offset (token, separator) {
    addFormatToken(token, 0, 0, function () {
        var offset = this.utcOffset();
        var sign = '+';
        if (offset < 0) {
            offset = -offset;
            sign = '-';
        }
        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
    });
}

offset('Z', ':');
offset('ZZ', '');

// PARSING

addRegexToken('Z',  matchShortOffset);
addRegexToken('ZZ', matchShortOffset);
addParseToken(['Z', 'ZZ'], function (input, array, config) {
    config._useUTC = true;
    config._tzm = offsetFromString(matchShortOffset, input);
});

// HELPERS

// timezone chunker
// '+10:00' > ['10',  '00']
// '-1530'  > ['-15', '30']
var chunkOffset = /([\+\-]|\d\d)/gi;

function offsetFromString(matcher, string) {
    var matches = (string || '').match(matcher);

    if (matches === null) {
        return null;
    }

    var chunk   = matches[matches.length - 1] || [];
    var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
    var minutes = +(parts[1] * 60) + toInt(parts[2]);

    return minutes === 0 ?
      0 :
      parts[0] === '+' ? minutes : -minutes;
}

// Return a moment from input, that is local/utc/zone equivalent to model.
function cloneWithOffset(input, model) {
    var res, diff;
    if (model._isUTC) {
        res = model.clone();
        diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
        // Use low-level api, because this fn is low-level api.
        res._d.setTime(res._d.valueOf() + diff);
        hooks.updateOffset(res, false);
        return res;
    } else {
        return createLocal(input).local();
    }
}

function getDateOffset (m) {
    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
    // https://github.com/moment/moment/pull/1871
    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
}

// HOOKS

// This function will be called whenever a moment is mutated.
// It is intended to keep the offset in sync with the timezone.
hooks.updateOffset = function () {};

// MOMENTS

// keepLocalTime = true means only change the timezone, without
// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
// +0200, so we adjust the time as needed, to be valid.
//
// Keeping the time actually adds/subtracts (one hour)
// from the actual represented time. That is why we call updateOffset
// a second time. In case it wants us to change the offset again
// _changeInProgress == true case, then we have to adjust, because
// there is no such time in the given timezone.
function getSetOffset (input, keepLocalTime, keepMinutes) {
    var offset = this._offset || 0,
        localAdjust;
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    if (input != null) {
        if (typeof input === 'string') {
            input = offsetFromString(matchShortOffset, input);
            if (input === null) {
                return this;
            }
        } else if (Math.abs(input) < 16 && !keepMinutes) {
            input = input * 60;
        }
        if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this);
        }
        this._offset = input;
        this._isUTC = true;
        if (localAdjust != null) {
            this.add(localAdjust, 'm');
        }
        if (offset !== input) {
            if (!keepLocalTime || this._changeInProgress) {
                addSubtract(this, createDuration(input - offset, 'm'), 1, false);
            } else if (!this._changeInProgress) {
                this._changeInProgress = true;
                hooks.updateOffset(this, true);
                this._changeInProgress = null;
            }
        }
        return this;
    } else {
        return this._isUTC ? offset : getDateOffset(this);
    }
}

function getSetZone (input, keepLocalTime) {
    if (input != null) {
        if (typeof input !== 'string') {
            input = -input;
        }

        this.utcOffset(input, keepLocalTime);

        return this;
    } else {
        return -this.utcOffset();
    }
}

function setOffsetToUTC (keepLocalTime) {
    return this.utcOffset(0, keepLocalTime);
}

function setOffsetToLocal (keepLocalTime) {
    if (this._isUTC) {
        this.utcOffset(0, keepLocalTime);
        this._isUTC = false;

        if (keepLocalTime) {
            this.subtract(getDateOffset(this), 'm');
        }
    }
    return this;
}

function setOffsetToParsedOffset () {
    if (this._tzm != null) {
        this.utcOffset(this._tzm, false, true);
    } else if (typeof this._i === 'string') {
        var tZone = offsetFromString(matchOffset, this._i);
        if (tZone != null) {
            this.utcOffset(tZone);
        }
        else {
            this.utcOffset(0, true);
        }
    }
    return this;
}

function hasAlignedHourOffset (input) {
    if (!this.isValid()) {
        return false;
    }
    input = input ? createLocal(input).utcOffset() : 0;

    return (this.utcOffset() - input) % 60 === 0;
}

function isDaylightSavingTime () {
    return (
        this.utcOffset() > this.clone().month(0).utcOffset() ||
        this.utcOffset() > this.clone().month(5).utcOffset()
    );
}

function isDaylightSavingTimeShifted () {
    if (!isUndefined(this._isDSTShifted)) {
        return this._isDSTShifted;
    }

    var c = {};

    copyConfig(c, this);
    c = prepareConfig(c);

    if (c._a) {
        var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
        this._isDSTShifted = this.isValid() &&
            compareArrays(c._a, other.toArray()) > 0;
    } else {
        this._isDSTShifted = false;
    }

    return this._isDSTShifted;
}

function isLocal () {
    return this.isValid() ? !this._isUTC : false;
}

function isUtcOffset () {
    return this.isValid() ? this._isUTC : false;
}

function isUtc () {
    return this.isValid() ? this._isUTC && this._offset === 0 : false;
}

// ASP.NET json date format regex
var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
// and further modified to allow for strings containing both week and day
var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;

function createDuration (input, key) {
    var duration = input,
        // matching against regexp is expensive, do it on demand
        match = null,
        sign,
        ret,
        diffRes;

    if (isDuration(input)) {
        duration = {
            ms : input._milliseconds,
            d  : input._days,
            M  : input._months
        };
    } else if (isNumber(input)) {
        duration = {};
        if (key) {
            duration[key] = input;
        } else {
            duration.milliseconds = input;
        }
    } else if (!!(match = aspNetRegex.exec(input))) {
        sign = (match[1] === '-') ? -1 : 1;
        duration = {
            y  : 0,
            d  : toInt(match[DATE])                         * sign,
            h  : toInt(match[HOUR])                         * sign,
            m  : toInt(match[MINUTE])                       * sign,
            s  : toInt(match[SECOND])                       * sign,
            ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
        };
    } else if (!!(match = isoRegex.exec(input))) {
        sign = (match[1] === '-') ? -1 : 1;
        duration = {
            y : parseIso(match[2], sign),
            M : parseIso(match[3], sign),
            w : parseIso(match[4], sign),
            d : parseIso(match[5], sign),
            h : parseIso(match[6], sign),
            m : parseIso(match[7], sign),
            s : parseIso(match[8], sign)
        };
    } else if (duration == null) {// checks for null or undefined
        duration = {};
    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
        diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

        duration = {};
        duration.ms = diffRes.milliseconds;
        duration.M = diffRes.months;
    }

    ret = new Duration(duration);

    if (isDuration(input) && hasOwnProp(input, '_locale')) {
        ret._locale = input._locale;
    }

    return ret;
}

createDuration.fn = Duration.prototype;
createDuration.invalid = createInvalid$1;

function parseIso (inp, sign) {
    // We'd normally use ~~inp for this, but unfortunately it also
    // converts floats to ints.
    // inp may be undefined, so careful calling replace on it.
    var res = inp && parseFloat(inp.replace(',', '.'));
    // apply sign while we're at it
    return (isNaN(res) ? 0 : res) * sign;
}

function positiveMomentsDifference(base, other) {
    var res = {milliseconds: 0, months: 0};

    res.months = other.month() - base.month() +
        (other.year() - base.year()) * 12;
    if (base.clone().add(res.months, 'M').isAfter(other)) {
        --res.months;
    }

    res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

    return res;
}

function momentsDifference(base, other) {
    var res;
    if (!(base.isValid() && other.isValid())) {
        return {milliseconds: 0, months: 0};
    }

    other = cloneWithOffset(other, base);
    if (base.isBefore(other)) {
        res = positiveMomentsDifference(base, other);
    } else {
        res = positiveMomentsDifference(other, base);
        res.milliseconds = -res.milliseconds;
        res.months = -res.months;
    }

    return res;
}

// TODO: remove 'name' arg after deprecation is removed
function createAdder(direction, name) {
    return function (val, period) {
        var dur, tmp;
        //invert the arguments, but complain about it
        if (period !== null && !isNaN(+period)) {
            deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
            tmp = val; val = period; period = tmp;
        }

        val = typeof val === 'string' ? +val : val;
        dur = createDuration(val, period);
        addSubtract(this, dur, direction);
        return this;
    };
}

function addSubtract (mom, duration, isAdding, updateOffset) {
    var milliseconds = duration._milliseconds,
        days = absRound(duration._days),
        months = absRound(duration._months);

    if (!mom.isValid()) {
        // No op
        return;
    }

    updateOffset = updateOffset == null ? true : updateOffset;

    if (milliseconds) {
        mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
    }
    if (days) {
        set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
    }
    if (months) {
        setMonth(mom, get(mom, 'Month') + months * isAdding);
    }
    if (updateOffset) {
        hooks.updateOffset(mom, days || months);
    }
}

var add      = createAdder(1, 'add');
var subtract = createAdder(-1, 'subtract');

function getCalendarFormat(myMoment, now) {
    var diff = myMoment.diff(now, 'days', true);
    return diff < -6 ? 'sameElse' :
            diff < -1 ? 'lastWeek' :
            diff < 0 ? 'lastDay' :
            diff < 1 ? 'sameDay' :
            diff < 2 ? 'nextDay' :
            diff < 7 ? 'nextWeek' : 'sameElse';
}

function calendar$1 (time, formats) {
    // We want to compare the start of today, vs this.
    // Getting start-of-today depends on whether we're local/utc/offset or not.
    var now = time || createLocal(),
        sod = cloneWithOffset(now, this).startOf('day'),
        format = hooks.calendarFormat(this, sod) || 'sameElse';

    var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
}

function clone () {
    return new Moment(this);
}

function isAfter (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() > localInput.valueOf();
    } else {
        return localInput.valueOf() < this.clone().startOf(units).valueOf();
    }
}

function isBefore (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() < localInput.valueOf();
    } else {
        return this.clone().endOf(units).valueOf() < localInput.valueOf();
    }
}

function isBetween (from, to, units, inclusivity) {
    inclusivity = inclusivity || '()';
    return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
        (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
}

function isSame (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input),
        inputMs;
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(units || 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() === localInput.valueOf();
    } else {
        inputMs = localInput.valueOf();
        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
    }
}

function isSameOrAfter (input, units) {
    return this.isSame(input, units) || this.isAfter(input,units);
}

function isSameOrBefore (input, units) {
    return this.isSame(input, units) || this.isBefore(input,units);
}

function diff (input, units, asFloat) {
    var that,
        zoneDelta,
        delta, output;

    if (!this.isValid()) {
        return NaN;
    }

    that = cloneWithOffset(input, this);

    if (!that.isValid()) {
        return NaN;
    }

    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

    units = normalizeUnits(units);

    if (units === 'year' || units === 'month' || units === 'quarter') {
        output = monthDiff(this, that);
        if (units === 'quarter') {
            output = output / 3;
        } else if (units === 'year') {
            output = output / 12;
        }
    } else {
        delta = this - that;
        output = units === 'second' ? delta / 1e3 : // 1000
            units === 'minute' ? delta / 6e4 : // 1000 * 60
            units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
            units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
            units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
            delta;
    }
    return asFloat ? output : absFloor(output);
}

function monthDiff (a, b) {
    // difference in months
    var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
        // b is in (anchor - 1 month, anchor + 1 month)
        anchor = a.clone().add(wholeMonthDiff, 'months'),
        anchor2, adjust;

    if (b - anchor < 0) {
        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor - anchor2);
    } else {
        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor2 - anchor);
    }

    //check for negative zero, return zero if negative zero
    return -(wholeMonthDiff + adjust) || 0;
}

hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

function toString () {
    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
}

function toISOString() {
    if (!this.isValid()) {
        return null;
    }
    var m = this.clone().utc();
    if (m.year() < 0 || m.year() > 9999) {
        return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
    }
    if (isFunction(Date.prototype.toISOString)) {
        // native implementation is ~50x faster, use it when we can
        return this.toDate().toISOString();
    }
    return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
}

/**
 * Return a human readable representation of a moment that can
 * also be evaluated to get a new moment which is the same
 *
 * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
 */
function inspect () {
    if (!this.isValid()) {
        return 'moment.invalid(/* ' + this._i + ' */)';
    }
    var func = 'moment';
    var zone = '';
    if (!this.isLocal()) {
        func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
        zone = 'Z';
    }
    var prefix = '[' + func + '("]';
    var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
    var datetime = '-MM-DD[T]HH:mm:ss.SSS';
    var suffix = zone + '[")]';

    return this.format(prefix + year + datetime + suffix);
}

function format (inputString) {
    if (!inputString) {
        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
    }
    var output = formatMoment(this, inputString);
    return this.localeData().postformat(output);
}

function from (time, withoutSuffix) {
    if (this.isValid() &&
            ((isMoment(time) && time.isValid()) ||
             createLocal(time).isValid())) {
        return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
    } else {
        return this.localeData().invalidDate();
    }
}

function fromNow (withoutSuffix) {
    return this.from(createLocal(), withoutSuffix);
}

function to (time, withoutSuffix) {
    if (this.isValid() &&
            ((isMoment(time) && time.isValid()) ||
             createLocal(time).isValid())) {
        return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
    } else {
        return this.localeData().invalidDate();
    }
}

function toNow (withoutSuffix) {
    return this.to(createLocal(), withoutSuffix);
}

// If passed a locale key, it will set the locale for this
// instance.  Otherwise, it will return the locale configuration
// variables for this instance.
function locale (key) {
    var newLocaleData;

    if (key === undefined) {
        return this._locale._abbr;
    } else {
        newLocaleData = getLocale(key);
        if (newLocaleData != null) {
            this._locale = newLocaleData;
        }
        return this;
    }
}

var lang = deprecate(
    'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
    function (key) {
        if (key === undefined) {
            return this.localeData();
        } else {
            return this.locale(key);
        }
    }
);

function localeData () {
    return this._locale;
}

function startOf (units) {
    units = normalizeUnits(units);
    // the following switch intentionally omits break keywords
    // to utilize falling through the cases.
    switch (units) {
        case 'year':
            this.month(0);
            /* falls through */
        case 'quarter':
        case 'month':
            this.date(1);
            /* falls through */
        case 'week':
        case 'isoWeek':
        case 'day':
        case 'date':
            this.hours(0);
            /* falls through */
        case 'hour':
            this.minutes(0);
            /* falls through */
        case 'minute':
            this.seconds(0);
            /* falls through */
        case 'second':
            this.milliseconds(0);
    }

    // weeks are a special case
    if (units === 'week') {
        this.weekday(0);
    }
    if (units === 'isoWeek') {
        this.isoWeekday(1);
    }

    // quarters are also special
    if (units === 'quarter') {
        this.month(Math.floor(this.month() / 3) * 3);
    }

    return this;
}

function endOf (units) {
    units = normalizeUnits(units);
    if (units === undefined || units === 'millisecond') {
        return this;
    }

    // 'date' is an alias for 'day', so it should be considered as such.
    if (units === 'date') {
        units = 'day';
    }

    return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
}

function valueOf () {
    return this._d.valueOf() - ((this._offset || 0) * 60000);
}

function unix () {
    return Math.floor(this.valueOf() / 1000);
}

function toDate () {
    return new Date(this.valueOf());
}

function toArray () {
    var m = this;
    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
}

function toObject () {
    var m = this;
    return {
        years: m.year(),
        months: m.month(),
        date: m.date(),
        hours: m.hours(),
        minutes: m.minutes(),
        seconds: m.seconds(),
        milliseconds: m.milliseconds()
    };
}

function toJSON () {
    // new Date(NaN).toJSON() === null
    return this.isValid() ? this.toISOString() : null;
}

function isValid$2 () {
    return isValid(this);
}

function parsingFlags () {
    return extend({}, getParsingFlags(this));
}

function invalidAt () {
    return getParsingFlags(this).overflow;
}

function creationData() {
    return {
        input: this._i,
        format: this._f,
        locale: this._locale,
        isUTC: this._isUTC,
        strict: this._strict
    };
}

// FORMATTING

addFormatToken(0, ['gg', 2], 0, function () {
    return this.weekYear() % 100;
});

addFormatToken(0, ['GG', 2], 0, function () {
    return this.isoWeekYear() % 100;
});

function addWeekYearFormatToken (token, getter) {
    addFormatToken(0, [token, token.length], 0, getter);
}

addWeekYearFormatToken('gggg',     'weekYear');
addWeekYearFormatToken('ggggg',    'weekYear');
addWeekYearFormatToken('GGGG',  'isoWeekYear');
addWeekYearFormatToken('GGGGG', 'isoWeekYear');

// ALIASES

addUnitAlias('weekYear', 'gg');
addUnitAlias('isoWeekYear', 'GG');

// PRIORITY

addUnitPriority('weekYear', 1);
addUnitPriority('isoWeekYear', 1);


// PARSING

addRegexToken('G',      matchSigned);
addRegexToken('g',      matchSigned);
addRegexToken('GG',     match1to2, match2);
addRegexToken('gg',     match1to2, match2);
addRegexToken('GGGG',   match1to4, match4);
addRegexToken('gggg',   match1to4, match4);
addRegexToken('GGGGG',  match1to6, match6);
addRegexToken('ggggg',  match1to6, match6);

addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
    week[token.substr(0, 2)] = toInt(input);
});

addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
    week[token] = hooks.parseTwoDigitYear(input);
});

// MOMENTS

function getSetWeekYear (input) {
    return getSetWeekYearHelper.call(this,
            input,
            this.week(),
            this.weekday(),
            this.localeData()._week.dow,
            this.localeData()._week.doy);
}

function getSetISOWeekYear (input) {
    return getSetWeekYearHelper.call(this,
            input, this.isoWeek(), this.isoWeekday(), 1, 4);
}

function getISOWeeksInYear () {
    return weeksInYear(this.year(), 1, 4);
}

function getWeeksInYear () {
    var weekInfo = this.localeData()._week;
    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
}

function getSetWeekYearHelper(input, week, weekday, dow, doy) {
    var weeksTarget;
    if (input == null) {
        return weekOfYear(this, dow, doy).year;
    } else {
        weeksTarget = weeksInYear(input, dow, doy);
        if (week > weeksTarget) {
            week = weeksTarget;
        }
        return setWeekAll.call(this, input, week, weekday, dow, doy);
    }
}

function setWeekAll(weekYear, week, weekday, dow, doy) {
    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

    this.year(date.getUTCFullYear());
    this.month(date.getUTCMonth());
    this.date(date.getUTCDate());
    return this;
}

// FORMATTING

addFormatToken('Q', 0, 'Qo', 'quarter');

// ALIASES

addUnitAlias('quarter', 'Q');

// PRIORITY

addUnitPriority('quarter', 7);

// PARSING

addRegexToken('Q', match1);
addParseToken('Q', function (input, array) {
    array[MONTH] = (toInt(input) - 1) * 3;
});

// MOMENTS

function getSetQuarter (input) {
    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
}

// FORMATTING

addFormatToken('D', ['DD', 2], 'Do', 'date');

// ALIASES

addUnitAlias('date', 'D');

// PRIOROITY
addUnitPriority('date', 9);

// PARSING

addRegexToken('D',  match1to2);
addRegexToken('DD', match1to2, match2);
addRegexToken('Do', function (isStrict, locale) {
    // TODO: Remove "ordinalParse" fallback in next major release.
    return isStrict ?
      (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
      locale._dayOfMonthOrdinalParseLenient;
});

addParseToken(['D', 'DD'], DATE);
addParseToken('Do', function (input, array) {
    array[DATE] = toInt(input.match(match1to2)[0], 10);
});

// MOMENTS

var getSetDayOfMonth = makeGetSet('Date', true);

// FORMATTING

addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

// ALIASES

addUnitAlias('dayOfYear', 'DDD');

// PRIORITY
addUnitPriority('dayOfYear', 4);

// PARSING

addRegexToken('DDD',  match1to3);
addRegexToken('DDDD', match3);
addParseToken(['DDD', 'DDDD'], function (input, array, config) {
    config._dayOfYear = toInt(input);
});

// HELPERS

// MOMENTS

function getSetDayOfYear (input) {
    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
    return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
}

// FORMATTING

addFormatToken('m', ['mm', 2], 0, 'minute');

// ALIASES

addUnitAlias('minute', 'm');

// PRIORITY

addUnitPriority('minute', 14);

// PARSING

addRegexToken('m',  match1to2);
addRegexToken('mm', match1to2, match2);
addParseToken(['m', 'mm'], MINUTE);

// MOMENTS

var getSetMinute = makeGetSet('Minutes', false);

// FORMATTING

addFormatToken('s', ['ss', 2], 0, 'second');

// ALIASES

addUnitAlias('second', 's');

// PRIORITY

addUnitPriority('second', 15);

// PARSING

addRegexToken('s',  match1to2);
addRegexToken('ss', match1to2, match2);
addParseToken(['s', 'ss'], SECOND);

// MOMENTS

var getSetSecond = makeGetSet('Seconds', false);

// FORMATTING

addFormatToken('S', 0, 0, function () {
    return ~~(this.millisecond() / 100);
});

addFormatToken(0, ['SS', 2], 0, function () {
    return ~~(this.millisecond() / 10);
});

addFormatToken(0, ['SSS', 3], 0, 'millisecond');
addFormatToken(0, ['SSSS', 4], 0, function () {
    return this.millisecond() * 10;
});
addFormatToken(0, ['SSSSS', 5], 0, function () {
    return this.millisecond() * 100;
});
addFormatToken(0, ['SSSSSS', 6], 0, function () {
    return this.millisecond() * 1000;
});
addFormatToken(0, ['SSSSSSS', 7], 0, function () {
    return this.millisecond() * 10000;
});
addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
    return this.millisecond() * 100000;
});
addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
    return this.millisecond() * 1000000;
});


// ALIASES

addUnitAlias('millisecond', 'ms');

// PRIORITY

addUnitPriority('millisecond', 16);

// PARSING

addRegexToken('S',    match1to3, match1);
addRegexToken('SS',   match1to3, match2);
addRegexToken('SSS',  match1to3, match3);

var token;
for (token = 'SSSS'; token.length <= 9; token += 'S') {
    addRegexToken(token, matchUnsigned);
}

function parseMs(input, array) {
    array[MILLISECOND] = toInt(('0.' + input) * 1000);
}

for (token = 'S'; token.length <= 9; token += 'S') {
    addParseToken(token, parseMs);
}
// MOMENTS

var getSetMillisecond = makeGetSet('Milliseconds', false);

// FORMATTING

addFormatToken('z',  0, 0, 'zoneAbbr');
addFormatToken('zz', 0, 0, 'zoneName');

// MOMENTS

function getZoneAbbr () {
    return this._isUTC ? 'UTC' : '';
}

function getZoneName () {
    return this._isUTC ? 'Coordinated Universal Time' : '';
}

var proto = Moment.prototype;

proto.add               = add;
proto.calendar          = calendar$1;
proto.clone             = clone;
proto.diff              = diff;
proto.endOf             = endOf;
proto.format            = format;
proto.from              = from;
proto.fromNow           = fromNow;
proto.to                = to;
proto.toNow             = toNow;
proto.get               = stringGet;
proto.invalidAt         = invalidAt;
proto.isAfter           = isAfter;
proto.isBefore          = isBefore;
proto.isBetween         = isBetween;
proto.isSame            = isSame;
proto.isSameOrAfter     = isSameOrAfter;
proto.isSameOrBefore    = isSameOrBefore;
proto.isValid           = isValid$2;
proto.lang              = lang;
proto.locale            = locale;
proto.localeData        = localeData;
proto.max               = prototypeMax;
proto.min               = prototypeMin;
proto.parsingFlags      = parsingFlags;
proto.set               = stringSet;
proto.startOf           = startOf;
proto.subtract          = subtract;
proto.toArray           = toArray;
proto.toObject          = toObject;
proto.toDate            = toDate;
proto.toISOString       = toISOString;
proto.inspect           = inspect;
proto.toJSON            = toJSON;
proto.toString          = toString;
proto.unix              = unix;
proto.valueOf           = valueOf;
proto.creationData      = creationData;

// Year
proto.year       = getSetYear;
proto.isLeapYear = getIsLeapYear;

// Week Year
proto.weekYear    = getSetWeekYear;
proto.isoWeekYear = getSetISOWeekYear;

// Quarter
proto.quarter = proto.quarters = getSetQuarter;

// Month
proto.month       = getSetMonth;
proto.daysInMonth = getDaysInMonth;

// Week
proto.week           = proto.weeks        = getSetWeek;
proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
proto.weeksInYear    = getWeeksInYear;
proto.isoWeeksInYear = getISOWeeksInYear;

// Day
proto.date       = getSetDayOfMonth;
proto.day        = proto.days             = getSetDayOfWeek;
proto.weekday    = getSetLocaleDayOfWeek;
proto.isoWeekday = getSetISODayOfWeek;
proto.dayOfYear  = getSetDayOfYear;

// Hour
proto.hour = proto.hours = getSetHour;

// Minute
proto.minute = proto.minutes = getSetMinute;

// Second
proto.second = proto.seconds = getSetSecond;

// Millisecond
proto.millisecond = proto.milliseconds = getSetMillisecond;

// Offset
proto.utcOffset            = getSetOffset;
proto.utc                  = setOffsetToUTC;
proto.local                = setOffsetToLocal;
proto.parseZone            = setOffsetToParsedOffset;
proto.hasAlignedHourOffset = hasAlignedHourOffset;
proto.isDST                = isDaylightSavingTime;
proto.isLocal              = isLocal;
proto.isUtcOffset          = isUtcOffset;
proto.isUtc                = isUtc;
proto.isUTC                = isUtc;

// Timezone
proto.zoneAbbr = getZoneAbbr;
proto.zoneName = getZoneName;

// Deprecations
proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

function createUnix (input) {
    return createLocal(input * 1000);
}

function createInZone () {
    return createLocal.apply(null, arguments).parseZone();
}

function preParsePostFormat (string) {
    return string;
}

var proto$1 = Locale.prototype;

proto$1.calendar        = calendar;
proto$1.longDateFormat  = longDateFormat;
proto$1.invalidDate     = invalidDate;
proto$1.ordinal         = ordinal;
proto$1.preparse        = preParsePostFormat;
proto$1.postformat      = preParsePostFormat;
proto$1.relativeTime    = relativeTime;
proto$1.pastFuture      = pastFuture;
proto$1.set             = set;

// Month
proto$1.months            =        localeMonths;
proto$1.monthsShort       =        localeMonthsShort;
proto$1.monthsParse       =        localeMonthsParse;
proto$1.monthsRegex       = monthsRegex;
proto$1.monthsShortRegex  = monthsShortRegex;

// Week
proto$1.week = localeWeek;
proto$1.firstDayOfYear = localeFirstDayOfYear;
proto$1.firstDayOfWeek = localeFirstDayOfWeek;

// Day of Week
proto$1.weekdays       =        localeWeekdays;
proto$1.weekdaysMin    =        localeWeekdaysMin;
proto$1.weekdaysShort  =        localeWeekdaysShort;
proto$1.weekdaysParse  =        localeWeekdaysParse;

proto$1.weekdaysRegex       =        weekdaysRegex;
proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

// Hours
proto$1.isPM = localeIsPM;
proto$1.meridiem = localeMeridiem;

function get$1 (format, index, field, setter) {
    var locale = getLocale();
    var utc = createUTC().set(setter, index);
    return locale[field](utc, format);
}

function listMonthsImpl (format, index, field) {
    if (isNumber(format)) {
        index = format;
        format = undefined;
    }

    format = format || '';

    if (index != null) {
        return get$1(format, index, field, 'month');
    }

    var i;
    var out = [];
    for (i = 0; i < 12; i++) {
        out[i] = get$1(format, i, field, 'month');
    }
    return out;
}

// ()
// (5)
// (fmt, 5)
// (fmt)
// (true)
// (true, 5)
// (true, fmt, 5)
// (true, fmt)
function listWeekdaysImpl (localeSorted, format, index, field) {
    if (typeof localeSorted === 'boolean') {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';
    } else {
        format = localeSorted;
        index = format;
        localeSorted = false;

        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';
    }

    var locale = getLocale(),
        shift = localeSorted ? locale._week.dow : 0;

    if (index != null) {
        return get$1(format, (index + shift) % 7, field, 'day');
    }

    var i;
    var out = [];
    for (i = 0; i < 7; i++) {
        out[i] = get$1(format, (i + shift) % 7, field, 'day');
    }
    return out;
}

function listMonths (format, index) {
    return listMonthsImpl(format, index, 'months');
}

function listMonthsShort (format, index) {
    return listMonthsImpl(format, index, 'monthsShort');
}

function listWeekdays (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
}

function listWeekdaysShort (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
}

function listWeekdaysMin (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
}

getSetGlobalLocale('en', {
    dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (toInt(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    }
});

// Side effect imports
hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

var mathAbs = Math.abs;

function abs () {
    var data           = this._data;

    this._milliseconds = mathAbs(this._milliseconds);
    this._days         = mathAbs(this._days);
    this._months       = mathAbs(this._months);

    data.milliseconds  = mathAbs(data.milliseconds);
    data.seconds       = mathAbs(data.seconds);
    data.minutes       = mathAbs(data.minutes);
    data.hours         = mathAbs(data.hours);
    data.months        = mathAbs(data.months);
    data.years         = mathAbs(data.years);

    return this;
}

function addSubtract$1 (duration, input, value, direction) {
    var other = createDuration(input, value);

    duration._milliseconds += direction * other._milliseconds;
    duration._days         += direction * other._days;
    duration._months       += direction * other._months;

    return duration._bubble();
}

// supports only 2.0-style add(1, 's') or add(duration)
function add$1 (input, value) {
    return addSubtract$1(this, input, value, 1);
}

// supports only 2.0-style subtract(1, 's') or subtract(duration)
function subtract$1 (input, value) {
    return addSubtract$1(this, input, value, -1);
}

function absCeil (number) {
    if (number < 0) {
        return Math.floor(number);
    } else {
        return Math.ceil(number);
    }
}

function bubble () {
    var milliseconds = this._milliseconds;
    var days         = this._days;
    var months       = this._months;
    var data         = this._data;
    var seconds, minutes, hours, years, monthsFromDays;

    // if we have a mix of positive and negative values, bubble down first
    // check: https://github.com/moment/moment/issues/2166
    if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
            (milliseconds <= 0 && days <= 0 && months <= 0))) {
        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
        days = 0;
        months = 0;
    }

    // The following code bubbles up values, see the tests for
    // examples of what that means.
    data.milliseconds = milliseconds % 1000;

    seconds           = absFloor(milliseconds / 1000);
    data.seconds      = seconds % 60;

    minutes           = absFloor(seconds / 60);
    data.minutes      = minutes % 60;

    hours             = absFloor(minutes / 60);
    data.hours        = hours % 24;

    days += absFloor(hours / 24);

    // convert days to months
    monthsFromDays = absFloor(daysToMonths(days));
    months += monthsFromDays;
    days -= absCeil(monthsToDays(monthsFromDays));

    // 12 months -> 1 year
    years = absFloor(months / 12);
    months %= 12;

    data.days   = days;
    data.months = months;
    data.years  = years;

    return this;
}

function daysToMonths (days) {
    // 400 years have 146097 days (taking into account leap year rules)
    // 400 years have 12 months === 4800
    return days * 4800 / 146097;
}

function monthsToDays (months) {
    // the reverse of daysToMonths
    return months * 146097 / 4800;
}

function as (units) {
    if (!this.isValid()) {
        return NaN;
    }
    var days;
    var months;
    var milliseconds = this._milliseconds;

    units = normalizeUnits(units);

    if (units === 'month' || units === 'year') {
        days   = this._days   + milliseconds / 864e5;
        months = this._months + daysToMonths(days);
        return units === 'month' ? months : months / 12;
    } else {
        // handle milliseconds separately because of floating point math errors (issue #1867)
        days = this._days + Math.round(monthsToDays(this._months));
        switch (units) {
            case 'week'   : return days / 7     + milliseconds / 6048e5;
            case 'day'    : return days         + milliseconds / 864e5;
            case 'hour'   : return days * 24    + milliseconds / 36e5;
            case 'minute' : return days * 1440  + milliseconds / 6e4;
            case 'second' : return days * 86400 + milliseconds / 1000;
            // Math.floor prevents floating point math errors here
            case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
            default: throw new Error('Unknown unit ' + units);
        }
    }
}

// TODO: Use this.as('ms')?
function valueOf$1 () {
    if (!this.isValid()) {
        return NaN;
    }
    return (
        this._milliseconds +
        this._days * 864e5 +
        (this._months % 12) * 2592e6 +
        toInt(this._months / 12) * 31536e6
    );
}

function makeAs (alias) {
    return function () {
        return this.as(alias);
    };
}

var asMilliseconds = makeAs('ms');
var asSeconds      = makeAs('s');
var asMinutes      = makeAs('m');
var asHours        = makeAs('h');
var asDays         = makeAs('d');
var asWeeks        = makeAs('w');
var asMonths       = makeAs('M');
var asYears        = makeAs('y');

function get$2 (units) {
    units = normalizeUnits(units);
    return this.isValid() ? this[units + 's']() : NaN;
}

function makeGetter(name) {
    return function () {
        return this.isValid() ? this._data[name] : NaN;
    };
}

var milliseconds = makeGetter('milliseconds');
var seconds      = makeGetter('seconds');
var minutes      = makeGetter('minutes');
var hours        = makeGetter('hours');
var days         = makeGetter('days');
var months       = makeGetter('months');
var years        = makeGetter('years');

function weeks () {
    return absFloor(this.days() / 7);
}

var round = Math.round;
var thresholds = {
    ss: 44,         // a few seconds to seconds
    s : 45,         // seconds to minute
    m : 45,         // minutes to hour
    h : 22,         // hours to day
    d : 26,         // days to month
    M : 11          // months to year
};

// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
}

function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
    var duration = createDuration(posNegDuration).abs();
    var seconds  = round(duration.as('s'));
    var minutes  = round(duration.as('m'));
    var hours    = round(duration.as('h'));
    var days     = round(duration.as('d'));
    var months   = round(duration.as('M'));
    var years    = round(duration.as('y'));

    var a = seconds <= thresholds.ss && ['s', seconds]  ||
            seconds < thresholds.s   && ['ss', seconds] ||
            minutes <= 1             && ['m']           ||
            minutes < thresholds.m   && ['mm', minutes] ||
            hours   <= 1             && ['h']           ||
            hours   < thresholds.h   && ['hh', hours]   ||
            days    <= 1             && ['d']           ||
            days    < thresholds.d   && ['dd', days]    ||
            months  <= 1             && ['M']           ||
            months  < thresholds.M   && ['MM', months]  ||
            years   <= 1             && ['y']           || ['yy', years];

    a[2] = withoutSuffix;
    a[3] = +posNegDuration > 0;
    a[4] = locale;
    return substituteTimeAgo.apply(null, a);
}

// This function allows you to set the rounding function for relative time strings
function getSetRelativeTimeRounding (roundingFunction) {
    if (roundingFunction === undefined) {
        return round;
    }
    if (typeof(roundingFunction) === 'function') {
        round = roundingFunction;
        return true;
    }
    return false;
}

// This function allows you to set a threshold for relative time strings
function getSetRelativeTimeThreshold (threshold, limit) {
    if (thresholds[threshold] === undefined) {
        return false;
    }
    if (limit === undefined) {
        return thresholds[threshold];
    }
    thresholds[threshold] = limit;
    if (threshold === 's') {
        thresholds.ss = limit - 1;
    }
    return true;
}

function humanize (withSuffix) {
    if (!this.isValid()) {
        return this.localeData().invalidDate();
    }

    var locale = this.localeData();
    var output = relativeTime$1(this, !withSuffix, locale);

    if (withSuffix) {
        output = locale.pastFuture(+this, output);
    }

    return locale.postformat(output);
}

var abs$1 = Math.abs;

function toISOString$1() {
    // for ISO strings we do not use the normal bubbling rules:
    //  * milliseconds bubble up until they become hours
    //  * days do not bubble at all
    //  * months bubble up until they become years
    // This is because there is no context-free conversion between hours and days
    // (think of clock changes)
    // and also not between days and months (28-31 days per month)
    if (!this.isValid()) {
        return this.localeData().invalidDate();
    }

    var seconds = abs$1(this._milliseconds) / 1000;
    var days         = abs$1(this._days);
    var months       = abs$1(this._months);
    var minutes, hours, years;

    // 3600 seconds -> 60 minutes -> 1 hour
    minutes           = absFloor(seconds / 60);
    hours             = absFloor(minutes / 60);
    seconds %= 60;
    minutes %= 60;

    // 12 months -> 1 year
    years  = absFloor(months / 12);
    months %= 12;


    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
    var Y = years;
    var M = months;
    var D = days;
    var h = hours;
    var m = minutes;
    var s = seconds;
    var total = this.asSeconds();

    if (!total) {
        // this is the same as C#'s (Noda) and python (isodate)...
        // but not other JS (goog.date)
        return 'P0D';
    }

    return (total < 0 ? '-' : '') +
        'P' +
        (Y ? Y + 'Y' : '') +
        (M ? M + 'M' : '') +
        (D ? D + 'D' : '') +
        ((h || m || s) ? 'T' : '') +
        (h ? h + 'H' : '') +
        (m ? m + 'M' : '') +
        (s ? s + 'S' : '');
}

var proto$2 = Duration.prototype;

proto$2.isValid        = isValid$1;
proto$2.abs            = abs;
proto$2.add            = add$1;
proto$2.subtract       = subtract$1;
proto$2.as             = as;
proto$2.asMilliseconds = asMilliseconds;
proto$2.asSeconds      = asSeconds;
proto$2.asMinutes      = asMinutes;
proto$2.asHours        = asHours;
proto$2.asDays         = asDays;
proto$2.asWeeks        = asWeeks;
proto$2.asMonths       = asMonths;
proto$2.asYears        = asYears;
proto$2.valueOf        = valueOf$1;
proto$2._bubble        = bubble;
proto$2.get            = get$2;
proto$2.milliseconds   = milliseconds;
proto$2.seconds        = seconds;
proto$2.minutes        = minutes;
proto$2.hours          = hours;
proto$2.days           = days;
proto$2.weeks          = weeks;
proto$2.months         = months;
proto$2.years          = years;
proto$2.humanize       = humanize;
proto$2.toISOString    = toISOString$1;
proto$2.toString       = toISOString$1;
proto$2.toJSON         = toISOString$1;
proto$2.locale         = locale;
proto$2.localeData     = localeData;

// Deprecations
proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
proto$2.lang = lang;

// Side effect imports

// FORMATTING

addFormatToken('X', 0, 0, 'unix');
addFormatToken('x', 0, 0, 'valueOf');

// PARSING

addRegexToken('x', matchSigned);
addRegexToken('X', matchTimestamp);
addParseToken('X', function (input, array, config) {
    config._d = new Date(parseFloat(input, 10) * 1000);
});
addParseToken('x', function (input, array, config) {
    config._d = new Date(toInt(input));
});

// Side effect imports


hooks.version = '2.18.1';

setHookCallback(createLocal);

hooks.fn                    = proto;
hooks.min                   = min;
hooks.max                   = max;
hooks.now                   = now;
hooks.utc                   = createUTC;
hooks.unix                  = createUnix;
hooks.months                = listMonths;
hooks.isDate                = isDate;
hooks.locale                = getSetGlobalLocale;
hooks.invalid               = createInvalid;
hooks.duration              = createDuration;
hooks.isMoment              = isMoment;
hooks.weekdays              = listWeekdays;
hooks.parseZone             = createInZone;
hooks.localeData            = getLocale;
hooks.isDuration            = isDuration;
hooks.monthsShort           = listMonthsShort;
hooks.weekdaysMin           = listWeekdaysMin;
hooks.defineLocale          = defineLocale;
hooks.updateLocale          = updateLocale;
hooks.locales               = listLocales;
hooks.weekdaysShort         = listWeekdaysShort;
hooks.normalizeUnits        = normalizeUnits;
hooks.relativeTimeRounding = getSetRelativeTimeRounding;
hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
hooks.calendarFormat        = getCalendarFormat;
hooks.prototype             = proto;

return hooks;

})));
;
window.wp=window.wp||{},function(a){var b="undefined"==typeof _wpUtilSettings?{}:_wpUtilSettings;wp.template=_.memoize(function(b){var c,d={evaluate:/<#([\s\S]+?)#>/g,interpolate:/\{\{\{([\s\S]+?)\}\}\}/g,escape:/\{\{([^\}]+?)\}\}(?!\})/g,variable:"data"};return function(e){return(c=c||_.template(a("#tmpl-"+b).html(),d))(e)}}),wp.ajax={settings:b.ajax||{},post:function(a,b){return wp.ajax.send({data:_.isObject(a)?a:_.extend(b||{},{action:a})})},send:function(b,c){var d,e;return _.isObject(b)?c=b:(c=c||{},c.data=_.extend(c.data||{},{action:b})),c=_.defaults(c||{},{type:"POST",url:wp.ajax.settings.url,context:this}),e=a.Deferred(function(b){c.success&&b.done(c.success),c.error&&b.fail(c.error),delete c.success,delete c.error,b.jqXHR=a.ajax(c).done(function(a){"1"!==a&&1!==a||(a={success:!0}),_.isObject(a)&&!_.isUndefined(a.success)?b[a.success?"resolveWith":"rejectWith"](this,[a.data]):b.rejectWith(this,[a])}).fail(function(){b.rejectWith(this,arguments)})}),d=e.promise(),d.abort=function(){return e.jqXHR.abort(),this},d}}}(jQuery);;
window.wp=window.wp||{},function(a){wp.Backbone={},wp.Backbone.Subviews=function(a,b){this.view=a,this._views=_.isArray(b)?{"":b}:b||{}},wp.Backbone.Subviews.extend=Backbone.Model.extend,_.extend(wp.Backbone.Subviews.prototype,{all:function(){return _.flatten(_.values(this._views))},get:function(a){return a=a||"",this._views[a]},first:function(a){var b=this.get(a);return b&&b.length?b[0]:null},set:function(a,b,c){var d,e;return _.isString(a)||(c=b,b=a,a=""),c=c||{},b=_.isArray(b)?b:[b],d=this.get(a),e=b,d&&(c.add?_.isUndefined(c.at)?e=d.concat(b):(e=d,e.splice.apply(e,[c.at,0].concat(b))):(_.each(e,function(a){a.__detach=!0}),_.each(d,function(a){a.__detach?a.$el.detach():a.remove()}),_.each(e,function(a){delete a.__detach}))),this._views[a]=e,_.each(b,function(b){var c=b.Views||wp.Backbone.Subviews,d=b.views=b.views||new c(b);d.parent=this.view,d.selector=a},this),c.silent||this._attach(a,b,_.extend({ready:this._isReady()},c)),this},add:function(a,b,c){return _.isString(a)||(c=b,b=a,a=""),this.set(a,b,_.extend({add:!0},c))},unset:function(a,b,c){var d;return _.isString(a)||(c=b,b=a,a=""),b=b||[],(d=this.get(a))&&(b=_.isArray(b)?b:[b],this._views[a]=b.length?_.difference(d,b):[]),c&&c.silent||_.invoke(b,"remove"),this},detach:function(){return a(_.pluck(this.all(),"el")).detach(),this},render:function(){var a={ready:this._isReady()};return _.each(this._views,function(b,c){this._attach(c,b,a)},this),this.rendered=!0,this},remove:function(a){return a&&a.silent||(this.parent&&this.parent.views&&this.parent.views.unset(this.selector,this.view,{silent:!0}),delete this.parent,delete this.selector),_.invoke(this.all(),"remove"),this._views=[],this},replace:function(a,b){return a.html(b),this},insert:function(a,b,c){var d,e=c&&c.at;return _.isNumber(e)&&(d=a.children()).length>e?d.eq(e).before(b):a.append(b),this},ready:function(){this.view.trigger("ready"),_.chain(this.all()).map(function(a){return a.views}).flatten().where({attached:!0}).invoke("ready")},_attach:function(a,b,c){var d,e=a?this.view.$(a):this.view.$el;return e.length?(d=_.chain(b).pluck("views").flatten().value(),_.each(d,function(a){a.rendered||(a.view.render(),a.rendered=!0)},this),this[c.add?"insert":"replace"](e,_.pluck(b,"el"),c),_.each(d,function(a){a.attached=!0,c.ready&&a.ready()},this),this):this},_isReady:function(){for(var a=this.view.el;a;){if(a===document.body)return!0;a=a.parentNode}return!1}}),wp.Backbone.View=Backbone.View.extend({Subviews:wp.Backbone.Subviews,constructor:function(a){this.views=new this.Subviews(this,this.views),this.on("ready",this.ready,this),this.options=a||{},Backbone.View.apply(this,arguments)},remove:function(){var a=Backbone.View.prototype.remove.apply(this,arguments);return this.views&&this.views.remove(),a},render:function(){var a;return this.prepare&&(a=this.prepare()),this.views.detach(),this.template&&(a=a||{},this.trigger("prepare",a),this.$el.html(this.template(a))),this.views.render(),this},prepare:function(){return this.options},ready:function(){}})}(jQuery);;
var o2 = o2 || {};

o2.Views = o2.Views || {};

o2.Views.AppFooter = ( function() {
	return wp.Backbone.View.extend({
		tagName: 'footer', // @todo this at least needs to be filterable, if not just a wrapper around the full template block

		model: o2.Models.PageMeta,

		className: 'o2-app-footer',

		initialize: function() {
			this.listenTo( this.model, 'change', this.render );
		},

		render: function() {
			var template = o2.Utilities.Template( this.options.template );
			this.$el.html( template( this.model.toJSON() ) );
			return this;
		}
	} );
} )();
;
function getUserSetting(a,b){var c=getAllUserSettings();return c.hasOwnProperty(a)?c[a]:"undefined"!=typeof b?b:""}function setUserSetting(a,b,c){if("object"!=typeof userSettings)return!1;var d=userSettings.uid,e=wpCookies.getHash("wp-settings-"+d),f=userSettings.url,g=!!userSettings.secure;return a=a.toString().replace(/[^A-Za-z0-9_-]/g,""),b="number"==typeof b?parseInt(b,10):b.toString().replace(/[^A-Za-z0-9_-]/g,""),e=e||{},c?delete e[a]:e[a]=b,wpCookies.setHash("wp-settings-"+d,e,31536e3,f,"",g),wpCookies.set("wp-settings-time-"+d,userSettings.time,31536e3,f,"",g),a}function deleteUserSetting(a){return setUserSetting(a,"",1)}function getAllUserSettings(){return"object"!=typeof userSettings?{}:wpCookies.getHash("wp-settings-"+userSettings.uid)||{}}var wpCookies={each:function(a,b,c){var d,e;if(!a)return 0;if(c=c||a,"undefined"!=typeof a.length){for(d=0,e=a.length;d<e;d++)if(b.call(c,a[d],d,a)===!1)return 0}else for(d in a)if(a.hasOwnProperty(d)&&b.call(c,a[d],d,a)===!1)return 0;return 1},getHash:function(a){var b,c=this.get(a);return c&&this.each(c.split("&"),function(a){a=a.split("="),b=b||{},b[a[0]]=a[1]}),b},setHash:function(a,b,c,d,e,f){var g="";this.each(b,function(a,b){g+=(g?"&":"")+b+"="+a}),this.set(a,g,c,d,e,f)},get:function(a){var b,c,d=document.cookie,e=a+"=";if(d){if(c=d.indexOf("; "+e),c===-1){if(c=d.indexOf(e),0!==c)return null}else c+=2;return b=d.indexOf(";",c),b===-1&&(b=d.length),decodeURIComponent(d.substring(c+e.length,b))}},set:function(a,b,c,d,e,f){var g=new Date;"object"==typeof c&&c.toGMTString?c=c.toGMTString():parseInt(c,10)?(g.setTime(g.getTime()+1e3*parseInt(c,10)),c=g.toGMTString()):c="",document.cookie=a+"="+encodeURIComponent(b)+(c?"; expires="+c:"")+(d?"; path="+d:"")+(e?"; domain="+e:"")+(f?"; secure":"")},remove:function(a,b,c,d){this.set(a,"",-1e3,b,c,d)}};;
/* global wpCookies */
var o2 = o2 || {};

o2.Views = o2.Views || {};

o2.Views.AppHeader = ( function() {
	return wp.Backbone.View.extend({
		tagName: 'header', // @todo this at least needs to be filterable, if not just a wrapper around the full template block

		className: 'o2-app-header',

		model: o2.Models.PageMeta,

		defaults: function() {
			return {
				showTitle: true,
				showComments: true
			};
		},

		initialize: function( options ) {
			this.listenTo( this.model, 'change', this.render );
			this.options = _.extend( this.defaults, options );
		},

		events: {
			'click .o2-toggle-comments': 'onToggleComments'
		},

		onToggleComments: function( event ) {
			event.preventDefault();
			this.options.showComments = ! this.options.showComments;
			o2.Events.dispatcher.trigger( 'update-posts-view-options.o2', { showComments: this.options.showComments } );
			o2.Events.dispatcher.trigger( 'update-post-view-options.o2', { showComments: this.options.showComments } );
			if ( ! this.options.showComments ) {
				wpCookies.set( 'showComments', this.options.showComments, 315360000 ); // Go big - 10 years
			} else {
				wpCookies.remove( 'showComments' ); // Defaults to showing
			}

			this.toggleCommentLabel();
		},

		toggleCommentLabel: function() {
			// Toggle label
			var altText = '',
					commentToggle = this.$el.find( '.o2-toggle-comments' );
			altText = commentToggle.text();
			commentToggle.text( commentToggle.data( 'alternateText' ) );
			commentToggle.data( 'alternateText', altText );
		},

		render: function() {
			var template               = o2.Utilities.Template( this.options.template );
			var jsonifiedModel         = this.model.toJSON();
			jsonifiedModel.showTitle   = this.options.showTitle;
			jsonifiedModel.strings     = o2.strings;
			jsonifiedModel.appControls = o2.appControls;
			this.$el.html( template( jsonifiedModel ) );

			if ( !this.options.showComments ) {
				this.toggleCommentLabel();
			}

			return this;
		}
	} );
} )();
;
/*
 * jQuery Highlight plugin
 *
 * Based on highlight v3 by Johann Burkard
 * http://johannburkard.de/blog/programming/javascript/highlight-javascript-text-higlighting-jquery-plugin.html
 *
 * Code a little bit refactored and cleaned (in my humble opinion).
 * Most important changes:
 *  - has an option to highlight only entire words (wordsOnly - false by default),
 *  - has an option to be case sensitive (caseSensitive - false by default)
 *  - highlight element tag and class names can be specified in options
 *
 * Usage:
 *   // wrap every occurrance of text 'lorem' in content
 *   // with <span class='highlight'> (default options)
 *   $('#content').highlight('lorem');
 *
 *   // search for and highlight more terms at once
 *   // so you can save some time on traversing DOM
 *   $('#content').highlight(['lorem', 'ipsum']);
 *   $('#content').highlight('lorem ipsum');
 *
 *   // search only for entire word 'lorem'
 *   $('#content').highlight('lorem', { wordsOnly: true });
 *
 *   // don't ignore case during search of term 'lorem'
 *   $('#content').highlight('lorem', { caseSensitive: true });
 *
 *   // wrap every occurrance of term 'ipsum' in content
 *   // with <em class='important'>
 *   $('#content').highlight('ipsum', { element: 'em', className: 'important' });
 *
 *   // remove default highlight
 *   $('#content').unhighlight();
 *
 *   // remove custom highlight
 *   $('#content').unhighlight({ element: 'em', className: 'important' });
 *
 *
 * Copyright (c) 2009 Bartek Szopka
 *
 * Licensed under MIT license.
 *
 */

jQuery.extend({
    highlight: function (node, re, nodeName, className) {
        if (node.nodeType === 3) {
            var match = node.data.match(re);
            if (match) {
                var highlight = document.createElement(nodeName || 'span');
                highlight.className = className || 'highlight';
                var wordNode = node.splitText(match.index);
                wordNode.splitText(match[0].length);
                var wordClone = wordNode.cloneNode(true);
                highlight.appendChild(wordClone);
                wordNode.parentNode.replaceChild(highlight, wordNode);
                return 1; //skip added node in parent
            }
        } else if ((node.nodeType === 1 && node.childNodes) && // only element nodes that have children
                !/(script|style)/i.test(node.tagName) && // ignore script and style nodes
                !(node.tagName === nodeName.toUpperCase() && node.className === className)) { // skip if already highlighted
            for (var i = 0; i < node.childNodes.length; i++) {
                i += jQuery.highlight(node.childNodes[i], re, nodeName, className);
            }
        }
        return 0;
    }
});

jQuery.fn.unhighlight = function (options) {
    var settings = { className: 'highlight', element: 'span' };
    jQuery.extend(settings, options);

    return this.find(settings.element + "." + settings.className).each(function () {
        var parent = this.parentNode;
        parent.replaceChild(this.firstChild, this);
        parent.normalize();
    }).end();
};

jQuery.fn.highlight = function (words, options) {
    var settings = { className: 'highlight', element: 'span', caseSensitive: false, wordsOnly: false };
    jQuery.extend(settings, options);
    
    if (words.constructor === String) {
        words = [words];
    }
    words = jQuery.grep(words, function(word, i){
      return word != '';
    });
    words = jQuery.map(words, function(word, i) {
      return word.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
    });
    if (words.length == 0) { return this; };

    var flag = settings.caseSensitive ? "" : "i";
    var pattern = "(" + words.join("|") + ")";
    if (settings.wordsOnly) {
        pattern = "\\b" + pattern + "\\b";
    }
    var re = new RegExp(pattern, flag);
    
    return this.each(function () {
        jQuery.highlight(this, re, settings.element, settings.className);
    });
};

;
/* global console */
var o2 = o2 || {};

o2.Models = o2.Models || {};

o2.Models.Base = ( function( Backbone ) {
	return Backbone.Model.extend( {
		/*
		 * Custom sync backend to handle writes back to WP.
		 * Converts all writes to POST, and sends them to a single
		 * AJAX endpoint that handles things based on the 'method' param
		 */
		sync: function( method, model, options ) {
			// Set up defaults
			var params = {
				url:      o2.options.readURL,
				type:     'GET',
				dataType: 'json',
				data: {
					method:  method,
					nonce:   o2.options.nonce,
					scripts: o2.options.scripts,
					styles:  o2.options.styles
				}
			};
			var now = Math.round( +new Date() / 1000 );
			model.attributes.unixtimeModified = now; // don't trigger a 'change'

			// Record event
			var hook = method;
			if ( 'patch' === method && 'undefined' !== typeof options.attrs && 'undefined' !== typeof options.attrs.pluginData && 'undefined' !== typeof options.attrs.pluginData.callback ) {
				hook = options.attrs.pluginData.callback;
			}

			var priority = o2.Events.addEvent(
				hook,
				{
					method: method,
					model: model,
					options: options
				}
			);

			// Write requests go to a different URL, and use POST
			if ( 'read' !== method ) {
				params.type = 'POST';
				params.url  = o2.options.writeURL;
			}

			// This is the Message we're actually working with
			var attribs = _.clone( model.attributes );

			// Always send a current unixtimeModified
			attribs.unixtimeModified = now;

			switch ( method ) {
			case 'read':
				// Read from either Websockets or via Polling endpoint
				console.log( 'Not Implemented' );
				break;

			case 'create':
				// POST to AJAX and create a new post/comment
				params.data.message = JSON.stringify( attribs );
				if ( attribs.isFollowing ) {
					params.data.post_subscribe = 'post_subscribe';
				}
				if ( o2.options.followingBlog ) {
					params.data.subscribe_blog = 'subscribe';
				}
				break;

			case 'update':
				// POST back to AJAX endpoint to update post/comment
				params.data.message = JSON.stringify( attribs );
				break;

			case 'patch':
				// POST back to AJAX endpoint to patch post
				var patch = options.attrs;

				// Add essential model properties to passed attrs
				patch.postID = attribs.id;
				patch.type = attribs.type;
				patch.unixtimeModified = now;
				params.data.message = JSON.stringify( patch );

				break;

			case 'delete':
				// POST to AJAX and delete post/comment
				// @todo Test; not currently exposed via UI
				params.data.message = JSON.stringify( {
					type:   attribs.type,
					postID: attribs.postID
				} );

				// Delete these since they do not need to be in the delete request.
				delete params.data.scripts;
				delete params.data.styles;

				break;
			}

			// Copied from BB's core sync
			var success = options.success;
			options.success = function( data, textStatus, xhr ) {
				model.parse( data );
				if ( success ) {
					success( data, textStatus, xhr );
				}
			};

			var error = options.error;
			options.error = function( model, xhr, options ) {
				if ( error ) {
					error( model, xhr, options );
				}
			};

			// We go ahead and turn on withCredentials in case the ajax writeURL
			// is not the same protocol (e.g. https) as the page itself (http).
			// This can happen if force_ssl_admin is set to true but the page
			// was accessed using http.
			options.xhrFields = options.xhrFields || {};
			options.xhrFields.withCredentials = true;
			// Make the request, allowing the user to override any Ajax options.
			var xhr = options.xhr = Backbone.ajax( _.extend( params, options ) );

			// Wait for previous events to clear
			var elapsed = 0;
			var check = setInterval( function() {
				if ( o2.Events.hasPriorEvents( hook, priority ) && elapsed < 30 ) {
					elapsed = elapsed + 2;
				} else {
					clearInterval( check );
					o2.Events.removeEvent( hook, priority );
					model.trigger( 'request', model, xhr, options );
				}
			}, 2000 );
			return xhr;
		},

		/**
		 * Parse the response from WordPress, which uses the core format of
		 * success+data in an object.
		 */
		parse: function( resp ) {
			if ( 'object' === typeof resp && 'data' in resp ) {
				return resp.data;
			}
			return resp;
		}
	} );
} )( Backbone );
;
/*
 * Models.Comment is used to describe a Comment
 */

var o2 = o2 || {};

o2.Models = o2.Models || {};

o2.Models.Comment = ( function() {
	return o2.Models.Base.extend( {
		defaults: function() {
			return {
				'type': 'comment',
				'userLogin': '',
				'noprivUserName': '',
				'noprivUserHash': '',
				'noprivUserURL': '',
				'contentRaw': '',
				'contentFiltered': '',
				'mentionContext': '',
				'permalink': '',
				'unixtime': Math.round( +new Date() / 1000 ),
				'approved': true,
				'depth': 1 /* interestingly, WP uses a 1 based value for depth, not 0 based */
			};
		}
	} );
} )();
;
/*
 * jQuery Hotkeys Plugin
 * Copyright 2010, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 *
 * Based upon the plugin by Tzury Bar Yochay:
 * http://github.com/tzuryby/hotkeys
 *
 * Original idea by:
 * Binny V A, http://www.openjs.com/scripts/events/keyboard_shortcuts/
*/

/*
 * One small change is: now keys are passed by object { keys: '...' }
 * Might be useful, when you want to pass some other data to your handler
 */
( function( jQuery ) {

	jQuery.hotkeys = {
		version: "0.8",

		specialKeys: {
			8: "backspace", 9: "tab", 13: "return", 16: "shift", 17: "ctrl", 18: "alt", 19: "pause",
			20: "capslock", 27: "esc", 32: "space", 33: "pageup", 34: "pagedown", 35: "end", 36: "home",
			37: "left", 38: "up", 39: "right", 40: "down", 45: "insert", 46: "del",
			96: "0", 97: "1", 98: "2", 99: "3", 100: "4", 101: "5", 102: "6", 103: "7",
			104: "8", 105: "9", 106: "*", 107: "+", 109: "-", 110: ".", 111 : "/",
			112: "f1", 113: "f2", 114: "f3", 115: "f4", 116: "f5", 117: "f6", 118: "f7", 119: "f8",
			120: "f9", 121: "f10", 122: "f11", 123: "f12", 144: "numlock", 145: "scroll", 186: ";", 191: "/",
			220: "\\", 222: "'", 224: "meta"
		},

		shiftNums: {
			"`": "~", "1": "!", "2": "@", "3": "#", "4": "$", "5": "%", "6": "^", "7": "&",
			"8": "*", "9": "(", "0": ")", "-": "_", "=": "+", ";": ": ", "'": "\"", ",": "<",
			".": ">",  "/": "?",  "\\": "|"
		}
	};

	function keyHandler( handleObj ) {
		if ( typeof handleObj.data === "string" ) {
			handleObj.data = { keys: handleObj.data };
		}

		// Only care when a possible input has been specified
		if ( !handleObj.data || !handleObj.data.keys || typeof handleObj.data.keys !== "string" ) {
			return;
		}

		var origHandler = handleObj.handler,
			keys = handleObj.data.keys.toLowerCase().split( " " ),
			textAcceptingInputTypes = [ "text", "password", "number", "email", "url", "range", "date", "month", "week", "time", "datetime", "datetime-local", "search", "color" ];

		handleObj.handler = function( event ) {
			// Don't fire in text-accepting inputs that we didn't directly bind to
			if ( this !== event.target && (/textarea|select/i.test( event.target.nodeName ) ||
				jQuery.inArray( event.target.type, textAcceptingInputTypes ) > -1 ) ) {
				return;
			}

			// Keypress represents characters, not special keys
			var special = event.type !== "keypress" && jQuery.hotkeys.specialKeys[ event.which ],
				character = String.fromCharCode( event.which ).toLowerCase(),
				key, modif = "", possible = {};

			// check combinations (alt|ctrl|shift+anything)
			if ( event.altKey && special !== "alt" ) {
				modif += "alt+";
			}

			if ( event.ctrlKey && special !== "ctrl" ) {
				modif += "ctrl+";
			}

			// TODO: Need to make sure this works consistently across platforms
			if ( event.metaKey && !event.ctrlKey && special !== "meta" ) {
				modif += "meta+";
			}

			if ( event.shiftKey && special !== "shift" ) {
				modif += "shift+";
			}

			if ( special ) {
				possible[ modif + special ] = true;

			} else {
				possible[ modif + character ] = true;
				possible[ modif + jQuery.hotkeys.shiftNums[ character ] ] = true;

				// "$" can be triggered as "Shift+4" or "Shift+$" or just "$"
				if ( modif === "shift+" ) {
					possible[ jQuery.hotkeys.shiftNums[ character ] ] = true;
				}
			}

			for ( var i = 0, l = keys.length; i < l; i++ ) {
				if ( possible[ keys[i] ] ) {
					return origHandler.apply( this, arguments );
				}
			}
		};
	}

	jQuery.each( [ "keydown", "keyup", "keypress" ], function() {
		jQuery.event.special[ this ] = { add: keyHandler };
	} );

} )( jQuery );;
/*!
	AutoResize v1.18.4 - 2014-01-11
	Automatically adjust textarea height based on user input.
	(c) 2014 Jack Moore - http://www.jacklmoore.com/autosize
	Originally altered by mdawaffe.
	Current version altered by pento.
	license: http://www.opensource.org/licenses/mit-license.php
*/
(function ($) {
	var
	defaults = {
		className: 'autosizejs',
		append: '',
		callback: false,
		resizeDelay: 10,
		placeholder: true,
		animate: true,
		animateDuration: 150,
		animateCallback: function(){},
		extraSpace: 20
	},

	// border:0 is unnecessary, but avoids a bug in Firefox on OSX
	copy = '<textarea tabindex="-1" style="position:absolute; top:-999px; left:0; right:auto; bottom:auto; border:0; padding: 0; -moz-box-sizing:content-box; -webkit-box-sizing:content-box; box-sizing:content-box; word-wrap:break-word; height:0 !important; min-height:0 !important; overflow:hidden; transition:none; -webkit-transition:none; -moz-transition:none;"/>',

	// line-height is conditionally included because IE7/IE8/old Opera do not return the correct value.
	typographyStyles = [
		'fontFamily',
		'fontSize',
		'fontWeight',
		'fontStyle',
		'letterSpacing',
		'textTransform',
		'textDecoration',
		'wordSpacing',
		'textIndent'
	],

	// to keep track which textarea is being mirrored when adjust() is called.
	mirrored,

	// the mirror element, which is used to calculate what size the mirrored element should be.
	mirror = $(copy).data('autosize', true)[0];

	// test that line-height can be accurately copied.
	mirror.style.lineHeight = '99px';
	if ($(mirror).css('lineHeight') === '99px') {
		typographyStyles.push('lineHeight');
	}
	mirror.style.lineHeight = '';

	$.fn.autoResize = function (options) {
		if (!this.length) {
			return this;
		}

		options = $.extend({}, defaults, options || {});

		if (mirror.parentNode !== this.parentNode) {
			$(mirror).insertBefore(this);
		}

		return this.each(function () {
			var
			ta = this,
			$ta = $(ta),
			maxHeight,
			minHeight,
			boxOffset = 0,
			callback = $.isFunction(options.callback),
			originalStyles = {
				height: ta.style.height,
				overflow: ta.style.overflow,
				overflowY: ta.style.overflowY,
				wordWrap: ta.style.wordWrap,
				resize: ta.style.resize
			},
			timeout,
			width = $ta.width();

			if ($ta.data('autosize')) {
				// exit if autosize has already been applied, or if the textarea is the mirror element.
				return;
			}
			$ta.data('autosize', true);

			if ($ta.css('box-sizing') === 'border-box' || $ta.css('-moz-box-sizing') === 'border-box' || $ta.css('-webkit-box-sizing') === 'border-box'){
				boxOffset = $ta.outerHeight() - $ta.height();
			}

			// IE8 and lower return 'auto', which parses to NaN, if no min-height is set.
			minHeight = Math.max(parseInt($ta.css('minHeight'), 10) - boxOffset || 0, $ta.height());

			$ta.css({
				overflow: 'hidden',
				overflowY: 'hidden',
				wordWrap: 'break-word', // horizontal overflow is hidden, so break-word is necessary for handling words longer than the textarea width
				resize: ($ta.css('resize') === 'none' || $ta.css('resize') === 'vertical') ? 'none' : 'horizontal'
			});

			// The mirror width must exactly match the textarea width, so using getBoundingClientRect because it doesn't round the sub-pixel value.
			// window.getComputedStyle, getBoundingClientRect returning a width are unsupported, but also unneeded in IE8 and lower.
			function setWidth() {
				var width;
				var style = window.getComputedStyle ? window.getComputedStyle(ta, null) : false;
				
				if (style) {

					width = ta.getBoundingClientRect().width;

					if (width === 0) {
						width = parseInt(style.width,10);
					}

					$.each(['paddingLeft', 'paddingRight', 'borderLeftWidth', 'borderRightWidth'], function(i,val){
						width -= parseInt(style[val],10);
					});
				} else {
					width = Math.max($ta.width(), 0);
				}

				mirror.style.width = width + 'px';
			}

			function initMirror() {
				var styles = {};

				mirrored = ta;
				mirror.className = options.className + " " + ta.className;
				maxHeight = parseInt($ta.css('maxHeight'), 10);

				// mirror is a duplicate textarea located off-screen that
				// is automatically updated to contain the same text as the
				// original textarea.  mirror always has a height of 0.
				// This gives a cross-browser supported way getting the actual
				// height of the text, through the scrollTop property.
				$.each(typographyStyles, function(i,val){
					styles[val] = $ta.css(val);
				});
				$(mirror).css(styles);

				setWidth();

				// Chrome-specific fix:
				// When the textarea y-overflow is hidden, Chrome doesn't reflow the text to account for the space
				// made available by removing the scrollbar. This workaround triggers the reflow for Chrome.
				if (window.chrome) {
					var width = ta.style.width;
					ta.style.width = '0px';
					var ignore = ta.offsetWidth;
					ta.style.width = width;
				}
			}

			// Using mainly bare JS in this function because it is going
			// to fire very often while typing, and needs to very efficient.
			function adjust() {
				var height, original;

				if (mirrored !== ta) {
					initMirror();
				} else {
					setWidth();
				}

				if (!ta.value && options.placeholder) {
					// If the textarea is empty, copy the placeholder text into 
					// the mirror control and use that for sizing so that we 
					// don't end up with placeholder getting trimmed.
					mirror.value = ($ta.attr("placeholder") || '') + options.append;
				} else {
					mirror.value = ta.value + options.append;
				}

				mirror.style.overflowY = ta.style.overflowY;
				original = parseInt(ta.style.height,10);

				// Setting scrollTop to zero is needed in IE8 and lower for the next step to be accurately applied
				mirror.scrollTop = 0;

				mirror.scrollTop = 9e4;

				// Using scrollTop rather than scrollHeight because scrollHeight is non-standard and includes padding.
				height = mirror.scrollTop + options.extraSpace;

				if (maxHeight && height > maxHeight) {
					ta.style.overflowY = 'scroll';
					height = maxHeight;
				} else {
					ta.style.overflowY = 'hidden';
					if (height < minHeight) {
						height = minHeight;
					}
				}

				height += boxOffset;
				height = Math.floor( height );

				if (original !== height) {
					if ( options.animate && $ta.css( 'display' ) === 'block' ) {
						$ta.stop().animate( {height: height}, options.animateDuration, options.animateCallback );
					} else {
						ta.style.height = height + 'px';
						options.animateCallback.call( this );
					}
					if (callback) {
						options.callback.call(ta,ta);
					}
				}
			}

			function resize () {
				clearTimeout(timeout);
				timeout = setTimeout(function(){
					var newWidth = $ta.width();

					if (newWidth !== width) {
						width = newWidth;
						adjust();
					}
				}, parseInt(options.resizeDelay,10));
			}

			if ('onpropertychange' in ta) {
				if ('oninput' in ta) {
					// Detects IE9.  IE9 does not fire onpropertychange or oninput for deletions,
					// so binding to onkeyup to catch most of those occasions.  There is no way that I
					// know of to detect something like 'cut' in IE9.
					$ta.on('input.autosize keyup.autosize', adjust);
				} else {
					// IE7 / IE8
					$ta.on('propertychange.autosize', function(){
						if(event.propertyName === 'value'){
							adjust();
						}
					});
				}
			} else {
				// Modern Browsers
				$ta.on('input.autosize', adjust);
			}

			// Set options.resizeDelay to false if using fixed-width textarea elements.
			// Uses a timeout and width check to reduce the amount of times adjust needs to be called after window resize.

			if (options.resizeDelay !== false) {
				$(window).on('resize.autosize', resize);
			}

			// Event for manual triggering if needed.
			// Should only be needed when the value of the textarea is changed through JavaScript rather than user input.
			$ta.on('autosize.resize', adjust);

			// Event for manual triggering that also forces the styles to update as well.
			// Should only be needed if one of typography styles of the textarea change, and the textarea is already the target of the adjust method.
			$ta.on('autosize.resizeIncludeStyle', function() {
				mirrored = null;
				adjust();
			});

			$ta.on('autosize.destroy', function(){
				mirrored = null;
				clearTimeout(timeout);
				$(window).off('resize', resize);
				$ta
					.off('autosize')
					.off('.autosize')
					.css(originalStyles)
					.removeData('autosize');
			});

			// Call adjust in case the textarea already contains text.
			adjust();
		});
	};
}(window.jQuery || window.$)); // jQuery or jQuery-like library, such as Zepto
;
/**
 * caret.js -- A lightweight, cross-browser library for manipulating carets.
 *
 * Author: Daryl Koopersmith
 */

( function() {

	var Caret, rWordEnd = /\S+$/, rWordStart = /^\S+/;

	Caret = window.Caret = function( element ) {
		// Factory/Constructor
		if ( ! ( this instanceof Caret ) )
			return new Caret( element );

		this.element = element;
		this.refresh();
	};

	/**
	 * Many methods exist along these lines; the pitfalls surround IE.
	 * This method accounts for the following:
	 *     - IE sometimes counts an additional \r for each newline.
	 *       This can inflate the perceived caret position.
	 *     - Certain methods ignore whitespace immediately before the cursor.
	 *     - If the value is altered and the caret is at the end of the
	 *       textarea, it will deselect when retreived.
	 */
	Caret.prototype.refresh = function() {
		var range, bookmark, original, marker, parent, result, start, end,
			element = this.element;

		// Check if W3C properties exist.
		if ( ( 'undefined' !== typeof element ) && ( 'undefined' !== typeof element.selectionStart ) && ( 'undefined' !== typeof element.selectionEnd ) ) {
			return this._set( element.selectionStart, element.selectionEnd );
		}

		// If selection API doesn't exist either, bail.
		if ( ! document.selection ) {
			return this._set( 0 );
		}

		element.focus();
		range    = document.selection.createRange();
		bookmark = range.getBookmark();
		original = element.value;
		marker   = String.fromCharCode( 28 );
		parent   = range.parentElement();

		// Check if we're inside a textarea or text input.
		if ( ( null === parent ) || ! ( 'textarea' === parent.type || 'text' === parent.type ) ) {
			return this._set( 0 );
		}

		// Add markers for start and end positions.
		// Otherwise trailing whitespace will be stripped.
		range.text = marker + range.text + marker;

		// \r's are counted for each newline... remove them.
		contents = element.value.replace( /\r/g, '' );

		// Find the caret positions
		start = contents.indexOf( marker );
		// Remove the first marker. Otherwise the end index will be wrong.
		end = contents.replace( marker, '' ).indexOf( marker );
		this._set( start, end );

		// Restore the value and selection
		element.value = original;

		// In textareas, if the caret is the final character, the bookmark
		// will shift the selected element to the body.
		//
		// This is a more efficient version of:
		//   if ( document.selection.createRange().parentElement() != element )
		//
		if ( original.length == start && 'textarea' == parent.type ) {
			this.set( element, element.value.length );
		} else {
			range.moveToBookmark( bookmark );
			range.select();
		}
	};

	/**
	 * Internal.
	 *
	 * Sets this.start and this.end.
	 * Does nothing else!
	 *
	 * @param start The starting index.
	 * @param end   Optional. The ending index. Defaults to start.
	 */
	Caret.prototype._set = function( start, end ) {
		this.start = start;
		this.end = ( 'undefined' === typeof end ) ? start : end;
	};

	/**
	 * Sets the caret position.
	 *
	 * @param start The starting index.
	 * @param end   Optional. The ending index. Defaults to start.
	 */
	Caret.prototype.set = function( start, end ) {
		var range;
		end = ( 'undefined' === typeof end ) ? start : end;

		this._set( start, end );

		// W3C
		if ( this.element.setSelectionRange ) {
			this.element.setSelectionRange( start, end );

		// IE
		} else if ( this.element.createTextRange ) {
			range = this.element.createTextRange();

			if ( start === end )
				range.collapse( true );

			range.moveEnd( 'character', end );
			range.moveStart( 'character', start );
			range.select();
		}
	};

	Caret.prototype.before = function() {
		return this.element.value.substring( 0, this.start );
	};

	Caret.prototype.after = function() {
		return this.element.value.substring( this.end, this.element.value.length );
	};

	Caret.prototype.selected = function() {
		return this.element.value.substring( this.start, this.end );
	};

	/**
	 * Inserts a value at the cursor.
	 */
	Caret.prototype.insert = function( value ) {
		// W3C
		if ( 'undefined' !== typeof this.element.selectionStart ) {
			// Chrome/Safari/Firefox/Opera
			this.element.value = this.before() + value + this.after();
		} else if ( document.selection ) {
			// IE
			this.element.focus();
			document.selection.createRange().text = value;
		}
	};

	/**
	 * Replaces the current word before the cursor with a value.
	 *
	 * @param value     The value to insert.
	 * @param options   Optional.
	 *      before - Default true.
	 *          boolean - Whether to replace the word before the cursor.
	 *          RegExp  - The RegExp to use before the cursor.
	 *      after - Default false.
	 *          boolean - Whether to replace the word after the cursor.
	 *          RegExp  - The RegExp to use after the cursor.
	 */
	Caret.prototype.replace = function( value, options ) {
		var rbefore, rafter, before = this.before(), after = this.after();

		options = options || {};
		rbefore = options.before;
		rafter  = ( options.after === true ) ? rWordStart : options.after;

		if ( 'undefined' === typeof rbefore  || true === rbefore )
			rbefore = rWordEnd;

		if ( rbefore )
			before = before.replace( rbefore, '' );
		if ( rafter )
			after = after.replace( rafter, '' );

		this.element.value = before + value + after;
		this.set( before.length + value.length );
	};

} )();
;
/* global o2Config */
var o2 = o2 || {};

o2.Utilities = o2.Utilities || {};

o2.Utilities.rawToFiltered = function( raw, context ) {
	var filtered = stripUnsafeHTML( raw, context );

	filtered = '<p>' + filtered.replace( /\n\n/g, '</p><p>' ) + '</p>';
	filtered = filtered.replace( /\n/g, 'BRABCXYZ' );

	filtered = filtered.replace( /\[(?:source)code.*?\](.*?)\[\/(?:source)?code\]/gi, function( i, match ) {
		var s = '<pre class="brush:plain; notranslate">' + o2.Utilities.htmlSpecialChars( match ) + '</pre>';
		s = s
			.replace( /<pre class="brush:plain; notranslate">((BRABCXYZ)*)?/gi, '<pre class="brush:plain; notranslate">' )
			.replace( /((BRABCXYZ)*)?<\/pre>/gi, '</pre>' );
		return s;
	} );

	filtered = filtered.replace( /<blockquote>/g, '<blockquote><p>' );
	filtered = filtered.replace( /<\/blockquote>/g, '</p></blockquote>' );

	filtered = filtered.replace( /BRABCXYZ/g, '<br />' );

	return filtered;
};

o2.Utilities.htmlSpecialChars = function( str ) {
	return str
		.replace( /&/g, '&amp;' )
		.replace( /</g, '&lt;' )
		.replace( />/g, '&gt;' );
};

o2.Utilities.containsHTML = function( str ) {
	return str !== stripUnsafeHTML( str, 'stripall' );
};

function stripUnsafeHTML( html, context ) {
	var parsed = true;
	var doc;

	try {
		doc = ( new DOMParser() ).parseFromString( html, 'text/html' );
	} catch( e ) {
		// IE < 11 throws an error if the parser fails
		parsed = false;
	}

	if ( ! doc ) {
		parsed = false;
	}

	if ( parsed ) {
		// Check that there weren't any parse errors.
		if ( 'html' !== doc.documentElement.tagName.toLowerCase() ) {
			parsed = false;
		} else if ( doc.getElementsByTagName( 'parsererror' ).length > 0 ) {
			parsed = false;
		}
	}

	if ( ! parsed ) {
		// Something went horribly wrong. Strip everything that looks like a tag, let the server sort it out.
		return html.replace( /<.*?>/g, '' );
	}

	if ( 'stripall' === context ) {
		return doc.body.textContent;
	}

	return removeUnsafeNodes( doc.body, context ).innerHTML;
}

function removeUnsafeNodes( node, context ) {
	var newNode, childNode, ii, attr;
	var name = node.nodeName.toLowerCase();


	// Text nodes are always safe.
	if ( '#text' === name ) {
		return node;
	}

	// HTML comments are always safe.
	if ( '#comment' === name ) {
		return node;
	}

	if ( ! ( context in o2Config.allowedTags ) ) {
		context = 'comment';
	}

	// No need to check the body element, it will be ignored when we return.
	if ( 'body' === name ) {
			newNode = document.createElement( 'body' );
	} else {
		if ( ! ( name in o2Config.allowedTags[ context ] ) ) {
			// This tag is not allowed.
			return document.createTextNode( node.textContent );
		}

		// Create a fresh node
		newNode = document.createElement( name );

		// Copy the whitelisted attributes
		for ( ii = 0; ii < node.attributes.length; ii++ ) {
			attr = node.attributes.item( ii );
			if ( o2Config.allowedTags[ context ][ name ][ attr.name ] ) {
				newNode.setAttribute( attr.name, attr.value );
			}
		}
	}

	// Sanitise the child nodes
	while ( node.childNodes.length > 0 ) {
		childNode = node.removeChild( node.firstChild );
		newNode.appendChild( removeUnsafeNodes( childNode, context ) );
	}

	return newNode;
}

/* jshint ignore:start */
/*
 * DOMParser HTML extension
 * 2012-09-04
 *
 * By Eli Grey, http://eligrey.com
 * Public domain.
 * NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.
 */

/*! @source https://gist.github.com/1129031 */
/*global document, DOMParser*/

(function(DOMParser) {
	"use strict";

	var
	  proto = DOMParser.prototype
	, nativeParse = proto.parseFromString
	;

	// Firefox/Opera/IE throw errors on unsupported types
	try {
		// WebKit returns null on unsupported types
		if ((new DOMParser()).parseFromString("", "text/html")) {
			// text/html parsing is natively supported
			return;
		}
	} catch (ex) {}

	proto.parseFromString = function(markup, type) {
		if (/^\s*text\/html\s*(?:;|$)/i.test(type)) {
			var
			  doc = document.implementation.createHTMLDocument("")
			;
	      		if (markup.toLowerCase().indexOf('<!doctype') > -1) {
        			doc.documentElement.innerHTML = markup;
      			}
      			else {
        			doc.body.innerHTML = markup;
      			}
			return doc;
		} else {
			return nativeParse.apply(this, arguments);
		}
	};
}(DOMParser));
/* jshint ignore:end */
;
/* jshint multistr: true */
/* global enquire, Caret */
var o2Editor;

( function( $ ) {

var featureSticky = ( function() {
	var element = document.createElement( 'div' );
	var style = element.style;

	style.cssText = 'position:sticky;position:-webkit-sticky';

	return !! style.position;
} )();

o2Editor = {
	editors:   [],
	isFirefox: false,
	autocompleting: false,

	/*
	 * Called once, just sets everything up at the document level. Does *not* create any editor instances
	 */
	load: function() {
		// Firefox doesn't recognise ::first-line in textareas,
		// which makes auto-title kind of useless.
		// We should avoid using auto-title in Firefox.
		o2Editor.isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;

		var $doc = $( document );

		// dragover instead of dragenter because firefox fires dragleave upon hovering over child nodes
		$doc.on( 'dragover',  '.o2-editor-wrapper', this.onDragOver );
		$doc.on( 'dragleave', '.o2-editor-wrapper', this.onDragLeave );
		$doc.on( 'drop',      '.o2-editor-wrapper', this.onDrop );

		$doc.on( 'keydown', '.o2-editor-text', 'meta+shift+a', this.shortcutKey ); // Link, a la wp-admin
		$doc.on( 'keydown', '.o2-editor-text', 'ctrl+b',       this.shortcutKey ); // Bold (strong)
		$doc.on( 'keydown', '.o2-editor-text', 'meta+b',       this.shortcutKey ); // Bold (strong)
		$doc.on( 'keydown', '.o2-editor-text', 'ctrl+i',       this.shortcutKey ); // Italic (em)
		$doc.on( 'keydown', '.o2-editor-text', 'meta+i',       this.shortcutKey ); // Italic (em)
		$doc.on( 'keydown', '.o2-editor-text', 'ctrl+m',       this.shortcutKey ); // add media

		$doc.on( 'keydown', '.o2-editor-text', 'tab',         this.focusSaveButton );
		$doc.on( 'keydown', '.o2-save',        'shift+tab',   this.focusEditor );
		$doc.on( 'keydown', '.o2-comment-save','shift+tab',   this.focusEditor );

		$doc.on( 'keyup',   '.o2-editor-text',                this.autoTitle );

		$doc.on( 'keydown',                                   this.onKeyDown );

		// Caret handling -- mostly because of Webkit bug
		$doc.on( 'blur',      '.o2-editor-text',              this.rememberCaretPosition );
		$doc.on( 'keydown',   '.o2-editor-text',              this.rememberCaretPosition );
		$doc.on( 'mouseup',   '.o2-editor-text',              this.rememberCaretPosition );
		$doc.on( 'focus',     '.o2-editor-text',              this.repositionCaret );
		$doc.on( 'paste',     '.o2-editor-text',              this.forgetCaretPosition );

		$doc.on( 'click',   '.o2-editor-toolbar-button',      this.toolbarClick );

		$doc.on( 'click',   '.o2-editor-edit-button',         this.showEditor );
		$doc.on( 'click',   '.o2-editor-preview-button',      this.showPreview );

		$doc.on( 'paste',   '.o2-editor-text',                this.paste );

		$doc.on( 'change',  '.o2-image-file-input',           this.onImageFileInputChanged );

		if ( ! featureSticky ) {
			$doc.on( 'scroll', _.debounce( this.onDocumentScrollStopped, 250 ) );
		}

		$doc.on( 'scroll', _.debounce( this.toggleMobileEditorIconVisibility, 250 ) );

		// Atwho event handlers to prevent duplicate tab behavior
		$doc.on( 'shown.atwho', function() {
			o2Editor.autocompleting = true;
		});
		$doc.on( 'hidden.atwho', function() {
			setTimeout( function() {
				o2Editor.autocompleting = false;
			}, 50 ); // Need a delay to let the hiding actually happen
		});

		$doc.on( 'ready', function() {
			// Wire up the global editor opener
			$( '#o2-expand-editor' ).click( function( event ) {
				event.preventDefault();

				// Remove icon/button
				$( this ).hide();

				// Display the editor and focus on it
				$( '.o2-app-new-post' ).slideDown( 'fast', function() {
					$( '.o2-app-new-post .o2-editor-text' ).last().focus();
					$( 'html, body' ).animate( { // Scroll to new post
					scrollTop: $( '.o2-app-new-post' ).offset().top - 50
				}, 100 );
				} );
			} );

			if ( 'undefined' !== typeof enquire ) {
				// On small enough screens, remove the editor once publishing finishes
				enquire.register( 'screen and ( max-width : 640px )', {
					match: function() {
						$( o2.options.appContainer ).on( 'post-post-save.o2', o2Editor.hideEditor );
					},
					unmatch: function() {
						$( o2.options.appContainer ).off( 'post-post-save.o2', o2Editor.hideEditor );
					}
				} );
			}
		} );

		if ( o2Editor.hasLocalStorage() ) {
			setInterval( o2Editor.backup, 1000 );
		}
	},

	hideEditor: function() {
		if ( o2.App.pageMeta.get( 'isSingle' ) || o2.App.pageMeta.get( 'isPage' ) ) {
			return;
		}

		$( '#o2-expand-editor' ).fadeIn( 'fast' ); // Show button
		$( '.o2-app-new-post' ).hide(); // Hide editor
		$( 'html, body' ).animate( { // Scroll to new post
			scrollTop: $( o2.options.appContainer + ' .o2-posts' ).offset().top - 50
		}, 100 );
	},

	toggleMobileEditorIconVisibility: function() {
		var $editorIcon = $( '#o2-expand-editor' );

		if ( $editorIcon.css( 'display' ) === 'block' ) {
			$editorIcon.addClass( 'hidden' );
		}

		if ( 0 === $( document ).scrollTop() ) {
			$editorIcon.removeClass( 'hidden' );
		}

	},

	/**
	 * Locates textareas with .o2-editor as a class, and converts them to
	 * o2 editor instances. Use title="" to specify a title, and placeholder=""
	 * for a prompt
	 */
	detectAndRender: function( $dom ) {
		$dom.find( 'textarea.o2-editor' ).each( function() {
			$( this ).replaceWith( o2Editor.getEditor( this ) );
		} );
	},

	getEditor: function( elem ) {
		// Prime details from the <textarea> we're replacing
		var $holder = $( elem ),
				prompt  = $holder.attr( 'placeholder' ) || '',
				title   = $holder.attr( 'title' ), // Leave attribute off <textarea> completely to remove title controls
				content = $holder.val(),
				editor;

				if ( 'string' === typeof title ) {
					title = title.replace( /"/g, '&quot;' );
				}

		editor = '<div class="o2-editor-wrapper"> \
			<div class="o2-editor-toolbar-wrapper"> \
				<div class="o2-editor-toolbar"> \
					<button class="o2-editor-toolbar-button genericon genericon-bold" value="strong" title="' + o2.strings.bold + '"></button> \
					<button class="o2-editor-toolbar-button genericon genericon-italic" value="em" title="' + o2.strings.italics + '"></button> \
					<button class="o2-editor-toolbar-button genericon genericon-link" value="a" title="' + o2.strings.link + '"></button> \
					<button class="o2-editor-toolbar-button genericon genericon-picture" value="img" title="' + o2.strings.image + '"></button> \
					<button class="o2-editor-toolbar-button genericon genericon-quote" value="blockquote" title="' + o2.strings.blockquote + '"></button> \
					<button class="o2-editor-toolbar-button genericon genericon-code" value="code" title="' + o2.strings.code + '"></button>';
					if ( 'string' === typeof title ) {
						editor += '<div class="o2-editor-format dashicon" title="' + o2.strings.addPostTitle + '">&#61969;</div>';
					}
				editor += '<div class="o2-editor-upload"><div class="o2-editor-upload-progress"></div></div> \
				</div> \
				<div style="display:none;"> \
					<input class="o2-image-file-input" style="display:none" type="file" accept="image/*,video/*"> \
				</div> \
			</div> \
			<div class="o2-editor-content-wrapper">';
				if ( 'string' === typeof title ) {
					editor += '<div class="o2-editor-title-wrapper"> \
						<input type="text" class="o2-title o2-editor-title" value="' + title + '" placeholder="' + o2.strings.enterTitleHere + '" /> \
					</div>';
					}
				editor += '<textarea class="o2-editor-text" placeholder="' + prompt + '">' + content + '</textarea> \
				<div class="o2-editor-preview"></div> \
			</div> \
		</div>';

		return editor;
	},

	/*
	 * Create an editor instance, given a jQuery object (of a textarea) plus a postID/commentID.
	 * Edit/create a Post: postID (edit) | 'new', false
	 * Edit/create a Comment: postID, commentID (edit or reply) | 'new' (reply to post)
	 */
	create: function( $editor, postID, commentID ) {
		if ( 0 >= $editor.length ) {
			return;
		}

		if ( 'undefined' === typeof postID ) {
			return;
		}

		if ( 'undefined' === typeof commentID ) {
			commentID = 'new';
		}

		$editor.data( 'post_id', postID );
		$editor.data( 'comment_id', commentID );

		// If there's content in localStorage, then load it up and render it
		var cacheKey = o2Editor.getKey( $editor );
		var content = localStorage.getItem( cacheKey );
		if ( content && 0 === $editor.val().length ) {
			$editor.val( content );
		}

		if ( false === o2.currentUser.canPublishPosts ) {
			$editor.parent().find( 'button.insert-media' ).hide();
		}

		o2Editor.editors[ cacheKey ] = $editor;

		if ( 'function' === typeof $editor.autoResize ) {
			// make sure resize is set to none before the autoResize is applied
			// so that autoResize doesn't set the resize attribute to horizontal
			$editor.css( 'resize', 'none' );

			$editor.autoResize( { extraSpace: 100 } );
			setTimeout( function() {
				$editor.trigger( 'resize.autosize' );
			}, 10 );
		}
		o2.Events.doAction( 'post-editor-create.o2', $editor );
	},

	/*
	 * Cleanup an editor and its storage
	 */
	finished: function( postID, commentID, args ) {
		if ( 'undefined' === typeof( commentID ) || ! commentID ) {
			commentID = 0;
		}

		var cacheKey = o2.options.currentBlogId + '-' + o2Editor.getKeyFromIDs( postID, commentID );

		if ( 'undefined' === typeof args || 'undefined' === typeof args.keepCache || ! args.keepCache ) {
			localStorage.removeItem( cacheKey );
		}
		delete o2Editor.editors[ cacheKey ];
	},

	/*
	 * Handles a change object (Event), which will update the content of the editor
	 */
	change: function( e ) {
		var carrot  = Caret( e.target );
		var curr    = carrot.start;

		// Avoid repositioning the caret based on previous position
		o2Editor.forgetCaretPosition( e.target );

		switch ( e.type ) {
			case 'insert':
				carrot.insert( e.data.text );
				curr += e.data.text.length;
				break;

			default:
				return;
		}

		var newPos = curr;
		if ( e.data.offset && 0 !== e.data.offset ) {
			newPos += e.data.offset;
		}
		carrot.set( newPos );

		$( e.target ).change();
	},

	/*
	 * hasChanges will return true if ANY editor has any text, and we don't have localStorage
	 * Useful for beforeunload prompts
	 */
	hasChanges: function() {
		if ( o2Editor.hasLocalStorage() ) {
			return false;
		}

		var anyHasChanges = false;

		$( '.o2-editor' ).each( function() {
			var $editor = $( this ).find( '.o2-editor-text' ).last();
			if ( $editor.val().length > 0 ) {
				anyHasChanges = true;
			}
		} );

		return anyHasChanges;
	},

	hasLocalStorage: function() {
		try {
			if ( 'undefined' !== typeof( window.localStorage ) ) {
				return true;
			}
		}
		catch( e ) {
			return false;
		}

		return false;
	},

	/*
	 * Client-side auto-save using localStorage
	 */
	backup: function() {
		$( '.o2-editor' ).each( function() {
			var $editor   = $( this ).find( '.o2-editor-text' ).last();

			if ( ! $editor.hasClass( 'user-typed' ) ) {
				return;
			}

			var cacheKey = o2Editor.getKey( $editor.get( 0 ) );

			if ( 'undefined' === typeof( o2Editor.editors[ cacheKey ] ) ) {
				return;
			}

			localStorage.setItem( cacheKey, $editor.val() );
		} );
	},

	// All your paste are belong to us
	paste: function( e ) {
		if ( 'undefined' === typeof( e.originalEvent ) || 'undefined' === typeof( e.originalEvent.clipboardData ) ) {
			return;
		}

		var pasted = e.originalEvent.clipboardData.getData( 'text/plain' );
		if ( '' === pasted ) {
			return;
		}

		var editor = e.target,
				carrot = Caret( editor ),
				overwrittenLength = 0;

		// If we're pasting something that looks like a URL, and we have an active selection, and we're not inside an img or a, then wrap it in an a-href
		if ( pasted.match( /^https?:\/\//i ) && carrot.end > carrot.start ) {
			overwrittenLength = carrot.end - carrot.start;

			// Make sure we are not in a tag first
			var okToPasteAsTag = true;
			var leftString = editor.value.slice( 0, carrot.start ).toLowerCase();

			// If the current selection is also a URL, assume we want to replace it (not wrap it in an anchor)
			if ( editor.value.slice( carrot.start, carrot.end ).match( /^https?:\/\/[^\s]*$/i ) ) {
				okToPasteAsTag = false;
			}

			// If we are inside a (start) tag for any HTML element, its not ok to paste as a an a-href
			if ( ( -1 < leftString.lastIndexOf( '<' ) ) && ( leftString.lastIndexOf( '<' ) > leftString.lastIndexOf( '>' ) ) ) {
				okToPasteAsTag = false;
			}

			// If we are inside an anchor's content, its not ok to paste as a an a-href
			if ( ( -1 < leftString.lastIndexOf( '<a' ) ) && ( leftString.lastIndexOf( '<a' ) > leftString.lastIndexOf( '</a>' ) ) ) {
				okToPasteAsTag = false;
			}

			if ( okToPasteAsTag ) {
				e.preventDefault();
				o2Editor.insertTag( editor, 'a', pasted );
				return;
			}
		}

		// Manually trigger the resize script to make sure the box is the correct size
		$( e.target ).trigger( 'autosize.resize' );
	},

	/*
	 * Support for a few simple keyboard shortcuts to trigger the same things as the toolbar
	 */
	shortcutKey: function( e ) {
		var tag;

		if ( e.ctrlKey && 77 === e.which ) {
			e.preventDefault();
			$( e.target ).parent().find( '.insert-media' ).click(); // cheap and dirty, but the handle to media gallery isn't otherwise clean
			return;
		} else if ( e.metaKey && e.shiftKey && 65 === e.which ) {
			tag = 'a';
		} else if ( ( e.ctrlKey || e.metaKey ) && 66 === e.which ) {
			tag = 'strong';
		} else if ( ( e.ctrlKey || e.metaKey ) && 73 === e.which ) {
			tag = 'em';
		} else {
			return;
		}

		e.preventDefault();

		o2Editor.insertTag( e.target, tag );
	},

	onKeyDown: function( e ) {
		$( e.target ).addClass( 'user-typed' );
		return;
	},

	// When we blur focus from an editor, remember the caret position so that we can
	// fix a WebKit bug that forgets it and comes back to position 0.
	rememberCaretPosition: function( e ) {
		var caret = Caret( e.target );
		$( e.srcElement ).data( 'lastCaretPosition', caret.start );
	},

	// If we have a remembered caret position, use it to set the caret correctly when
	// focus comes back to this editor.
	repositionCaret: function() {
		if ( o2Editor.autocompleting ) {
			return;
		}

		var pos = $( this ).data( 'lastCaretPosition' );
		o2Editor.forgetCaretPosition( this );
		if ( undefined !== pos && pos > 0 ) {
			var that = this;

			// Need a tiny pause for the caret to get incorrectly positioned so we can fix it
			setTimeout( function() {
				var carrot = Caret( that );
				carrot.set( pos );
			}, 1 );
		}
	},

	// Remove reference to previous caret position when we click into a textarea, since we assume
	// we click to somewhere specific
	forgetCaretPosition: function( elem ) {
		$( elem ).removeData( 'lastCaretPosition' );
	},

	toolbarClick: function( e ) {
		var $this   = $( this );
		var tag     = $this.val();
		var $editor = $this.closest( '.o2-editor-wrapper' ).find( '.o2-editor-text' ).last();

		if ( 'blockquote' === tag && o2Editor.quoteSelection( $editor ) ) {
			return;
		}

		if ( 'img' === tag ) {
			// kick off prompt
			e.preventDefault();
			$this.closest( '.o2-editor-wrapper' ).find( '.o2-image-file-input' ).click();
			return;
		}

		o2Editor.insertTag( $editor, tag );
		e.preventDefault();
		$editor.focus();
	},

	onImageFileInputChanged: function( event ) {
		var currentTarget = $( event.currentTarget );
		if ( currentTarget.val().length ) {
			var uploadProgress = currentTarget.parents( '.o2-editor' ).find( '.o2-editor-upload-progress' );
			o2Editor.uploadFiles( event, event.currentTarget.files, uploadProgress );
		}
		currentTarget.val( '' );
	},

	showEditor: function( e ) {
		e.preventDefault();

		var $this          = $( this );
		var $editor        = $this.closest( '.o2-editor' ).find( '.o2-editor-text' ).last();
		var $preview       = $this.closest( '.o2-editor' ).find( '.o2-editor-preview' );
		var $previewButton = $this.closest( '.o2-editor' ).find( '.o2-editor-preview-button' );

		$previewButton.parent().removeClass( 'selected' );

		$preview.hide();
		$editor.show().focus();

		$this.parent().children().removeClass( 'selected' );
		$this.parent().addClass( 'selected' );

		$preview.empty();
	},

	showPreview: function( e ) {
		e.preventDefault();

		var $this    = $( this );
		var $editor  = $this.closest( '.o2-editor' ).find( '.o2-editor-text' ).last();
		var $preview = $this.closest( '.o2-editor' ).find( '.o2-editor-preview' );
		var $edit = $this.closest( '.o2-editor' ).find( '.o2-editor-edit-button' );

		var type = 'post';
		if ( $this.closest( '.o2-comment' ).length ) {
			type = 'comment';
		}

		var data = {
			data: $editor.val(),
			type: type
		};

		$.ajax( {
			url: o2.options.readURL + '&method=preview',
			type: 'POST',
			dataType: 'json',
			xhrFields: {
				withCredentials: true
			},
			data: data,
			success: function( response ) {
				$preview.html( response.data );
				$preview.css( 'height', 'auto' );
			}
		} );

		$preview.css( 'height', $editor.css( 'height' ) );
		$preview.html( '<p>' + o2.strings.previewPlaceholder + '</p>' );

		$editor.hide();
		$preview.show();
		$edit.parent().removeClass( 'selected' );

		$this.parent().addClass( 'selected' );
	},

	focusSaveButton: function( e ) {
		if ( !o2Editor.autocompleting ) {
			// Logged-in users tab to post
			if ( o2.currentUser.userLogin !== '' ) {
				e.preventDefault();
				$( this ).closest( '.o2-editor' ).find( '.o2-save, .o2-comment-save' ).first().focus();
			}
		}
	},

	focusEditor: function( e ) {
		e.preventDefault();
		$( this ).closest( '.o2-editor' ).find( '.o2-editor-text' ).last().focus();
	},

	/*
	 * If there is selected text within the page, copy it into the editor and wrap it in blockquote tags.
	 *
	 * @param $editor jQuery wrapped textarea node
	 */
	quoteSelection: function( $editor ) {
		var selection, text = '';

		if ( window.getSelection ) {
			selection = window.getSelection();
			text = selection.toString();
		} else if ( document.selection ) {
			selection = document.selection;
			text = selection.createRange().text;
		}

		// Clear the selection so we don't insert it again and again
		if ( selection.removeAllRanges ) {
			selection.removeAllRanges();
		} else if ( selection.empty ) {
			selection.empty();
		}

		if ( text.length ) {
			o2Editor.insertTag( $editor, 'blockquote', text );
			$editor.change().focus();
			return true;
		}

		return false;
	},

	insertTag: function( element, tag, extra ) {
		// 'element' can be a jQuery wrapped textarea node
		extra            = extra || '';
		var editor       = ( element instanceof jQuery ) ? element.get(0) : element;
		var caret        = Caret( editor );
		var selected     = caret.selected() || '';
		var selectedLen  = selected.length;
		var newEvent     = jQuery.Event( 'insert' );
		newEvent.target  = editor;

		switch ( tag ) {

			case 'media':
				return;

			case 'strong':
			case 'em':
			case 'blockquote':
				if ( extra.length > 0 ) {
					selected = extra;
					selectedLen = selected.length;
				}
				newEvent.data = {
					text:   '<' + tag + '>' + selected + '</' + tag + '>', // wrap selected text in tag
					offset: -3 - tag.length // put the caret inside the tags, after any internal text
				};
				// put the caret outside the tags (at the end)
				if ( selectedLen > 0 ) {
					newEvent.data.offset = 0;
				}
				break;

			case 'code':
				if ( 0 === caret.start || '\n' === editor.value.slice( caret.start - 1, caret.start ) ) {
					// Start of a line, so we probably want the [code] shortcodes
					newEvent.data = {
						text:   '[code]' + selected + '[/code]',
						offset: -7 // always put the caret back inside the tags
					};
				} else {
					// In the middle of a line, so we probably want the <code> tags
					newEvent.data = {
						text:   '<code>' + selected + '</code>',
						offset: -7 // always put the caret back inside the tags
					};
				}
				break;

			case 'a':
				if ( !extra.length ) {
					extra = window.prompt( 'Enter URL:', 'http://' );
					if ( null == extra ) {
						return;
					}
				}
				newEvent.data = {
					text:   '<a href="' + extra + '">' + selected + '</a>',
					offset: -4 // caret inside the closing 'a' tag
				};
				// have to go back further because the string length is added later
				if ( selectedLen > 0 ) {
					newEvent.data.offset = -6 - selectedLen;

					// if we filled the URL, then jump to the end
					if ( extra.length > 0 ) {
						newEvent.data.offset = 0;
					}
				}
				break;

			case 'img':
				newEvent.data = {
					text:   '<img src="' + selected + '"/>',
					offset: 0
				};
				if ( ! selected.length ) {
					newEvent.data.offset = -3;
				}
				break;

			default:
				return;
		}
		o2Editor.change( newEvent );
	},

	autoTitle: function( e ) {
		var $editor = $( e.target );
		if ( $editor.data( 'autoTitleDisabled' ) ) {
			$editor.removeClass( 'o2-editor-title-line' );
			return;
		}

		var holder = '';
		if ( o2Editor.firstLineIsProbablyATitle( $editor.val() ) ) {
			// Amazingly, having a placeholder attribute breaks our :first-line
			// auto-title JS, so we have to juggle it out to avoid that.
			holder = $editor.attr( 'placeholder' );
			if ( holder ) {
				$editor.data( 'placeholder', holder );
				$editor.removeAttr( 'placeholder' );
			}

			if ( ! $editor.hasClass( 'o2-editor-title-line' ) ) {
				$editor.addClass( 'o2-editor-title-line' );

				// When removing a ::first-line class, Chrome will only repaint the
				// first line when you change it, or at some random point in the future.
				// This hideous hack forces a document reflow, so should be used sparingly.
				$( '<style></style>' ).appendTo( $( document.body ) ).remove();
			}
		} else {
			holder = $editor.data( 'placeholder' );
			if ( holder ) {
				$editor.attr( 'placeholder', holder );
			}

			if ( $editor.hasClass( 'o2-editor-title-line' ) ) {
				$editor.removeClass( 'o2-editor-title-line' );

				// Ditto.
				$( '<style></style>' ).appendTo( $( document.body ) ).remove();
			}
		}
	},

	firstLineIsProbablyATitle: function( text ) {
		// Firefox isn't doesn't obey ::first-line in textareas,
		// so let's disable auto title.
		if ( o2Editor.isFirefox ) {
			return false;
		}

		var lines = text.split('\n');
		if ( ! lines || 1 === lines.length && '' === lines[0] ) {
			return false;
		}

		var firstLine = lines[0].match(/\S+/g);
		if ( ! firstLine ) {
			return false;
		}

		if ( firstLine.length > 8 ) {
			return false;
		}

		// Don't auto-title if it's part of a list
		if ( lines[0].match( /^([ox\-*]|1\.) / ) ) {
			return false;
		}

		// Special case: don't auto-title if it's part of a numbered list, but it might be a Markdown title
		if ( '# ' === lines[0].substr( 0, 2 ) && lines.length > 1 && '# ' === lines[1].substr( 0, 2 ) ) {
			return false;
		}

		// Don't auto-title if there's a mention/tag/xpost
		if ( lines[0].match( /(?:^|\s|\b|>|\()[@+#]([\w-\.]+)(?:$|\s|\b|<|\))/ ) ) {
			return false;
		}

		// Don't auto-title if there's a URL
		if ( lines[0].match( /(http(s)?|ftp):\/\// ) ) {
			return false;
		}

		// Don't auto-title if there's a shortcode
		if ( lines[0].match( /\[.+\]/ ) ) {
			return false;
		}

		// Don't auto-title if there's HTML
		if ( o2.Utilities.containsHTML( lines[0] ) ) {
			return false;
		}

		return true;
	},

	getKey: function( editor ) {
		var $editor   = $( editor );
		var postID    = $editor.data( 'post_id' );
		var commentID = $editor.data( 'comment_id' );

		return o2.options.currentBlogId + '-' + o2Editor.getKeyFromIDs( postID, commentID );
	},

	getKeyFromIDs: function( postID, commentID ) {
		if ( ! postID ) {
			postID = 'new';
		}

		if ( 'undefined' === typeof commentID || null === commentID ) {
			commentID = 0;
		}

		var key;
		if ( 'new' === postID ) {
			key = 'new';
		} else if ( 'new' !== commentID ) {
			key = postID + '-c'; // all replies to a thread share a bucket
		} else {
			key = postID;
		}

		return key;
	},

	/*
	 * When the scroll position of the document changes, keep visible editors' toolbars in the viewport
	 */
	onDocumentScrollStopped: function() {
		if ( ( 'undefined' !== typeof o2 ) && ( 'undefined' !== typeof o2.options ) && ( 'undefined' !== typeof o2.options.isMobileOrTablet ) && o2.options.isMobileOrTablet ) {
			// no scrolling toolbar on mobile or tablets please
			return;
		}

		var wpadminbar = $( '#wpadminbar' );
		$( '.o2-editor-wrapper:visible' ).each( function() {
			var $t            = $( this ),
					editorTopLeft = $t.offset(),
					editorHeight  = $t.height(),
					documentScrollTop = $( document ).scrollTop();

			if ( wpadminbar.length ) {
				documentScrollTop += wpadminbar.height() - 1;
			}

			var toolbarTop = 0;
			if ( documentScrollTop > editorTopLeft.top ) {
				if ( documentScrollTop < editorTopLeft.top + editorHeight ) {
					toolbarTop = parseInt( documentScrollTop - editorTopLeft.top, 10 ) - 1;
				}
			}

			var $toolbar = $t.find( '.o2-editor-toolbar' );
			// Only move the toolbar down until it would hit the bottom of the editor
			if ( documentScrollTop > editorTopLeft.top + editorHeight - $toolbar.height() ) {
				toolbarTop = 0;
			}
			$toolbar.animate( { top: toolbarTop }, 'fast' );
			if ( toolbarTop > 0 ) {
				$toolbar.addClass( 'floated' );
			} else {
				$toolbar.removeClass( 'floated' );
			}
		});
	},

	onDragOver: function( event ) {
		event.preventDefault();
		$( event.currentTarget ).addClass( 'dragging' );
	},

	onDragLeave: function( event ) {
		$( event.currentTarget ).removeClass( 'dragging' );
	},

	onDrop: function( event ) {
		// No files were dropped; was perhaps a text drag?
		if ( 0 === event.originalEvent.dataTransfer.files.length ) {
			$( event.currentTarget ).removeClass( 'dragging' );
			return;
		}

		// Remember caret so we can insert at the right place
		o2Editor.rememberCaretPosition( event );

		event.preventDefault();
		event.stopPropagation();

		// recent chrome bug requires this, see stackoverflow thread: http://bit.ly/13BU7b5
		event.originalEvent.stopPropagation();
		event.originalEvent.preventDefault();

		var files = event.originalEvent.dataTransfer.files; // jquery event doesn't have dataTransfer data, so need ['originalEvent']
		var uploadProgress = $( event.currentTarget ).find( '.o2-editor-upload-progress' );

		o2Editor.uploadFiles( event, files, uploadProgress );
	},

	isAllowedMimeType: function( mimeType ) {
		for ( var key in o2.options.mimeTypes ) {
			if ( o2.options.mimeTypes[ key ] === mimeType ) {
				return true;
			}
		}
		return false;
	},

	/*
	 * Dragging and dropping file(s) onto the editor drops us directly into this method
	 * On the other hand, clicking on the image button and then selecting one or more
	 * files causes a onImageFileInputChanged to happen that then sends us here
	 */
	uploadFiles: function( event, files, uploadProgress ) {
		var	formData = new FormData(),
			inProgress = true,
			timedProgress;

		// progress bar funciton
		timedProgress = function() {
			var progress = 0,

			runProgress = function() {
				if ( ! inProgress ) {
					return;
				}

				progress = progress + ( 90 - progress ) * 0.08; // approaches 90%, but never completes on its own
				uploadProgress.css( 'width', Math.floor( progress ) + '%' );

				setTimeout( runProgress, 200 ); // same interval as css transition for smooth progress
			};

			runProgress();
		};

		$( event.currentTarget ).removeClass( 'dragging' );

		// populate the formdata
		var appendCount = 0;
		for ( var i = 0, fl = files.length; i < fl; i++ ) {
			// Check that it is an allowed filetype
			var filetype = files[ i ].type;
			var filename = files[ i ].name;
			if ( this.isAllowedMimeType( filetype ) ) {
				formData.append( 'file_' + appendCount, files[ i ] ); // won't work as image[]
				appendCount++;
			} else {
				var errorMessage = '';
				// If this is the only file we're attempting to upload, send a shorter message
				if ( 1 === files.length ) {
					if ( 0 === filetype.length ) {
						errorMessage = o2.strings.unrecognizedFileType;
					} else {
						errorMessage = o2.strings.fileTypeNotSupported;
						errorMessage = errorMessage.replace( '%1$s', filetype );
					}
				} else { // include the filename in the error message since multiple files were selected
					if ( 0 === filetype.length ) {
						errorMessage = o2.strings.filenameNotUploadedNoType;
						errorMessage = errorMessage.replace( '%1$s', filename );
					} else {
						errorMessage = o2.strings.filenameNotUploadedWithType;
						errorMessage = errorMessage.replace( '%1$s', filename ).replace( '%2$s', filetype );
					}
				}
				o2.Notifications.add( {
					text: errorMessage,
					type: 'error',
					sticky: true
				} );
			}
		}
		// nothing to do?
		if ( 0 === appendCount ) {
			return;
		}

		formData.append( 'num_files', appendCount );

		timedProgress();

		// handle ajax post
		$.ajax( {
			url: o2.options.writeURL + '&nonce=' + o2.options.nonce + '&method=create&message=' + JSON.stringify( { type: 'upload' } ), // tucking this data here since the rest is for files
			data: formData,
			processData: false,
			contentType: false,
			type: 'POST',
			dataType: 'text',
			xhrFields: {
				withCredentials: true
			}
		} )
		.done( function( data ) {
			inProgress = false;
			uploadProgress.css( 'width', '100%' );

			// Splice the return data in at the last known caret position
			data = $.parseJSON( data ).data;
			var $editor = $( '.o2-editor-text' ).last(),
				caret = $editor.data( 'lastCaretPosition' ),
				val = $editor.val();
			if ( undefined === caret ) {
				caret = $editor.val().length; // no caret; append
			}
			if ( 0 === caret ) {
				val = data + val;
			} else {
				val = val.slice( 0, caret ) + data + val.slice( caret );
			}
			$editor.val( val ).change();

			// hide progress bar after it completes
			setTimeout( function() {
				uploadProgress.css( 'width', '0' );
			}, 200 );
		} )
		.fail( function( jqxhr ) {
			inProgress = false;

			// hide progress bar after it completes its transition
			setTimeout( function() {
				uploadProgress.css( 'width', '0' );
			}, 200 );

			// Notify the user with whatever message we got back from the server
			var response = $.parseJSON( jqxhr.responseText ),
				error    = '';
			if ( _.isArray( response.data.errorText ) ) {
				_.forEach( response.data.errorText, function( elem ) {
					error += '<li>' + elem[1] + ' (' + elem[0] + ')</li>';
				} );
				error = '<ul>' + error + '</ul>';
			} else {
				error = response.data.errorText;
			}
			o2.Notifications.add( {
				text: error,
				type: 'error',
				sticky: true
			} );
		} );
	} // end onDrop
};

} )( jQuery );

o2Editor.load();
;
/*
 * Views.Comment renders a Models.Comment
 */

/* global o2Editor, Gravatar */
var o2 = o2 || {};

o2.Views = o2.Views || {};

o2.Views.Comment = ( function( $ ) {
	return wp.Backbone.View.extend( {
		model: o2.Models.Fragment,

		defaults: function() {
			return {
				editingAllowed: false,
				userMustBeLoggedInToComment: true,
				requireUserNameAndEmailIfNotLoggedIn: false,
				loginRedirectCommentUrl: '',
				commentingAllowed: false,
				showTitle: true,
				isEditing: false,
				ignoreEdit: false,
				isSaving: false,
				isTrashedAction: false,
				avatarSize: 32,
				currentUser: {
					userLogin: '',
					canEditPosts: false,
					canEditOthersPosts: false,
					canPublishPosts: false
				}
			};
		},

		initialize: function( options ) {
			_.bindAll( this, 'onSaveSuccess', 'onSaveError' );

			this.parent = options.parent; // save a reference to the o2.Views.Post view we belong to
			this.options = this.defaults();
			this.options = _.extend( this.options, options );

			this.listenTo( this.model, 'change',  this.render );
			this.listenTo( this.model, 'destroy', this.remove );
			this.listenTo( this.model, 'remove',  this.remove );
			this.listenTo( this, 'ignoreEditAction', this.onIgnoreEditAction );

			// Update editingAllowed
			if ( this.options.currentUser.userLogin.length ) {
				if ( this.model.get( 'userLogin' ) === this.options.currentUser.userLogin ) {
					this.options.editingAllowed = this.options.currentUser.canEditPosts;
				} else {
					this.options.editingAllowed = this.options.currentUser.canEditOthersPosts;
				}
			} else {
				this.options.editingAllowed = false;
			}

			// Update commentingAllowed
			if ( this.options.commentingAllowed ) { /* set by Thread when view was created from post's commentsOpen */
				/* let's tighten a bit based on blog options and if the user is logged in */
				if ( ! this.options.userMustBeLoggedInToComment ) {
					this.options.commentingAllowed = true;
				} else if ( this.options.userMustBeLoggedInToComment && this.options.currentUser.userLogin.length ) {
					this.options.commentingAllowed = true;
				} else {
					this.options.commentingAllowed = false;
				}
			}

			// Automatically start in editing mode for new comments
			if ( this.model.isNew() ) {
				this.options.isEditing = true;
			}
		},

		events: {
			'click    .o2-comment-edit'    : 'onEdit',
			'touchend .o2-comment-edit'    : 'onEdit',
			'click    .o2-comment-trash'   : 'onTrash',
			'touchend .o2-comment-trash'   : 'onTrash',
			'click    .o2-comment-untrash' : 'onUntrash',
			'touchend .o2-comment-untrash' : 'onUntrash',
			'click    .o2-comment-cancel'  : 'onCancel',
			'click    .o2-comment-save'    : 'onSave',
			'keydown'                      : 'onKeyDown',
			'blur     .o2-comment-email'   : 'onBlurCommentorEmail'
		},

		onIgnoreEditAction: function( setting ) {
			this.options.ignoreEdit = setting;
		},

		onKeyDown: function( event ) {
			// @todo move this into the Follow extension
			// if shift+command+return is pressed, subscribe to replies and publish
			if ( event.shiftKey && event.metaKey && ! event.ctrlKey && ( 13 === event.keyCode ) ) {
				this.$( '#subscribe' ).prop( 'checked', true );
				this.onSave( event );
				return;
			}

			// if command+return were pressed, consume the event and save the form
			if ( event.metaKey && ! event.ctrlKey && ( 13 === event.keyCode ) ) {
				this.onSave( event );
				return;
			}
		},

		onEdit: function( event ) {
			event.preventDefault();
			if ( this.options.ignoreEdit ) {
				return;
			}
			o2.Events.dispatcher.trigger( 'cancel-edits.o2' ); // Ask the app to cancel other open edits
			this.options.isEditing = true;
			this.render();

			o2.Events.doAction( 'toggle-edit.o2', this.options.isEditing );
		},

		onTrash: function( event ) {
			event.preventDefault();
			event.stopImmediatePropagation();

			this.options.isSaving = true;
			this.options.isTrashedAction = true;

			o2.Events.dispatcher.trigger( 'notify-app.o2', { saveInProgress: true } );

			var updates = {
				isTrashed:      true,
				trashedSession: true
			};

			this.model.save( updates, { success: this.onSaveSuccess,error: this.onSaveError } );
		},

		onUntrash: function( event ) {
			event.preventDefault();
			event.stopImmediatePropagation();

			this.options.isSaving = true;
			this.options.isTrashedAction = true;

			o2.Events.dispatcher.trigger( 'notify-app.o2', { saveInProgress: true } );

			var updates = {
				isTrashed:      false,
				trashedSession: false,
				approved:       true
			};

			/*
			 * Attempt to untrash the comment. In the case that the comment was already deleted,
			 * remove the comment and show an error message to user.
			 */
			var commentView = this,
				postView = this.parent;

			this.model.save(
				updates,
				{
					success: this.onSaveSuccess,
					error: function( model, xhr ) {
						commentView.model.unset( 'trashedSession', { silent: true } );
						postView.model.comments.remove( model );
						postView.updateCommentVisibility();
						commentView.onSaveError( model, xhr );
					}
				}
			);
		},

		onCancel: function( event ) {
			event.preventDefault();
			if ( this.options.isEditing ) {
				this.finishEditor();
				this.options.isEditing = false;
				this.render();
			}

			o2.Events.doAction( 'toggle-edit.o2', this.options.isEditing );
		},

		finishEditor: function( args ) {
			o2Editor.finished( this.model.get( 'postID' ), this.model.get( 'parentID' ), args );
		},

		onSave: function( event ) {
			o2.Events.doAction( 'pre-comment-save.o2' );
			event.preventDefault();
			event.stopImmediatePropagation();
			var requiredInputMissing = false;

			// Clear any errors
			this.$el.find( '.o2-error' ).removeClass( 'o2-error' );

			// Assemble a new, temporary model from the form content
			// Grab the content from the actual textarea (the last one), not the autosize hidden one
			var modelToSave = {};
			modelToSave.author = {};
			modelToSave.contentRaw = this.$el.find( '.o2-editor-text' ).last().val();

			if ( this.$el.find( '#subscribe_blog' ).prop( 'checked' ) ) {
				o2.options.followingBlog = true;
			}

			if ( modelToSave.contentRaw.length < 1 ) {
				this.$el.find( '.o2-editor-text' ).addClass( 'o2-error' );
				requiredInputMissing  = true;
			}

			if ( ! this.options.currentUser.userLogin.length ) {
				var commentName = this.$el.find( '.o2-comment-name' ).val();
				var commentEmail = this.$el.find( '.o2-comment-email' ).val();
				var commentUrl = this.$el.find( '.o2-comment-url' ).val();

				if ( this.options.requireUserNameAndEmailIfNotLoggedIn ) {
					if ( commentName.length < 1 ) {
						this.$el.find( '.o2-comment-name' ).addClass( 'o2-error' );
						requiredInputMissing = true;
					}

					if ( ! o2.Utilities.isValidEmail( commentEmail ) ) {
						this.$el.find( '.o2-comment-email' ).addClass( 'o2-error' );
						requiredInputMissing = true;
					}
				}

				modelToSave.author = {
					name: commentName,
					email: commentEmail,
					url: commentUrl
				};
			} else {
				modelToSave.author = this.options.currentUser;
			}

			if ( ! requiredInputMissing ) {
				// @todo write a validate() method for Fragment model?
				// note:  we did the above to make it easier to highlight
				// bad fields in the view

				// Render a temporary filtered version of the content to display while
				// we are saving
				modelToSave.contentFiltered = o2.Utilities.rawToFiltered( modelToSave.contentRaw, 'comment' );

				this.options.isEditing = false;
				this.options.isSaving = true;
				o2.Events.dispatcher.trigger( 'notify-app.o2', { saveInProgress: true } );
				this.model.save( modelToSave, { success: this.onSaveSuccess, error: this.onSaveError } );
			}
		},

		onSaveSuccess: function( model ) {

			/*
			 * If the comment was deleted, let's find the comments collection this comment
			 * is a part of, and remove the comment model.
			 */

			if ( this.model.get( 'isDeleted' ) ) {
				this.parent.model.comments.remove( model );
				this.parent.updateCommentVisibility();
			}

			o2.Events.dispatcher.trigger( 'notify-app.o2', { saveInProgress: false } );
			o2Editor.finished( this.model.get( 'postID' ), this.model.get( 'parentID' ) );
			this.options.isEditing = false;
			this.options.isSaving = false;
			this.render();
			this.options.isTrashedAction = false;

			// Update saved model container
			var container = $( '#respond' );
			container.attr( 'id', 'comment-' + model.get( 'id' ) );
			container.removeClass().addClass( 'o2-comment ' + model.get( 'cssClasses' ) );

			o2.Events.doAction( 'post-comment-save.o2', model );
		},

		onSaveError: function( model, xhr ) {
			o2.Events.dispatcher.trigger( 'notify-app.o2', { saveInProgress: false } );

			var errorText = '';
			try {
				// See if the XHR responseText is actually a JSONified object
				var responseObject = $.parseJSON( xhr.responseText );
				if ( ( 'undefined' !== typeof responseObject.data.errorText ) ) {
					errorText = responseObject.data.errorText;
				}
			} catch ( e ) {
				// Not JSON - use the responseText directly
				// e.g. this occurs if you attempt to post the same comment twice - you get
				// a non JSON error back in the response
				errorText = xhr.responseText;
			}

			o2.Notifications.add( {
				model: model,
				type: 'error',
				text: errorText,
				sticky: true
			} );

			// Turn editing back on
			this.options.isSaving = false;
			this.options.isEditing = true;
			this.render();

			o2.Events.doAction( 'post-comment-save.o2' );
		},

		onBlurCommentorEmail: function( event ) {
			event.preventDefault();
			event.stopImmediatePropagation();

			if ( 'undefined' !== typeof Gravatar ) {
				var eventTarget = $( event.target );
				var emailAddress = $.trim( eventTarget.val().toLowerCase() );

				if ( 0 === emailAddress.length ) {
					emailAddress = 'unknown@gravatar.com';
				}

				// Fetch the gravatar
				var gravatarBase = ( 'https:' === location.protocol ? 'https://secure' : 'http://www' ) + '.gravatar.com/';
				var gravatarSrc = gravatarBase + 'avatar/' + Gravatar.md5( emailAddress ) + '?s=32&d=' + encodeURIComponent( o2.options.defaultAvatar );
				this.$el.find( 'img.avatar' ).attr( 'src', gravatarSrc );
			}
		},

		render: function() {
			var template;
			// unsaved models should not get a reply button, nor an edit button
			// until the save completes at the server and we get the "real" model back that way
			if ( this.options.currentUser.userLogin.length ) {
				template = this.options.isEditing ? o2.Utilities.Template( 'comment-edit' ) : o2.Utilities.Template( 'comment' );
			} else {
				template = this.options.isEditing ? o2.Utilities.Template( 'logged-out-create-comment' ) : o2.Utilities.Template( 'comment' );
			}

			var domID   = ( 'undefined' === typeof this.model.get( 'id' ) ) ? 'respond' : 'comment-' + this.model.get( 'id' );
			var created = ( 'undefined' === typeof this.model.get( 'commentCreated' ) ) ? ( $.now() / 1000 ) : this.model.get( 'commentCreated' );

			var cssClasses = this.model.get( 'cssClasses' );
			if ( ! _.isUndefined( cssClasses ) ) {
				this.$el.attr( 'class', cssClasses );
			}

			if ( this.options.isTrashedAction ) {
				var isTrashed = this.model.get( 'isTrashed' );
				if ( !_.isUndefined( isTrashed ) && isTrashed ) {
					this.$el.addClass( 'o2-trashed' );
				} else {
					this.$el.removeClass( 'o2-trashed' );
				}
			}

			this.$el.attr( 'id', domID );
			this.$el.data( 'created', created );
			this.$el.addClass( 'o2-comment' );

			var uniqueClass = ( 'undefined' === typeof this.model.get( 'id' ) ) ? 'comment-new' : 'comment-' + this.model.get( 'id' );
			this.$el.addClass( uniqueClass );

			var someoneElsesComment = false;
			if ( this.options.currentUser.userLogin.length && this.options.isEditing ) {
				someoneElsesComment = ( this.options.currentUser.userLogin !== this.model.get( 'userLogin' ) );
			}

			// JSONify the model, add view options, and selected attributes
			var jsonifiedModel = this.model.toJSON();
			$.extend( true, jsonifiedModel, this.options );

			jsonifiedModel.isNew = this.model.isNew();
			jsonifiedModel.isAnonymousAuthor = ( 0 === jsonifiedModel.userLogin.length ) && ( 0 === jsonifiedModel.noprivUserName.length );
			jsonifiedModel.strings = o2.strings;
			jsonifiedModel.commentFormBefore = o2.commentFormBefore;
			jsonifiedModel.commentFormExtras = o2.commentFormExtras;
			jsonifiedModel.someoneElsesComment = someoneElsesComment;

			// If this is a new (not persisted to the server) comment, use a temporary id of new
			// to avoid emitting "#comment-undefined" into the DOM as its id
			if ( 'undefined' === typeof jsonifiedModel.id ) {
				jsonifiedModel.id = 'new';
			}

			if ( 'post' === this.model.get( 'type' ) ) {
				jsonifiedModel.avatarSize = 48;
			}

			if ( this.model.get( 'is_xpost' ) ) {
				jsonifiedModel.avatarSize = 22;
			}

			// Grab the comment author info from the user cache and add it to the
			// jsonified model
			jsonifiedModel.author = o2.UserCache.getUserFor( this.model.attributes, this.options.avatarSize );

			// Remove every child that is not .o2-child-comments (leave the children alone!)
			this.$el.children().not( '.o2-child-comments' ).remove();
			// Prepend the templated model
			this.$el.prepend( template( jsonifiedModel ) );

			if ( this.options.isEditing ) {
				o2Editor.detectAndRender( this.$el );

				var editor = this.$el.find( '.o2-editor-text' );
				editor.data( 'autoTitleDisabled', true );

				o2Editor.create(
					editor,
					this.model.get( 'postID' ),
					this.model.get( 'parentID' )
				);
			}

			// Format unixtime dates to localized date and time
			this.$( '.o2-timestamp' ).each( function() {
				o2.Utilities.timestamp( $( this ) );
			} );

			// Mark this view so it (and its model) can be found later
			this.$el.data( 'cid', this.model.cid );

			this.model.trigger( 'o2-comment-rendered' );

			return this;
		},

		remove: function() {
			/*
			 * If comment is a reply box or is being reflowed due to
			 * a permanently deleted comment, then just remove without animation.
			 */
			var isReply  = ! this.model.has( 'id' );
			if ( isReply ) {
				this.$el.remove();
			} else {
				this.$el.slideUp( function(){
					$(this).remove();
				});
			}

			// Delete the subview reference in the post parent
			if ( ! isReply ) {
				delete this.parent.subviews[ this.model.cid ];
			}

			this.unbind();
		}
	} );
} )( jQuery );
;
/*
 * Models.Post is used to describe a Post
 * Note that we are reserving a reference to a collection of comments
 */

var o2 = o2 || {};

o2.Models = o2.Models || {};

o2.Models.Post = ( function() {
	return o2.Models.Base.extend( {
		defaults: function() {
			var now = Math.round( +new Date() / 1000 );
			return {
				'titleRaw': '',
				'titleFiltered': '',
				'titleWasGeneratedFromContent': false,
				'type': 'post',
				'comments': {},
				'userLogin': '',
				'contentRaw': '',
				'contentFiltered': '',
				'mentionContext': '',
				'permalink': '',
				'unixtime': now,
				'unixtimeModified': now,
				'postID': 0,
				'cssClasses': '',
				'hasPrevPost': false,
				'prevPostURL': '',
				'prevPostTitle': '',
				'hasNextPost': false,
				'nextPostURL': '',
				'nextPostTitle': '',
				'commentsOpen': false,
				'postActions': '',
				'entryHeaderMeta': '',
				'showTitle': false,
				'linkPages': '',
				'footerEntryMeta': '',
				'postFormat': 'aside',
				'postMeta': {},
				'postTerms': {},
				'pluginData': {},
				'isPage': false
			};
		},

		initialize: function( options ) {
			options = options || {};
			if ( 'undefined' !== typeof options.comments ) {
				this.comments = new o2.Collections.Comments( options.comments );
			} else {
				this.comments = new o2.Collections.Comments();
			}
		}
	} );
} )();
;
/* global o2Editor */
var o2 = o2 || {};

o2.Views = o2.Views || {};

o2.Views.FrontSidePost = ( function( $ ) {
	return wp.Backbone.View.extend( {
		model: o2.Models.Post,

		defaults: {
			postPrompt: '',
			avatarSize: 48,
			isEditing: true,
			isSaving: false,
			viewFormat: 'aside',
			currentUser: {
				userLogin: '',
				canEditPosts: false,
				canEditOthersPosts: false,
				canPublishPosts: false
			}
		},

		initialize: function( options ) {
			_.bindAll( this, 'onSaveSuccess', 'onSaveError' ); // to ensure we get the appropriate this in onSaveSuccess
			this.listenTo( this.model, 'change', this.render );
			this.options = _.extend( this.defaults, options );

			// Copy the model's postFormat into the viewFormat
			this.options.viewFormat = this.model.get( 'postFormat' );
		},

		tagName: function() {
			if ( 'undefined' !== typeof o2.options.threadContainer ) {
				return o2.options.threadContainer;
			}
			return 'article';
		},

		className: 'o2-app-new-post hentry',

		events: {
			'click .o2-save':          'onSave',
			'keydown':                 'onKeyDown',
			'click .o2-editor-format': 'onFormat'
		},

		onKeyDown: function( event ) {
			// if shift+command+return is pressed, subscribe to replies and publish
			if ( event.shiftKey && event.metaKey && ! event.ctrlKey && ( 13 === event.keyCode ) ) {
				this.$( '#post_subscribe' ).prop( 'checked', true );
				this.onSave( event );
				return;
			}

			// if command+return were pressed, consume the event and save the form
			if ( event.metaKey && ! event.ctrlKey && ( 13 === event.keyCode ) ) {
				this.onSave( event );
			}
		},

		activateEditor: function( ) {
			this.$el.find( '.o2-editor-toolbar' ).show();
			this.$el.find( '.o2-post-form-options' ).show();
		},

		onSave: function( event ) {
			o2.Events.doAction( 'pre-post-save.o2' );
			event.preventDefault();
			event.stopImmediatePropagation();

			// Grab the content from the actual textarea (the last one), not the autosize hidden one
			var contentRaw = this.$el.find( '.o2-editor-text' ).last().val();
			var titleRaw = this.$el.find( '.o2-title' ).val();

			var previewContentRaw = contentRaw;
			var title = '';

			// If no title has been set, see if one is going to be auto-generated
			if ( ! titleRaw && o2Editor.firstLineIsProbablyATitle( contentRaw ) ) {
				title = contentRaw.split( '\n' )[0];
				previewContentRaw = previewContentRaw.replace( title, '' ).trim();
			}

			var contentFiltered = o2.Utilities.rawToFiltered( previewContentRaw, 'post' );
			// If there is an auto-title, add it to the content
			if ( title ) {
				contentFiltered = '<h1><a href="#">' + title + '</a></h1>' + contentFiltered;
			}

			var isFollowing = $( '#post_subscribe' ).prop( 'checked' );

			// Clear the editor
			o2Editor.finished( 'new', 0 );

			this.options.isEditing = false;
			this.options.isSaving = true;
			o2.Events.dispatcher.trigger( 'notify-app.o2', { saveInProgress: true } );

			// Create a model for the new post, and immediately add to collection
			var clientModel = new o2.Models.Post( {
				userLogin: this.options.currentUser.userLogin,
				unixtime: Math.round( +new Date() / 1000 ),
				contentRaw: contentRaw,
				titleRaw: titleRaw,
				titleFiltered: titleRaw,
				contentFiltered: contentFiltered,
				isFollowing: isFollowing,
				disableAutoTitle: o2Editor.isFirefox, // Force auto-title off in Firefox
				postFormat: this.options.viewFormat // retrieve from the view
			} );
			o2.App.posts.add( clientModel ); // @todo we've made the view coupled to the app here - could we use an event?

			var data = {
				contentRaw: contentRaw,
				titleRaw: titleRaw,
				isFollowing: isFollowing
			};
			data = o2.Events.applyFilters( 'post-save-data.o2', data, this );
			clientModel.save( data, {
				success: this.onSaveSuccess,
				error: this.onSaveError
			} );

			// Scroll to the new post, which will be rendered immediately
			// Delay required to allow the editor to resize
			setTimeout( function() {
				$( 'html, body' ).animate( {
					scrollTop: $( '#post-new' ).offset().top - 50
				}, 1000 );
			}, 200 );

			// Reset things and get ready for another post
			this.options.isEditing = true;
			this.options.isSaving = false;
			this.model.trigger( 'change', this.model ); // kicks off a re-render
		},

		onSaveSuccess: function( model ) {
			o2.Events.dispatcher.trigger( 'notify-app.o2', { saveInProgress: false } );

			o2.$body.trigger( 'pd-script-load' ).trigger( 'post-load', { 'html' : '' } );
			o2.Events.doAction( 'post-post-save.o2', model );
		},

		onSaveError: function( model, xhr ) {
			o2.Events.dispatcher.trigger( 'notify-app.o2', { saveInProgress: false } );

			// Remove the temporarily-added version
			o2.App.posts.remove( o2.App.posts.first(), { silent: true } );
			$( '#post-new' ).remove();

			// Reset things ready to edit
			this.options.isEditing = true;
			this.model = model; // Re-render what we tried to save
			this.render();

			// Notify the user
			var responseText = '';
			var errorText = '';
			try {
				responseText = $.parseJSON( xhr.responseText );
				errorText = responseText.errorText;
			} catch ( e ) {
				// Not JSON - use the responseText directly
				errorText = xhr.responseText;
			}
			o2.Notifications.add( {
				type: 'error',
				text: errorText,
				sticky: true
			} );
		},

		onFormat: function( event ) {
			event.preventDefault();
			// get the current view format and switch to the opposite
			if ( 'standard' === this.options.viewFormat ) {
				this.options.viewFormat = 'aside';
			} else {
				this.options.viewFormat = 'standard';
			}
			this.updateFormattedControls();
		},

		updateFormattedControls: function() {
			var formatControl = this.$el.find( '.o2-editor-format' );
			var titleWrapper = this.$el.find( '.o2-editor-title-wrapper' );

			formatControl.removeClass( 'o2-editor-format-standard' ).removeClass( 'o2-editor-format-aside' ).removeClass( 'o2-editor-format-status' );

			var editor = this.$el.find( '.o2-editor-text' ).last();
			var text = editor.val();
			var title;

			if ( 'standard' === this.options.viewFormat ) {
				if ( o2Editor.firstLineIsProbablyATitle( text ) ) {
					title = text.split( '\n' )[0];
					this.$el.find( '.o2-editor-title' ).val( title );

					text = text.replace( title, '' ).trim();
					editor.val( text );
				} else {
					this.$el.find( '.o2-editor-title' ).val( '' );
				}
				editor.removeClass( 'o2-editor-title-line' );
				editor.data( 'autoTitleDisabled', true );

				formatControl.addClass( 'o2-editor-format-standard' );
				titleWrapper.slideDown( 'fast' );
			} else {
				editor.data( 'autoTitleDisabled', false );

				title = this.$el.find( '.o2-editor-title' ).val();
				if ( title ) {
					this.$el.find( '.o2-editor-title' ).val( ' ' );
					text = title + '\n\n' + text;
					editor.val( text );
				}
				if ( o2Editor.firstLineIsProbablyATitle( text ) ) {
					editor.addClass( 'o2-editor-title-line' );
				}

				formatControl.addClass( 'o2-editor-format-aside' );
				titleWrapper.slideUp( 'fast', function() {
					$( this ).hide();
				} );
			}
		},

		render: function() {
			var template = o2.Utilities.Template( this.options.template );
			var jsonifiedModel = this.model.toJSON();
			jsonifiedModel.userLogin = this.options.currentUser.userLogin;
			jsonifiedModel.author = o2.UserCache.getUserFor( this.model.attributes, this.options.avatarSize );
			if ( 'firstName' in jsonifiedModel.author && jsonifiedModel.author.firstName ) {
				jsonifiedModel.postPrompt = this.options.postPrompt.replace( '{name}', jsonifiedModel.author.firstName );
			} else if ( 'displayName' in jsonifiedModel.author && jsonifiedModel.author.displayName ) {
				jsonifiedModel.postPrompt = this.options.postPrompt.replace( '{name}', jsonifiedModel.author.displayName );
			} else {
				jsonifiedModel.postPrompt = this.options.postPrompt.replace( '{name}', jsonifiedModel.author.userLogin );
			}
			jsonifiedModel.avatarSize = this.options.avatarSize;
			jsonifiedModel.strings = o2.strings;
			jsonifiedModel.postFormBefore = o2.postFormBefore;
			jsonifiedModel.postFormExtras = o2.postFormExtras;

			// If we are on a tag archive page, add the tag automatically to an empty editor
			if ( ( 'archive' === o2.options.viewType ) && ( 'undefined' !== typeof o2.options.queryVars.tag ) ) {
				if ( 0 === jsonifiedModel.contentRaw.length ) {
					jsonifiedModel.contentRaw = '#' + o2.options.queryVars.tag;
				}
			}

			this.$el.html( template( jsonifiedModel ) );

			o2Editor.detectAndRender( this.$el );
			o2Editor.create( this.$el.find( '.o2-editor-text' ).last(), 'new', 0 );

			// Format unixtime dates to localized date and time
			this.$( '.o2-timestamp' ).each( function() {
				o2.Utilities.timestamp( $( this ) );
			} );

			this.updateFormattedControls();

			o2.Events.doAction( 'frontside-post-rendered.o2' );
			return this;
		}
	} );
} )( jQuery );
;
var o2 = o2 || {};

o2.Utilities = o2.Utilities || {};

o2.Utilities.compareTimes = function( t1, t2 ) {
	if ( t1 === t2 ) {
		return 0;
	}
	return t1 < t2 ? -1 : 1;
};
;
/*
 * Collections.Comments contains a single Post and all related Comments
 * from WP. The Collection is "flat", the Comments View handles threading things properly.
 */

var o2 = o2 || {};

o2.Collections = o2.Collections || {};

o2.Collections.Comments = ( function( $, Backbone ) {
	return Backbone.Collection.extend( {
		model: o2.Models.Comment,

		comparator: function( m1, m2 ) {
			var comment1Date = m1.get( 'commentCreated' );
			if ( 'undefined' === typeof comment1Date ) {
				return 1;
			}

			var comment2Date = m2.get( 'commentCreated' );
			if ( 'undefined' === typeof comment2Date ) {
				return -1;
			}

			var date1 = parseInt( comment1Date, 10 );
			var date2 = parseInt( comment2Date, 10 );
			return date1 < date2 ? -1 : 1;
		}
	} );
} )( jQuery, Backbone );
;
/* global o2Editor */
/*
 * A Post View is where we actually put the goodies on the page.
 * The Post View renders 1) the Post and 2) its Comments collection
 * If new items are added to the Comments collection, this
 * view gets them onto the screen in the right position
 * in the thread
 */

var o2 = o2 || {};

o2.Views = o2.Views || {};

o2.Views.Post = ( function( $ ) {
	return wp.Backbone.View.extend( {
		tagName: function() {
			if ( 'undefined' !== typeof( o2.options.threadContainer ) ) {
				return o2.options.threadContainer;
			}
			return 'article';
		},

		className: function() {
			return this.model.get( 'cssClasses' );
		},

		id: function() {
			return 'post-' + this.model.get( 'postID' );
		},

		model: o2.Models.Post,

		collection: o2.Collections.Comments,

		defaults: function() {
			return {
				showNavigation: false,
				highlightOnAdd: true, /* whether newly added fragments should be highlighted once inview */
				showComments: true,
				showTitle: true,
				userMustBeLoggedInToComment: true,
				requireUserNameAndEmailIfNotLoggedIn: false,
				threadCommentsDepth: 3,
				loginURL: '',
				isEditing: false,
				ignoreEdit: false,
				isSaving: false,
				viewFormat: 'aside',
				currentUser: {
					userLogin: '',
					canEditPosts: false,
					canEditOthersPosts: false,
					canPublishPosts: false
				},
				isDragging: false
			};
		},

		initialize: function( options ) {
			_.bindAll( this, 'onSaveSuccess', 'onSaveError' );

			// A place to keep a reference to each subview we create for this post
			this.subviews = {};

			// Events from the post model (e.g. changes to post content)
			this.listenTo( this.model,          'change',    this.renderPost );

			// Events from the comment collection
			this.listenTo( this.model.comments, 'add',       this.addOneComment );
			this.listenTo( this.model.comments, 'reset',     this.addAllCommentViews );
			this.listenTo( this.model.comments, 'change:id', this.renderCommentDisclosure );
			this.listenTo( this, 'ignoreEditAction', this.onIgnoreEditAction );

			this.options = this.defaults();
			this.options = _.extend( this.options, options );

			// Event handlers
			o2.Events.dispatcher.bind( 'open-reply.o2',               this.openReply,     this );
			o2.Events.dispatcher.bind( 'update-post-view-options.o2', this.updateOptions, this );
			o2.Events.dispatcher.bind( 'cancel-edits.o2',             this.onCancelEdits, this );

			// Copy the model's postFormat into the viewFormat
			this.options.viewFormat = this.model.get( 'postFormat' );
		},

		events: {
			'click .o2-edit':                    'onEdit',
			'click .o2-trash':                   'onTrash',
			'click .o2-cancel':                  'onCancel',
			'click .o2-save':                    'onSave',
			'click .o2-reply':                   'onReply',
			'click .o2-comment-reply':           'onReply',
			'click .o2-scroll-to-comments':      'onScrollToComments',
			'click .o2-display-comments-toggle': 'onToggleComments',
			'click .more-link':                  'onMore',
			'keydown':                           'onKeyDown',
			'click .o2-new-comment-cancel':      'onNewCommentCancel',
			'click .o2-editor-format':           'onFormat',

			'touchstart':                        'onTouchStart',
			'touchmove':                         'onTouchMove',

			'touchend .o2-edit':                 'onEdit',
			'touchend .o2-trash':                'onTrash',
			'touchend .o2-reply':                'onReply',
			'touchend .o2-comment-reply':        'onReply',
			'touchend .o2-scroll-to-comments':   'onScrollToComments',
			'touchend .o2-cancel':               'onCancel',
			'touchend .o2-save':                 'onSave',
			'touchend .o2-new-comment-cancel':   'onNewCommentCancel'
		},

		// keep track of whether a drag is in progress
		onTouchStart: function() {
			this.options.isDragging = false;
		},

		onTouchMove: function() {
			this.options.isDragging = true;
		},

		onIgnoreEditAction: function( setting ) {
			this.options.ignoreEdit = setting;
		},

		onKeyDown: function( event ) {
			// if command+return were pressed, consume the event and save the form
			if ( event.metaKey && ! event.ctrlKey && ( 13 === event.keyCode ) ) {
				this.onSave( event );
			}
		},

		onToggleComments: function( event ) {
			event.preventDefault();
			this.updateOptions( { showComments : ! this.options.showComments } );
		},

		onMore: function( event ) {
			event.preventDefault();

			var isVisible = this.$el.find( '.o2-extended-more' ).is( ':visible' );
			this.setExtendedTextVisibility( ! isVisible );
		},

		setExtendedTextVisibility: function( visible ) {
			if ( visible ) {
				this.$el.find( '.more-link' ).text( o2.options.hideExtended );
				this.$el.find( '.o2-extended-more' ).show();
			} else {
				this.$el.find( '.more-link' ).text( o2.options.showExtended );
				this.$el.find( '.o2-extended-more' ).hide();
			}
		},

		onEdit: function( event ) {
			event.preventDefault();
			event.stopPropagation();
			if ( this.options.ignoreEdit ) {
				return;
			}
			o2.Events.dispatcher.trigger( 'cancel-edits.o2' ); // Ask peer views to cancel other open edits
			// if in Gutenberg and home page, redirect to permalink in edit mode
			// temporary fix for issues with editing with multiple posts on page
			 if ( !! window.o2Config.gutenberg && document.body.classList.contains( 'home' )) {
			 	var postId = parseInt( this.options.model.attributes.id, 10 );
				window.location.href = '/wp-admin/post.php?post='+postId+'&action=edit';
			 } else {
				this.options.isEditing = true;
				this.renderPost();
				o2.Events.doAction( 'toggle-edit.o2', this.options.isEditing );
			 }
		},

		onTrash: function( event ) {
			event.preventDefault();
			event.stopPropagation();

			var postId = parseInt( o2.options.postId, 10 );

			if ( 0 === postId ) {

				// If currently on a list view, slide the post up then proceed with the destroy.
				this.$el.slideUp( this.destroyViewModel( this, postId ) );
			} else {

				// Check if there is a postTrashedFailed notification and remove if so
				o2.Notifications.notifications.findFirstAndDestroy( 'postTrashedFailed' );

				var trashString = ( 'page' === o2.options.viewType ) ? 'pageBeingTrashed' : 'postBeingTrashed';

				o2.Notifications.add( {
					text: o2.strings[ trashString ],
					url: false,
					type: 'postBeingTrashed',
					sticky: false,
					popup: false,
					dismissable: true
				} );

				this.destroyViewModel( this, postId );
			}
		},

		destroyViewModel: function( view, postId ) {

			view.model.destroy({
				wait: true,
				success: function() {

					// If on a single post/page view, then redirect to home.
					if ( 0 !== postId ) {

						// Check if there is a postBeingTrashed notification and remove if so
						o2.Notifications.notifications.findFirstAndDestroy( 'postBeingTrashed' );

						var redirectedHomeString = ( 'page' === o2.options.viewType ) ? 'redirectedHomePageTrashed' : 'redirectedHomePostTrashed';

						o2.Notifications.add( {
							text: o2.strings[ redirectedHomeString ],
							url: false,
							type: 'redirectedHome',
							sticky: false,
							popup: false,
							dismissable: true
						} );

						window.location.href = o2.options.searchURL;
					}
				},
				error: function() {

					// Remove any actions menus that are currently open.
					view.closeOpenDisclosures();

					// Check if there is a postBeingTrashed notification and remove if so
					o2.Notifications.notifications.findFirstAndDestroy( 'postBeingTrashed' );

					// If the destroy failed, show the post again.
					view.$el.slideDown();
					o2.Notifications.add( {
						text: o2.strings.trashFailedString,
						url: false,
						type: 'postTrashedFailed',
						sticky: false,
						popup: true,
						dismissable: true
					} );
				}
			});
		},

		onCancel: function( event ) {
			if ( this.options.isDragging ) {
				return false;
			}

			event.preventDefault();
			event.stopPropagation();

			if ( this.options.isEditing ) {
				o2Editor.finished( this.model.get( 'id' ), 0 );
				this.options.isEditing = false;
				this.options.viewFormat = this.model.get( 'postFormat' );
				this.renderPost();
				o2.$body.trigger( 'post-load', { 'html' : '' } ).trigger( 'pd-script-load' );
			}

			o2.Events.doAction( 'toggle-edit.o2', this.options.isEditing );
		},

		onSave: function( event ) {
			if ( this.options.isDragging ) {
				return false;
			}

			o2.Events.doAction( 'pre-post-save.o2' );
			event.preventDefault();
			event.stopImmediatePropagation();

			var requiredInputMissing = false;

			// Clear any errors
			this.$el.find( '.o2-error' ).removeClass( 'o2-error' );

			// Assemble a new, temporary model from the form content
			// Grab the content from the actual textarea (the last one), not the autosize hidden one
			var modelToSave = {};
			modelToSave.contentRaw = this.$el.find( '.o2-editor-text' ).last().val();

			modelToSave.contentFiltered = o2.Utilities.rawToFiltered( modelToSave.contentRaw, 'post' );
			modelToSave.titleRaw = this.$el.find( '.o2-title' ).val();
			modelToSave.titleFiltered = modelToSave.titleRaw;
			modelToSave.postFormat = this.options.viewFormat; // retrieve from the view

			if ( modelToSave.contentRaw.length < 1 ) {
				this.$el.find( '.o2-editor-text' ).addClass( 'o2-error' );
				requiredInputMissing  = true;
			}

			if ( ! requiredInputMissing ) {
				// @todo write a validate() method for Fragment model?
				// note:  we did the above to make it easier to highlight
				// bad fields in the view

				this.options.isEditing = false;
				this.options.isSaving = true;
				this.renderPost();
				o2.Events.dispatcher.trigger( 'notify-app.o2', { saveInProgress: true } );
				this.model.save( modelToSave, { success: this.onSaveSuccess, error: this.onSaveError } );
			}
		},

		onSaveSuccess: function( model ) {
			o2.Events.dispatcher.trigger( 'notify-app.o2', { saveInProgress: false } );
			this.options.isEditing = false;
			this.options.isSaving = false;
			o2Editor.finished( this.model.get( 'postID' ), 0 );
			this.renderPost();
			o2.Events.doAction( 'post-post-save.o2', model );
		},

		onSaveError: function( model, xhr ) {
			o2.Events.dispatcher.trigger( 'notify-app.o2', { saveInProgress: false } );
			var errorText = '';

			try {
				// See if the XHR responseText is actually a JSONified object
				var responseObject = $.parseJSON( xhr.responseText );
				if ( ( 'undefined' !== typeof responseObject.data.errorText ) ) {
					errorText = responseObject.data.errorText;
				}
			} catch ( e ) {
				// Not JSON - use the responseText directly
				errorText = xhr.responseText;
			}

			o2.Notifications.add( {
				type: 'error',
				text: errorText,
				sticky: true
			} );

			this.options.isEditing = true;
			this.options.isSaving = false;
			this.renderPost();
		},

		onFormat: function( event ) {
			event.preventDefault();

			// get the current view format and switch to the opposite
			if ( 'standard' === this.options.viewFormat ) {
				this.options.viewFormat = 'aside';
			} else {
				this.options.viewFormat = 'standard';
			}
			this.updateFormattedControls();
		},

		updateFormattedControls: function() {
			var formatControl = this.$el.find( '.o2-editor-format' );
			var titleEditWrapper = this.$el.find( '.o2-editor-title-wrapper' );
			var titleWrapper = this.$el.find( '.entry-title' );

			formatControl.removeClass( 'o2-editor-format-standard' ).removeClass( 'o2-editor-format-aside' ).removeClass( 'o2-editor-format-status' );

			if ( 'aside' === this.options.viewFormat ) {
				formatControl.addClass( 'o2-editor-format-aside' );
				titleEditWrapper.hide();
				titleWrapper.hide();
			} else {
				formatControl.addClass( 'o2-editor-format-standard' );
				titleEditWrapper.show();
				titleWrapper.show();
			}
		},

		openReply: function ( args ) {
			var newComment, editor;

			if ( ! this.model.get( 'commentsOpen' ) ) {
				return;
			}

			if ( this.options.userMustBeLoggedInToComment && ! this.options.currentUser.userLogin.length ) {
				return;
			}

			if ( this.model.get( 'id' ) === args.postID ) { // only if the message is for us
				// If we weren't showing comments on this post, force them open.
				if ( ! this.options.showComments ) {
					this.onToggleComments( jQuery.Event( 'click' ) );
				}

				// Ask peers to cancel other open edits
				o2.Events.dispatcher.trigger( 'cancel-edits.o2' );

				// Set a comment parent ID of 0 if none given in the args
				if ( 'undefined' === typeof args.parentCommentID ) {
					args.parentCommentID = 0;
				}

				// Set a parent comment depth of 0 if none given in the args
				if ( 'undefined' === typeof args.parentDepth ) {
					args.parentDepth = 0;
				}

				newComment = new o2.Models.Comment( {
					'parentID':   args.parentCommentID,
					'depth':      args.parentDepth + 1,
					'contentRaw': '',
					'postID':     this.model.get( 'id' ),
					'type':       'comment',
					'userLogin':  this.options.currentUser.userLogin
				} );

				// Add directly to the comments collection of our post
				this.model.comments.add( newComment );

				editor = this.$el.find( '.o2-editor-text' ).last();

				if ( ! o2Editor.quoteSelection( editor ) && args.focus ) {
					editor.focus();
				}

				if ( o2.options.followingBlog ) {
					$( '#respond .post-subscription-form' ).hide();
				}
			}
		},

		onReply: function( event ) {
			if ( this.options.isDragging ) {
				return false;
			}

			event.preventDefault();
			event.stopImmediatePropagation();

			// Comments directly on the post originate from .o2-post-reply targets
			// Comments on comments originate from .o2-comment-reply targets

			var parentCommentID = 0;
			var parentDepth = 0;
			var $target = $( event.target );
			if ( $target.hasClass( 'o2-comment-reply' ) ) {
				parentCommentID = $target.closest( '.o2-comment' ).find( '.o2-comment-metadata' ).first().data( 'o2-comment-id' );
				if ( 0 < parentCommentID ) {
					var parentModel = this.model.comments.get( parentCommentID );
					parentDepth = parentModel.get( 'depth' );
				}
			}

			this.openReply( { postID : this.model.get( 'id' ), parentCommentID: parentCommentID, parentDepth: parentDepth, focus: true } );
		},

		onScrollToComments: function( event ) {
			event.preventDefault();
			event.stopImmediatePropagation();

			var $target = $( event.currentTarget ).closest( 'article' ).find( '.o2-post-comments' );
			$( 'html, body' ).animate( {
				scrollTop: $target.offset().top - 50
			}, 2000 );
		},

		updateOptions: function( options ) {
			// If a postID is specifed in the options, make sure it is ours before we
			// act on the options update
			if ( 'undefined' !== typeof( options.postID ) ) {
				if ( options.postID !== this.model.get( 'id' ) ) {
					return;
				}
			}

			this.options = _.extend( this.options, options );

			// Update visibility if showComments was included
			if ( 'undefined' !== typeof( options.showComments ) ) {
				this.updateCommentVisibility();
			}
		},

		/*
		 * This method renders the entire thread, and so should be used sparingly.
		 * Only specific model changes or option changes should trigger this method.
		 * It is usually more appropriate to have a model changes trigger renderPost,
		 * or collection model changes to trigger a specific Comment View's render
		 */
		render: function() {
			// First, render the overall thread template
			var template = o2.Utilities.Template( this.options.template );

			// JSONify the model and add selected view attributes to it
			var jsonifiedModel = this.model.toJSON();
			jsonifiedModel.showNavigation = this.options.showNavigation;
			jsonifiedModel.strings = o2.strings;

			// Run the template
			this.$el.html( template( jsonifiedModel ) );

			// Render the post into its placeholder
			this.renderPost();
			this.renderCommentDisclosure();
			this.renderComments();

			return this;
		},

		renderComments: function() {
			this.$el.find( '.o2-post-comments' ).html( '' );

			// Show/hide the comments and discussion divs
			this.updateCommentVisibility();

			// Render the comment collection into placeholder elements
			// Suspend highlighting during this loop
			// (Only want it to happen when addOne is triggered by the collection event)
			var cached_highlight = this.options.highlightOnAdd;
			this.options.highlightOnAdd = false;
			this.model.comments.forEach( this.addOneCommentView, this );
			// Put the setting back
			this.options.highlightOnAdd = cached_highlight;

			return this;
		},

		updateCommentVisibility: function() {
			this.renderCommentDisclosure();

			if ( this.options.showComments ) {
				this.$el.find( '.o2-post-comments' ).show();
			} else {
				this.$el.find( '.o2-post-comments' ).hide();
			}
		},

		/*
		 * We break out renderPost separately so we can re-render just the
		 * post without disturbing / re-rendering the comments (i.e. someone
		 * might be editing when the post gets edited by someone else)
		 */
		renderPost: function() {
			var template;
			if ( this.model.get( 'is_xpost' ) ) {
				template = o2.Utilities.Template( 'xpost' );
			} else {
				template = this.options.isEditing ? o2.Utilities.Template( 'post-edit' ) : o2.Utilities.Template( 'post' );
			}

			this.options.viewFormat = this.model.get( 'postFormat' );

			// When re-rendering, make a note if extended text has already been toggled visible so we can make sure it
			// is still in that same state when we're done rendering
			var extendedIsVisible = this.$el.find( '.o2-extended-more' ).is( ':visible' );

			// JSONify the model, add view options, and selected attributes
			var jsonifiedModel = this.model.toJSON();
			$.extend( true, jsonifiedModel, this.options );

			jsonifiedModel.strings = o2.strings;

			// Grab the post author info from the user cache and add it to the jsonified model
			jsonifiedModel.author = o2.UserCache.getUserFor( this.model.attributes, 48 );

			// Some useful meta data
			jsonifiedModel.commentCount = this.model.comments.length;

			// We only sometimes want the title to be linked
			jsonifiedModel.linkTitle = ! jsonifiedModel.isPage || 'search' === o2.options.viewType;

			var postID = this.model.get( 'id' );
			if ( _.isUndefined( postID ) ) {
				postID = 'new';
			}

			// Run the template
			var post = this.$el.find( '.o2-post' );
			post.html( template( jsonifiedModel ) );
			post.parent().attr( 'id', 'post-' + postID );
			post.parent().attr( 'class', jsonifiedModel.cssClasses );
			post.parent().data( 'post-id', postID );

			// Restore the extended visibility as needed
			if ( extendedIsVisible ) {
				this.setExtendedTextVisibility( true );
			}

			this.renderCommentDisclosure();

			if ( 'page' === o2.options.viewType ) {
				$( '.o2-app-page-title' ).html( jsonifiedModel.titleFiltered );
			}

			if ( this.options.isEditing ) {
				// If the post is now being edited, fire up the editor and point it at the post
				if ( !! window.o2Config.gutenberg ) {
					var postArg = Object.assign( {}, jsonifiedModel, {
						id: postID,
						title: {
							raw: jsonifiedModel.titleRaw,
							rendered: jsonifiedModel.titleFiltered
						},
						// Backbone post models are always of type 'post', even when viewing
						// a page, which makes Gutenberg detect the wrong type, and use the
						// wrong API, so this sets the correct type based on the viewType.
						type: 'page' === o2Config.options.viewType ? 'page' : jsonifiedModel.type,
						content: {
							raw: jsonifiedModel.contentRaw
						}
					} );
					wp.p2editor.createP2EditorInstance( 'gutenberg-' + postID, postArg, {} )
				} else {
 	 	 	 		o2Editor.detectAndRender( this.$el );
					o2Editor.create( this.$el.find( '.o2-editor-text' ), postID, 0 );
				}
			}

			// Format unixtime dates to localized date and time
			this.$( '.o2-timestamp' ).each( function() {
				o2.Utilities.timestamp( $( this ) );
			} );

			this.updateFormattedControls();

			// Events
			this.model.trigger( 'o2-post-rendered' );
			o2.$body.trigger( 'pd-script-load' );
		},

		addOneComment: function( comment ) {
			var commentUserLogin = comment.get( 'userLogin' );
			var commentNoprivUserName = comment.get( 'noprivUserName' );

			if ( this.options.currentUser.userLogin !== commentUserLogin ) {
				var commentUserModel = o2.UserCache.getUserFor( comment.attributes, 32 );

				var text = '';
				if ( comment.get( 'mentionContext' ) ) {
					text = o2.strings.newMentionBy.replace( '%1$s', commentUserModel.displayName ).replace( '%2$s', comment.get( 'mentionContext' ) );
				} else if ( 0 !== commentUserModel.displayName.length ) {
					text = o2.strings.newCommentBy.replace( '%s', commentUserModel.displayName );
				} else if ( 0 !== commentUserLogin.length ) {
					text = o2.strings.newCommentBy.replace( '%s', commentUserLogin );
				} else if ( 0 !== commentNoprivUserName.length ) {
					text = o2.strings.newCommentBy.replace( '%s', commentNoprivUserName );
				} else {
					text = o2.strings.newAnonymousComment;
				}

				o2.Notifications.add( {
					source: this,
					text: text,
					textClass: commentUserModel.modelClass,
					unixtime: comment.get( 'unixtime' ),
					url: '#comment-' + comment.get( 'id' ),
					postID: comment.get( 'postID' ),
					iconUrl: commentUserModel.avatar,
					iconSize: commentUserModel.avatarSize,
					iconClass: commentUserModel.modelClass
				} );
			}

			this.addOneCommentView( comment );
		},

		/*
		 * addOne adds one comment from the comments collection to the appropriate
		 * part of this Thread View
		 */
		addOneCommentView: function( comment ) {
			var commentingAllowed = this.model.get( 'commentsOpen' ); /* initial view state is based on the post commentsOpen flag itself */
			if ( commentingAllowed ) {
				var depth = comment.get( 'depth' );
				if ( depth >= this.options.threadCommentsDepth ) {
					commentingAllowed = false;
				}
			}

			var commentView = new o2.Views.Comment( {
				model: comment,
				parent: this,
				showTitle: this.options.showTitle,
				commentingAllowed: commentingAllowed,
				currentUser: this.options.currentUser,
				userMustBeLoggedInToComment: this.options.userMustBeLoggedInToComment,
				requireUserNameAndEmailIfNotLoggedIn: this.options.requireUserNameAndEmailIfNotLoggedIn
			} );

			// Save a reference to the comment view so we can remove it properly later
			this.subviews[ commentView.model.cid ] = commentView;

			///	With the new scheme, the comment view should be added directly to .o2-post-comments
			///	which is defined in tpl/post-view.php

			// Set its id for finding later
			var commentID = comment.get( 'id' );
			if ( 'undefined' === typeof( commentID ) || ! commentID ) {
				commentID = 'new';
			}

			var parentCommentID      = comment.get( 'parentID' ),
				indexOf              = this.model.comments.indexOf( comment ),
				containerToAddTo     = this.$el.find( '.o2-post-comments' ),
				insertCommentCreated = comment.get( 'commentCreated' );

			if ( 0 < parentCommentID ) {
				//find the tag with id 'comment-xxx' where xxx is the parent comment's ID
				var parentCommentContainer = containerToAddTo.find( '#comment-' + parentCommentID );

				// see if it already has an __immediate__ child div of .o2-child-comments and if not, then create it
				// set the containerToAddTo to the __immediate__ child div of  .2-child-comments
				containerToAddTo = parentCommentContainer.children( '.o2-child-comments' );
				if ( ! containerToAddTo.length ) {
					parentCommentContainer.append( '<div class="o2-child-comments"></div>' );
					containerToAddTo = parentCommentContainer.children( '.o2-child-comments' );
				}
			}

			/*
			 * Now that we know which container to add the comment view to,
			 * we need to place the comment in the correct position within that container.
			 *
			 * If comment has index of 0, just prepend.
			 *
			 * If comment is 'new', then it is a comment we have just added, so append
			 * to end of the container.
			 *
			 * Else, the comment's correct position is determined iterating through
			 * children of container to find correct position using comment created date.
			 *
			 */
			if ( 0 === indexOf ) {
				containerToAddTo.prepend( commentView.render().el );
			} else if ( 'new' === commentID ) {
				containerToAddTo.append( commentView.render().el );
			} else {
				var containerChildren = containerToAddTo.children( '.o2-comment' ),
					beforeView        = false,
					afterView         = false;

				if ( 0 === containerChildren.length ) {
					containerToAddTo.append( commentView.render().el );
				} else {

					containerChildren.each( function(){
						var childCreated = $( this ).data( 'created' );

						if ( childCreated < insertCommentCreated ) {
							beforeView = $( this );
						} else if ( childCreated >= insertCommentCreated ) {
							afterView = $( this );
						}
					});

					if ( false !== beforeView ) {
						beforeView.after( commentView.render().el );
					} else if ( false !== afterView ) {
						afterView.before( commentView.render().el );
					}
				}
			}

			// Only highlight if the comment added has an ID
			// and comment is not being reflowed after another comment has been deleted.
			if ( ! comment.isNew() ) {
				if ( ! comment.has( 'reflow' ) && ! comment.get( 'prevDeleted' ) ) {
					if ( this.options.highlightOnAdd ) {
						commentView.$el.one( 'inview', o2.Utilities.HighlightOnInview );
					}
				}
			}

			this.renderCommentDisclosure(); // update the post discussion disclosure control

			// If there's a comment form open on this thread, then shift it to the bottom of the stack
			var replyBox = containerToAddTo.children( '.comment-new' );
			if ( replyBox.length ) {
				containerToAddTo.append( replyBox.detach() );
			}

			// Bind jquery placeholder for older, less capable browsers (e.g. IE9)
			// for nopriv commenting fields
			this.$el.find( '.o2-comment-name' ).placeholder();
			this.$el.find( '.o2-comment-email' ).placeholder();
			this.$el.find( '.o2-comment-url' ).placeholder();
		},

		addAllCommentViews: function() {
			this.model.comments.forEach( this.addOneCommentView, this );
		},

		renderCommentDisclosure: function() {
			var disclosure = this.$el.find( '.o2-display-comments-toggle' );

			// If there are no comments, or it's an xpost, then hide and bail
			if ( ! this.model.comments.length || this.model.get( 'is_xpost' ) ) {
				disclosure.hide();
				return;
			} else {
				var disclosureText = disclosure.find( '.disclosure-text' ),
					disclosureIcon = disclosure.find( '.genericon' );

				if ( this.options.showComments ) {
					disclosureText.html( o2.strings.hideComments );
					disclosureIcon.removeClass( 'genericon-expand' );
					disclosureIcon.addClass( 'genericon-collapse' );
				} else {
					disclosureText.html( o2.strings.showComments );
					disclosureIcon.removeClass( 'genericon-collapse' );
					disclosureIcon.addClass( 'genericon-expand' );
				}

				disclosure.show();
			}
		},

		onCancelEdits: function( ) {
			// cancel edits in progress on any views we are responsible for
			this.$el.find( '.o2-cancel' ).trigger( 'click' );
			this.$el.find( '.o2-new-comment-cancel' ).trigger( 'click' );
			this.$el.find( '.o2-comment-cancel' ).trigger( 'click' );
		},

		/*
		 * If a NEW comment is being cancelled, we need to kick off a destroy of the model here
		 * and not in the comment view itself, to avoid a reference that would result in a detached dom node (memory leak)
		 */
		onNewCommentCancel: function( event ) {
			if ( this.options.isDragging ) {
				return false;
			}

			event.preventDefault();

			// find the corresponding view in our subview list
			var subviewCID = $( event.target ).closest( '.o2-comment' ).data( 'cid' );
			var subview = this.subviews[ subviewCID ];

			// remove this comment view's model from our comment collection
			this.model.comments.remove( subview.model );
			// close the subview editor
			subview.finishEditor( { keepCache: true } );
			// destroy the model (which will trigger the view removal)
			subview.model.destroy();
			// update our subview list
			delete this.subviews[ subviewCID ];

			this.renderCommentDisclosure();
		}
	} );
} )( jQuery );
;
/*
 * The Posts collection contains all the posts on the page (and their comments via nesting)
 */

var o2 = o2 || {};

o2.Collections = o2.Collections || {};

o2.Collections.Posts = ( function( $, Backbone ) {
	return Backbone.Collection.extend( {
		model: o2.Models.Post,

		comparison: 'post',

		actions: {
			initPost: {
				handle: 'initPost',
				on: 'initialize',
				doThis: function() {},
				priority: 1 // Default o2.Collection.Posts initialization
			}
		},

		comparators: {
			post: function( post1, post2 ) {
				var orderSign = ( 'DESC' === o2.options.order ) ? -1 : 1;
				return orderSign * o2.Utilities.compareTimes( post1.get( 'unixtime' ), post2.get( 'unixtime' ) );
			}
		},

		initialize: function( options ) {
			this.doAction( 'initialize', { options: options, collection: this } );
		},

		comparator: function( post1, post2 ) {
			return this.comparators[this.comparison]( post1, post2 );
		},

		doAction: function() {
			// Only doAction if there is an action
			var action = arguments[0];
			if ( 'undefined' === typeof action ) {
				return;
			}

			// Handle priority
			var sortable = [];
			_.each( _.where( this.actions, { on: action } ), function( action ) {
				sortable.push( action );
			}, this );
			sortable.sort( function( a, b ) { return a.priority - b.priority; } );

			// Handle doThis
			for ( var i = 0; i < sortable.length; i++ ) {
				if ( 'function' === typeof( sortable[i].doThis ) ) {
					sortable[i].doThis( arguments[1] );
				}
			}
		}
	} );
} )( jQuery, Backbone );
;
/*! jQuery Color v@2.1.1 with SVG Color Names http://github.com/jquery/jquery-color | jquery.org/license */
(function(a,b){function m(a,b,c){var d=h[b.type]||{};return a==null?c||!b.def?null:b.def:(a=d.floor?~~a:parseFloat(a),isNaN(a)?b.def:d.mod?(a+d.mod)%d.mod:0>a?0:d.max<a?d.max:a)}function n(b){var c=f(),d=c._rgba=[];return b=b.toLowerCase(),l(e,function(a,e){var f,h=e.re.exec(b),i=h&&e.parse(h),j=e.space||"rgba";if(i)return f=c[j](i),c[g[j].cache]=f[g[j].cache],d=c._rgba=f._rgba,!1}),d.length?(d.join()==="0,0,0,0"&&a.extend(d,k.transparent),c):k[b]}function o(a,b,c){return c=(c+1)%1,c*6<1?a+(b-a)*c*6:c*2<1?b:c*3<2?a+(b-a)*(2/3-c)*6:a}var c="backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",d=/^([\-+])=\s*(\d+\.?\d*)/,e=[{re:/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(a){return[a[1],a[2],a[3],a[4]]}},{re:/rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(a){return[a[1]*2.55,a[2]*2.55,a[3]*2.55,a[4]]}},{re:/#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,parse:function(a){return[parseInt(a[1],16),parseInt(a[2],16),parseInt(a[3],16)]}},{re:/#([a-f0-9])([a-f0-9])([a-f0-9])/,parse:function(a){return[parseInt(a[1]+a[1],16),parseInt(a[2]+a[2],16),parseInt(a[3]+a[3],16)]}},{re:/hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,space:"hsla",parse:function(a){return[a[1],a[2]/100,a[3]/100,a[4]]}}],f=a.Color=function(b,c,d,e){return new a.Color.fn.parse(b,c,d,e)},g={rgba:{props:{red:{idx:0,type:"byte"},green:{idx:1,type:"byte"},blue:{idx:2,type:"byte"}}},hsla:{props:{hue:{idx:0,type:"degrees"},saturation:{idx:1,type:"percent"},lightness:{idx:2,type:"percent"}}}},h={"byte":{floor:!0,max:255},percent:{max:1},degrees:{mod:360,floor:!0}},i=f.support={},j=a("<p>")[0],k,l=a.each;j.style.cssText="background-color:rgba(1,1,1,.5)",i.rgba=j.style.backgroundColor.indexOf("rgba")>-1,l(g,function(a,b){b.cache="_"+a,b.props.alpha={idx:3,type:"percent",def:1}}),f.fn=a.extend(f.prototype,{parse:function(c,d,e,h){if(c===b)return this._rgba=[null,null,null,null],this;if(c.jquery||c.nodeType)c=a(c).css(d),d=b;var i=this,j=a.type(c),o=this._rgba=[];d!==b&&(c=[c,d,e,h],j="array");if(j==="string")return this.parse(n(c)||k._default);if(j==="array")return l(g.rgba.props,function(a,b){o[b.idx]=m(c[b.idx],b)}),this;if(j==="object")return c instanceof f?l(g,function(a,b){c[b.cache]&&(i[b.cache]=c[b.cache].slice())}):l(g,function(b,d){var e=d.cache;l(d.props,function(a,b){if(!i[e]&&d.to){if(a==="alpha"||c[a]==null)return;i[e]=d.to(i._rgba)}i[e][b.idx]=m(c[a],b,!0)}),i[e]&&a.inArray(null,i[e].slice(0,3))<0&&(i[e][3]=1,d.from&&(i._rgba=d.from(i[e])))}),this},is:function(a){var b=f(a),c=!0,d=this;return l(g,function(a,e){var f,g=b[e.cache];return g&&(f=d[e.cache]||e.to&&e.to(d._rgba)||[],l(e.props,function(a,b){if(g[b.idx]!=null)return c=g[b.idx]===f[b.idx],c})),c}),c},_space:function(){var a=[],b=this;return l(g,function(c,d){b[d.cache]&&a.push(c)}),a.pop()},transition:function(a,b){var c=f(a),d=c._space(),e=g[d],i=this.alpha()===0?f("transparent"):this,j=i[e.cache]||e.to(i._rgba),k=j.slice();return c=c[e.cache],l(e.props,function(a,d){var e=d.idx,f=j[e],g=c[e],i=h[d.type]||{};if(g===null)return;f===null?k[e]=g:(i.mod&&(g-f>i.mod/2?f+=i.mod:f-g>i.mod/2&&(f-=i.mod)),k[e]=m((g-f)*b+f,d))}),this[d](k)},blend:function(b){if(this._rgba[3]===1)return this;var c=this._rgba.slice(),d=c.pop(),e=f(b)._rgba;return f(a.map(c,function(a,b){return(1-d)*e[b]+d*a}))},toRgbaString:function(){var b="rgba(",c=a.map(this._rgba,function(a,b){return a==null?b>2?1:0:a});return c[3]===1&&(c.pop(),b="rgb("),b+c.join()+")"},toHslaString:function(){var b="hsla(",c=a.map(this.hsla(),function(a,b){return a==null&&(a=b>2?1:0),b&&b<3&&(a=Math.round(a*100)+"%"),a});return c[3]===1&&(c.pop(),b="hsl("),b+c.join()+")"},toHexString:function(b){var c=this._rgba.slice(),d=c.pop();return b&&c.push(~~(d*255)),"#"+a.map(c,function(a){return a=(a||0).toString(16),a.length===1?"0"+a:a}).join("")},toString:function(){return this._rgba[3]===0?"transparent":this.toRgbaString()}}),f.fn.parse.prototype=f.fn,g.hsla.to=function(a){if(a[0]==null||a[1]==null||a[2]==null)return[null,null,null,a[3]];var b=a[0]/255,c=a[1]/255,d=a[2]/255,e=a[3],f=Math.max(b,c,d),g=Math.min(b,c,d),h=f-g,i=f+g,j=i*.5,k,l;return g===f?k=0:b===f?k=60*(c-d)/h+360:c===f?k=60*(d-b)/h+120:k=60*(b-c)/h+240,h===0?l=0:j<=.5?l=h/i:l=h/(2-i),[Math.round(k)%360,l,j,e==null?1:e]},g.hsla.from=function(a){if(a[0]==null||a[1]==null||a[2]==null)return[null,null,null,a[3]];var b=a[0]/360,c=a[1],d=a[2],e=a[3],f=d<=.5?d*(1+c):d+c-d*c,g=2*d-f;return[Math.round(o(g,f,b+1/3)*255),Math.round(o(g,f,b)*255),Math.round(o(g,f,b-1/3)*255),e]},l(g,function(c,e){var g=e.props,h=e.cache,i=e.to,j=e.from;f.fn[c]=function(c){i&&!this[h]&&(this[h]=i(this._rgba));if(c===b)return this[h].slice();var d,e=a.type(c),k=e==="array"||e==="object"?c:arguments,n=this[h].slice();return l(g,function(a,b){var c=k[e==="object"?a:b.idx];c==null&&(c=n[b.idx]),n[b.idx]=m(c,b)}),j?(d=f(j(n)),d[h]=n,d):f(n)},l(g,function(b,e){if(f.fn[b])return;f.fn[b]=function(f){var g=a.type(f),h=b==="alpha"?this._hsla?"hsla":"rgba":c,i=this[h](),j=i[e.idx],k;return g==="undefined"?j:(g==="function"&&(f=f.call(this,j),g=a.type(f)),f==null&&e.empty?this:(g==="string"&&(k=d.exec(f),k&&(f=j+parseFloat(k[2])*(k[1]==="+"?1:-1))),i[e.idx]=f,this[h](i)))}})}),f.hook=function(b){var c=b.split(" ");l(c,function(b,c){a.cssHooks[c]={set:function(b,d){var e,g,h="";if(a.type(d)!=="string"||(e=n(d))){d=f(e||d);if(!i.rgba&&d._rgba[3]!==1){g=c==="backgroundColor"?b.parentNode:b;while((h===""||h==="transparent")&&g&&g.style)try{h=a.css(g,"backgroundColor"),g=g.parentNode}catch(j){}d=d.blend(h&&h!=="transparent"?h:"_default")}d=d.toRgbaString()}try{b.style[c]=d}catch(j){}}},a.fx.step[c]=function(b){b.colorInit||(b.start=f(b.elem,c),b.end=f(b.end),b.colorInit=!0),a.cssHooks[c].set(b.elem,b.start.transition(b.end,b.pos))}})},f.hook(c),a.cssHooks.borderColor={expand:function(a){var b={};return l(["Top","Right","Bottom","Left"],function(c,d){b["border"+d+"Color"]=a}),b}},k=a.Color.names={aqua:"#00ffff",black:"#000000",blue:"#0000ff",fuchsia:"#ff00ff",gray:"#808080",green:"#008000",lime:"#00ff00",maroon:"#800000",navy:"#000080",olive:"#808000",purple:"#800080",red:"#ff0000",silver:"#c0c0c0",teal:"#008080",white:"#ffffff",yellow:"#ffff00",transparent:[null,null,null,0],_default:"#ffffff"}})(jQuery),jQuery.extend(jQuery.Color.names,{aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",blanchedalmond:"#ffebcd",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",limegreen:"#32cd32",linen:"#faf0e6",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",oldlace:"#fdf5e6",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",whitesmoke:"#f5f5f5",yellowgreen:"#9acd32"});
;
/* global moment */
var o2 = o2 || {};

o2.Utilities = o2.Utilities || {};

o2.Utilities.phpToMoment = function( s ) {
	var m = '';
	var lookBehind = '';
	for ( var i = 0; i < s.length; i++ ) {
		switch ( s.charAt( i ) ) {
			case 'd': // Day of the month with leading zeroes
				m += 'DD';
				break;
			case 'D': // Short 3-letter textual representation of a day
				m += 'ddd';
				break;
			case 'l': // Full textual representation of the day of the week
				m += 'dddd';
				break;
			case 'N': // ISO-8601 numeric representation of the day of the week
				m += 'E';
				break;
			case 'S': // English ordinal suffix for the day of the month (usually used with 'j')
				if ( lookBehind === 'j' ) {
					m += 'Do';
				}
				break;
			case 'w': // Numeric representation of the day of the week
				m += 'd';
				break;
			case 'W': // ISO-8601 week number of a year
				m += 'w';
				break;
			case 'F': // Full textual representation of a month
				m += 'MMMM';
				break;
			case 'm': // Numeric representation of a month with leading zeroes
				m += 'MM';
				break;
			case 'M': // Short 3-letter textual representation of a month
				m += 'MMM';
				break;
			case 'n': // Numeric representation of a month without leading zeroes
				m += 'M';
				break;
			case 'o': // ISO-8601 year number
				m += 'GGGG';
				break;
			case 'Y': // A full numeric representation of a year
				m += 'YYYY';
				break;
			case 'y': // A two-digit representation of a year
				m += 'YY';
				break;
			case 'g': // 12-hour format of an hour without leading zeroes
				m += 'h';
				break;
			case 'G': // 24-hour format of an hour without leading zeroes
				m += 'H';
				break;
			case 'h': // 12-hour format of an hour with leading zeroes
				m += 'hh';
				break;
			case 'H': // 24-hour format of an hour with leading zeroes
				m += 'HH';
				break;
			case 'i': // Minutes with leading zeroes
				m += 'mm';
				break;
			case 's': // Seconds with leading zeroes
				m += 'ss';
				break;
			case 'e': // Timezone identifier approximated with timezone offset
				m += 'Z';
				break;
			case 'O': // Difference to GMT in hours
				m += 'ZZ';
				break;
			case 'P': // Formatted difference to GMT in hours
				m += 'Z';
				break;
			case 'T': // Timezone abbreviation approximated with timezone offset
				m += 'Z';
				break;
			case 'c': // ISO-8601 date
				m += 'YYYY-MM-DDTHH:MM:ssZ';
				break;
			case 'r': // RFC 2822 formatted date
				m += 'ddd, DD MMM YYYY HH:MM:ss Z';
				break;
			case 'u': // Seconds since Unix Epoch
				m += 'X';
				break;

			// No translation needed
			case 'a': // Lowercase Ante meridiem and Post meridiem
			case 'A': // Uppercase Ante meridiem and Post meridiem
				m += s.charAt( i );
				break;

			// No equivalent
			case 'z': // The day of the year (starting from 0)
			case 't': // Number of days in the given month
			case 'L': // Leap year
			case 'B': // Swatch Internet time
			case 'u': // Microseconds
			case 'I': // Daylight savings time
			case 'Z': // Timezone offset in seconds
				break;

			// Handle with lookBehind to handle 'jS'
			case 'j': // Day of the month without leading zeroes
				break;

			default:
				if ( lookBehind === 'j' && s.charAt( i ) !== 'S' ) {
					m += 'D[' + s.charAt( i ) + ']';
				} else {
					m += '[' + s.charAt( i ) + ']';
				}
		}
		lookBehind = s.charAt( i );
	}

	return m;
};

o2.Utilities.removeTimestamp = function( e ) {
	e.removeAttr( 'data-unixtime' ).removeClass( 'o2-timestamp' );
};

o2.Utilities.timestamp = function( e ) {
	var then = e.data( 'unixtime' );
	var now = Math.round( +new Date() / 1000 );

	if ( undefined === then ) {
		return;
	}

	if ( then < 0 ) {
		then = now;
	}

	// Load Moment.js language
	moment.updateLocale( 'en', o2.options.i18nMoment );

	// Reset moment default timezone to null which is how moment
	// behaved prior to Gutenberg plugin setting the global
	// moment timezone to get_option( 'gmt_offset', 0 )
	moment.defaultZone = null;

	// Set common unixtime and Date objects
	var dateThen = new Date( then * 1000 );
	var dateNow = new Date( now * 1000 );
	var dateYesterday = new Date( ( now - 60 * 60 * 24 ) * 1000 );

	var date = moment( dateThen ).format( o2.options.dateFormat );
	var time = moment( dateThen ).format( o2.options.timeFormat );

	// Set the human-readable title attribute of the timestamp if undefined
	if ( e.attr( 'title' ) === undefined ) {

		// Force a timezone offset if not included in timestampFormat
		var timeZoned = time;
		if ( ( o2.options.dateFormat.indexOf( 'Z' ) < 0 && o2.options.timeFormat.indexOf( 'Z' ) < 0 ) &&
				( o2.options.dateFormat.indexOf( 'ZZ' ) < 0 && o2.options.timeFormat.indexOf( 'ZZ' ) < 0 ) ) {
			timeZoned = time + ' (' + moment( dateThen ).format( 'Z' ) + ')';
		}

		var timestampFormat = o2.options.timestampFormat.replace( '%1$s', timeZoned ).replace( '%2$s', date );

		e.attr( 'title', timestampFormat );
	}

	// Set the relative time since of the timestamp
	var timeSince = now - then;

	// Comparison variables for today and yesterday
	var day = dateThen.getDate();
	var today = dateNow.getDate();
	var yesterday = dateYesterday.getDate();

	// Handle compact time formats
	var compact = false;
	if ( window.innerWidth < 600 ) {
		compact = true;
	}
	var compactAllowed = false;
	if ( e.data( 'compactAllowed' ) === true ) {
		compactAllowed = true;
	}

	// Compact versus long-form
	if ( compact && compactAllowed ) {

		// Just display the largest relative unit
		if ( timeSince < 60 ) {
			e.text( o2.options.compactFormat.seconds.replace( '%s', timeSince ) );

		} else if ( timeSince < 60 * 60 ) {
			e.text( o2.options.compactFormat.minutes.replace( '%s', Math.floor( timeSince / 60 ) ) );

		} else if ( timeSince < 60 * 60 * 24 ) {
			e.text( o2.options.compactFormat.hours.replace( '%s', Math.floor( timeSince / ( 60 * 60 ) ) ) );

		} else if ( timeSince < 60 * 60 * 24 * 7 ) {
			e.text( o2.options.compactFormat.days.replace( '%s', Math.floor( timeSince / ( 60 * 60 * 24 ) ) ) );

		} else if ( timeSince < 60 * 60 * 24 * 30 * 2 ) {
			e.text( o2.options.compactFormat.weeks.replace( '%s', Math.floor( timeSince / ( 60 * 60 * 24 * 7 ) ) ) );

		} else if ( timeSince < 60 * 60 * 24 * 365 ) {
			e.text( o2.options.compactFormat.months.replace( '%s', Math.floor( timeSince / ( 60 * 60 * 24 * 30 ) ) ) );

			o2.Utilities.removeTimestamp( e );
		} else {
			e.text( o2.options.compactFormat.years.replace( '%s', Math.floor( timeSince / ( 60 * 60 * 24 * 365 ) ) ) );

			o2.Utilities.removeTimestamp( e );
		}
	} else {

		if ( timeSince < 60 ) {
			e.text( o2.options.compactFormat.seconds.replace( '%s', timeSince ) );

		// Display a relative time today
		} else if ( timeSince < 60 * 60 * 24 && day === today ) {
			e.text( moment( dateThen ).fromNow() );

		// Display a time yesterday
		} else if ( timeSince < 60 * 60 * 24 * 3 && day === yesterday ) {
			e.text( o2.options.yesterdayFormat.replace( '%s', time ) );

		// Just display a time
		} else {
			e.text( o2.options.timestampFormat.replace( '%1$s', time ).replace( '%2$s', date ) );

			o2.Utilities.removeTimestamp( e );
		}
	}

	return e;
};
;
var o2 = o2 || {};

o2.Models = o2.Models || {};

o2.Models.Notification = ( function( $, Backbone ) {
	return Backbone.Model.extend( {
		defaults: function() {
			return {
				text: '',              // The message to display to the user; maps to chrome.notifications message
				url: '',               // (optional) URL to open or scroll to on click
				postID: 0,             // (optional) The post id associated with this notification
				type: 'notice',        // (optional) The type of notification: notice, error, or warning
				unixtime: Math.round( +new Date() / 1000 ), // (optional) The unixtime of the notification, defaults to now
				popup: false,          // (optional) Open the url in a new window
				sticky: false,         // (optional) Sticky notifications stay visible until clicked
				dismissable: true,     // (optional) Whether the user can dismiss this or not
				textClass: '',         // (optional) class to be added to the message to display
				iconClass: '',         // (optional) class to be added to the icon

				// Saving for later usage with chrome.notifications
				title: '',             // chrome.notifications string
				template: 'basic',     // chrome.notifications TemplateType: basic, image, list, or progress
				iconUrl: '',           // chrome.notifications string
				iconSize: 32           // (optional) The dimension for iconUrl
			};
		},

		initialize: function() {
			if ( this.isError() && '' === this.get( 'text' ) ) {
				this.set( 'text', o2.strings.defaultError );
			}

			// @todo This needs to be attached to the relevant model if possible; if the origin model is destroyed,
			//       the notification will point at something that doesn't exist
		},

		getPostID: function() {
			return this.get( 'postID' );
		},

		getText: function() {
			return this.get( 'text' );
		},

		getType: function() {
			return this.get( 'type' );
		},

		getUrl: function() {
			return this.get( 'url' );
		},

		hasUrl: function() {
			return ( '' !== this.getUrl );
		},

		hasPostID: function() {
			return ( 0 !== this.getPostID );
		},

		isDismissable: function() {
			return ( true === this.get( 'dismissable' ) );
		},

		isError: function() {
			return ( 'error' === this.getType() );
		},

		isNotice: function() {
			return ( 'notice' === this.getType() );
		},

		isPopup: function() {
			return ( true === this.get( 'popup' ) );
		},

		isSticky: function() {
			return ( true === this.get( 'sticky' ) );
		},

		isWarning: function() {
			return ( 'warning' === this.getType() );
		}
	} );
} )( jQuery, Backbone );
;
var o2 = o2 || {};

o2.Collections = o2.Collections || {};

o2.Collections.Notifications = ( function( $, Backbone ) {
	return Backbone.Collection.extend( {
		model: o2.Models.Notification,

		open: true,

		findFirst: function( type ) {
			return _.find( this.models, function( notification ) {
				return ( type === notification.get( 'type') );
			} );
		},

		findFirstAndDestroy: function ( type ) {
			var first = this.findFirst( type );

			if ( 'undefined' !== typeof first ) {
				first.destroy();
			}
		},

		openNotifications: function() {
			this.open = true;
		},

		closeNotifications: function() {
			this.open = false;
		},

		isOpen: function() {
			return ( this.open === true );
		},

		isClosed: function() {
			return ( ! this.isOpen() );
		}
	} );
} )( jQuery, Backbone );
;
var o2 = o2 || {};

o2.Views = o2.Views || {};

o2.Views.Notification = ( function( $ ) {
	return wp.Backbone.View.extend( {
		model: o2.Models.Notification,

		tagName: 'li',

		className: 'o2-notification',

		initialize: function() {
			this.model.on( 'change',  this.render, this );
			this.model.on( 'destroy', this.remove, this );
		},

		events: {
			'click a.o2-notification-link':  'onClickLink',
			'click a.o2-notification-close': 'onClickClose'
		},

		onClickLink: function( event ) {
			event.preventDefault();
			var url = this.model.getUrl();

			// @todo Make this a separate function for dealing with in-page/external links
			if ( '#' === url.substring( 0, 1 ) ) {
				o2.Events.doAction( 'scroll-to.o2', url );
				this.fadeAndDestroy();
			} else {
				if ( this.model.isPopup() ) {
					window.open( url, 'o2-popup', 'width=800,height=600,toolbar=0,menubar=0,location=0' );
				} else {
					window.open( url );
				}
			}
		},

		onClickClose: function( event ) {
			event.preventDefault();
			this.fadeAndDestroy();
		},

		fadeAndDestroy: function() {
			this.$el.fadeOut( 'fast', function() {
				this.model.destroy();
			}.bind( this ) );
		},

		render: function() {
			var template = o2.Utilities.Template( 'notification' );

			var jsonifiedModel = this.model.toJSON();
			this.$el.html( template( jsonifiedModel ) ).show();

			this.$( '.o2-timestamp' ).each( function() {
				o2.Utilities.timestamp( $( this ) );
			} );

			return this;
		},

		remove: function() {
			this.$el.remove();
		}
	} );
} )( jQuery );
;
var o2 = o2 || {};

o2.Views = o2.Views || {};

o2.Views.DockItems = ( function() {
	return wp.Backbone.View.extend( {
		collection: o2.Collections.Notifications,

		tagName: 'ul',

		className: 'o2-dock-items',

		subviews: {},

		initialize: function() {
			this.listenTo( this.collection, 'add', this.addOne );
			this.listenTo( this.collection, 'reset', this.render );


		},

		addOne: function( model ) {
			if ( model.isNotice() ) {
				var itemView = new o2.Views.Notification( {
					model: model
				} );

				this.$el.prepend( itemView.render().el );
				this.subviews[ itemView.model.cid ] = itemView;
			}

			return this;
		},

		render: function() {
			this.collection.each( this.addOne, this );
			return this;
		}
	} );
} )();
;
var o2 = o2 || {};

o2.Views = o2.Views || {};

o2.Views.DockCount = ( function() {
	return wp.Backbone.View.extend( {
		collection: o2.Collections.Notifications,

		className: 'o2-dock-count genericon genericon-chat',

		initialize: function() {
			this.listenTo( this.collection, 'add', this.render );
			this.listenTo( this.collection, 'remove', this.render );
			this.listenTo( this.collection, 'reset', this.render );
		},

		render: function() {
			this.$el.empty();

			var count = this.collection.where( { type: 'notice' } ).length;
			this.$el.append( count );

			return this;
		}
	} );
} )();
;
var o2 = o2 || {};

o2.Views = o2.Views || {};

o2.Views.Dock = ( function( $ ) {
	return wp.Backbone.View.extend( {
		collection: o2.Collections.Notifications,

		el: '#o2-dock',

		originalDocumentTitle: '',

		subviews: {},

		initialize: function() {
			this.originalDocumentTitle = document.title;

			this.listenTo( this.collection, 'add', this.count );
			this.listenTo( this.collection, 'remove', this.count );
			this.listenTo( this.collection, 'reset', this.count );

			this.render();
			this.count();
		},

		events: {
			'click .o2-dock-count': 'toggleDock',
			'click #o2-dock-controls': 'clearDock'
		},

		toggleDock: function() {
			var list = $( '.o2-dock-items' );
			var controls = $( '#o2-dock-controls' );

			// Hide dock by default if visible
			if ( list.is( ':visible' ) ) {
				list.slideUp( 200 );
				controls.hide();

			// Only show dock if it has content
			} else {
				if ( this.collection.length > 0 ) {
					controls.show();
					list.slideDown( 200 );
				} else {
					list.hide();
					controls.hide();
				}
			}
		},

		clearDock: function() {
			_.each( this.collection.where( { type: 'notice' } ), function( model ) {
				model.destroy();
			}, this );
		},

		count: function() {
			var count = this.collection.where( { type: 'notice' } ).length;

			if ( count > 0 ) {
				this.$el.removeClass( 'empty' );
				document.title = '(' + count + ') ' + this.originalDocumentTitle;
			} else {
				this.$el.addClass( 'empty' );
				this.toggleDock();
				document.title = this.originalDocumentTitle;
			}
		},

		render: function() {
			var itemsView = new o2.Views.DockItems( {
				collection: this.collection
			} );

			this.$el.append( itemsView.render().el );
			this.subviews.itemsView = itemsView;

			this.subviews.itemsView.$el.wrap( '<div id="o2-items-scroll"></div>' );

			var countView = new o2.Views.DockCount( {
				collection: this.collection
			} );

			this.$el.prepend( countView.render().el );
			this.subviews.countView = countView;

			this.$el.append( '<div id="o2-dock-controls">' + o2.strings.clearNotifications + '</div>' );

			return this;
		}
	} );
} )( jQuery );
;
var o2 = o2 || {};

o2.Views = o2.Views || {};

o2.Views.Flash = ( function() {
	return wp.Backbone.View.extend( {
		collection: o2.Collections.Notifications,

		el: '#o2-flash',

		subviews: {},

		initialize: function() {
			this.render();
		},

		render: function() {
			var itemsView = new o2.Views.FlashItems( {
				collection: this.collection
			} );

			this.$el.append( itemsView.render().el );
			this.subviews.itemsView = itemsView;

			return this;
		}
	} );
} )();
;
var o2 = o2 || {};

o2.Routers = o2.Routers || {};

o2.Routers.Notifications = ( function( $, Backbone ) {
	return Backbone.Router.extend( {

		initialize: function() {

			// Acquire bootstrap data if available
			var bootstrap = [];
			var bootstrapEl = $( '.o2-notifications-data' );
			if ( bootstrapEl.length > 0 ) {
				_.each( $.parseJSON( bootstrapEl.text() ), function( fragment ) {
					bootstrap.push( fragment );
				} );
			}

			// Set up notifications collection and display bootstrapped messages
			var notifications = new o2.Collections.Notifications( bootstrap );

			// Set up the dock
			var dockView = new o2.Views.Dock( {
				collection: notifications
			} );

			// Set up the flash area
			var flashView = new o2.Views.Flash( {
				collection: notifications
			} );

			// Quell notifications until activated by o2
			notifications.closeNotifications();

			this.notifications = notifications;
			this.dockView = dockView;
			this.flashView = flashView;
		},

		add: function( options, collection ) {
			if ( 'undefined' === typeof collection ) {
				collection = o2.Notifications.notifications;
			}

			if ( collection.isOpen() ) {
				// if the collection already contains an item that points to this URL, don't add another
				if ( 'undefined' !== typeof options.url ) {
					var foundNotification = collection.findWhere( { url: options.url } );
					if ( 'undefined' !== typeof foundNotification ) {
						return;
					}
				}

				var notification = new o2.Models.Notification( options );
				collection.add( notification );
			}
		},

		close: function( collection ) {
			if ( 'undefined' === typeof collection ) {
				collection = o2.Notifications.notifications;
			}
			collection.closeNotifications();
		},

		open: function( collection ) {
			if ( 'undefined' === typeof collection ) {
				collection = o2.Notifications.notifications;
			}
			collection.openNotifications();
		}
	} );
} )( jQuery, Backbone );

jQuery( document ).on( 'preload.o2', function( bootstrap ) {
	o2.Notifications = o2.Notifications || new o2.Routers.Notifications( bootstrap );
} );

jQuery( document ).on( 'ready.o2', function() {
	o2.Notifications.open();
} );
;
/* global enquire */
var o2 = o2 || {};

o2.Views = o2.Views || {};

o2.Views.NoPostsPost = ( function() {
	return wp.Backbone.View.extend( {
		tagName: 'article',

		className: 'o2-no-posts-post',

		defaults: function() {
			return {
				isNarrowScreen: false
			};
		},

		initialize: function( options ) {
			this.options = this.defaults();
			this.options = _.extend( this.options, options );

			if ( 'undefined' !== typeof enquire ) {
				_.bindAll( this, 'onScreenNarrowed', 'onScreenWidened' );
				enquire.register( 'screen and (max-width:640px)', {
					match:  this.onScreenNarrowed,
					unmatch: this.onScreenWidened
				} );
			}
		},

		onScreenWidened: function() {
			this.options.isNarrowScreen = false;
			this.render();
		},

		onScreenNarrowed: function() {
			this.options.isNarrowScreen = true;
			this.render();
		},

		render: function() {
			var data = {};
			data.text = ( this.options.isNarrowScreen ? o2.strings.noPostsMobile : o2.strings.noPosts );
			var template = o2.Utilities.Template( this.options.template );
			this.$el.html( template( data ) );
			return this;
		}
	} );
} )();
;
/* global enquire, console */
/*
 * o2.Views.Posts - A view that contains all the posts, iterating over a Posts Collection
 */
var o2 = o2 || {};

o2.Views = o2.Views || {};

o2.Views.Posts = ( function( $ ) {
	return wp.Backbone.View.extend( {
		collection: o2.Collections.Posts,

		className: 'o2-posts',

		defaults: {
			showNavigation: false, /* whether threads should show prev / next post navigation */
			highlightOnAdd: true, /* whether newly added threads should be highlighted once inview */
			showComments: true,
			showTitles: true, /* whether to have threads show their titles */
			userMustBeLoggedInToComment: true,
			requireUserNameAndEmailIfNotLoggedIn: false,
			threadCommentsDepth: 3, /* maps to thread_comments_depth option */
			loginURL: '',
			currentUser: {
				userLogin: '',
				canEditPosts: false,
				canEditOthersPosts: false,
				canPublishPosts: false
			},
			isNarrowScreen: false
		},

		lastHomeScroll: 0,

		initialize: function( options ) {
			this.subviews = {};

			this.listenTo( this.collection, 'add', this.addOne );
			this.listenTo( this.collection, 'reset', this.addAll );
			this.listenTo( this.collection, 'remove', this.removeOne );
			this.options = _.extend( this.defaults, options );

			// Event handlers
			o2.Events.dispatcher.bind( 'update-posts-view-options.o2', this.updateOptions, this );

			// If enquire is loaded (for responsive layouts), register some more listeners
			if ( 'undefined' !== typeof enquire ) {
				_.bindAll( this, 'onScreenNarrowed', 'onScreenWidened' );
				enquire.register( 'screen and (max-width:550px)', {
					match:  this.onScreenNarrowed,
					unmatch: this.onScreenWidened
				} );
			}
		},

		events: {},

		scrollTo: function( domRef ) {
			var domEl = $( domRef );
			if ( domEl.length ) {

				var postID = false;
				var commentID = false;

				// Figure out if the dom ref is for a post or a comment
				if ( '#comment-' === domRef.substr( 0, 9 ) ) {
					commentID = parseInt( domRef.substr( 9 ), 10 );
					this.collection.forEach( function( post ) {
						if ( post.comments.get( commentID ) ) {
							postID = post.get( 'postID' );
						}
					} );
				} else if ( '#post-' === domRef.substr( 0, 6 ) ) {
					postID = parseInt( domRef.substr( 6 ), 10 );
				} else {
					console.error( 'bad domRef in scrollTo, domRef=', domRef );
					return;
				}

				// Prompt the theme to close any provided modals/dockables (e.g. flyout sidebar)
				$( 'body' ).trigger( 'closemodals' );

				// If we're scrolling to a comment, make sure our post is showing its comments
				if ( commentID && domEl.is( ':hidden' ) ) {
					this.subviews[ postID ].updateOptions( { showComments: true } );
				}

				// Ok - now lets scroll to it
				$( 'html, body' ).animate( {
					scrollTop: domEl.offset().top - 50
				}, 2000 );
			}
		},

		onScreenNarrowed: function() {
			this.options.isNarrowScreen = true;
			this.options.oldShowComments = this.options.showComments;
			this.options.showComments = false;
			o2.Events.dispatcher.trigger( 'update-posts-view-options.o2', { showComments: this.options.showComments } );
			o2.Events.dispatcher.trigger( 'update-post-view-options.o2', { showComments: this.options.showComments } );

		},

		onScreenWidened: function() {
			this.options.isNarrowScreen = false;
			if ( 'undefined' !== typeof this.options.oldShowComments ) {
				this.options.showComments = this.options.oldShowComments;
				o2.Events.dispatcher.trigger( 'update-posts-view-options.o2', { showComments: this.options.showComments } );
				o2.Events.dispatcher.trigger( 'update-post-view-options.o2', { showComments: this.options.showComments } );
			}
		},

		updateOptions: function( options ) {
			this.options = _.extend( this.options, options );
		},

		render: function() {
			// Suspend highlighting during this loop
			// (Only want it to happen when addOne is triggered by the collection event)
			var cachedHighlight = this.options.highlightOnAdd;
			this.options.highlightOnAdd = false;
			this.collection.forEach( this.addOne, this );
			this.options.highlightOnAdd = cachedHighlight;

			return this;
		},

		addOne: function( post ) {
			this.removeNoPostsPost();

			var postID = post.get( 'id' );

			var postView = new o2.Views.Post( {
				model: post,
				template: this.options.postTemplate,
				showNavigation: this.options.showNavigation,
				highlightOnAdd: this.options.highlightOnAdd,
				userMustBeLoggedInToComment: this.options.userMustBeLoggedInToComment,
				requireUserNameAndEmailIfNotLoggedIn: this.options.requireUserNameAndEmailIfNotLoggedIn,
				showComments: this.options.showComments,
				showTitle: this.options.showTitles,
				currentUser: this.options.currentUser,
				threadCommentsDepth: this.options.threadCommentsDepth
			} );

			// if the indexOf is 0, insert it at the beginning of the div
			// otherwise, insert it after the indexOf - 1 child
			// Note this ONLY works because the initial rendering by addAll proceeds through the
			// models in the collection in order - and then subsequent arrivals leverage the
			// threads comparator to get inserted into the collection at the right spot
			var indexOf = this.collection.indexOf( post );
			if ( 0 === indexOf ) {
				this.$el.prepend( postView.render().el );
			} else {
				this.$el.children( o2.options.threadContainer + ':eq(' + ( indexOf - 1 ) + ')' ).after( postView.render().el );
			}

			if ( this.options.highlightOnAdd ) {
				postView.$el.one( 'inview', o2.Utilities.HighlightOnInview );
			}

			if ( post.get( 'unixtimeModified' ) <= post.get( 'unixtime' ) && /* New post (allow for timestamp diffs) */
				this.options.currentUser.userLogin !== post.get( 'userLogin' ) /* Not mine */ )
			{
				var postAuthorModel = o2.UserCache.getUserFor( post.attributes, 32 );

				var text = '';
				if ( post.get( 'mentionContext' ) ) {
					text = o2.strings.newMentionBy.replace( '%1$s', postAuthorModel.displayName ).replace( '%2$s', post.get( 'mentionContext' ) );
				} else {
					text = o2.strings.newPostBy.replace( '%s', postAuthorModel.displayName );
				}

				o2.Notifications.add( {
					source: postView,
					text: text,
					textClass: postAuthorModel.modelClass,
					unixtime: post.get( 'unixtime' ),
					url: '#post-' + post.get( 'id' ),
					iconUrl: postAuthorModel.avatar,
					iconSize: postAuthorModel.avatarSize,
					iconClass: postAuthorModel.modelClass
				} );
			}

			// Save a reference to the post view so we can find it later
			this.subviews[ postID ] = postView;
		},

		addAll: function() {
			this.collection.forEach( this.addOne, this );
		},

		addNoPostsPost: function() {
			var noPostsPost = this.$el.find( '.o2-no-posts-post' );
			if ( noPostsPost.length < 1 ) {
				var noPostsView = new o2.Views.NoPostsPost( {
					template: this.options.noPostsPostTemplate
				} );
				this.$el.append( noPostsView.render().el );
			}
		},

		removeOne: function( model, collection, options ) {
			var post = this.$el.children( o2.options.threadContainer + ':eq(' + options.index + ')' );

			if ( ! _.isUndefined( options.animate ) && false === options.animate ) {
				post.remove();
			} else {
				post.slideUp( function(){
					$(this).remove();
				});
			}

			var postID = model.get( 'id' );
			delete this.subviews[ postID ];
		},

		removeNoPostsPost: function() {
			this.$( '.o2-no-posts-post' ).remove();
		}

	} );
} )( jQuery );
;
/* global moment, o2Keyboard, o2Editor */
/*
 * o2 is oxygen for your company
 */
var o2 = o2 || {};

o2.Routers = o2.Routers || {};

o2.Routers.App = ( function( $, Backbone ) {
	/*
	 * Main, application-level router runs the show. Single instance created as o2.App (in o2.start())
	 * The App is the only component that should be accessing o2.options directly
	 */
	return Backbone.Router.extend( {
		initialAppState: function() {
			return {
				saveInProgress: false
			};
		},

		initialize: function( options ) {
			// Load post action states dictionary
			var postActionStateDict = $( '.o2-post-action-states-dict' );
			if ( postActionStateDict.length ) {
				o2.PostActionStates.stateDictionary = $.parseJSON( postActionStateDict.text() );
			}

			this.posts = options.posts || new o2.Collections.Posts();
			this.appState = this.initialAppState();

			// Set up Moment.js to handle time strings
			moment.locale( o2.options.i18nLanguage, o2.options.i18nMoment );
			o2.options.dateFormat = o2.Utilities.phpToMoment( o2.options.dateFormat );
			o2.options.timeFormat = o2.Utilities.phpToMoment( o2.options.timeFormat );

			// Create a global user cache for everyone to read from
			// and for us to bootstrap into
			o2.UserCache = new o2.Collections.Users( { userDataURL: o2.options.userDataURL } );
			this.bootstrapUsers();

			// Sign up for interesting events
			this.listenTo( o2.Events.dispatcher, 'notify-app.o2', this.onNotifyApp );
			o2.Events.doAction( 'preload.o2' );
			o2.$appContainer.html('').show();

			// Prepend the Front Side Posting box (if appropriate)
			if ( ( typeof window._wpGutenbergPost === 'undefined' ) && o2.options.showFrontSidePostBox && o2.currentUser.canPublishPosts ) {
				this.frontSidePost = new o2.Models.Post( {
					type: 'post',
					editing: true,
					userLogin: o2.currentUser.userLogin
				} );

				this.frontSidePostView = new o2.Views.FrontSidePost( {
					model:           this.frontSidePost,
					template:        'front-side-new-post-edit',
					postPrompt:      o2.options.frontSidePostPrompt,
					currentUser:     o2.currentUser
				} );
				// Render the editor and inject it into the DOM, either in
				// #o2-new-post-container (if it exists), or at the top of the appContainer.
				this.frontSidePostView.render();
				var newPost = $( '#o2-new-post-container' );
				if ( newPost.length > 0 ) {
					newPost.append( this.frontSidePostView.el );
				} else {
					o2.$appContainer.html( this.frontSidePostView.el );
				}
				this.frontSidePostView.activateEditor();
			}

			// Create a pageMeta model
			this.pageMeta = new o2.Models.PageMeta( {
				pageTitle : o2.options.pageTitle,
				isSingle  : 'single' === o2.options.viewType  ? true : false,
				isPage    : 'page'   === o2.options.viewType  ? true : false,
				is404     : '404'    === o2.options.viewType  ? true : false,
				isSearch  : 'search' === o2.options.viewType  ? true : false,
				isPreview : true     === o2.options.isPreview ? true : false,
				havePosts : o2.options.havePosts
			} );

			// Check for bootstrap data and set it up if found
			if ( 'undefined' !== typeof options.data ) {
				_.each( options.data, function( datum ) {
					if ( 'post' === datum.type ) {
						this.addPost( datum );
					} else if ( 'comment' === datum.type ) {
						this.addComment( datum );
					} else {
						if ( window.console ) {
							window.console.log( 'unrecognized data type in bootstrap - ignoring', datum.type );
						}
					}
				}, this );
			}

			if ( 'undefined' !== typeof o2Keyboard ) {
				o2Keyboard.init( this.pageMeta );
			}

			// @todo create an app view instead of defining this in router initialize
			// make the app view template driven
			// the app view will display a Threads View
			// the app view will replace o2.options.appContainer

			// Prepend the app header view
			// We use a pageMeta model because conceivably in a future version the title may change
			// as we navigate, and using a model means the view will update automagically
			// as we update the model
			this.appHeaderView = new o2.Views.AppHeader( {
				model:        this.pageMeta,
				template:     'app-header',
				showTitle:    'single' === o2.options.viewType ? false : true,
				showComments: o2.options.showCommentsInitially
			} );
			o2.$appContainer.append( this.appHeaderView.render().el );

			// Display the thread(s)
			this.postsView = new o2.Views.Posts( {
				collection          : this.posts,
				postTemplate        : 'post-view',
				noPostsPostTemplate : 'no-posts-post-view',
				showNavigation      : 'single' === o2.options.viewType ? true : false,
				highlightOnAdd      : false,
				showTitles          : 'page' === o2.options.viewType ? false : true, // if a page, never show title in thread - show in header
				userMustBeLoggedInToComment: o2.options.userMustBeLoggedInToComment,
				requireUserNameAndEmailIfNotLoggedIn: o2.options.requireUserNameAndEmailIfNotLoggedIn,
				loginURL            : o2.options.loginURL,
				currentUser         : o2.currentUser,
				showComments        : o2.options.showCommentsInitially,
				threadCommentsDepth : o2.options.threadCommentsDepth
			} );

			o2.Events.doAction( 'pre-postsView-render.o2' );
			o2.$appContainer.addClass( 'current-user-' + o2.currentUser.userNicename ).append( this.postsView.render().el );
			o2.Events.doAction( 'post-postsView-render.o2' );

			// If we're on the blog home page, and we have no posts, say as much
			if ( 'home' === o2.options.viewType && 0 === this.posts.length ) {
				this.postsView.addNoPostsPost();
			}

			// Inject the search form as appropriate
			if ( '404' === o2.options.viewType || ( 'search' === o2.options.viewType && ! this.posts.length ) ) {
				var invitation = '';
				if ( '404' === o2.options.viewType ) {
					invitation = o2.strings.pageNotFound;
				} else {
					invitation = o2.strings.searchFailed;
				}
				this.searchMeta = new o2.Models.SearchMeta( {
					invitation: invitation,
					lastQuery: o2.options.searchQuery
				} );
				this.SearchForm = new o2.Views.SearchForm( {
					model:    this.searchMeta,
					template: 'search-form'
				} );
				this.SearchForm.render();
				o2.$appContainer.append( this.SearchForm.el );
			}

			// Display page navigation (e.g. /page/3 /page/2)
			// create a new model with the prev and next page links
			// render the template using it
			// in the future we could use app routing instead
			if ( o2.$body.hasClass( 'infinite-scroll' ) && o2.options.infiniteScroll ) {

			} else {
				this.appFooterView = new o2.Views.AppFooter( {
					model:    this.pageMeta,
					template: 'app-footer'
				} );
				this.appFooterView.render();
				o2.$appContainer.append( this.appFooterView.el );
			}

			// If replytocom is defined as a URL parameter, open a reply to that comment
			var replytocomRegExp = new RegExp( '[?&]replytocom=(-?[0-9]+)' );
			var replytocom = replytocomRegExp.exec( Backbone.history.location.search );

			// Grab the 0th post ID for opening replies
			var openReplyPostID = 0;
			if ( this.posts.length ) {
				openReplyPostID = this.posts.at(0).get( 'id' );
			}

			// If a comment ID is in the hash, and we're allowed to comment
			// to it, then automatically open a reply to that comment
			var locationHash = Backbone.history.location.hash;
			if ( locationHash.substring(0, 9) === '#comment-' ) {
				var commentID = locationHash.split( '-' )[1],
					post = this.posts.get( openReplyPostID ),
					comment = post.comments.get( commentID );

				if ( ( 'undefined' !== typeof comment ) && ( comment.get( 'depth' ) < o2.options.threadCommentsDepth ) ){
					o2.Events.dispatcher.trigger( 'open-reply.o2', { postID: openReplyPostID, parentCommentID: commentID } );
				}
			} else if ( replytocom ) {
				o2.Events.dispatcher.trigger( 'open-reply.o2', { postID: openReplyPostID, parentCommentID: replytocom[1] } );
			} else if ( ( 'single' === o2.options.viewType ) || ( 'page' === o2.options.viewType ) ) {
				// If we don't have a comment ID, automatically open a reply on single posts or pages
				o2.Events.dispatcher.trigger( 'open-reply.o2', { postID: openReplyPostID, parentCommentID: 0, focus: false } );
			}

			// Re-enable highlighting of new content going forward
			o2.Events.dispatcher.trigger( 'update-posts-view-options.o2', { highlightOnAdd: true } );
			o2.Events.dispatcher.trigger( 'update-post-view-options.o2', { highlightOnAdd: true } );

			// Open default notifications collection
			o2.Notifications.open();

			// If a hash (fragment identifier) was provided, 1) set a trigger to scroll
			// back to it on unload so browsers don't cache unusual positions and 2)
			// actually scroll to it too.
			// See http://stackoverflow.com/questions/7035331/prevent-automatic-browser-scroll-on-refresh
			if ( window.location.hash ) {
				// Scroll to the fragment identifer
				setTimeout( function () {
					var fragment = $( document.body ).find( window.location.hash );
					if ( fragment.length ) {
						var scrollY = fragment.offset().top - 30;
						window.scrollTo( 0, scrollY );
					}
				}, 1500 );
			}

			// Highlight search terms if this is a search. Re-highlights after toggling edit
			// mode to catch "new" text on the page.
			o2.$appContainer.on( 'ready.o2 toggle-edit.o2 post-infinite-scroll-response.o2', function( event, state ) {
				if ( false === state || undefined === state ) {
					if ( 'undefined' !== typeof o2.options.queryVars && 'undefined' !== typeof o2.options.queryVars.s ) {
						var terms = o2.options.queryVars.s.split( ' ' );
						$( '.o2-posts' ).highlight( terms );
					}
				}
			} );

			// Listen for scrollTo events
			o2.$appContainer.on( 'scroll-to.o2', function( event, domRef ) {
				o2.App.postsView.scrollTo( domRef );
			} );

			// We're rendered
			o2.Events.doAction( 'ready.o2' );
		},

		bootstrapUsers: function() {
			var that = this; // keep a reference to the app
			$( '.o2-user-data' ).each( function( index, element ) {
				var me = $( element );
				var userdatum = $.parseJSON( me.text() );
				_.each( userdatum, function( frag ) {
					that.addUser( frag );
				} );
			} );
			$( '.o2-user-data' ).remove();
		},

		addPost: function( post ) {
			var incomingPost = new o2.Models.Post( post );

			// We do a manual check to avoid re-rendering things we already
			// have locally, which we probably created/edited ourselves
			var foundPost = this.posts.get( incomingPost );
			if ( 'undefined' !== typeof foundPost && foundPost.get( 'unixtimeModified' ) === incomingPost.get( 'unixtimeModified' ) ) {
				foundPost.set( post, { silent: true } );
			} else {
				this.posts.add( incomingPost, { merge: true } );
			}

			// If we are on a page ( is_page() ) then grab the title of the singular
			// "post" and set it into the pagemeta model to update our page title
			if ( 'page' === o2.options.viewType ) {
				this.pageMeta.set( 'pageTitle', incomingPost.get( 'titleFiltered' ) );
			}

			// Anyone else want this?
			o2.Events.dispatcher.trigger( 'data-received.o2', { type: 'post', data: post } );
		},

		removePost: function( post ) {
			var postToRemove = this.posts.findWhere( { id: post.id } );

			// Remove the post from the posts collection if found.
			if ( 'undefined' !== typeof postToRemove ) {

				// Redirect to home if currently on a single view.
				if ( 0 !== parseInt( o2.options.postId, 10 ) ) {

					o2.Notifications.add( {
						text: o2.strings.redirectedHomeString,
						url: false,
						type: 'redirectedHome',
						sticky: false,
						popup: false,
						dismissable: true
					} );

					// Redirect to home page if currently in a single post/page view.
					window.location.href = o2.options.homeURL;
				} else {

					// Remove the post if currently in a list view.
					this.posts.remove( postToRemove );

					// Anyone else want this?
					o2.Events.dispatcher.trigger( 'post-remove.o2', { type: 'post', data: post } );
				}
			}
		},

		addComment: function( comment ) {
			// find the thread that's handling the post this comment belongs to
			// note:  it is possible that the thread isn't on this page
			// and if so, this is a no-op
			var post = this.posts.get( comment.postID );

			if ( post ) {
				// Can't do a modified timestamp check on comments (yet) because they don't have one
				// @todo Figure out a way (commentmeta?) to track modified time.

				/*
				 * If prevDeleted is then let's update the model for the deleted comment with this comment's data
				 * Else, add the comment like normal.
				 */

				var prevDeleted     = parseInt( comment.prevDeleted, 10 ),
					commentToRemove = post.comments.get( prevDeleted );

				if ( ! _.isUndefined( commentToRemove ) ) {

					commentToRemove.set( comment );

					var childModels = this.getChildModels( post, comment.id );

					_.each( childModels, function( model ) {
						model.set( { parentID: comment.id } );
					});
				} else {
					var incomingComment = new o2.Models.Comment( comment );
					post.comments.add( incomingComment, { merge: true } );
				}
			}

			// Anyone else want this?
			o2.Events.dispatcher.trigger( 'data-received.o2', { type: 'comment', data: comment } );
		},

		childHasTrashedSessionOrApproved: function( comment ) {
			var post = this.posts.get( comment.get( 'postID' ) );

			if ( post ) {
				var children = this.getChildModels( post, comment.get( 'id' ) );

				// Searches children until finding approved or trashed session, then returns that element.
				var found = _.find( children, function( child ) {
					return ( child.get( 'approved' ) || child.has( 'trashedSession' ) );
				});

				if ( ! _.isUndefined( found ) ) {
					return true;
				}
			}

			return false;
		},

		cleanUpTrashedParents: function( post, comment ) {
			// First, let's check to make sure that no children are approved and/or in trashedSession state
			if ( ! this.childHasTrashedSessionOrApproved( post, comment ) && 0 < comment.get( 'parentID' ) ) {
				var parent = post.comments.get( comment.get( 'parentID' ) );
				if ( ! _.isUndefined( parent ) && parent.get( 'isTrashed' ) && ! parent.has( 'trashedSession' ) ) {
					var children = post.comments.where( { parentID: parent.get( 'id' ), approved: true } );

					// If the passed in comment has no approved siblings, then remove comment
					if ( 0 === children.length ) {
						this.removeComment( parent.toJSON() );
						this.cleanUpTrashedParents( post, parent );
					}
				}
			}
		},

		getChildModels: function( post, commentID ) {
			var children = post.comments.where( { parentID: commentID } );

			if ( children.length > 0 ) {
				_.each( children, function( child ){
					var temp = children.concat( o2.App.getChildModels( post, child.get( 'id' ) ) );
					children = temp;
				});
			}

			return children;
		},

		removeComment: function( comment ) {
			var post = this.posts.get( comment.postID );

			if ( post ) {
				var commentToRemove = post.comments.get( comment.id );

				// If both post and commentToRemove are set
				if ( ! _.isUndefined( commentToRemove ) ) {
					if ( ! commentToRemove.has( 'trashedSession' ) && ! this.childHasTrashedSessionOrApproved( commentToRemove ) ) {
						post.comments.remove( commentToRemove );
						o2.Events.dispatcher.trigger( 'comment-deleted.o2', { type: 'comment', data: comment } );
						this.cleanUpTrashedParents( post, commentToRemove );
					}
				}
			}
		},

		addUser: function( user ) {
			o2.UserCache.addOrUpdate( user );
		},

		suppressHighlighting: function() {
			o2.Events.dispatcher.trigger( 'update-posts-view-options.o2', { highlightOnAdd: false } );
		},

		allowHighlighting: function() {
			o2.Events.dispatcher.trigger( 'update-posts-view-options.o2', { highlightOnAdd: true } );
		},

		onNotifyApp: function( state ) {
			this.appState = _.extend( this.appState, state );
		},

		onLoggedInStateChange: function( isLoggedIn ) {
			var firstWithReloginType = o2.Notifications.notifications.findFirst( 'relogin' );

			if ( ! isLoggedIn ) {
				o2.$appContainer.removeClass( 'current-user-' + o2.currentUser.userNicename );

				// If there is no relogin notification, add one
				if ( 'undefined' === typeof firstWithReloginType ) {
					o2.Notifications.add( {
						text: o2.strings.reloginPrompt,
						url: o2.options.loginWithRedirectURL,
						type: 'relogin',
						sticky: false,
						popup: true,
						dismissable: false
					} );
				}
			} else {
				o2.$appContainer.addClass( 'current-user-' + o2.currentUser.userNicename );

				// Remove any relogin notifications
				if ( 'undefined' !== typeof firstWithReloginType ) {
					firstWithReloginType.destroy();
				}

				// Let the user know all is well again
				o2.Notifications.add( {
					text: o2.strings.reloginSuccessful,
					type: 'relogin',
					sticky: false,
					dismissable: true
				} );

				// Automatically get rid of this message in a few seconds
				setTimeout( function() {
					var firstWithReloginType = o2.Notifications.notifications.findFirst( 'relogin' );
					if ( 'undefined' !== typeof firstWithReloginType ) {
						firstWithReloginType.destroy();
					}
				}, 3000 );
			}
		},

		onLogInComplete: function() {
			// This event is triggered by the popup window completing login successfully
			// Let's remove any login notification
			var firstWithReloginType = o2.Notifications.notifications.findFirst( 'relogin' );
			if ( 'undefined' !== typeof firstWithReloginType ) {
				firstWithReloginType.destroy();
			}
		},

		/*
		 * okToNavigate returns an empty string if it is OK to navigate away
		 * from the page, or a displayable localized string if it is not
		 */
		okToNavigate: function() {
			if ( this.appState.saveInProgress ) {
				return o2.strings.saveInProgress;
			}

			if ( o2Editor.hasChanges() ) {
				return o2.strings.unsavedChanges;
			}

			return '';
		}
	} );
} )( jQuery, Backbone );

/*
 * Start up o2 with optional bootstrap data+options (array of fragments)
 */
( function( $ ) {
	o2.start = function( bootstrap ) {
		o2.App = o2.App || new o2.Routers.App( bootstrap );
		return o2.App;
	};

	/*
	 * Pass infinite scroll data into o2
	 */
	$( document ).on( 'post-load', function() {
		o2.Events.doAction( 'pre-infinite-scroll-response.o2' );
		$( '.infinite-wrap .o2-data' ).each( function() {
			o2.Notifications.close();
			o2.App.suppressHighlighting();
			var me = $( this );
			var post;
			try {
				post = $.parseJSON( me.text() );
			} catch ( e ) {
				post = false;
				if ( window.console ) {
					window.console.log( '$.parseJSON failure: ' + me.text() );
				}
			}
			if ( false !== post ) {
				o2.App.addPost( post );
			}
			o2.Notifications.open();
			o2.App.allowHighlighting();
		} );
		$( '.infinite-wrap' ).remove();
		$( '.infinite-loader' ).remove();
		o2.$body.trigger( 'pd-script-load' );
		o2.Events.doAction( 'post-infinite-scroll-response.o2' );
	} );

	/*
	 * Check for unfinished business before allowing navigation
	 */
	$( window ).bind( 'beforeunload', function () {
		if ( 'undefined' !== typeof o2.App ) {
			var navigateWarning = o2.App.okToNavigate();
			if ( navigateWarning.length > 0 ) {
				return navigateWarning;
			}
		}
	} );

	/*
	 * Increment time since every 2 minutes
	 */
	setInterval( function() {
		$( '.o2-timestamp' ).each( function() {
			o2.Utilities.timestamp( $( this ) );
		} );
	}, 60000 );

} )( jQuery );

/* Disable document.write to avoid scripts added with posts
 * from executing it after the DOM is loaded (and thus removing
 * all the elements from the document)
 */

/* jshint ignore:start */

o2.originalWrite = document.write;

document.write = function() {
	if ( 'undefined' !== typeof jQuery && jQuery.isReady ) {
		if ( 'undefined' !== typeof console && console.warn ) {
			console.warn( 'document.write called after page load and ignored' );
		}
	} else {
		return Function.prototype.apply.call( o2.originalWrite, document, arguments );
	}
};

/* jshint ignore:end */
;
var o2 = o2 || {};

o2.Utilities = o2.Utilities || {};

( function( $ ) {
	o2.Utilities.HighlightOnInview = function( event, visible ) {
		if ( visible ) {
			$( this ).unbind( 'inview' );
			var originalBackgroundColor = $( this ).css( 'background-color' );
			$( this ).css( 'background-color', '#f6f3d1' );
			$( this ).animate( { 'background-color': originalBackgroundColor }, 3000 );
		}
	};
} )( jQuery );
;
var o2 = o2 || {};

o2.Utilities = o2.Utilities || {};

o2.Utilities.isValidEmail = function( email_address_to_validate ) {
	var regExp = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
	return regExp.test( email_address_to_validate );
};
;
var o2 = o2 || {};

o2.Models = o2.Models || {};

o2.Models.SearchMeta = ( function( Backbone ) {
	return Backbone.Model.extend( {
		defaults: function() {
			return {
				invitation: '',
				lastQuery: ''
			};
		}
	} );
} )( Backbone );
;
( function( $ ) {
	var hidden = 'hidden', $doc = $( document );

	// Standards:
	if ( hidden in document ) {
		// Do nothing, presumably the browser knows how to keep document.hidden up to date
	} else if ( ( hidden = 'mozHidden' ) in document ) {
		$doc.on( 'mozvisibilitychange', onchange );
		document.hidden = document[ hidden ];
	} else if ( ( hidden = 'webkitHidden' ) in document ) {
		$doc.on( 'webkitvisibilitychange', onchange );
		document.hidden = document[ hidden ];
	} else if ( ( hidden = 'msHidden' ) in document ) {
		$doc.on( 'msvisibilitychange', onchange );
		document.hidden = document[ hidden ];
	} else if ( 'onfocusin' in document ) {
		// IE 9 and lower:
		$doc.on( 'focusin focusout',  onchange );
		document.hidden = ! document.hasFocus();
	} else {
		// All others:
		$( window ).on( 'pageshow pagehide focus blur', onchange );

		if ( 'hasFocus' in document ) {
			document.hidden = ! document.hasFocus();
		}
	}

	function onchange ( e ) {
		var evtMap = {
			focus:    false,
			focusin:  false,
			pageshow: false,
			blur:     true,
			focusout: true,
			pagehide: true
		};

		e = e || window.event;
		if ( e.type in evtMap ) {
			document.hidden = evtMap[ e.type ];
		} else {
			document.hidden = this[ hidden ];
		}
	}
} )( jQuery );
;
/*! http://mths.be/placeholder v2.0.7 by @mathias */
/* Needed for IE8, IE9 which lack input placeholder */
;( function( window, document, $ ) {

	var isInputSupported = 'placeholder' in document.createElement( 'input' ),
		isTextareaSupported = 'placeholder' in document.createElement( 'textarea' ),
		prototype = $.fn,
		valHooks = $.valHooks,
		hooks,
		placeholder;

	if ( isInputSupported && isTextareaSupported ) {

		placeholder = prototype.placeholder = function() {
			return this;
		};

		placeholder.input = placeholder.textarea = true;

	} else {

		placeholder = prototype.placeholder = function() {
			var $this = this;
			$this
				.filter( ( isInputSupported ? 'textarea' : ':input' ) + '[placeholder]' )
				.not( '.placeholder' )
				.bind( {
					'focus.placeholder': clearPlaceholder,
					'blur.placeholder': setPlaceholder
				} )
				.data( 'placeholder-enabled', true )
				.trigger( 'blur.placeholder' );
			return $this;
		};

		placeholder.input = isInputSupported;
		placeholder.textarea = isTextareaSupported;

		hooks = {
			'get': function( element ) {
				var $element = $( element );
				return $element.data( 'placeholder-enabled' ) && $element.hasClass( 'placeholder' ) ? '' : element.value;
			},
			'set': function( element, value ) {
				var $element = $( element );
				if ( !$element.data( 'placeholder-enabled' ) ) {
					return element.value = value;
				}
				if ( value == '' ) {
					element.value = value;
					// Issue #56: Setting the placeholder causes problems if the element continues to have focus.
					if ( element != document.activeElement ) {
						// We can't use `triggerHandler` here because of dummy text/password inputs :(
						setPlaceholder.call( element );
					}
				} else if ( $element.hasClass( 'placeholder' ) ) {
					clearPlaceholder.call( element, true, value ) || ( element.value = value );
				} else {
					element.value = value;
				}
				// `set` can not return `undefined`; see http://jsapi.info/jquery/1.7.1/val#L2363
				return $element;
			}
		};

		isInputSupported || ( valHooks.input = hooks );
		isTextareaSupported || ( valHooks.textarea = hooks );

		$( function() {
			// Look for forms
			$( document ).delegate( 'form', 'submit.placeholder', function() {
				// Clear the placeholder values so they don't get submitted
				var $inputs = $( '.placeholder', this ).each( clearPlaceholder );
				setTimeout( function() {
					$inputs.each( setPlaceholder );
				}, 10 );
			} );
		} );

		// Clear placeholder values upon page reload
		$( window ).bind( 'beforeunload.placeholder', function() {
			$( '.placeholder' ).each( function() {
				this.value = '';
			} );
		} );
	}

	function args( elem ) {
		// Return an object of element attributes
		var newAttrs = {},
			rinlinejQuery = /^jQuery\d+$/;
		$.each( elem.attributes, function( i, attr ) {
			if ( attr.specified && !rinlinejQuery.test( attr.name ) ) {
				newAttrs[attr.name] = attr.value;
			}
		} );
		return newAttrs;
	}

	function clearPlaceholder( event, value ) {
		var input = this,
		$input = $( input );
		if ( input.value == $input.attr( 'placeholder' ) && $input.hasClass( 'placeholder' ) ) {
			if ( $input.data( 'placeholder-password' ) ) {
				$input = $input.hide().next().show().attr( 'id', $input.removeAttr( 'id' ).data( 'placeholder-id' ) );
				// If `clearPlaceholder` was called from `$.valHooks.input.set`
				if ( event === true ) {
					return $input[0].value = value;
				}
				$input.focus();
			} else {
				input.value = '';
				$input.removeClass( 'placeholder' );
				input == document.activeElement && input.select();
			}
		}
	}

	function setPlaceholder() {
		var $replacement,
			input = this,
			$input = $( input ),
			$origInput = $input,
			id = this.id;
		if ( input.value == '' ) {
			if ( input.type == 'password' ) {
				if ( !$input.data( 'placeholder-textinput' ) ) {
					try {
						$replacement = $input.clone().attr( { 'type': 'text' } );
					} catch(e) {
						$replacement = $( '<input>' ).attr( $.extend( args( this ), { 'type': 'text' } ) );
					}
					$replacement
						.removeAttr( 'name' )
						.data( {
							'placeholder-password': true,
							'placeholder-id': id
						} )
						.bind( 'focus.placeholder', clearPlaceholder );
					$input
						.data( {
							'placeholder-textinput': $replacement,
							'placeholder-id': id
						} )
						.before( $replacement );
				}
				$input = $input.removeAttr( 'id' ).hide().prev().attr( 'id', id ).show();
				// Note: `$input[0] != input` now!
			}
			$input.addClass( 'placeholder' );
			$input[0].value = $input.attr( 'placeholder' );
		} else {
			$input.removeClass( 'placeholder' );
		}
	}

}( this, document, jQuery ) );
;
var o2 = o2 || {};

o2.Polling = ( function( $ ) {
	/*
	 * Methods used to control polling are all contained within this object.
	 * @todo Add websocket support
	 */
	return {
		cache: [],

		/*
		 * Make a request to the polling endpoint.
		 */
		poll: function() {
			var data = {
				queryVars: o2.options.queryVars,
				since: o2.options.loadTime,
				rando: Math.random(),
				scripts: o2.options.scripts.join(),
				styles: o2.options.styles.join(),
				postId: o2.options.postId
			};

			o2.Events.doAction( 'poll-request.o2', data );

			o2.options.currentRequest = Date.now();
			$.ajax( {
				method: 'POST',
				dataType:  'json',
				url:       o2.options.readURL + '&method=poll',
				xhrFields: {
					withCredentials: true
				},
				data: data,
				success: function( response ) {
					if ( response.success && response.data ) {
						response = response.data;
					} else {
						return;
					}

					o2.Events.doAction( 'poll-response.o2', response );

					// Update our nonce
					if ( 'undefined' !== typeof response.newNonce ) {
						o2.options.nonce = response.newNonce;
					}

					// Update our logged in state
					if ( 'undefined' === typeof o2.lastKnownLoggedInState ) {
						o2.lastKnownLoggedInState = ( o2.currentUser.userLogin.length !== 0 );
					}
					if ( 'undefined' !== typeof response.loggedIn ) {
						// If we were logged in at first, update the app on our current condition
						if ( o2.lastKnownLoggedInState !== response.loggedIn ) {
							o2.App.onLoggedInStateChange( response.loggedIn );
						}

						o2.lastKnownLoggedInState = response.loggedIn;
					}

					// Consume the data
					if ( 'undefined' !== typeof response.data && response.data.length ) {
						// Next poll starts from now, since we got current data
						o2.options.loadTime = o2.options.currentRequest;
						// Add polled data to cache
						o2.Polling.cache = o2.Polling.cache.concat( response.data );
					} else {
						// Nothing new, next check will be from previous time again
						o2.options.currentRequest = null;
					}

					// Process scripts and styles
					if ( 'undefined' !== typeof response.scripts && response.scripts.length ) {

						$( response.scripts ).each( function() {
							o2.options.scripts.push( this.handle );

							// Output extra data, if present
							if ( this.extra_data ) {
								var data = document.createElement( 'script' ),
									dataContent = document.createTextNode( '//<![CDATA[ \n' + this.extra_data + '\n//]]>' );

								data.type = 'text/javascript';
								data.appendChild( dataContent );

								document.getElementsByTagName( this.footer ? 'body' : 'head' )[0].appendChild( data );
							}

							// Build script tag and append to DOM in requested location
							var script = document.createElement( 'script' );
							script.type = 'text/javascript';
							script.src = this.src;
							script.id = this.handle;
							document.getElementsByTagName( this.footer ? 'body' : 'head' )[0].appendChild( script );
						} );
					}

					if ( 'undefined' !== typeof response.styles && response.styles.length ) {
						$( response.styles ).each( function() {
							if ( 'undefined' === typeof this.src ) {
								return;
							}

							o2.options.styles.push( this.handle );

							// Build link tag
							var style = document.createElement( 'link' );
							style.rel = 'stylesheet';
							style.href = this.src;
							style.id = this.handle + '-css';

							// @todo Handle IE conditionals

							// Append link tag if necessary
							if ( style ) {
								document.getElementsByTagName('head')[0].appendChild(style);
							}
						} );
					}

					// Check to see if we can process the cache
					var okToProcessCache = true;

					if ( 'undefined' === typeof o2.Polling.cache || 0 === o2.Polling.cache.length ) {
						// don't process if there is nothing to process
						okToProcessCache = false;
					} else if ( $( '.o2-editor-text' ).is( ':focus' ) ) {
						// don't process if someone is editing something - avoids screen moving around on people
						okToProcessCache = false;
					} else if ( o2.App.appState.saveInProgress ) {
						// don't process if we are in the middle of saving something - avoids duplicate comments appearing briefly
						okToProcessCache = false;
					}

					if ( okToProcessCache ) {
						data = o2.Polling.cache;
						o2.Polling.cache = [];
						var htmlAdded = '';

						// Add it to the collection (auto-model enabled)
						for ( var m = 0, dl = data.length; m < dl; m++ ) {
							// ask the app to add (or update) the item
							if ( 'post' === data[m].type ) {
								if ( data[m].isTrashed ) {
									o2.App.removePost( data[m] );
								} else {
									o2.App.addPost( data[m] );
									htmlAdded += data[m].contentFiltered;
								}
							} else {
								if ( data[m].isTrashed && ! data[m].hasChildren ) {
                                    o2.App.removeComment( data[m] );
								} else {
									o2.App.addComment( data[m] );
									htmlAdded += data[m].contentFiltered;
								}
							}
						}

						// Run triggers after cache is processed.  o2s don't load mejs, but infinite
						// scroll expects html to be passed with the event trigger.
						o2.$body.trigger( 'pd-script-load' ).trigger( 'post-load', { 'html' : htmlAdded } );
					}
					o2.Events.doAction( 'poll-response-processed.o2' );
					o2.options.poller = setTimeout( o2.Polling.poll, o2.options.pollingInterval );
				},
				error: function() {
					o2.options.poller = setTimeout( o2.Polling.poll, o2.options.pollingInterval );
				}
			} );
		},

		/*
		 * Turn on polling, which will happen according to the pollingInterval
		 */
		start: function( period ) {
			if ( undefined === period ) {
				period = o2.options.pollingInterval;
			} else {
				o2.options.pollingInterval = period; // Change default to last used
			}

			o2.Events.doAction( 'poll-start.o2' );

			clearTimeout( o2.poller ); // just in case start was called twice in a row
			o2.options.poller = setTimeout( o2.Polling.poll, period );
		},

		/*
		 * Stop polling the endpoint. Use o2.Polling.start() to turn it back on.
		 */
		stop: function() {
			o2.Events.doAction( 'poll-stop.o2' );
			clearTimeout( o2.options.poller );
			o2.Polling.cache = [];
		}
	};
} )( jQuery );
;
var o2 = o2 || {};

o2.Query = ( function( $ ) {
	/*
	 * Utility for plugins to get data from the server
	 */
	return {
		/*
		 * Make a request to the query endpoint
		 */
		query: function( e ) {
			$.ajax( {
				dataType:  'json',
				url:       o2.options.readURL + '&method=query',
				xhrFields: {
					withCredentials: true
				},
				data: e.data,
				success: function( response ) {

					// Raise a targeted event with the data
					e.target.trigger( e.data.callback, response.data );
				},
				error: function( jqXHR, textStatus, errorThrown ) {
					e.target.trigger( e.data.callback + '-error', {
						jqXHR: jqXHR,
						textStatus: textStatus,
						errorThrown: errorThrown
					} );
				}
			} );
		}
	};
} )( jQuery );
;
var o2 = o2 || {};

o2.Utilities = o2.Utilities || {};

o2.Utilities.Template = function( id ) {
	return wp.template( 'o2-' + id );
};
;
var o2 = o2 || {};

o2.Views = o2.Views || {};

o2.Views.SearchForm = ( function() {
	return wp.Backbone.View.extend( {
		tagName: 'article',

		defaults: {},

		initialize: function( options ) {
			this.options = _.extend( this.defaults, options );
		},

		render: function() {
			var template = o2.Utilities.Template( this.options.template );
			var jsonifiedModel = this.model.toJSON();
			jsonifiedModel.strings = o2.strings;
			this.$el.html( template( jsonifiedModel ) );
			return this;
		}
	} );
} )();
;
//     Cocktail.js 0.3.0
//     (c) 2012 Onsi Fakhouri
//     Cocktail.js may be freely distributed under the MIT license.
//     http://github.com/onsi/cocktail
(function() {
    var Cocktail;

    if (typeof exports !== 'undefined') {
        Cocktail = exports;
    } else {
        Cocktail = this.Cocktail = {};
    }

    Cocktail.mixins = {};

    Cocktail.mixin = function mixin(klass) {
        var mixins = _.chain(arguments).toArray().rest().flatten().value();

        var collisions = {};

        _(mixins).each(function(mixin) {
            if (_.isString(mixin)) {
                mixin = Cocktail.mixins[mixin];
            }
            _(mixin).each(function(value, key) {
                if (_.isFunction(value)) {
                    if (klass.prototype[key]) {
                        collisions[key] = collisions[key] || [klass.prototype[key]];
                        collisions[key].push(value);
                    }
                    klass.prototype[key] = value;
                } else if (_.isObject(value)) {
                    klass.prototype[key] = _.extend({}, value, klass.prototype[key] || {});
                }
            });
        });

        _(collisions).each(function(propertyValues, propertyName) {
            klass.prototype[propertyName] = function() {
                var that = this,
                    args = arguments,
                    returnValue = undefined;

                _(propertyValues).each(function(value) {
                    var returnedValue = _.isFunction(value) ? value.apply(that, args) : value;
                    returnValue = (returnedValue === undefined ? returnValue : returnedValue);
                });

                return returnValue;
            }
        });
    };

    var originalExtend;

    Cocktail.patch = function patch(Backbone) {
        originalExtend = Backbone.Model.extend;

        var extend = function(protoProps, classProps) {
            var klass = originalExtend.call(this, protoProps, classProps);

            var mixins = klass.prototype.mixins;
            if (mixins && klass.prototype.hasOwnProperty('mixins')) {
                Cocktail.mixin(klass, mixins);
            }

            return klass;
        };

        _([Backbone.Model, Backbone.Collection, Backbone.Router, Backbone.View]).each(function(klass) {
            klass.mixin = function mixin() {
                Cocktail.mixin(this, _.toArray(arguments));
            }

            klass.extend = extend;
        });
    };

    Cocktail.unpatch = function unpatch(Backbone) {
        _([Backbone.Model, Backbone.Collection, Backbone.Router, Backbone.View]).each(function(klass) {
            klass.mixin = undefined;
            klass.extend = originalExtend;
        });
    };
})();
;
var StickyPostsExtendsCollectionsPosts = ( function() {
	return {
		actions: {
			initRecentComments: {
				handle: 'initRecentComments',
				on: 'initialize',
				doThis: function( args ) {
					// Only change the comparison if this is a recent comments view
					if ( 'undefined' !== typeof o2.options.queryVars.o2_recent_comments ) {
						var collection = args.collection;
						collection.comparison = 'recentComments';
					}
				},
				priority: 11 // Must run after sticky-posts
			}
		},

		comparators: {
			recentComments: function( post1, post2 ) {
				return -o2.Utilities.compareTimes( _.max( post1.comments.pluck( 'unixtime' ) ), _.max( post2.comments.pluck( 'unixtime' ) ) );
			}
		}
	};
} )();

Cocktail.mixin( o2.Collections.Posts, StickyPostsExtendsCollectionsPosts );
;
/*!
 * jQuery UI Core 1.11.4
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/category/ui-core/
 */
!function(a){"function"==typeof define&&define.amd?define(["jquery"],a):a(jQuery)}(function(a){function b(b,d){var e,f,g,h=b.nodeName.toLowerCase();return"area"===h?(e=b.parentNode,f=e.name,!(!b.href||!f||"map"!==e.nodeName.toLowerCase())&&(g=a("img[usemap='#"+f+"']")[0],!!g&&c(g))):(/^(input|select|textarea|button|object)$/.test(h)?!b.disabled:"a"===h?b.href||d:d)&&c(b)}function c(b){return a.expr.filters.visible(b)&&!a(b).parents().addBack().filter(function(){return"hidden"===a.css(this,"visibility")}).length}a.ui=a.ui||{},a.extend(a.ui,{version:"1.11.4",keyCode:{BACKSPACE:8,COMMA:188,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,LEFT:37,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SPACE:32,TAB:9,UP:38}}),a.fn.extend({scrollParent:function(b){var c=this.css("position"),d="absolute"===c,e=b?/(auto|scroll|hidden)/:/(auto|scroll)/,f=this.parents().filter(function(){var b=a(this);return(!d||"static"!==b.css("position"))&&e.test(b.css("overflow")+b.css("overflow-y")+b.css("overflow-x"))}).eq(0);return"fixed"!==c&&f.length?f:a(this[0].ownerDocument||document)},uniqueId:function(){var a=0;return function(){return this.each(function(){this.id||(this.id="ui-id-"+ ++a)})}}(),removeUniqueId:function(){return this.each(function(){/^ui-id-\d+$/.test(this.id)&&a(this).removeAttr("id")})}}),a.extend(a.expr[":"],{data:a.expr.createPseudo?a.expr.createPseudo(function(b){return function(c){return!!a.data(c,b)}}):function(b,c,d){return!!a.data(b,d[3])},focusable:function(c){return b(c,!isNaN(a.attr(c,"tabindex")))},tabbable:function(c){var d=a.attr(c,"tabindex"),e=isNaN(d);return(e||d>=0)&&b(c,!e)}}),a("<a>").outerWidth(1).jquery||a.each(["Width","Height"],function(b,c){function d(b,c,d,f){return a.each(e,function(){c-=parseFloat(a.css(b,"padding"+this))||0,d&&(c-=parseFloat(a.css(b,"border"+this+"Width"))||0),f&&(c-=parseFloat(a.css(b,"margin"+this))||0)}),c}var e="Width"===c?["Left","Right"]:["Top","Bottom"],f=c.toLowerCase(),g={innerWidth:a.fn.innerWidth,innerHeight:a.fn.innerHeight,outerWidth:a.fn.outerWidth,outerHeight:a.fn.outerHeight};a.fn["inner"+c]=function(b){return void 0===b?g["inner"+c].call(this):this.each(function(){a(this).css(f,d(this,b)+"px")})},a.fn["outer"+c]=function(b,e){return"number"!=typeof b?g["outer"+c].call(this,b):this.each(function(){a(this).css(f,d(this,b,!0,e)+"px")})}}),a.fn.addBack||(a.fn.addBack=function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}),a("<a>").data("a-b","a").removeData("a-b").data("a-b")&&(a.fn.removeData=function(b){return function(c){return arguments.length?b.call(this,a.camelCase(c)):b.call(this)}}(a.fn.removeData)),a.ui.ie=!!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase()),a.fn.extend({focus:function(b){return function(c,d){return"number"==typeof c?this.each(function(){var b=this;setTimeout(function(){a(b).focus(),d&&d.call(b)},c)}):b.apply(this,arguments)}}(a.fn.focus),disableSelection:function(){var a="onselectstart"in document.createElement("div")?"selectstart":"mousedown";return function(){return this.bind(a+".ui-disableSelection",function(a){a.preventDefault()})}}(),enableSelection:function(){return this.unbind(".ui-disableSelection")},zIndex:function(b){if(void 0!==b)return this.css("zIndex",b);if(this.length)for(var c,d,e=a(this[0]);e.length&&e[0]!==document;){if(c=e.css("position"),("absolute"===c||"relative"===c||"fixed"===c)&&(d=parseInt(e.css("zIndex"),10),!isNaN(d)&&0!==d))return d;e=e.parent()}return 0}}),a.ui.plugin={add:function(b,c,d){var e,f=a.ui[b].prototype;for(e in d)f.plugins[e]=f.plugins[e]||[],f.plugins[e].push([c,d[e]])},call:function(a,b,c,d){var e,f=a.plugins[b];if(f&&(d||a.element[0].parentNode&&11!==a.element[0].parentNode.nodeType))for(e=0;e<f.length;e++)a.options[f[e][0]]&&f[e][1].apply(a.element,c)}}});;
/*!
 * jQuery UI Widget 1.11.4
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/jQuery.widget/
 */
!function(a){"function"==typeof define&&define.amd?define(["jquery"],a):a(jQuery)}(function(a){var b=0,c=Array.prototype.slice;return a.cleanData=function(b){return function(c){var d,e,f;for(f=0;null!=(e=c[f]);f++)try{d=a._data(e,"events"),d&&d.remove&&a(e).triggerHandler("remove")}catch(g){}b(c)}}(a.cleanData),a.widget=function(b,c,d){var e,f,g,h,i={},j=b.split(".")[0];return b=b.split(".")[1],e=j+"-"+b,d||(d=c,c=a.Widget),a.expr[":"][e.toLowerCase()]=function(b){return!!a.data(b,e)},a[j]=a[j]||{},f=a[j][b],g=a[j][b]=function(a,b){return this._createWidget?void(arguments.length&&this._createWidget(a,b)):new g(a,b)},a.extend(g,f,{version:d.version,_proto:a.extend({},d),_childConstructors:[]}),h=new c,h.options=a.widget.extend({},h.options),a.each(d,function(b,d){return a.isFunction(d)?void(i[b]=function(){var a=function(){return c.prototype[b].apply(this,arguments)},e=function(a){return c.prototype[b].apply(this,a)};return function(){var b,c=this._super,f=this._superApply;return this._super=a,this._superApply=e,b=d.apply(this,arguments),this._super=c,this._superApply=f,b}}()):void(i[b]=d)}),g.prototype=a.widget.extend(h,{widgetEventPrefix:f?h.widgetEventPrefix||b:b},i,{constructor:g,namespace:j,widgetName:b,widgetFullName:e}),f?(a.each(f._childConstructors,function(b,c){var d=c.prototype;a.widget(d.namespace+"."+d.widgetName,g,c._proto)}),delete f._childConstructors):c._childConstructors.push(g),a.widget.bridge(b,g),g},a.widget.extend=function(b){for(var d,e,f=c.call(arguments,1),g=0,h=f.length;g<h;g++)for(d in f[g])e=f[g][d],f[g].hasOwnProperty(d)&&void 0!==e&&(a.isPlainObject(e)?b[d]=a.isPlainObject(b[d])?a.widget.extend({},b[d],e):a.widget.extend({},e):b[d]=e);return b},a.widget.bridge=function(b,d){var e=d.prototype.widgetFullName||b;a.fn[b]=function(f){var g="string"==typeof f,h=c.call(arguments,1),i=this;return g?this.each(function(){var c,d=a.data(this,e);return"instance"===f?(i=d,!1):d?a.isFunction(d[f])&&"_"!==f.charAt(0)?(c=d[f].apply(d,h),c!==d&&void 0!==c?(i=c&&c.jquery?i.pushStack(c.get()):c,!1):void 0):a.error("no such method '"+f+"' for "+b+" widget instance"):a.error("cannot call methods on "+b+" prior to initialization; attempted to call method '"+f+"'")}):(h.length&&(f=a.widget.extend.apply(null,[f].concat(h))),this.each(function(){var b=a.data(this,e);b?(b.option(f||{}),b._init&&b._init()):a.data(this,e,new d(f,this))})),i}},a.Widget=function(){},a.Widget._childConstructors=[],a.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",defaultElement:"<div>",options:{disabled:!1,create:null},_createWidget:function(c,d){d=a(d||this.defaultElement||this)[0],this.element=a(d),this.uuid=b++,this.eventNamespace="."+this.widgetName+this.uuid,this.bindings=a(),this.hoverable=a(),this.focusable=a(),d!==this&&(a.data(d,this.widgetFullName,this),this._on(!0,this.element,{remove:function(a){a.target===d&&this.destroy()}}),this.document=a(d.style?d.ownerDocument:d.document||d),this.window=a(this.document[0].defaultView||this.document[0].parentWindow)),this.options=a.widget.extend({},this.options,this._getCreateOptions(),c),this._create(),this._trigger("create",null,this._getCreateEventData()),this._init()},_getCreateOptions:a.noop,_getCreateEventData:a.noop,_create:a.noop,_init:a.noop,destroy:function(){this._destroy(),this.element.unbind(this.eventNamespace).removeData(this.widgetFullName).removeData(a.camelCase(this.widgetFullName)),this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName+"-disabled ui-state-disabled"),this.bindings.unbind(this.eventNamespace),this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus")},_destroy:a.noop,widget:function(){return this.element},option:function(b,c){var d,e,f,g=b;if(0===arguments.length)return a.widget.extend({},this.options);if("string"==typeof b)if(g={},d=b.split("."),b=d.shift(),d.length){for(e=g[b]=a.widget.extend({},this.options[b]),f=0;f<d.length-1;f++)e[d[f]]=e[d[f]]||{},e=e[d[f]];if(b=d.pop(),1===arguments.length)return void 0===e[b]?null:e[b];e[b]=c}else{if(1===arguments.length)return void 0===this.options[b]?null:this.options[b];g[b]=c}return this._setOptions(g),this},_setOptions:function(a){var b;for(b in a)this._setOption(b,a[b]);return this},_setOption:function(a,b){return this.options[a]=b,"disabled"===a&&(this.widget().toggleClass(this.widgetFullName+"-disabled",!!b),b&&(this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus"))),this},enable:function(){return this._setOptions({disabled:!1})},disable:function(){return this._setOptions({disabled:!0})},_on:function(b,c,d){var e,f=this;"boolean"!=typeof b&&(d=c,c=b,b=!1),d?(c=e=a(c),this.bindings=this.bindings.add(c)):(d=c,c=this.element,e=this.widget()),a.each(d,function(d,g){function h(){if(b||f.options.disabled!==!0&&!a(this).hasClass("ui-state-disabled"))return("string"==typeof g?f[g]:g).apply(f,arguments)}"string"!=typeof g&&(h.guid=g.guid=g.guid||h.guid||a.guid++);var i=d.match(/^([\w:-]*)\s*(.*)$/),j=i[1]+f.eventNamespace,k=i[2];k?e.delegate(k,j,h):c.bind(j,h)})},_off:function(b,c){c=(c||"").split(" ").join(this.eventNamespace+" ")+this.eventNamespace,b.unbind(c).undelegate(c),this.bindings=a(this.bindings.not(b).get()),this.focusable=a(this.focusable.not(b).get()),this.hoverable=a(this.hoverable.not(b).get())},_delay:function(a,b){function c(){return("string"==typeof a?d[a]:a).apply(d,arguments)}var d=this;return setTimeout(c,b||0)},_hoverable:function(b){this.hoverable=this.hoverable.add(b),this._on(b,{mouseenter:function(b){a(b.currentTarget).addClass("ui-state-hover")},mouseleave:function(b){a(b.currentTarget).removeClass("ui-state-hover")}})},_focusable:function(b){this.focusable=this.focusable.add(b),this._on(b,{focusin:function(b){a(b.currentTarget).addClass("ui-state-focus")},focusout:function(b){a(b.currentTarget).removeClass("ui-state-focus")}})},_trigger:function(b,c,d){var e,f,g=this.options[b];if(d=d||{},c=a.Event(c),c.type=(b===this.widgetEventPrefix?b:this.widgetEventPrefix+b).toLowerCase(),c.target=this.element[0],f=c.originalEvent)for(e in f)e in c||(c[e]=f[e]);return this.element.trigger(c,d),!(a.isFunction(g)&&g.apply(this.element[0],[c].concat(d))===!1||c.isDefaultPrevented())}},a.each({show:"fadeIn",hide:"fadeOut"},function(b,c){a.Widget.prototype["_"+b]=function(d,e,f){"string"==typeof e&&(e={effect:e});var g,h=e?e===!0||"number"==typeof e?c:e.effect||c:b;e=e||{},"number"==typeof e&&(e={duration:e}),g=!a.isEmptyObject(e),e.complete=f,e.delay&&d.delay(e.delay),g&&a.effects&&a.effects.effect[h]?d[b](e):h!==b&&d[h]?d[h](e.duration,e.easing,f):d.queue(function(c){a(this)[b](),f&&f.call(d[0]),c()})}}),a.widget});;
/*!
 * jQuery UI Mouse 1.11.4
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/mouse/
 */
!function(a){"function"==typeof define&&define.amd?define(["jquery","./widget"],a):a(jQuery)}(function(a){var b=!1;return a(document).mouseup(function(){b=!1}),a.widget("ui.mouse",{version:"1.11.4",options:{cancel:"input,textarea,button,select,option",distance:1,delay:0},_mouseInit:function(){var b=this;this.element.bind("mousedown."+this.widgetName,function(a){return b._mouseDown(a)}).bind("click."+this.widgetName,function(c){if(!0===a.data(c.target,b.widgetName+".preventClickEvent"))return a.removeData(c.target,b.widgetName+".preventClickEvent"),c.stopImmediatePropagation(),!1}),this.started=!1},_mouseDestroy:function(){this.element.unbind("."+this.widgetName),this._mouseMoveDelegate&&this.document.unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate)},_mouseDown:function(c){if(!b){this._mouseMoved=!1,this._mouseStarted&&this._mouseUp(c),this._mouseDownEvent=c;var d=this,e=1===c.which,f=!("string"!=typeof this.options.cancel||!c.target.nodeName)&&a(c.target).closest(this.options.cancel).length;return!(e&&!f&&this._mouseCapture(c))||(this.mouseDelayMet=!this.options.delay,this.mouseDelayMet||(this._mouseDelayTimer=setTimeout(function(){d.mouseDelayMet=!0},this.options.delay)),this._mouseDistanceMet(c)&&this._mouseDelayMet(c)&&(this._mouseStarted=this._mouseStart(c)!==!1,!this._mouseStarted)?(c.preventDefault(),!0):(!0===a.data(c.target,this.widgetName+".preventClickEvent")&&a.removeData(c.target,this.widgetName+".preventClickEvent"),this._mouseMoveDelegate=function(a){return d._mouseMove(a)},this._mouseUpDelegate=function(a){return d._mouseUp(a)},this.document.bind("mousemove."+this.widgetName,this._mouseMoveDelegate).bind("mouseup."+this.widgetName,this._mouseUpDelegate),c.preventDefault(),b=!0,!0))}},_mouseMove:function(b){if(this._mouseMoved){if(a.ui.ie&&(!document.documentMode||document.documentMode<9)&&!b.button)return this._mouseUp(b);if(!b.which)return this._mouseUp(b)}return(b.which||b.button)&&(this._mouseMoved=!0),this._mouseStarted?(this._mouseDrag(b),b.preventDefault()):(this._mouseDistanceMet(b)&&this._mouseDelayMet(b)&&(this._mouseStarted=this._mouseStart(this._mouseDownEvent,b)!==!1,this._mouseStarted?this._mouseDrag(b):this._mouseUp(b)),!this._mouseStarted)},_mouseUp:function(c){return this.document.unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate),this._mouseStarted&&(this._mouseStarted=!1,c.target===this._mouseDownEvent.target&&a.data(c.target,this.widgetName+".preventClickEvent",!0),this._mouseStop(c)),b=!1,!1},_mouseDistanceMet:function(a){return Math.max(Math.abs(this._mouseDownEvent.pageX-a.pageX),Math.abs(this._mouseDownEvent.pageY-a.pageY))>=this.options.distance},_mouseDelayMet:function(){return this.mouseDelayMet},_mouseStart:function(){},_mouseDrag:function(){},_mouseStop:function(){},_mouseCapture:function(){return!0}})});;
/*!
 * jQuery UI Sortable 1.11.4
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/sortable/
 */
!function(a){"function"==typeof define&&define.amd?define(["jquery","./core","./mouse","./widget"],a):a(jQuery)}(function(a){return a.widget("ui.sortable",a.ui.mouse,{version:"1.11.4",widgetEventPrefix:"sort",ready:!1,options:{appendTo:"parent",axis:!1,connectWith:!1,containment:!1,cursor:"auto",cursorAt:!1,dropOnEmpty:!0,forcePlaceholderSize:!1,forceHelperSize:!1,grid:!1,handle:!1,helper:"original",items:"> *",opacity:!1,placeholder:!1,revert:!1,scroll:!0,scrollSensitivity:20,scrollSpeed:20,scope:"default",tolerance:"intersect",zIndex:1e3,activate:null,beforeStop:null,change:null,deactivate:null,out:null,over:null,receive:null,remove:null,sort:null,start:null,stop:null,update:null},_isOverAxis:function(a,b,c){return a>=b&&a<b+c},_isFloating:function(a){return/left|right/.test(a.css("float"))||/inline|table-cell/.test(a.css("display"))},_create:function(){this.containerCache={},this.element.addClass("ui-sortable"),this.refresh(),this.offset=this.element.offset(),this._mouseInit(),this._setHandleClassName(),this.ready=!0},_setOption:function(a,b){this._super(a,b),"handle"===a&&this._setHandleClassName()},_setHandleClassName:function(){this.element.find(".ui-sortable-handle").removeClass("ui-sortable-handle"),a.each(this.items,function(){(this.instance.options.handle?this.item.find(this.instance.options.handle):this.item).addClass("ui-sortable-handle")})},_destroy:function(){this.element.removeClass("ui-sortable ui-sortable-disabled").find(".ui-sortable-handle").removeClass("ui-sortable-handle"),this._mouseDestroy();for(var a=this.items.length-1;a>=0;a--)this.items[a].item.removeData(this.widgetName+"-item");return this},_mouseCapture:function(b,c){var d=null,e=!1,f=this;return!this.reverting&&(!this.options.disabled&&"static"!==this.options.type&&(this._refreshItems(b),a(b.target).parents().each(function(){if(a.data(this,f.widgetName+"-item")===f)return d=a(this),!1}),a.data(b.target,f.widgetName+"-item")===f&&(d=a(b.target)),!!d&&(!(this.options.handle&&!c&&(a(this.options.handle,d).find("*").addBack().each(function(){this===b.target&&(e=!0)}),!e))&&(this.currentItem=d,this._removeCurrentsFromItems(),!0))))},_mouseStart:function(b,c,d){var e,f,g=this.options;if(this.currentContainer=this,this.refreshPositions(),this.helper=this._createHelper(b),this._cacheHelperProportions(),this._cacheMargins(),this.scrollParent=this.helper.scrollParent(),this.offset=this.currentItem.offset(),this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left},a.extend(this.offset,{click:{left:b.pageX-this.offset.left,top:b.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()}),this.helper.css("position","absolute"),this.cssPosition=this.helper.css("position"),this.originalPosition=this._generatePosition(b),this.originalPageX=b.pageX,this.originalPageY=b.pageY,g.cursorAt&&this._adjustOffsetFromHelper(g.cursorAt),this.domPosition={prev:this.currentItem.prev()[0],parent:this.currentItem.parent()[0]},this.helper[0]!==this.currentItem[0]&&this.currentItem.hide(),this._createPlaceholder(),g.containment&&this._setContainment(),g.cursor&&"auto"!==g.cursor&&(f=this.document.find("body"),this.storedCursor=f.css("cursor"),f.css("cursor",g.cursor),this.storedStylesheet=a("<style>*{ cursor: "+g.cursor+" !important; }</style>").appendTo(f)),g.opacity&&(this.helper.css("opacity")&&(this._storedOpacity=this.helper.css("opacity")),this.helper.css("opacity",g.opacity)),g.zIndex&&(this.helper.css("zIndex")&&(this._storedZIndex=this.helper.css("zIndex")),this.helper.css("zIndex",g.zIndex)),this.scrollParent[0]!==this.document[0]&&"HTML"!==this.scrollParent[0].tagName&&(this.overflowOffset=this.scrollParent.offset()),this._trigger("start",b,this._uiHash()),this._preserveHelperProportions||this._cacheHelperProportions(),!d)for(e=this.containers.length-1;e>=0;e--)this.containers[e]._trigger("activate",b,this._uiHash(this));return a.ui.ddmanager&&(a.ui.ddmanager.current=this),a.ui.ddmanager&&!g.dropBehaviour&&a.ui.ddmanager.prepareOffsets(this,b),this.dragging=!0,this.helper.addClass("ui-sortable-helper"),this._mouseDrag(b),!0},_mouseDrag:function(b){var c,d,e,f,g=this.options,h=!1;for(this.position=this._generatePosition(b),this.positionAbs=this._convertPositionTo("absolute"),this.lastPositionAbs||(this.lastPositionAbs=this.positionAbs),this.options.scroll&&(this.scrollParent[0]!==this.document[0]&&"HTML"!==this.scrollParent[0].tagName?(this.overflowOffset.top+this.scrollParent[0].offsetHeight-b.pageY<g.scrollSensitivity?this.scrollParent[0].scrollTop=h=this.scrollParent[0].scrollTop+g.scrollSpeed:b.pageY-this.overflowOffset.top<g.scrollSensitivity&&(this.scrollParent[0].scrollTop=h=this.scrollParent[0].scrollTop-g.scrollSpeed),this.overflowOffset.left+this.scrollParent[0].offsetWidth-b.pageX<g.scrollSensitivity?this.scrollParent[0].scrollLeft=h=this.scrollParent[0].scrollLeft+g.scrollSpeed:b.pageX-this.overflowOffset.left<g.scrollSensitivity&&(this.scrollParent[0].scrollLeft=h=this.scrollParent[0].scrollLeft-g.scrollSpeed)):(b.pageY-this.document.scrollTop()<g.scrollSensitivity?h=this.document.scrollTop(this.document.scrollTop()-g.scrollSpeed):this.window.height()-(b.pageY-this.document.scrollTop())<g.scrollSensitivity&&(h=this.document.scrollTop(this.document.scrollTop()+g.scrollSpeed)),b.pageX-this.document.scrollLeft()<g.scrollSensitivity?h=this.document.scrollLeft(this.document.scrollLeft()-g.scrollSpeed):this.window.width()-(b.pageX-this.document.scrollLeft())<g.scrollSensitivity&&(h=this.document.scrollLeft(this.document.scrollLeft()+g.scrollSpeed))),h!==!1&&a.ui.ddmanager&&!g.dropBehaviour&&a.ui.ddmanager.prepareOffsets(this,b)),this.positionAbs=this._convertPositionTo("absolute"),this.options.axis&&"y"===this.options.axis||(this.helper[0].style.left=this.position.left+"px"),this.options.axis&&"x"===this.options.axis||(this.helper[0].style.top=this.position.top+"px"),c=this.items.length-1;c>=0;c--)if(d=this.items[c],e=d.item[0],f=this._intersectsWithPointer(d),f&&d.instance===this.currentContainer&&!(e===this.currentItem[0]||this.placeholder[1===f?"next":"prev"]()[0]===e||a.contains(this.placeholder[0],e)||"semi-dynamic"===this.options.type&&a.contains(this.element[0],e))){if(this.direction=1===f?"down":"up","pointer"!==this.options.tolerance&&!this._intersectsWithSides(d))break;this._rearrange(b,d),this._trigger("change",b,this._uiHash());break}return this._contactContainers(b),a.ui.ddmanager&&a.ui.ddmanager.drag(this,b),this._trigger("sort",b,this._uiHash()),this.lastPositionAbs=this.positionAbs,!1},_mouseStop:function(b,c){if(b){if(a.ui.ddmanager&&!this.options.dropBehaviour&&a.ui.ddmanager.drop(this,b),this.options.revert){var d=this,e=this.placeholder.offset(),f=this.options.axis,g={};f&&"x"!==f||(g.left=e.left-this.offset.parent.left-this.margins.left+(this.offsetParent[0]===this.document[0].body?0:this.offsetParent[0].scrollLeft)),f&&"y"!==f||(g.top=e.top-this.offset.parent.top-this.margins.top+(this.offsetParent[0]===this.document[0].body?0:this.offsetParent[0].scrollTop)),this.reverting=!0,a(this.helper).animate(g,parseInt(this.options.revert,10)||500,function(){d._clear(b)})}else this._clear(b,c);return!1}},cancel:function(){if(this.dragging){this._mouseUp({target:null}),"original"===this.options.helper?this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper"):this.currentItem.show();for(var b=this.containers.length-1;b>=0;b--)this.containers[b]._trigger("deactivate",null,this._uiHash(this)),this.containers[b].containerCache.over&&(this.containers[b]._trigger("out",null,this._uiHash(this)),this.containers[b].containerCache.over=0)}return this.placeholder&&(this.placeholder[0].parentNode&&this.placeholder[0].parentNode.removeChild(this.placeholder[0]),"original"!==this.options.helper&&this.helper&&this.helper[0].parentNode&&this.helper.remove(),a.extend(this,{helper:null,dragging:!1,reverting:!1,_noFinalSort:null}),this.domPosition.prev?a(this.domPosition.prev).after(this.currentItem):a(this.domPosition.parent).prepend(this.currentItem)),this},serialize:function(b){var c=this._getItemsAsjQuery(b&&b.connected),d=[];return b=b||{},a(c).each(function(){var c=(a(b.item||this).attr(b.attribute||"id")||"").match(b.expression||/(.+)[\-=_](.+)/);c&&d.push((b.key||c[1]+"[]")+"="+(b.key&&b.expression?c[1]:c[2]))}),!d.length&&b.key&&d.push(b.key+"="),d.join("&")},toArray:function(b){var c=this._getItemsAsjQuery(b&&b.connected),d=[];return b=b||{},c.each(function(){d.push(a(b.item||this).attr(b.attribute||"id")||"")}),d},_intersectsWith:function(a){var b=this.positionAbs.left,c=b+this.helperProportions.width,d=this.positionAbs.top,e=d+this.helperProportions.height,f=a.left,g=f+a.width,h=a.top,i=h+a.height,j=this.offset.click.top,k=this.offset.click.left,l="x"===this.options.axis||d+j>h&&d+j<i,m="y"===this.options.axis||b+k>f&&b+k<g,n=l&&m;return"pointer"===this.options.tolerance||this.options.forcePointerForContainers||"pointer"!==this.options.tolerance&&this.helperProportions[this.floating?"width":"height"]>a[this.floating?"width":"height"]?n:f<b+this.helperProportions.width/2&&c-this.helperProportions.width/2<g&&h<d+this.helperProportions.height/2&&e-this.helperProportions.height/2<i},_intersectsWithPointer:function(a){var b="x"===this.options.axis||this._isOverAxis(this.positionAbs.top+this.offset.click.top,a.top,a.height),c="y"===this.options.axis||this._isOverAxis(this.positionAbs.left+this.offset.click.left,a.left,a.width),d=b&&c,e=this._getDragVerticalDirection(),f=this._getDragHorizontalDirection();return!!d&&(this.floating?f&&"right"===f||"down"===e?2:1:e&&("down"===e?2:1))},_intersectsWithSides:function(a){var b=this._isOverAxis(this.positionAbs.top+this.offset.click.top,a.top+a.height/2,a.height),c=this._isOverAxis(this.positionAbs.left+this.offset.click.left,a.left+a.width/2,a.width),d=this._getDragVerticalDirection(),e=this._getDragHorizontalDirection();return this.floating&&e?"right"===e&&c||"left"===e&&!c:d&&("down"===d&&b||"up"===d&&!b)},_getDragVerticalDirection:function(){var a=this.positionAbs.top-this.lastPositionAbs.top;return 0!==a&&(a>0?"down":"up")},_getDragHorizontalDirection:function(){var a=this.positionAbs.left-this.lastPositionAbs.left;return 0!==a&&(a>0?"right":"left")},refresh:function(a){return this._refreshItems(a),this._setHandleClassName(),this.refreshPositions(),this},_connectWith:function(){var a=this.options;return a.connectWith.constructor===String?[a.connectWith]:a.connectWith},_getItemsAsjQuery:function(b){function c(){h.push(this)}var d,e,f,g,h=[],i=[],j=this._connectWith();if(j&&b)for(d=j.length-1;d>=0;d--)for(f=a(j[d],this.document[0]),e=f.length-1;e>=0;e--)g=a.data(f[e],this.widgetFullName),g&&g!==this&&!g.options.disabled&&i.push([a.isFunction(g.options.items)?g.options.items.call(g.element):a(g.options.items,g.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),g]);for(i.push([a.isFunction(this.options.items)?this.options.items.call(this.element,null,{options:this.options,item:this.currentItem}):a(this.options.items,this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),this]),d=i.length-1;d>=0;d--)i[d][0].each(c);return a(h)},_removeCurrentsFromItems:function(){var b=this.currentItem.find(":data("+this.widgetName+"-item)");this.items=a.grep(this.items,function(a){for(var c=0;c<b.length;c++)if(b[c]===a.item[0])return!1;return!0})},_refreshItems:function(b){this.items=[],this.containers=[this];var c,d,e,f,g,h,i,j,k=this.items,l=[[a.isFunction(this.options.items)?this.options.items.call(this.element[0],b,{item:this.currentItem}):a(this.options.items,this.element),this]],m=this._connectWith();if(m&&this.ready)for(c=m.length-1;c>=0;c--)for(e=a(m[c],this.document[0]),d=e.length-1;d>=0;d--)f=a.data(e[d],this.widgetFullName),f&&f!==this&&!f.options.disabled&&(l.push([a.isFunction(f.options.items)?f.options.items.call(f.element[0],b,{item:this.currentItem}):a(f.options.items,f.element),f]),this.containers.push(f));for(c=l.length-1;c>=0;c--)for(g=l[c][1],h=l[c][0],d=0,j=h.length;d<j;d++)i=a(h[d]),i.data(this.widgetName+"-item",g),k.push({item:i,instance:g,width:0,height:0,left:0,top:0})},refreshPositions:function(b){this.floating=!!this.items.length&&("x"===this.options.axis||this._isFloating(this.items[0].item)),this.offsetParent&&this.helper&&(this.offset.parent=this._getParentOffset());var c,d,e,f;for(c=this.items.length-1;c>=0;c--)d=this.items[c],d.instance!==this.currentContainer&&this.currentContainer&&d.item[0]!==this.currentItem[0]||(e=this.options.toleranceElement?a(this.options.toleranceElement,d.item):d.item,b||(d.width=e.outerWidth(),d.height=e.outerHeight()),f=e.offset(),d.left=f.left,d.top=f.top);if(this.options.custom&&this.options.custom.refreshContainers)this.options.custom.refreshContainers.call(this);else for(c=this.containers.length-1;c>=0;c--)f=this.containers[c].element.offset(),this.containers[c].containerCache.left=f.left,this.containers[c].containerCache.top=f.top,this.containers[c].containerCache.width=this.containers[c].element.outerWidth(),this.containers[c].containerCache.height=this.containers[c].element.outerHeight();return this},_createPlaceholder:function(b){b=b||this;var c,d=b.options;d.placeholder&&d.placeholder.constructor!==String||(c=d.placeholder,d.placeholder={element:function(){var d=b.currentItem[0].nodeName.toLowerCase(),e=a("<"+d+">",b.document[0]).addClass(c||b.currentItem[0].className+" ui-sortable-placeholder").removeClass("ui-sortable-helper");return"tbody"===d?b._createTrPlaceholder(b.currentItem.find("tr").eq(0),a("<tr>",b.document[0]).appendTo(e)):"tr"===d?b._createTrPlaceholder(b.currentItem,e):"img"===d&&e.attr("src",b.currentItem.attr("src")),c||e.css("visibility","hidden"),e},update:function(a,e){c&&!d.forcePlaceholderSize||(e.height()||e.height(b.currentItem.innerHeight()-parseInt(b.currentItem.css("paddingTop")||0,10)-parseInt(b.currentItem.css("paddingBottom")||0,10)),e.width()||e.width(b.currentItem.innerWidth()-parseInt(b.currentItem.css("paddingLeft")||0,10)-parseInt(b.currentItem.css("paddingRight")||0,10)))}}),b.placeholder=a(d.placeholder.element.call(b.element,b.currentItem)),b.currentItem.after(b.placeholder),d.placeholder.update(b,b.placeholder)},_createTrPlaceholder:function(b,c){var d=this;b.children().each(function(){a("<td>&#160;</td>",d.document[0]).attr("colspan",a(this).attr("colspan")||1).appendTo(c)})},_contactContainers:function(b){var c,d,e,f,g,h,i,j,k,l,m=null,n=null;for(c=this.containers.length-1;c>=0;c--)if(!a.contains(this.currentItem[0],this.containers[c].element[0]))if(this._intersectsWith(this.containers[c].containerCache)){if(m&&a.contains(this.containers[c].element[0],m.element[0]))continue;m=this.containers[c],n=c}else this.containers[c].containerCache.over&&(this.containers[c]._trigger("out",b,this._uiHash(this)),this.containers[c].containerCache.over=0);if(m)if(1===this.containers.length)this.containers[n].containerCache.over||(this.containers[n]._trigger("over",b,this._uiHash(this)),this.containers[n].containerCache.over=1);else{for(e=1e4,f=null,k=m.floating||this._isFloating(this.currentItem),g=k?"left":"top",h=k?"width":"height",l=k?"clientX":"clientY",d=this.items.length-1;d>=0;d--)a.contains(this.containers[n].element[0],this.items[d].item[0])&&this.items[d].item[0]!==this.currentItem[0]&&(i=this.items[d].item.offset()[g],j=!1,b[l]-i>this.items[d][h]/2&&(j=!0),Math.abs(b[l]-i)<e&&(e=Math.abs(b[l]-i),f=this.items[d],this.direction=j?"up":"down"));if(!f&&!this.options.dropOnEmpty)return;if(this.currentContainer===this.containers[n])return void(this.currentContainer.containerCache.over||(this.containers[n]._trigger("over",b,this._uiHash()),this.currentContainer.containerCache.over=1));f?this._rearrange(b,f,null,!0):this._rearrange(b,null,this.containers[n].element,!0),this._trigger("change",b,this._uiHash()),this.containers[n]._trigger("change",b,this._uiHash(this)),this.currentContainer=this.containers[n],this.options.placeholder.update(this.currentContainer,this.placeholder),this.containers[n]._trigger("over",b,this._uiHash(this)),this.containers[n].containerCache.over=1}},_createHelper:function(b){var c=this.options,d=a.isFunction(c.helper)?a(c.helper.apply(this.element[0],[b,this.currentItem])):"clone"===c.helper?this.currentItem.clone():this.currentItem;return d.parents("body").length||a("parent"!==c.appendTo?c.appendTo:this.currentItem[0].parentNode)[0].appendChild(d[0]),d[0]===this.currentItem[0]&&(this._storedCSS={width:this.currentItem[0].style.width,height:this.currentItem[0].style.height,position:this.currentItem.css("position"),top:this.currentItem.css("top"),left:this.currentItem.css("left")}),d[0].style.width&&!c.forceHelperSize||d.width(this.currentItem.width()),d[0].style.height&&!c.forceHelperSize||d.height(this.currentItem.height()),d},_adjustOffsetFromHelper:function(b){"string"==typeof b&&(b=b.split(" ")),a.isArray(b)&&(b={left:+b[0],top:+b[1]||0}),"left"in b&&(this.offset.click.left=b.left+this.margins.left),"right"in b&&(this.offset.click.left=this.helperProportions.width-b.right+this.margins.left),"top"in b&&(this.offset.click.top=b.top+this.margins.top),"bottom"in b&&(this.offset.click.top=this.helperProportions.height-b.bottom+this.margins.top)},_getParentOffset:function(){this.offsetParent=this.helper.offsetParent();var b=this.offsetParent.offset();return"absolute"===this.cssPosition&&this.scrollParent[0]!==this.document[0]&&a.contains(this.scrollParent[0],this.offsetParent[0])&&(b.left+=this.scrollParent.scrollLeft(),b.top+=this.scrollParent.scrollTop()),(this.offsetParent[0]===this.document[0].body||this.offsetParent[0].tagName&&"html"===this.offsetParent[0].tagName.toLowerCase()&&a.ui.ie)&&(b={top:0,left:0}),{top:b.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:b.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"===this.cssPosition){var a=this.currentItem.position();return{top:a.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:a.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.currentItem.css("marginLeft"),10)||0,top:parseInt(this.currentItem.css("marginTop"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var b,c,d,e=this.options;"parent"===e.containment&&(e.containment=this.helper[0].parentNode),"document"!==e.containment&&"window"!==e.containment||(this.containment=[0-this.offset.relative.left-this.offset.parent.left,0-this.offset.relative.top-this.offset.parent.top,"document"===e.containment?this.document.width():this.window.width()-this.helperProportions.width-this.margins.left,("document"===e.containment?this.document.width():this.window.height()||this.document[0].body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]),/^(document|window|parent)$/.test(e.containment)||(b=a(e.containment)[0],c=a(e.containment).offset(),d="hidden"!==a(b).css("overflow"),this.containment=[c.left+(parseInt(a(b).css("borderLeftWidth"),10)||0)+(parseInt(a(b).css("paddingLeft"),10)||0)-this.margins.left,c.top+(parseInt(a(b).css("borderTopWidth"),10)||0)+(parseInt(a(b).css("paddingTop"),10)||0)-this.margins.top,c.left+(d?Math.max(b.scrollWidth,b.offsetWidth):b.offsetWidth)-(parseInt(a(b).css("borderLeftWidth"),10)||0)-(parseInt(a(b).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left,c.top+(d?Math.max(b.scrollHeight,b.offsetHeight):b.offsetHeight)-(parseInt(a(b).css("borderTopWidth"),10)||0)-(parseInt(a(b).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top])},_convertPositionTo:function(b,c){c||(c=this.position);var d="absolute"===b?1:-1,e="absolute"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&a.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,f=/(html|body)/i.test(e[0].tagName);return{top:c.top+this.offset.relative.top*d+this.offset.parent.top*d-("fixed"===this.cssPosition?-this.scrollParent.scrollTop():f?0:e.scrollTop())*d,left:c.left+this.offset.relative.left*d+this.offset.parent.left*d-("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():f?0:e.scrollLeft())*d}},_generatePosition:function(b){var c,d,e=this.options,f=b.pageX,g=b.pageY,h="absolute"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&a.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,i=/(html|body)/i.test(h[0].tagName);return"relative"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&this.scrollParent[0]!==this.offsetParent[0]||(this.offset.relative=this._getRelativeOffset()),this.originalPosition&&(this.containment&&(b.pageX-this.offset.click.left<this.containment[0]&&(f=this.containment[0]+this.offset.click.left),b.pageY-this.offset.click.top<this.containment[1]&&(g=this.containment[1]+this.offset.click.top),b.pageX-this.offset.click.left>this.containment[2]&&(f=this.containment[2]+this.offset.click.left),b.pageY-this.offset.click.top>this.containment[3]&&(g=this.containment[3]+this.offset.click.top)),e.grid&&(c=this.originalPageY+Math.round((g-this.originalPageY)/e.grid[1])*e.grid[1],g=this.containment?c-this.offset.click.top>=this.containment[1]&&c-this.offset.click.top<=this.containment[3]?c:c-this.offset.click.top>=this.containment[1]?c-e.grid[1]:c+e.grid[1]:c,d=this.originalPageX+Math.round((f-this.originalPageX)/e.grid[0])*e.grid[0],f=this.containment?d-this.offset.click.left>=this.containment[0]&&d-this.offset.click.left<=this.containment[2]?d:d-this.offset.click.left>=this.containment[0]?d-e.grid[0]:d+e.grid[0]:d)),{top:g-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.scrollParent.scrollTop():i?0:h.scrollTop()),left:f-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():i?0:h.scrollLeft())}},_rearrange:function(a,b,c,d){c?c[0].appendChild(this.placeholder[0]):b.item[0].parentNode.insertBefore(this.placeholder[0],"down"===this.direction?b.item[0]:b.item[0].nextSibling),this.counter=this.counter?++this.counter:1;var e=this.counter;this._delay(function(){e===this.counter&&this.refreshPositions(!d)})},_clear:function(a,b){function c(a,b,c){return function(d){c._trigger(a,d,b._uiHash(b))}}this.reverting=!1;var d,e=[];if(!this._noFinalSort&&this.currentItem.parent().length&&this.placeholder.before(this.currentItem),this._noFinalSort=null,this.helper[0]===this.currentItem[0]){for(d in this._storedCSS)"auto"!==this._storedCSS[d]&&"static"!==this._storedCSS[d]||(this._storedCSS[d]="");this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper")}else this.currentItem.show();for(this.fromOutside&&!b&&e.push(function(a){this._trigger("receive",a,this._uiHash(this.fromOutside))}),!this.fromOutside&&this.domPosition.prev===this.currentItem.prev().not(".ui-sortable-helper")[0]&&this.domPosition.parent===this.currentItem.parent()[0]||b||e.push(function(a){this._trigger("update",a,this._uiHash())}),this!==this.currentContainer&&(b||(e.push(function(a){this._trigger("remove",a,this._uiHash())}),e.push(function(a){return function(b){a._trigger("receive",b,this._uiHash(this))}}.call(this,this.currentContainer)),e.push(function(a){return function(b){a._trigger("update",b,this._uiHash(this))}}.call(this,this.currentContainer)))),d=this.containers.length-1;d>=0;d--)b||e.push(c("deactivate",this,this.containers[d])),this.containers[d].containerCache.over&&(e.push(c("out",this,this.containers[d])),this.containers[d].containerCache.over=0);if(this.storedCursor&&(this.document.find("body").css("cursor",this.storedCursor),this.storedStylesheet.remove()),this._storedOpacity&&this.helper.css("opacity",this._storedOpacity),this._storedZIndex&&this.helper.css("zIndex","auto"===this._storedZIndex?"":this._storedZIndex),this.dragging=!1,b||this._trigger("beforeStop",a,this._uiHash()),this.placeholder[0].parentNode.removeChild(this.placeholder[0]),this.cancelHelperRemoval||(this.helper[0]!==this.currentItem[0]&&this.helper.remove(),this.helper=null),!b){for(d=0;d<e.length;d++)e[d].call(this,a);this._trigger("stop",a,this._uiHash())}return this.fromOutside=!1,!this.cancelHelperRemoval},_trigger:function(){a.Widget.prototype._trigger.apply(this,arguments)===!1&&this.cancel()},_uiHash:function(b){var c=b||this;return{helper:c.helper,placeholder:c.placeholder||a([]),position:c.position,originalPosition:c.originalPosition,offset:c.positionAbs,item:c.currentItem,sender:b?b.element:null}}})});;
/**
 * We use cocktail to mix in these common elements into both the post and comment views
 * instead of using event delegation in order to keep the view management code (ignore edit
 * actions) and model update code simple
 */
/* global enquire, console */
var ChecklistsExtendsCommon = ( function( $ ) {
	return {
		events: {
			'click .o2-task-item-text': 'onClickTaskText',
			'click .o2-task-item :checkbox': 'onClickTaskCheckbox',
			'click .o2-add-task': 'onClickTaskAdd',
			'click .o2-edit-task': 'onClickTaskEdit',
			'click .o2-delete-task': 'onClickTaskDelete',
			'blur .o2-task-item-input': 'onBlurTaskEdit',
			'keydown .o2-task-item-input': 'onKeyPressTask'
		},

		initialize: function() {
			this.options.bp550Match = false;
			this.options.ignoreBlur = false;
			this.options.previousSaveInProgress = false;
			this.options.checklistRequestCount = 0;

			this.listenTo( this.model, 'o2-post-rendered', this.updateTaskControls );
			this.listenTo( this.model, 'o2-comment-rendered', this.updateTaskControls );

			_.bindAll( this, 'onChecklistRequestSuccess', 'onChecklistRequestError', 'onTaskDragStart', 'onTaskDragStop', 'onChecklist550Match', 'onChecklist550Unmatch', 'onBlurTaskEdit', 'updateTaskControls' );

			if ( 'undefined' !== typeof enquire ) {
				enquire.register( 'screen and ( max-width : 550px )', {
					match: this.onChecklist550Match,
					unmatch: this.onChecklist550Unmatch
				} );
			}
		},

		remove: function() {
			if ( 'undefined' !== typeof enquire ) {
				enquire.unregister( 'screen and ( max-width : 550px )' );
			}
		},

		onChecklist550Match: function() {
			this.options.bp550Match = true;
			this.updateTaskControls();
		},

		onChecklist550Unmatch: function() {
			this.options.bp550Match = false;
			this.updateTaskControls();
		},

		onClickTaskText: function( event ) {
			event.stopPropagation();
			// if the user clicked on a link in a task item span, let link takes priority
			if ( 'a' === event.target.tagName.toLowerCase() ) {
				return;
			}

			event.preventDefault();
			event.stopPropagation();
			var _this = this;

			var containingItem = $( event.target ).parents( 'li' ).first();

			// if they clicked on an task item that is already showing its tools, close it
			if ( containingItem.hasClass( 'o2-current-task-item' ) ) {
				containingItem.find( '.o2-task-tools' ).slideUp( 'fast', function() {
					containingItem.removeClass( 'o2-current-task-item' );
				} );
			} else {
				// they clicked on a task item not already showing its tools
				this.$el.find( '.o2-current-task-item' ).find( '.o2-task-tools' ).slideUp( 'fast', function() {
					_this.$el.find( '.o2-current-task-item' ).removeClass( 'o2-current-task-item' );
				} );
				containingItem.find( '.o2-task-tools' ).hide();
				containingItem.addClass( 'o2-current-task-item' );
				containingItem.find( '.o2-task-tools' ).slideDown( 'fast' );
			}
		},

		onClickTaskCheckbox: function( event ) {
			event.stopPropagation();
			var containingItem = $( event.target ).parents( 'li' ).first();
			var isChecked = $( event.target ).is( ':checked' );

			if ( isChecked ) {
				containingItem.addClass( 'o2-task-completed' );
			} else {
				containingItem.removeClass( 'o2-task-completed' );
			}
			this.sendChecklistRequest( containingItem, 'check', isChecked, 0 );
		},

		onClickTaskAdd: function( event ) {
			event.preventDefault();
			event.stopPropagation();
			var containingItem = $( event.target ).parents( 'li' ).first();

			// trigger an onClickTaskEdit on it

			var newTaskItem = containingItem.clone();
			newTaskItem.addClass( 'o2-task-new' );
			newTaskItem.data( 'item-text', '' );
			newTaskItem.removeClass( 'o2-task-completed' ); // in case we're cloning a completed task
			newTaskItem.find( 'input:checkbox' ).attr( 'checked', false );
			containingItem.find( '.o2-task-tools' ).hide();
			containingItem.removeClass( 'o2-current-task-item' );
			containingItem.after( newTaskItem );

			// find it again so that parent() works on it correctly
			newTaskItem = this.$el.find( '.o2-task-new' );
			newTaskItem.addClass( 'o2-current-task-item' );
			newTaskItem.find( '.o2-edit-task' ).click();
		},

		// turn off poll cache processing for now
		// @todo use filtering when it becomes available
		checkListSuspendUpdates: function() {
			this.options.previousSaveInProgress = o2.App.appState.saveInProgress;
			o2.App.appState.saveInProgress = true;
		},

		checkListResumeUpdates: function() {
			o2.App.appState.saveInProgress = this.options.previousSaveInProgress;
		},

		onClickTaskEdit: function( event ) {
			event.preventDefault();
			event.stopPropagation();

			var containingItem = $( event.target ).parents( 'li' ).first();
			var itemText = containingItem.data( 'item-text' );

			// hide the existing text
			// replace it with an input
			containingItem.find( '.o2-task-item-text' ).hide().after( '<input type="text" class="o2-task-item-input" value=""/>' );
			var textInput = containingItem.find( '.o2-task-item-input' );
			textInput.val( itemText );
			textInput.focus();
			containingItem.find( '.o2-task-tools' ).hide();

			this.checkListSuspendUpdates();
		},

		onKeyPressTask: function( event ) {
			if ( 13 === event.keyCode ) {
				event.preventDefault();
				event.stopPropagation();
				this.onSaveTask( event );
			} else if ( 27 === event.keyCode ) {
				event.preventDefault();
				event.stopPropagation();
				this.onCancelTaskEdit( event );
			}
		},

		onSaveTask: function( event ) {
			var containingItem = $( event.target ).parents( 'li' ).first();
			var newItemText = containingItem.find( '.o2-task-item-input' ).val();

			// Since we are saving, ignore the blur that will occur
			// when we remove this element from the DOM
			this.options.ignoreTaskBlur = true;
			containingItem.find( '.o2-task-item-input' ).remove();
			this.options.ignoreTaskBlur = false;

			if ( newItemText.length ) {
				containingItem.find( '.o2-task-item-text' ).html( newItemText ).show();
				var command = containingItem.hasClass( 'o2-task-new' ) ? 'add' : 'update';
				this.sendChecklistRequest( containingItem, command, newItemText, 0 );
				this.checkListResumeUpdates();
			} else {
				this.onCancelTaskEdit( event );
			}
		},

		onBlurTaskEdit: function( event ) {
			event.stopPropagation();
			if ( false === this.options.ignoreTaskBlur ) {
				this.onCancelTaskEdit( event );
			}
		},

		onCancelTaskEdit: function( event ) {
			var containingItem = $( event.target ).parents( 'li' ).first();
			containingItem.find( '.o2-task-item-input' ).remove();
			containingItem.find( '.o2-task-item-text' ).show();
			containingItem.removeClass( 'o2-current-task-item' );

			if ( containingItem.hasClass( 'o2-task-new' ) ) {
				containingItem.remove();
			}
			this.checkListResumeUpdates();
		},

		onClickTaskDelete: function( event ) {
			event.preventDefault();
			event.stopPropagation();
			var containingItem = $( event.target ).parents( 'li' ).first();
			if ( window.confirm( o2.strings.deleteChecklistItem ) ) {
				this.sendChecklistRequest( containingItem, 'delete', 0, 0 );
				containingItem.hide();
			}
		},

		sendChecklistRequest: function( containingItem, command, arg1, arg2 ) {
			var containingForm = containingItem.parents( 'form' ).first();

			var itemData = {
				objectID: containingForm.data( 'object-id' ),
				objectType: containingForm.data( 'object-type' ),
				nonce: o2.options.nonce,
				itemHash: containingItem.data( 'item-hash' ),
				itemHashInstance: containingItem.data( 'hash-instance' ),
				command: command,
				arg1: arg1,
				arg2: arg2
			};

			// dim the containing form for a bit, to give a sense that a save is in progress
			containingForm.css( { opacity: 0.7 } );

			var ajaxURL = containingForm.attr( 'action' );

			this.trigger( 'ignoreEditAction', true ); // ignore edit action on this view until after checklist response returns

			var jqXHR = $.ajax( {
				type:     'POST',
				dataType: 'json',
				url:      ajaxURL,
				xhrFields: {
					withCredentials: true
				},
				data: {
					action: 'o2_checklist',
					data:   itemData
				},
				success: this.onChecklistRequestSuccess,
				error: this.onChecklistRequestError
			} );

			// decorate the request so we can quickly recognize it later
			jqXHR.checklistRequestCount = ++this.options.checklistRequestCount;
		},

		onChecklistRequestSuccess: function( response, textStatus, jqXHR ) {
			this.trigger( 'ignoreEditAction', false ); // re-enable edit action on this view

			if ( 'undefined' === typeof response.success || ! response.success ) {
				var errorText = o2.strings.checklistError;
				if ( 'undefined' !== typeof response.data && 'undefined' !== typeof response.data.errorText ) {
					errorText += ': ' + response.data.errorText;
				}

				o2.Notifications.add( {
					type: 'error',
					text: errorText,
					sticky: true
				} );

				return;
			}

			if ( 'undefined' !== typeof response.data.type && 'undefined' !== typeof response.data.id &&
				'undefined' !== typeof response.data.contentRaw && 'undefined' !== typeof response.data.contentFiltered ) {

				// if this response isn't to the latest request, don't bother updating the model - we
				// don't want to update it just to have another checklist response update it again
				if ( ( 'undefined' === typeof jqXHR.checklistRequestCount ) || ( jqXHR.checklistRequestCount === this.options.checklistRequestCount ) ) {
					this.model.set( {
						contentRaw: response.data.contentRaw,
						contentFiltered: response.data.contentFiltered
					} );
				}
			} else {
				o2.Notifications.add( {
					type: 'error',
					text: o2.strings.checklistError + ': ' + 'A malformed response was received',
					sticky: true
				} );
				console.error( 'error: response = ', response );
			}
		},

		onChecklistRequestError: function( jqXHR, textStatus, errorThrown ) {
			var errorText = o2.strings.checklistError;

			if ( 'undefined' !== typeof textStatus && null != textStatus && textStatus.length ) {
				errorText += ': ' + textStatus;
			} 

			if ( 'undefined' !== typeof errorThrown && null != errorThrown ) {
				errorText += ': ' + errorThrown;
			} else {
				errorText += ': ' + o2.strings.unknownChecklistError;
			}

			o2.Notifications.add( {
				type: 'error',
				text: errorText,
				sticky: true
			} );

			this.render();
			this.trigger( 'ignoreEditAction', false ); // re-enable edit action on this view
		},

		updateTaskControls: function() {
			// If there are no checklists at all, bail early
			if ( 0 === this.$el.find( '.o2-tasks' ).length ) {
				return;
			}

			var _this = this;

			// Now, let's go through each list in this post
			this.$el.find( '.o2-tasks-form' ).each( function() {
				var isNestedList = false;
				var containingForm = $( this );

				// Enable all checkboxes
				containingForm.find( '.o2-task-item' ).find( 'input:checkbox' ).prop( 'disabled', false );

				// Remove delete task from parents and disable parents with unchecked children
				containingForm.find( '.o2-task-item' ).each( function() {
					var taskItem = $( this );
					var childList = taskItem.children( '.o2-tasks' );
					if ( 0 < childList.length ) {
						isNestedList = true;
						// remove the delete link from the parent
						taskItem.find( '.o2-delete-task' ).remove();
						// disable the parent's checkbox if any child is unchecked
						if ( childList.find( 'input:checkbox:not(:checked)' ).length ) {
							taskItem.children( 'input' ).prop( 'disabled', 'disabled' );
						}
					}
				} );

				// Make sure the containing form is 1) has more than one item and 2) is not nested 
				if ( ( containingForm.find( '.o2-task-item' ).length > 1 ) && ( ! isNestedList ) ) {
					// setup sortable
					// use a longer delay on tiny devices to avoid accidental sort triggering when dragging the display
					var sortableDelayMilliseconds = ( _this.options.bp550Match ) ? 2000 : 500;
					containingForm.find( '.o2-tasks' ).each( function() {
						var myList = $( this );
						myList.sortable( {
							placeholder: 'ui-sortable-dropzone',
							start: _this.onTaskDragStart,
							stop: _this.onTaskDragStop,
							items: '> li.o2-task-sortable',
							delay: sortableDelayMilliseconds
						} );
					} );
				}
			} );
		},

		onTaskDragStart: function() {
			this.checkListSuspendUpdates();
		},

		onTaskDragStop: function( event, ui ) {
			this.checkListResumeUpdates();

			var draggedItem = ui.item;

			// OK, we know which item was dragged - find it, and then find the prev (or next) item
			var prevItem = ui.item.prev();
			if ( prevItem.length ) {
				this.sendChecklistRequest( draggedItem, 'moveAfter', prevItem.data( 'item-hash' ), prevItem.data( 'hash-instance' ) );
			} else {
				var nextItem = ui.item.next();
				if ( nextItem.length ) {
					this.sendChecklistRequest( draggedItem, 'moveBefore', nextItem.data( 'item-hash' ), nextItem.data( 'hash-instance' ) );
				}
			}
		}
	};
} )( jQuery );

Cocktail.mixin( o2.Views.Comment, ChecklistsExtendsCommon );
Cocktail.mixin( o2.Views.Post, ChecklistsExtendsCommon );
;
/*!
 * enquire.js v2.1.0 - Awesome Media Queries in JavaScript
 * Copyright (c) 2013 Nick Williams - http://wicky.nillia.ms/enquire.js
 * License: MIT (http://www.opensource.org/licenses/mit-license.php)
 */

;(function (name, context, factory) {
	var matchMedia = context.matchMedia;

	if (typeof module !== 'undefined' && module.exports) {
		module.exports = factory(matchMedia);
	}
	else if (typeof define === 'function' && define.amd) {
		define(function() {
			return (context[name] = factory(matchMedia));
		});
	}
	else {
		context[name] = factory(matchMedia);
	}
}('enquire', this, function (matchMedia) {

	'use strict';

    /*jshint unused:false */
    /**
     * Helper function for iterating over a collection
     *
     * @param collection
     * @param fn
     */
    function each(collection, fn) {
        var i      = 0,
            length = collection.length,
            cont;

        for(i; i < length; i++) {
            cont = fn(collection[i], i);
            if(cont === false) {
                break; //allow early exit
            }
        }
    }

    /**
     * Helper function for determining whether target object is an array
     *
     * @param target the object under test
     * @return {Boolean} true if array, false otherwise
     */
    function isArray(target) {
        return Object.prototype.toString.apply(target) === '[object Array]';
    }

    /**
     * Helper function for determining whether target object is a function
     *
     * @param target the object under test
     * @return {Boolean} true if function, false otherwise
     */
    function isFunction(target) {
        return typeof target === 'function';
    }

    /**
     * Delegate to handle a media query being matched and unmatched.
     *
     * @param {object} options
     * @param {function} options.match callback for when the media query is matched
     * @param {function} [options.unmatch] callback for when the media query is unmatched
     * @param {function} [options.setup] one-time callback triggered the first time a query is matched
     * @param {boolean} [options.deferSetup=false] should the setup callback be run immediately, rather than first time query is matched?
     * @constructor
     */
    function QueryHandler(options) {
        this.options = options;
        !options.deferSetup && this.setup();
    }
    QueryHandler.prototype = {

        /**
         * coordinates setup of the handler
         *
         * @function
         */
        setup : function() {
            if(this.options.setup) {
                this.options.setup();
            }
            this.initialised = true;
        },

        /**
         * coordinates setup and triggering of the handler
         *
         * @function
         */
        on : function() {
            !this.initialised && this.setup();
            this.options.match && this.options.match();
        },

        /**
         * coordinates the unmatch event for the handler
         *
         * @function
         */
        off : function() {
            this.options.unmatch && this.options.unmatch();
        },

        /**
         * called when a handler is to be destroyed.
         * delegates to the destroy or unmatch callbacks, depending on availability.
         *
         * @function
         */
        destroy : function() {
            this.options.destroy ? this.options.destroy() : this.off();
        },

        /**
         * determines equality by reference.
         * if object is supplied compare options, if function, compare match callback
         *
         * @function
         * @param {object || function} [target] the target for comparison
         */
        equals : function(target) {
            return this.options === target || this.options.match === target;
        }

    };
    /**
     * Represents a single media query, manages it's state and registered handlers for this query
     *
     * @constructor
     * @param {string} query the media query string
     * @param {boolean} [isUnconditional=false] whether the media query should run regardless of whether the conditions are met. Primarily for helping older browsers deal with mobile-first design
     */
    function MediaQuery(query, isUnconditional) {
        this.query = query;
        this.isUnconditional = isUnconditional;
        this.handlers = [];
        this.mql = matchMedia(query);

        var self = this;
        this.listener = function(mql) {
            self.mql = mql;
            self.assess();
        };
        this.mql.addListener(this.listener);
    }
    MediaQuery.prototype = {

        /**
         * add a handler for this query, triggering if already active
         *
         * @param {object} handler
         * @param {function} handler.match callback for when query is activated
         * @param {function} [handler.unmatch] callback for when query is deactivated
         * @param {function} [handler.setup] callback for immediate execution when a query handler is registered
         * @param {boolean} [handler.deferSetup=false] should the setup callback be deferred until the first time the handler is matched?
         */
        addHandler : function(handler) {
            var qh = new QueryHandler(handler);
            this.handlers.push(qh);

            this.matches() && qh.on();
        },

        /**
         * removes the given handler from the collection, and calls it's destroy methods
         * 
         * @param {object || function} handler the handler to remove
         */
        removeHandler : function(handler) {
            var handlers = this.handlers;
            each(handlers, function(h, i) {
                if(h.equals(handler)) {
                    h.destroy();
                    return !handlers.splice(i,1); //remove from array and exit each early
                }
            });
        },

        /**
         * Determine whether the media query should be considered a match
         * 
         * @return {Boolean} true if media query can be considered a match, false otherwise
         */
        matches : function() {
            return this.mql.matches || this.isUnconditional;
        },

        /**
         * Clears all handlers and unbinds events
         */
        clear : function() {
            each(this.handlers, function(handler) {
                handler.destroy();
            });
            this.mql.removeListener(this.listener);
            this.handlers.length = 0; //clear array
        },

        /*
         * Assesses the query, turning on all handlers if it matches, turning them off if it doesn't match
         */
        assess : function() {
            var action = this.matches() ? 'on' : 'off';

            each(this.handlers, function(handler) {
                handler[action]();
            });
        }
    };
    /**
     * Allows for registration of query handlers.
     * Manages the query handler's state and is responsible for wiring up browser events
     *
     * @constructor
     */
    function MediaQueryDispatch () {
        if(!matchMedia) {
            throw new Error('matchMedia not present, legacy browsers require a polyfill');
        }

        this.queries = {};
        this.browserIsIncapable = !matchMedia('only all').matches;
    }

    MediaQueryDispatch.prototype = {

        /**
         * Registers a handler for the given media query
         *
         * @param {string} q the media query
         * @param {object || Array || Function} options either a single query handler object, a function, or an array of query handlers
         * @param {function} options.match fired when query matched
         * @param {function} [options.unmatch] fired when a query is no longer matched
         * @param {function} [options.setup] fired when handler first triggered
         * @param {boolean} [options.deferSetup=false] whether setup should be run immediately or deferred until query is first matched
         * @param {boolean} [shouldDegrade=false] whether this particular media query should always run on incapable browsers
         */
        register : function(q, options, shouldDegrade) {
            var queries         = this.queries,
                isUnconditional = shouldDegrade && this.browserIsIncapable;

            if(!queries[q]) {
                queries[q] = new MediaQuery(q, isUnconditional);
            }

            //normalise to object in an array
            if(isFunction(options)) {
                options = { match : options };
            }
            if(!isArray(options)) {
                options = [options];
            }
            each(options, function(handler) {
                queries[q].addHandler(handler);
            });

            return this;
        },

        /**
         * unregisters a query and all it's handlers, or a specific handler for a query
         *
         * @param {string} q the media query to target
         * @param {object || function} [handler] specific handler to unregister
         */
        unregister : function(q, handler) {
            var query = this.queries[q];

            if(query) {
                if(handler) {
                    query.removeHandler(handler);
                }
                else {
                    query.clear();
                    delete this.queries[q];
                }
            }

            return this;
        }
    };

	return new MediaQueryDispatch();

}));;
var FollowExtendsPostModel = ( function() {
	return {
		isFollowing: function() {
			var postMeta = this.get( 'postMeta' );
			return ( true === postMeta.isFollowing );
		},

		changeFollow: function() {
			if ( this.isFollowing() ) {
				this.unfollow();
			} else {
				this.follow();
			}
		},

		follow: function() {
			var postMeta = this.get( 'postMeta' );
			postMeta.isFollowing = true;
			this.set( { postMeta: postMeta } );
			this.trigger( 'change-follow' );
		},

		unfollow: function() {
			var postMeta = this.get( 'postMeta' );
			postMeta.isFollowing = false;
			this.set( { postMeta: postMeta } );
			this.trigger( 'change-follow' );
		}
	};
} )();

Cocktail.mixin( o2.Models.Post, FollowExtendsPostModel );
;
var FollowExtendsComment = ( function() {
	return {
		initialize: function() {
			setTimeout( function( that ) {
				if ( o2.options.followingAllComments ) {
					that.$( '.comment-subscription-form').text( o2.strings.followingAllComments );
				} else {
					if ( that.$el.parents( '.post-comments-subscribed' ).length ) {
						that.$( '#subscribe' ).prop( 'checked', true );
					} else {
						that.$( '#subscribe' ).prop( 'checked', false );
					}
				}
			}, 0, this );
		},

		events: {
			'change #subscribe:checkbox': 'onClickFollow'
		},

		onClickFollow: function( event ) {
			event.preventDefault();
			event.stopPropagation(); // otherwise, event bubbling out of child comments will cause a single click to multiply
			this.parent.model.trigger( 'update-follow' );
		}
	};
} )();

Cocktail.mixin( o2.Views.Comment, FollowExtendsComment );
;
var FollowExtendsPost = ( function() {
	return {
		initialize: function() {
			this.listenTo( this.model, 'o2-post-rendered',  this.updateFollowView );
			this.listenTo( this.model, 'change-follow',     this.updateFollowView );
			this.listenTo( this.model, 'update-follow',     this.updateFollow );

			_.bindAll( this, 'saveFollowSuccess', 'saveFollowError' );
		},

		events: {
			'click a.o2-follow':      'updateFollow',
			'mouseleave a.o2-follow': 'updateFollowView',
			'touchend a.o2-follow':   'updateFollow'
		},

		updateFollow: function( event ) {
			if ( 'undefined' !== typeof event ) {
				event.preventDefault();
				event.stopPropagation();
			}

			if ( o2.options.followingAllComments ) {
				return; // we don't allow them to unfollow all with this ui
			}

			// Get the current AJAX link
			var link = this.$( '.o2-follow' );
			var href = link.attr( 'href' );

			// Update the model
			this.model.changeFollow();

			// Optimistically update UI
			this.updateFollowView();

			// Notify the app that we are saving
			o2.Events.dispatcher.trigger( 'notify-app.o2', { saveInProgress: true } );

			// Using the original link, send the model changes to the server in a way it understands
			this.model.save( {}, {
				patch: true,
				silent: true,
				url: href + '&ajax',
				success: this.saveFollowSuccess,
				error: this.saveFollowError
			} );
		},

		saveFollowSuccess: function( model, response, xhr ) {
			// `1` is the only true success response
			if ( 1 !== response ) {
				this.saveFollowError( model, xhr );
				return;
			}

			// Notify the app that we have saved
			o2.Events.dispatcher.trigger( 'notify-app.o2', { saveInProgress: false } );
			this.updateFollowView();
		},

		saveFollowError: function( model, xhr ) {
			// Revert the view changes
			o2.Events.dispatcher.trigger( 'notify-app.o2', { saveInProgress: false } );
			this.model.changeFollow();
			this.updateFollowView();

			o2.Notifications.add( {
				type: 'error',
				text: xhr.responseText || o2.strings.followError,
				sticky: true
			} );
		},

		updateFollowView: function() {
			var link = this.$( '.o2-follow' );
			if ( ! link.length ) {
				return;
			}

			var newState = this.model.isFollowing() ? 'subscribed' : 'normal';
			o2.PostActionStates.setState( link, newState );

			var href = link.attr( 'href' );
			if ( this.model.isFollowing() ) {
				link.attr( 'href', href.replace( 'post-comment-subscribe', 'post-comment-unsubscribe' ) );
				this.$( '#subscribe' ).prop( 'checked', true );
			} else {
				link.attr( 'href', href.replace( 'post-comment-unsubscribe', 'post-comment-subscribe' ) );
				this.$( '#subscribe' ).prop( 'checked', false );
			}

			if ( o2.options.followingAllComments ) {
				var nextText = o2.strings.followingAll;
				link.text( nextText );
				link.attr( 'title', nextText );
			}
		}
	};
} )();

Cocktail.mixin( o2.Views.Post, FollowExtendsPost );
;
var o2 = o2 || {};

o2.Views = o2.Views || {};

o2.Views.FlashItems = ( function() {
	return wp.Backbone.View.extend( {
		collection: o2.Collections.Notifications,

		tagName: 'ul',

		className: 'o2-flash-items',

		subviews: {},

		initialize: function() {
			this.listenTo( this.collection, 'add', this.addOne );
			this.listenTo( this.collection, 'reset', this.render );
		},

		addOne: function( model ) {
			if ( ! model.isNotice() ) {
				var itemView = new o2.Views.Notification( {
					model: model
				} );
				this.$el.prepend( itemView.render().el );
				this.subviews[ itemView.model.cid ] = itemView;
			}

			return this;
		},

		render: function() {
			this.collection.each( this.addOne, this );

			return this;
		}
	} );
} )();
;
var StickyPostExtendsPostModel = ( function() {
	return {
		initialize: function() {
			this.on( 'change', this.checkSticky, this );
		},

		checkSticky: function( model ) {
			if ( ! _.isUndefined( model.changed.id ) && _.isUndefined( model.changed.postMeta ) && _.isUndefined( model.changed.postMeta.isSticky ) ) {
				this.trigger( 'change-sticky', this, { scroll: false } );
			}
		},

		isSticky: function() {
			var postMeta = this.get( 'postMeta' );
			if ( 'undefined' === typeof postMeta.isSticky ) {
				return false;
			}
			return postMeta.isSticky;
		},

		changeSticky: function() {
			if ( this.isSticky() ) {
				this.unstick();
			} else {
				this.stick();
			}
		},

		stick: function() {
			var postMeta = this.get( 'postMeta' );
			postMeta.isSticky = true;
			this.set( { postMeta: postMeta } );
			this.trigger( 'change-sticky', this, { scroll: true } );
		},

		unstick: function() {
			var postMeta = this.get( 'postMeta' );
			postMeta.isSticky = false;
			this.set( { postMeta: postMeta } );
			this.trigger( 'change-sticky', this, { scroll: false } );
		}
	};
} )();

Cocktail.mixin( o2.Models.Post, StickyPostExtendsPostModel );
;
var StickyPostsExtendsCollectionsPosts = ( function() {
	return {
		actions: {
			initSticky: {
				handle: 'initSticky',
				on: 'initialize',
				doThis: function( args ) {
					var collection = args.collection;
					collection.comparison = 'sticky';
					collection.on( 'change-sticky', collection.changedSticky, collection );
				},
				priority: 10
			}
		},

		comparators: {
			sticky: function( post1, post2 ) {
				if ( post1.isSticky() === post2.isSticky() ) {
					var orderSign = ( 'DESC' === o2.options.order ) ? -1 : 1;
					return orderSign * o2.Utilities.compareTimes( post1.get( 'unixtime' ), post2.get( 'unixtime' ) );
				} else if ( post1.isSticky() ) {
					return -1;
				}
				return 1;
			}
		},

		// When stickiness is changed, we just remove it from the collection
		// and then add it back in, which triggers a resort and rerender.
		changedSticky: function( model ) {
			this.remove( model, { animate: false } ); // triggers removal of the view without animation
			this.add( model ); // will be added in the correct order based on comparator()
		}
	};
} )();

Cocktail.mixin( o2.Collections.Posts, StickyPostsExtendsCollectionsPosts );
;
var StickyPostExtendsPost = ( function( $ ) {
	return {
		initialize: function() {
			this.listenTo( this.model, 'update-sticky-error', this.updateStickyError );
			this.listenTo( this.model, 'o2-post-rendered',    this.stickyPostView );

			if ( this.model.isSticky() && 'home' === o2.options.viewType ) {
				this.options.showComments = false;
			}
		},

		events: {
			'click a.o2-sticky-link':     'onClickStickyPost',
			'touchend a.o2-sticky-link':  'onClickStickyPost'
		},

		onClickStickyPost: function( event ) {
			event.preventDefault();
			event.stopPropagation();

			// Change the model, then update the view
			this.model.changeSticky();
			this.stickyPostView( this.model.isSticky() );

			// Send the model changes to the server
			var pluginData = {};
			pluginData.callback = 'o2_sticky_posts';
			pluginData.data = {
				postID: this.model.get( 'postID' ),
				isSticky: this.model.isSticky()
			};

			this.model.save( {
				pluginData: pluginData
			}, {
				patch: true,
				silent: true,
				success: this.onStickySaveSuccess,
				error: this.onStickySaveError
			} );
		},

		onStickySaveSuccess: function() {
			// @todo move the view if the save was successful
		},

		onStickySaveError: function( model, xhr ) {
			model.trigger( 'update-sticky-error', xhr );
		},

		getStickyText: function( sticky ) {
			var stickyText;
			if ( sticky ) {
				stickyText = o2.options.stickyPosts.sticky;
			} else {
				stickyText = o2.options.stickyPosts.unsticky;
			}
			return stickyText;
		},

		getStickyTitle: function( sticky ) {
			return ( sticky ) ? o2.options.stickyPosts.stickyTitle : o2.options.stickyPosts.unstickyTitle;
		},

		stickyPostView: function() {
			var newState = this.model.isSticky() ? 'sticky' : 'normal';
			var link = this.$el.find( '.o2-sticky-link' );
			o2.PostActionStates.setState( link, newState );
		},

		updateStickyError: function( xhr ) {
			var responseText = '';
			var errorText = '';
			try {
				responseText = $.parseJSON( xhr.responseText );
				errorText = responseText.errorText;
			} catch ( e ) {
				errorText = xhr.responseText;
			}

			o2.Notifications.add( {
				type: 'error',
				text: errorText,
				sticky: true
			} );
		}
	};
} )( jQuery );

Cocktail.mixin( o2.Views.Post, StickyPostExtendsPost );
;
var StickyPostsExtendsViewsPosts = ( function( $ ) {
	return {
		initialize: function() {
			this.listenTo( this.collection, 'change-sticky', this.changedSticky );
		},

		changedSticky: function( model, options ) {
			if ( options.scroll ) {
				$( 'html, body' ).animate( {
					scrollTop: $( '#post-' + model.get( 'id' ) ).offset().top - 50
				}, 1000 );
			}
		}
	};
} )( jQuery );

Cocktail.mixin( o2.Views.Posts, StickyPostsExtendsViewsPosts );
;
/*
 * jQuery WordPress REST Proxy Request
 * Name:   wpcom_proxy_request
 * Author: Beau Collins <beaucollins@gmail.com>
 *
 * A plugin for jQuery that makes proxy requests (using window.postMessage) to the
 * WordPress.com REST api (https://public-api.wordpress.com/rest/v1/help)
 *
 * Usage:
 * 	jQuery.wpcom_proxy_request( path );
 * 	jQuery.wpcom_proxy_request( path, request );
 * 	jQuery.wpcom_proxy_request( request );
 *
 * Arguments:
 * 	path     : the REST URL path to request (will be appended to the rest base URL)
 * 	request  : request parameters: method (string), path (string), query (object), body (object)
 *
 * Returns
 * 	A jQuery promise() whose callbacks accept the following arguments:
 * 		response : the JSON response for your request
 * 		statusCode : the HTTP statusCode for your request
 *
 * Example:
 * 	// For simple GET requests
 * 	jQuery.wpcom_proxy_request( '/me' ).done( function( response, statusCode ){
 * 		/// ...
 * 	} );
 *
 * 	// More Advanced GET request
 * 	jQuery.wpcom_proxy_request( {
 * 		path: '/sites/en.blog.wordpress.com/posts',
 * 		query: { number: 100 }
 * 	} );
 *
 * 	// POST request
 * 	jQuery.wpcom_proxy_request( {
 * 		method: 'POST',
 * 		path: '/sites/en.blog.wordpress.com/posts/9776/replies/new',
 * 		body: { content: 'This is a comment' }
 * 	} );
 */
(function($){
	// don't run this more than once per context
	if ( $.wpcom_proxy_request) {
		return;
	}

	var proxy,
	origin         = window.location.protocol + '//' + window.location.hostname,
	proxyOrigin    = 'https://public-api.wordpress.com',

	ready          = false,
	supported      = true, // assume window.postMessage is supported
	usingPM        = false, // If we don't have window.postMessage, postmessage.js may be available
	structuredData = true, // supports passing of structured data

	bufferedOps    = [],   // store requests while we wait for the proxy iframe to initialize

	// Store `jQuery.Deferred` objects for each pending request.
	deferreds      = {},

	// Store `this` context objects for each pending request, if given.
	callbackContexts = {},

	/**
	 * Firefox apparently doesn't like sending `File` instances cross-domain.
	 * It results in a "DataCloneError: The object could not be cloned." error.
	 * Apparently this is for "security purposes" but it's actually silly if that's
	 * the argument because we can just read the File manually into an ArrayBuffer
	 * and we can work around this "security restriction".
	 *
	 * See: https://bugzilla.mozilla.org/show_bug.cgi?id=722126#c8
	 */
	 hasFileSerializationBug = false,

	 // Can we pass structured data via postMessage or just strings?
	check = function( event ){
		structuredData = 'object' === typeof event.originalEvent.data;
		$(window).unbind( 'message', check );
		buildProxy();
	},

	// Initialize the proxy iframe
	buildProxy = function() {
		// Start listening to messages
		if ( !usingPM ) {
			$(window).bind( 'message', receive );
		} else {
			pm.bind( 'proxy', function( e ) { receive( e ); } );
		}

		proxy = document.createElement( 'iframe' );
		proxy.src = 'https://public-api.wordpress.com/wp-admin/rest-proxy/#' + origin;
		proxy.style.display = 'none';

		// Process any buffered API calls after the iframe proxy is ready
		$(proxy).bind( 'load', function() {
			var request;
			ready = true;
			while ( request = bufferedOps.shift() ) {
				postRequest( request );
			}
		});

		// Bring it
		$(document).ready( function() {
			$(document.body).append( proxy );
		} );
	},

	// Message event listener
	receive = function( e ){
		var event,
			data,
			deferred_id,
			deferred,
			context;

		if ( !usingPM ) {
			// look at the real event, not the jQuery mocked one
			event = e.originalEvent;

			if ( event.origin !== proxyOrigin ) {
				return;
			}

			data = structuredData ? event.data : JSON.parse( event.data );
		} else {
			data = e;
		}

		if ( !data || !data.length ) {
			return;
		}

		deferred_id = data[ data.length - 1 ];

		if ( 'undefined' === typeof deferreds[deferred_id] ) {
			return;
		}

		deferred = deferreds[deferred_id];
		delete deferreds[deferred_id];

		context = callbackContexts[ deferred_id ];
		if ( context ) {
			// `resolveWith` takes args as an array.
			deferred.resolveWith.call( deferred, context, data.slice( 0, -1 ) );
			delete callbackContexts[ deferred_id ];
		} else {
			// `resolve` takes args as a list of parameters.
			deferred.resolve.apply( deferred, data.slice( 0, -1 ) );
		}
	},

	// Calls API
	perform = function() {
		var request = buildRequest.apply( null, arguments );

		postRequest( request );

		return deferreds[request.callback].promise();
	},

	// Buffers API request
	buffer = function() {
		var request = buildRequest.apply( null, arguments );

		bufferedOps.push( request );

		return deferreds[request.callback].promise();
	},

	// Submits the API request to the proxy iframe
	postRequest = function( request ) {
		var files = findFilesInRequest( request ),
	 		data = structuredData ? request : JSON.stringify( request );

		if ( hasFileSerializationBug && files.has_files ) {
			postAsArrayBuffer( request, files );
		} else {
			try {
				sendPostMessage( data );
			} catch( e ) {
				// were we trying to serialize a `File`?
				if ( files.has_files ) {

					// cache this check for the next API request
					hasFileSerializationBug = true;
					postAsArrayBuffer( request, files );
				} else {
					// not interested, rethrow
					throw e;
				}
			}
		}
	},

	sendPostMessage = function( data ) {
		if ( !usingPM ) {
			proxy.contentWindow.postMessage( data, proxyOrigin );
		} else if ( window.pm ) {
			pm( {
				data  : data,
				type  : 'proxy',
				target: proxy.contentWindow,
				url   : 'https://public-api.wordpress.com/wp-admin/rest-proxy/#' + origin,
				origin: proxyOrigin
			} );
		}
	},

	postAsArrayBuffer = function( request, files ) {
		if ( ! files.has_files )
			return;


		$.each( files.file_keys, function( n, i ){
			var reader = new FileReader(),
				key = request.formData[i][0],
				file = request.formData[i][1];

			reader.onload = function(e) {
				request.formData[i] = [ key, {
					fileContents: e.target.result,
					fileName : file.name,
					mimeType: file.type
				} ];

				var are_there_still_files = findFilesInRequest( request );
				if ( ! are_there_still_files.has_files ) {
					proxy.contentWindow.postMessage( request, proxyOrigin );
				}
			};

			reader.readAsArrayBuffer( file );
		});
	},

	findFilesInRequest = function( request ) {
		var files = {
			has_files : false,
			file_keys : []
		};

		if ( ! structuredData || ! request.formData || request.formData.length <= 0 )
			return files;

		$.each( request.formData, function( i, arr ) {
			var maybe_a_file = arr[1];
			if ( 'object' == typeof maybe_a_file && '[object File]' == Object.prototype.toString.call( maybe_a_file ) ) {
				files.has_files = true;
				files.file_keys.push( i );
			}
		});

		return files;
	},

	// Builds the postMessage request object
	buildRequest = function() {
		var args     = jQuery.makeArray( arguments ),
		    request  = args.pop(),
		    path     = args.pop(),
		    deferred = new jQuery.Deferred(),
		    deferred_id;

		// @todo - remove this back-compat code
		if ( jQuery.isFunction( request ) ) {
			deferred.done( request );
			request = path;
			path    = args.pop();
		}

		if ( 'string' === typeof( request ) ) {
			request = { path: request };
		}

		if ( path ) {
			request.path = path;
		}

		do {
			deferred_id = Math.random();
		} while ( 'undefined' !== typeof deferreds[deferred_id] );

		deferreds[deferred_id] = deferred;

		if ( request.context ) {
			callbackContexts[ deferred_id ] = request.context;
			// Trying to pass functions through `postMessage` is a bad time.
			request = jQuery.extend( {}, request );
			delete request.context;
		}

		request.callback = deferred_id;
		request.supports_args = true; // supports receiving variable amount of arguments
		return request;
	};

	// Step 1: do we have postMessage? ( in IE8, typeof window.postMessage == 'object' )
	if ( jQuery.inArray( typeof window.postMessage, [ 'function', 'object' ] ) != -1 ) {
		// Step 2: Check if we can pass structured data or just strings
		$(window).bind( 'message', check );
		window.postMessage( {}, origin );
	} else if ( window.pm ) {
		usingPM = true;
		// Step 2: We can always just used structured data.
		buildProxy();
	} else {
		supported = false;
	}

	$.wpcom_proxy_request = function(){
		if ( !supported ) {
			throw( 'Browser does not support window.postMessage' );
		}

		if ( ready ) {
			// Make API request
			return perform.apply( null, arguments );
		} else {
			// Buffer API request
			return buffer.apply( null, arguments );
		}
	};

	$.wpcom_proxy_rebuild = function() {
		if ( !ready )
			return;

		ready = false;
		$(proxy).remove();

		buildProxy();
	};
})(jQuery);
;
var o2 = o2 || {};

o2.Utilities = o2.Utilities || {};

o2.Utilities.closeActionDropdowns = function() {
	// Raise an event on the o2 container to prompt post views to close open disclosures
	o2.Events.doAction( 'dropdown-actions:closeall.o2', {} );
};

jQuery( document ).click( function( event ) {
	o2.Utilities.closeActionDropdowns( event );
} ).on( 'touchend', function( event ) {
	o2.Utilities.closeActionDropdowns( event );
} );
;
var CommentActionsExtendsComment = ( function() {
	return {
		events: {
			'mouseenter': 'onHoverComment',
			'mouseleave': 'onLeaveComment'
		},

		initialize: function() {
			this.listenTo( this.model, 'o2-comment-rendered', this.onCommentRender );
		},

		/* Since .is( ':hover' ) is no longer supported in jQuery, and since our comments are nested */
		/* we need to do some fancy stuff to get the comment actions disclosure to appear on the */
		/* correct comment on hover */

		onHoverComment: function() {
			this.$el.addClass( 'hovered' );
		},

		onLeaveComment: function() {
			this.$el.removeClass( 'hovered' );
		},

		/* Hide the comment dropdown disclosure until the comment gets hovered */
		onCommentRender: function() {
			var isTouch = false;
			if ( 'undefined' !== typeof o2.options.isMobileOrTablet ) {
				isTouch = o2.options.isMobileOrTablet;
			}
			if ( ! isTouch ) {
				if ( ! this.$el.hasClass( 'hovered' ) ) {
					this.$el.find( '.o2-dropdown-actions-disclosure' ).first().hide();
				}
			}
		}
	};
} )();

Cocktail.mixin( o2.Views.Comment, CommentActionsExtendsComment );;
var PostActionsExtendsPost = ( function( $ ) {
	return {
		events: {
			'click .o2-dropdown-actions-disclosure': 'onClickDropdown',
			'mouseenter .o2-resolve-wrap': 'onHoverResolvedPosts',
			'mouseenter .o2-post-footer-action': 'onHoverFooterAction',
			'mouseleave .o2-post-footer-action': 'onLeaveFooterAction',
			'mouseenter .o2-comment': 'updateCommentDisclosures',
			'mouseleave .o2-comment': 'updateCommentDisclosures'
		},

		initialize: function() {
			this.listenTo( this.model.comments, 'add', this.updateFooterReplyButtonCount );
			this.listenTo( this.model.comments, 'remove', this.updateFooterReplyButtonCount );
			this.listenTo( this.model, 'o2-post-rendered', this.updateFooterReplyButtonCount );

			_.bindAll( this, 'closeOpenDisclosures' );
			o2.$appContainer.on( 'dropdown-actions:closeall.o2', this.closeOpenDisclosures );
		},

		onClickDropdown: function( event ) {
			event.preventDefault();
			event.stopPropagation();

			var target = $( event.target );
			var needsOpening = ! target.hasClass( 'open' );

			// First, close any open dropdown in any post or comment
			o2.Events.doAction( 'dropdown-actions:closeall.o2', {} );

			// Next, open this dropdown if need be
			if ( needsOpening ) {
				target.siblings( 'ul' ).show();
				target.addClass( 'open' );
			}
		},

		onHoverResolvedPosts: function( event ) {
			var buttonTarget = $( event.target );
			var buttonOffset = buttonTarget.offset();
			var buttonWidth = buttonTarget.width();

			var auditList = buttonTarget.siblings( 'ul' );

			auditList.offset( {
				left: buttonOffset.left + buttonWidth + 20,
				top: buttonOffset.top
			} );
		},

		/*
		 * If a footer post action has hoverText defined for its current state, swap in that text on hover
		 */
		onHoverFooterAction: function( event ) {
			var buttonTarget = $( event.target );
			var action = buttonTarget.data( 'action' );
			var actionState = buttonTarget.data( 'actionstate' );
			if ( ( 'undefined' !== typeof action ) && ( 'undefined' !== typeof actionState ) ) {
				var hoverText = o2.PostActionStates.stateDictionary[ action ][ actionState ].hoverText;
				if ( 'undefined' !== typeof hoverText ) {
					buttonTarget.text( hoverText );
				}
			}
		},

		/*
		 * If a footer post action has hoverText defined for its current state, swap the original text
		 * back in when no longer hovering
		 */
		onLeaveFooterAction: function( event ) {
			var buttonTarget = $( event.target );
			var action = buttonTarget.data( 'action' );
			var actionState = buttonTarget.data( 'actionstate' );
			if ( ( 'undefined' !== typeof action ) && ( 'undefined' !== typeof actionState ) ) {
				var hoverText = o2.PostActionStates.stateDictionary[ action ][ actionState ].hoverText;
				if ( 'undefined' !== typeof hoverText ) {
					var shortText = o2.PostActionStates.stateDictionary[ action ][ actionState ].shortText;
					buttonTarget.text( shortText );
				}
			}
		},

		updateFooterReplyButtonCount: function() {
			var footerReplyButton = this.$el.find( '.o2-post-reply' );
			if ( footerReplyButton.length ) {
				footerReplyButton.find( '.o2-reply-count' ).remove();
				// var commentCount = this.model.comments.length;

				var commentCount = this.model.comments.filter( function( model ) {
					return ( 'undefined' !== typeof model.id );
				} ).length;

				if ( commentCount > 0 ) {
					footerReplyButton.append( '<span class="o2-reply-count">' + commentCount + '</span>' );
				}
			}
		},

		closeOpenDisclosures: function() {
			// Removes the open class from any disclosure and hide the ul
			this.$el.find( '.o2-dropdown-actions-disclosure' ).removeClass( 'open' );
			this.$el.find( '.o2-dropdown-actions > ul' ).hide();

			// Lastly, update comment disclosures (to avoid ones that were
			// tapped open but no longer hovered from remaining visible)
			this.updateCommentDisclosures();
		},

		updateCommentDisclosures: function() {
			var isTouch = false;
			if ( 'undefined' !== typeof o2.options.isMobileOrTablet ) {
				isTouch = o2.options.isMobileOrTablet;
			}

			// if we are on a touch device, don't hide anything
			if ( ! isTouch ) {
				// Otherwise, only show comment action disclosure on comments without hovered children
				for ( var subview in this.subviews ) {
					var commentEl = this.subviews[ subview ].$el;
					var disclosure = commentEl.find( '.o2-dropdown-actions-disclosure' ).first();

					// If the disclosure has the open class, leave it alone
					if ( ! disclosure.hasClass( 'open' ) ) {
						// Otherwise, do our hover logic
						if ( commentEl.hasClass( 'hovered' ) ) {
							if ( commentEl.find( '.hovered' ).length ) {
								disclosure.hide();
							} else {
								disclosure.show();
							}
						} else {
							disclosure.hide();
						}
					}
				}
			}
		}
	};
} )( jQuery );

Cocktail.mixin( o2.Views.Post, PostActionsExtendsPost );
;
