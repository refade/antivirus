/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 73);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 * Utils
 */



var Utils = {};

// Returns the major version number or null if not IE <10
Utils.ieVersion = function () {
  var ua = window.navigator.userAgent;

  var msie = ua.indexOf('MSIE ');
  if (msie > 0) {
    // IE 10 or older => return version number
    return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
  }

  var trident = ua.indexOf('Trident/');
  if (trident > 0) {
    // IE 11 => return version number
    var rv = ua.indexOf('rv:');
    return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);
  }

  var edge = ua.indexOf('Edge/');
  if (edge > 0) {
    // IE 12 => return version number
    return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);
  }

  return false;
};

// Returns true or false for a major version or any version if no argument
Utils.isIE = function (checkVersion) {
  var version = Utils.ieVersion();
  return checkVersion ? version === checkVersion : !!version;
};

// Returns browser name & browser version
Utils.getBrowser = function () {
  var ua = window.navigator.userAgent,
      tem,
      M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
  if (/trident/i.test(M[1])) {
    tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
    return 'IE ' + (tem[1] || '');
  }
  if (M[1] === 'Chrome') {
    tem = ua.match(/\bOPR\/(\d+)/);
    if (tem !== null) {
      return 'Opera ' + tem[1];
    }
  }
  M = M[2] ? [M[1], M[2]] : [window.navigator.appName, window.navigator.appVersion, '-?'];
  if ((tem = ua.match(/version\/(\d+)/i)) !== null) {
    M.splice(1, 1, tem[1]);
  }
  return M;
};

// Returns whether or not this is a touch device
Utils.isTouchDevice = function () {
  return !!('ontouchstart' in window || window.navigator.MaxTouchPoints > 0 || window.navigator.msMaxTouchPoints > 0);
};

/* A set of functions to work with cookies */

var YEAR_TO_MONTHS = 12;
var MONTH_TO_DAYS = 30.4167;
var DAY_TO_HOURS = 24;
var HOUR_TO_MINUTES = 60;
var MINUTE_TO_SECONDS = 60;
var SECOND_TO_MILISECONDS = 1000;

/**
 * Gets the cookie value
 * @param  {string} cookieKey - The cookie key
 * @return {string}           - The cookie value
 */
Utils.getCookieValue = function (cookieKey) {
  if (!cookieKey) {
    return null;
  }
  return decodeURIComponent(document.cookie.replace(new RegExp("(?:(?:^|.*;)\\s*" + encodeURIComponent(cookieKey).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=\\s*([^;]*).*$)|^.*$"), "$1")) || null;
};

/**
 * Checks if a cookie exists
 * @param  {string} cookieKey - The cookie key
 * @return {boolean}           - Whether the cookie exists
 */
Utils.hasCookie = function (cookieKey) {
  if (!cookieKey) {
    return false;
  }
  return new RegExp("(?:^|;\\s*)" + encodeURIComponent(cookieKey).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=").test(document.cookie);
};

/**
 * Removes the cookie
 * @param  {string} cookieKey - The cookie key
 * @param  {string} cookiePath - The cookie path
 * @param  {string} cookieDomain - The cookie domain
 * @return {boolean}           - Whether the cookie was removed
 */
Utils.removeCookie = function (cookieKey, cookiePath, cookieDomain) {
  if (!Utils.hasCookie(cookieKey)) {
    return false;
  }
  document.cookie = encodeURIComponent(cookieKey) + "=; expires=Thu, 01 Jan 1970 00:00:00 GMT" + (cookieDomain ? "; domain=" + cookieDomain : "") + (cookiePath ? "; path=" + cookiePath : "");
  return true;
};

/**
 * Sets a cookie value
 * @param  {string} cookieKey - The cookie key
 * @param  {string} cookieValue - The cookie value
 * @param  {string} cookieExpiration - The Expires/Max-Age value
 * @param  {string} cookiePath - The cookie path
 * @param  {string} cookieDomain - The cookie domain
 * @param  {boolean} isSecure - The cookie secure flag
 * @return {boolean}           - Whether the cookie was set
 */
Utils.setCookie = function (cookieKey, cookieValue, cookieExpiration, cookiePath, cookieDomain, isSecure) {
  if (!cookieKey || /^(?:expires|max\-age|path|domain|secure)$/i.test(cookieKey)) {
    return false;
  }
  var cookieExpirationString = "";
  if (cookieExpiration) {
    switch (cookieExpiration.constructor) {
      case Number:
        cookieExpirationString = cookieExpiration === Infinity ? "; expires=Fri, 31 Dec 9999 23:59:59 GMT" : "; max-age=" + cookieExpiration;
        break;
      case String:
        cookieExpirationString = "; expires=" + cookieExpiration;
        break;
      case Date:
        cookieExpirationString = "; expires=" + cookieExpiration.toUTCString();
        break;
    }
  }
  document.cookie = encodeURIComponent(cookieKey) + "=" + encodeURIComponent(cookieValue) + cookieExpirationString + (cookieDomain ? "; domain=" + cookieDomain : "") + (cookiePath ? "; path=" + cookiePath : "") + (isSecure ? "; secure" : "");
  return true;
};

/**
 * Changes the Expires/Max-Age value for the cookie
 * @param  {string} cookieKey - The cookie key
 * @param  {string} cookieExpiration - The new cookie Expires/Max-Age value
 * @param  {string} cookiePath - The cookie path
 */
Utils.changeCookieExpirationDate = function (cookieKey, cookieExpiration, cookiePath) {
  if (!Utils.hasCookie(cookieKey)) {
    return false;
  }
  var cookieValue = Utils.getCookieValue(cookieKey);
  Utils.setCookie(cookieKey, cookieValue, cookieExpiration, cookiePath);
};

/**
 * Turns time into miliseconds
 * @param  {Number} value    - A numeric unit stripped of time, which is provided in the next parameter
 * @param  {string} timeUnit – The unit of time that the previous parameter is expressed in.
 * @return {number}          – Time in miliseconds
 */
Utils.getCookieExpirationTime = function (value, timeUnit) {
  var time = value;

  switch (timeUnit) {
    case 'years':
      time *= YEAR_TO_MONTHS;
    case 'months':
      time *= MONTH_TO_DAYS;
    case 'days':
      time *= DAY_TO_HOURS;
    case 'hours':
      time *= HOUR_TO_MINUTES;
    case 'minutes':
      time *= MINUTE_TO_SECONDS;
    case 'seconds':
      time *= SECOND_TO_MILISECONDS;
      break;
    default:
      time *= 0;
      break;
  }

  return time;
};

/**
 * Converts the cookie expiration in hours to milliseconds, compatible with cookies
 */
Utils.getCookieExpirationFromHours = function (cookieExpirationTimeInHours) {
  var now = new Date();
  var time = now.getTime();
  var cookieExpirationTimeInMiliseconds = Utils.getCookieExpirationTime(cookieExpirationTimeInHours, 'hours');
  time += cookieExpirationTimeInMiliseconds;
  now.setTime(time);
  return now;
};

/**
 * Cross-browser check for Flash plugin being installed and enabled
 */
Utils.isFlashPresent = function () {
  var hasFlash = false;
  try {
    var fo = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
    if (fo) {
      hasFlash = true;
    }
  } catch (e) {
    if (window.navigator.mimeTypes && window.navigator.mimeTypes['application/x-shockwave-flash'] !== undefined && window.navigator.mimeTypes['application/x-shockwave-flash'].enabledPlugin) {
      hasFlash = true;
    }
  }
  return hasFlash;
};

/**
 * Appends the script to the head of the document
 */
Utils.loadJavascript = function (url, callback) {
  var el = document.createElement("script");
  el.type = "text/javascript";
  el.src = url;
  document.getElementsByTagName("head")[0].appendChild(el);
  el.onload = el.onreadystatechange = function () {
    if (!this.readyState || this.readyState == 'loaded' || this.readyState == 'complete') {
      callback();
    }
  };
};

/**
 * Cross-browser check for Youku API being able to work with the browser without Flash Player
 */
Utils.isYoukuPlayerValid = function (callback) {
  // Validate callbacks are functions
  var callback = typeof callback !== 'function' ? function () {} : callback;

  // Variable declaration
  var result, dummyYoukuPlayer, ykIsMobile, ykPlayerType, cookieValue;

  //check for cookie and return its value if it exists
  if (Utils.hasCookie('is-youku-player-valid')) {
    cookieValue = Utils.getCookieValue('is-youku-player-valid');
    return callback(cookieValue);
  } else {
    //append the script to head and check PlayerType as soon as it's loaded
    Utils.loadJavascript('http://player.youku.com/jsapi', youkuScriptLoaded);
  }

  function youkuScriptLoaded() {
    dummyYoukuPlayer = new YoukuPlayerSelect({
      vid: 'X',
      client_id: '0edbfd2e4fc91b72', // Youku's client ID, not Juniper's
      target: 'X'
    });

    ykIsMobile = dummyYoukuPlayer._isMobile;
    ykPlayerType = dummyYoukuPlayer.playerType();

    // True if the device is mobile, and the player type is different that `flash`; or if the device is not mobile and the player type is flash
    result = ykIsMobile === false && ykPlayerType === "flash" || ykIsMobile === true && ykPlayerType !== "flash" ? true : false;
    //set session cookie
    Utils.setCookie('is-youku-player-valid', result, null, '/');
    callback(result);
  }
};

module.exports = Utils;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.8.3
//     http://underscorejs.org
//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind,
    nativeCreate       = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object.
  if (true) {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.8.3';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      case 2: return function(value, other) {
        return func.call(context, value, other);
      };
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  // A mostly-internal function to generate callbacks that can be applied
  // to each element in a collection, returning the desired result — either
  // identity, an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value)) return _.matcher(value);
    return _.property(value);
  };
  _.iteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, undefinedOnly) {
    return function(obj) {
      var length = arguments.length;
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  var property = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = property('length');
  var isArrayLike = function(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  function createReduce(dir) {
    // Optimized iterator function as using arguments.length
    // in the main function will deoptimize the, see #1991.
    function iterator(obj, iteratee, memo, keys, index, length) {
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    }

    return function(obj, iteratee, memo, context) {
      iteratee = optimizeCb(iteratee, context, 4);
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      // Determine the initial value if none is provided.
      if (arguments.length < 3) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      return iterator(obj, iteratee, memo, keys, index, length);
    };
  }

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var key;
    if (isArrayLike(obj)) {
      key = _.findIndex(obj, predicate, context);
    } else {
      key = _.findKey(obj, predicate, context);
    }
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      var func = isFunc ? method : value[method];
      return func == null ? func : func.apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var set = isArrayLike(obj) ? obj : _.values(obj);
    var length = set.length;
    var shuffled = Array(length);
    for (var index = 0, rand; index < length; index++) {
      rand = _.random(0, index);
      if (rand !== index) shuffled[index] = shuffled[rand];
      shuffled[rand] = set[index];
    }
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iteratee(value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iteratee, context) {
      var result = {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key]++; else result[key] = 1;
  });

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var pass = [], fail = [];
    _.each(obj, function(value, key, obj) {
      (predicate(value, key, obj) ? pass : fail).push(value);
    });
    return [pass, fail];
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, startIndex) {
    var output = [], idx = 0;
    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        //flatten current level of array or arguments object
        if (!shallow) value = flatten(value, shallow, strict);
        var j = 0, len = value.length;
        output.length += len;
        while (j < len) {
          output[idx++] = value[j++];
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(flatten(arguments, true, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      for (var j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = flatten(arguments, true, true, 1);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    return _.unzip(arguments);
  };

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices
  _.unzip = function(array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Generator function to create the findIndex and findLastIndex functions
  function createPredicateIndexFinder(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  }

  // Returns the first index on an array-like that passes a predicate test
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generator function to create the indexOf and lastIndexOf functions
  function createIndexFinder(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
            i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  }

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    step = step || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var args = slice.call(arguments, 2);
    var bound = function() {
      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
    };
    return bound;
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var i, length = arguments.length, key;
    if (length <= 1) throw new Error('bindAll must be passed function names');
    for (i = 1; i < length; i++) {
      key = arguments[i];
      obj[key] = _.bind(obj[key], obj);
    }
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){
      return func.apply(null, args);
    }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  function collectNonEnumProps(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  }

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object
  // In contrast to _.map it returns an object
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys =  _.keys(obj),
          length = keys.length,
          results = {},
          currentKey;
      for (var index = 0; index < length; index++) {
        currentKey = keys[index];
        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
      }
      return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s)
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(object, oiteratee, context) {
    var result = {}, obj = object, iteratee, keys;
    if (obj == null) return result;
    if (_.isFunction(oiteratee)) {
      keys = _.allKeys(obj);
      iteratee = optimizeCb(oiteratee, context);
    } else {
      keys = flatten(arguments, false, false, 1);
      iteratee = function(value, key, obj) { return key in obj; };
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj, iteratee, context) {
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
    } else {
      var keys = _.map(flatten(arguments, false, false, 1), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  };

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return _.has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), and in Safari 8 (#1929).
  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj !== +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  _.property = property;

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    return obj == null ? function(){} : function(key) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

   // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property, fallback) {
    var value = object == null ? void 0 : object[property];
    if (value === void 0) {
      value = fallback;
    }
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result(this, func.apply(_, args));
      };
    });
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return result(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function() {
    return '' + this._wrapped;
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
      return _;
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
}.call(this));


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Animation for homepage components
 */



function ScrolledIntoViewCtrl() {

    // A safe scope is a happy scope
    if (this === undefined || this instanceof ScrolledIntoViewCtrl === false) {
        // the constructor was called without "new".
        return new ScrolledIntoViewCtrl();
    }

    var _this = this;
    var $window = $(window);

    this.eventHandler = null;
    this.blocks = [];

    this.add = function (elem, options) {
        // Add element into the ScrolledIntoViewItem queue
        this.blocks.push(new ScrolledIntoViewItem(elem));

        // Add element children into the ScrolledIntoViewItem queue, if provided
        if (typeof options === 'object') {
            if (options.hasOwnProperty('children') === true) {
                var childList = [];

                if (typeof options.children === 'object') {
                    if (Array.isArray(options.children)) {
                        childList = options.children.filter(function (childElement) {
                            return typeof childElement === 'object';
                        });
                    } else {
                        childList[0] = options.children;
                    }
                } else if (typeof options.children === 'string') {
                    Array.prototype.push.apply(childList, Array.prototype.slice.call(elem.querySelectorAll(options.children)));
                };

                childList.forEach(function (childElement) {
                    this.blocks.push(new ScrolledIntoViewItem(childElement));
                }, this);
            }
        }

        //trigger animation on elements in view as soon as the DOM is ready
        this.animationHandler();
    };

    this.animationHandler = function (e) {
        if (_this.blocks.length > 0) {
            // If scroll handler isn't set, set it
            if (_this.eventHandler === null) {
                init();
            }

            _this.blocks.forEach(function (block, index, blockArray) {
                if (block.getViewed() === true) return;

                isScrolledIntoView(block);

                if (block.getViewed() === true) blockArray[index] = null;
            });
        }

        _this.blocks = _this.blocks.filter(function (elem, index) {
            return elem !== null;
        });

        if (_this.blocks.length === 0) {
            // with no animated elements left behind the scroll event can be disabled
            $window.off('scroll', _this.animationHandler);
            _this.eventHandler = null;
        }
    };

    function isScrolledIntoView(block) {
        var window_height = $window.height();
        var window_top_position = $window.scrollTop();
        var window_bottom_position = window_top_position + window_height;

        var element_height = block.elem.outerHeight();
        var element_top_position = block.elem.offset().top;
        var element_bottom_position = element_top_position + element_height;

        //check to see if this current container is within viewport
        if ( /*(element_bottom_position >= window_top_position) &&*/
        element_top_position <= window_bottom_position) {
            block.setViewed(true);
        }
    }

    var init = function () {
        this.eventHandler = $(window).on('scroll', this.animationHandler);
    };
    init = init.bind(this);
}

function ScrolledIntoViewItem(elem) {
    this.elem = $(elem);
    var _this = this;
    var _viewed = false;

    this.setViewed = function (bool) {
        if (typeof bool !== 'boolean') {
            return;
        }

        this.elem.attr('viewed', bool.toString());
        _viewed = bool;
        return bool;
    };
    this.setViewed(_viewed);

    this.getViewed = function () {
        return _viewed;
    };
}

var scrolledIntoViewCtrl = new ScrolledIntoViewCtrl();

module.exports = scrolledIntoViewCtrl;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Responsive singleton
 */



var Responsive = function () {

  var Def = function () {
    this.currentSize = 'desktop';
  };

  Def.prototype.getSize = function () {
    var w = $(window).width();

    if (w <= 319) {
      $(window).trigger('break-small');
      this.currentSize = 'small';
    }
    if (w <= 640 && w >= 320) {
      $(window).trigger('break-mobile');
      this.currentSize = 'mobile';
    }
    if (w <= 768 && w >= 641) {
      $(window).trigger('break-tablet');
      this.currentSize = 'tablet';
    }
    if (w > 640) {
      $(window).trigger('break-greater-than-mobile');
    }
    if (w > 768) {
      $(window).trigger('break-greater-than-tablet');
    }
    if (w > 768 && w <= 1023) {
      this.currentSize = 'desktop';
    }
    if (w <= 768) {
      $(window).trigger('break-less-than-tablet');
    }
    if (w < 1024) {
      $(window).trigger('break-medium-screen');
    }
    if (w > 1024) {
      $(window).trigger('break-greater-than-medium');
    }
    if (w <= 1280 && w >= 1024) {
      $(window).trigger('break-medium');
      this.currentSize = 'medium';
    }
    if (w > 1280) {
      $(window).trigger('break-large');
      this.currentSize = 'large';
    }

    return this.currentSize;
  };

  return {
    getInstance: function () {
      if (!this._instance) {
        this._instance = new Def();
      }
      return this._instance;
    }
  };
}();

(function () {
  if (typeof window.juniGetResponsiveInstace !== 'function') {
    window.juniGetResponsiveInstace = Responsive.getInstance().getSize.bind(this);
  }
}).bind(Responsive)();

$(window).resize(function () {
  Responsive.getInstance().getSize();
}).resize();
$(document).ready(function () {
  Responsive.getInstance().getSize();
});

module.exports = Responsive.getInstance();

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Super Slider
 */



var Utils = __webpack_require__(0);

var SuperSlider = module.exports = function () {

  var def = function (el, options) {
    this.els = {
      $slider: $(el)
    };

    this.initOpts = options || {};

    // default config
    this.opts = {
      visible: {
        desktop: true,
        tablet: true,
        mobile: true
      },
      dots: {
        tablet: true,
        mobile: true
      },
      arrows: {
        desktop: true
      },
      disableswipe: {
        mobile: false,
        tablet: false
      },
      group: {
        // no grouping is default
      },
      autoadvance: {
        // no auto advance default
      },
      continuous: {
        // not continuous scroll by default
      }
    };

    // default visible: true
    this.visible = _.has(this.initOpts, 'visible') ? this.initOpts.visible : true;
    this.imagesPreloaded = false; // data-image tags interpreted?
    this.autoGroupSize = 0; // current grouping

    init.call(this);
  };

  var init = function () {
    this.parseOpts(); // parse classes of the slider element that determine control behavior
    this.getEls(); // get jQuery references to components
    this.createNav(); // generate navigation elements: arrows / dots
    this.bind(); // attach resize listener, which drives other listeners
  };

  def.prototype = {

    classPrefix: 'jnpr-slider-',

    template: {

      arrowsContainer: '<div class="jnpr-slider-arrows-container" />',
      arrows: '<a href="#/" class="slider-control-prev"><i class="icon icon-inline icon-search_arrow_left"></i></a><a href="#/" class="slider-control-next"><i class="icon icon-inline icon-search_arrow_right"></i></a>',

      dotsContainer: '<div class="jnpr-slider-dots-container" />',
      dots: '<div class="slider-control-wrapper slider-dots-overlay"><div class="slider-control-inner-wrapper"></div></div>',

      dot: '<span class="slider-control" />'
    },

    select: {
      slider: '.jnpr-slider',
      container: '.jnpr-slider-container',
      swipeWrap: '.swipe-wrap',
      arrowsContainer: '.jnpr-slider-arrows-container',
      dotsContainer: '.jnpr-slider-dots-container',
      dotsInnerWrap: '.slider-control-inner-wrapper',
      dot: '.slider-control',
      prevArrow: '.slider-control-prev',
      nextArrow: '.slider-control-next'
    },

    state: {
      activeDot: 'is-active',
      hideArrow: 'is-hidden',
      activeItem: 'item-is-active',
      hasArrows: 'jnpr-slider-has-arrows'
    },

    media: ['desktop', 'tablet', 'mobile'],

    autoadvanceDefault: 2, // seconds

    /**********************************************************************
      / this.parseOpts()
      /----------------------------------------------------------------------
      / Examines the classes of the $slider element for configuration options,
      / Overriding this.defaults setting for this.opts according to formula:
      /
      /   jnpr-slider-{featureName}-{media1}[-{media2}][etc.]
      /
      / For example these classes:
      /    jnpr-slider-feature1-mobile
      /    jnpr-slider-feature2-mobile-desktop
      /    jnpr-slider-feature3-none
      /    jnpr-slider-feature4-auto-mobile-desktop
      /    jnpr-slider-feature5-1-mobile-4-desktop
      /    jnpr-slider-feature6
      /    jnpr-slider-mobile
      /
      / would result in these overrides of this.defaults:
      /   {
      /      feature1: {
      /          mobile: true
      /      },
      /      feature2: {
      /          mobile: true,
      /          desktop: true
      /      },
      /      feature 3: {
      /      },
      /      feature4: {
      /          mobile: 'auto',
      /          desktop: 'auto'
      /      },
      /      feature5: {
      /          mobile: 1,
      /          desktop: 2
      /      },
      /      visible: {
      /          mobile: true
      /      }
      /   }
      /
      / • Features not specified or lacking a media list (like feature6 above)
      /   do not get modified from the initial default settings.
      / • To turn off the feature across all media, use the suffix '-none'.
    /**********************************************************************/
    parseOpts: function () {
      var classes = this.els.$slider.attr('class').split(/\s+/),
          prefixSize = this.classPrefix.length;

      _.each(classes, function (cls) {
        // cycle through slider class list
        var descriptors, category;
        if (cls.indexOf(this.classPrefix) === 0) {
          // for those with jnpr-slider- prefix
          descriptors = cls.slice(prefixSize).split("-"); //   split at hyphens
          category = descriptors[0];
          if (category) {
            if (category === 'not' || category === 'only' || this.isMediaType(category)) {
              category = 'visible'; // no category specified, so category is: -visibile-
            } else {
              descriptors.shift(); // pass only the remaining descriptors, not the category
            }
            this.opts[category] = this.parseCategoryOpts(descriptors); // assign to opts
          }
        }
      }, this);
    },

    /**********************************************************************
      / this.parseCategoryOpts() -- inner loop of this.parseOpts()
      /----------------------------------------------------------------------
      / parses an array of descriptors to assign to a category
      / descriptors not recognized as media types are interpreted
      / as values for subsequent descriptors. Examples:
      /    ['2', 'desktop', '1', 'mobile']  =>  { desktop: 2, mobile: 1 }
      /    ['auto', 'mobile', 'desktop']    =>  { mobile: 'auto', desktop: 'auto' }
    /**********************************************************************/
    parseCategoryOpts: function (descriptors) {
      var opts = {},
          setting = true,
          // value to apply to opts[media]
      invert = false; // invert results (for -not-)

      if (descriptors[0] !== 'none') {
        // 'none' leaves category empty

        _.each(descriptors, function (descriptor) {
          // remaining descriptors are media
          if (this.isMediaType(descriptor)) {
            // valid media name?
            opts[descriptor] = setting; //    ... set media to current setting
          } else if (descriptor === 'not') {
            // invert?
            invert = true; //   flag to reverse media list
          } else if (descriptor === 'only') {
            // ignore as meaningless
          } else {
            // otherwise
            setting = descriptor; //  update setting (which affects following media)
            if (/\d+/.test(setting)) {
              setting = parseInt(setting); // convert to int if all digits
            }
          }
        }, this);

        // if no media was specified, apply setting to all media
        if (_.isEmpty(opts)) {
          _.each(this.media, function (medium) {
            opts[medium] = setting;
          });
        }

        // if the descriptor -not- was included, reverse the results,
        // i.e. all unset media will receive the *last* provided setting
        if (invert) {
          _.each(this.media, function (medium) {
            if (opts[medium]) {
              delete opts[medium];
            } else {
              opts[medium] = setting;
            }
          });
        }
      }

      return opts;
    },

    // grab jQuerys of major elements
    getEls: function () {
      var $container = this.els.$slider.closest(this.select.container);
      this.els.$container = $container.length ? $container : this.els.$slider.parent();
      this.els.$slideWrap = $(this.select.swipeWrap, this.els.$slider);
    },

    // Does strategic preloading of images.
    // Loads more agressively for IE8 & 9, due to the
    // difficult determining which images to load
    // in a slider that is not visible.
    maintainImagePreload: function (media) {
      if (!this.imagesPreloaded) {
        if (this.opts.group[media] === 'auto' && (Utils.isIE(8) || Utils.isIE(9))) {
          // can't calculate hidden auto groups in IE8/9
          // so just load them all...
          this.loadAllGalleryImages();
        } else {
          // load (only) first slide images
          this.loadInitialGalleryImages();
        }
      }
    },

    // Convert [data-image] tags within the first slide to contained images.
    loadInitialGalleryImages: function () {
      if (!this.imagesPreloaded) {
        this.placeGalleryImages(this.els.$slideWrap.children().eq(0));
        this.imagesPreloaded = 'initial';
      }
    },

    // Convert all [data-image] tags to contained images.
    loadAllGalleryImages: function () {
      if (this.imagesPreloaded !== 'all') {
        this.placeGalleryImages(this.els.$slideWrap);
        this.imagesPreloaded = 'all';
      }
    },

    // Read [data-image] attributes and convert into
    // a contained background image. Or, in the case of IE8
    // which does not support background-size, a new <img>
    // tag is created, the size of which is maintained by
    // the functions below.
    placeGalleryImages: function ($within) {
      var self = this,
          $imageContainers;

      // address the passed element(s) or children
      $imageContainers = $within.filter('[data-image]').add($within.find('[data-image]'));
      $imageContainers.each(function () {
        var $el = $(this),
            imageUrl = $el.data('image'),
            $img;
        if (imageUrl) {
          if ($('html').hasClass('ie8')) {
            if ($el.find('img.contain').length === 0) {
              $img = $('<img>', { 'src': imageUrl, 'class': 'contain' });
              $el.append($img);
              self.containImage($img);
            }
          } else {
            $el.css('background-image', "url(" + imageUrl + ")");
          }
        }
      });
    },

    // Resize all IE8 'contained' images.
    containImages: function () {
      _.each(this.els.$slideWrap.find('img.contain'), function (img) {
        this.containImage($(img));
      }, this);
    },

    // Manually resize and place image (for IE8).
    containImage: function ($img) {
      var $container = $img.parent(),
          containerWidth,
          containerHeight,
          containerAspectRatio,
          imageWidth,
          imageHeight,
          imageAspectRatio;

      containerWidth = $container.innerWidth();
      containerHeight = $container.innerHeight();
      containerAspectRatio = containerWidth / containerHeight;
      $img.removeAttr("width");
      $img.removeAttr("height");
      imageWidth = $img.width();
      imageHeight = $img.height();
      imageAspectRatio = imageWidth / imageHeight;

      if (containerAspectRatio > imageAspectRatio) {
        // extra horizontal margin, vertical constraint
        $img.css({
          width: 'auto',
          height: containerHeight,
          left: (containerWidth - containerHeight * imageAspectRatio) / 2,
          top: ''
        });
      } else {
        // extra vertical margin, horizontal constraint
        $img.css({
          width: containerWidth,
          height: 'auto',
          left: '',
          top: (containerHeight - containerWidth / imageAspectRatio) / 2
        });
      }
    },

    // - React to resize.
    // - React to 'goto' events at container level.
    // ... listeners for components (dots etc.) are bound in individual updateX functions
    bind: function () {
      var self = this,
          currentBreak = null;

      function updateIfBreakChange(media) {
        if (currentBreak !== media) {
          currentBreak = media;
          self.updateForBreak(media);
        }
      }

      $(window).on('break-small break-mobile', function () {
        updateIfBreakChange('mobile');
      }).on('break-tablet', function () {
        updateIfBreakChange('tablet');
      }).on('break-greater-than-tablet', function () {
        updateIfBreakChange('desktop');
      }).resize(function () {
        // respond to resize events to resize gallery slide images only for IE8
        // which is done using { background-size: contain } in other browsers
        _.defer(function () {
          // so breakpoint info will be available from above
          self.maintainImagePreload(currentBreak);
          self.maintainAutoGroup(currentBreak);

          // Does not try to do anything if the slider is not visible,
          // i.e. has not received a 'show' event, since the results are bad.
          // Therefore these actions need to be taken on 'show'.
          if (self.visible) {
            // SwipeJS needs a kick to resize the sliders
            if (self.mySwipe) {
              self.mySwipe.setup();
              if (self.updateArrows(self.opts.arrows[currentBreak])) {
                self.mySwipe.setup();
              }
            }
            self.containImages(); // recalculate the img.contain elements
          }
        });
      });

      $(window).trigger('resize');

      // Listen for custom 'goto' event and slide to the slide.
      this.els.$container.on('goto', function (e, slideIndex) {
        e.stopPropagation();
        self.setActiveSlide(slideIndex);
      });

      // Listen for custom 'active-item' event and highlight item.
      this.els.$container.on('active-item', function (e, itemIndex) {
        e.stopPropagation();
        self.setActiveItem(itemIndex);
      });

      // Recalculate widths when hidden slider is shown (custom event).
      this.els.$slider.on('show', function (e) {
        self.visible = true;
        e.stopPropagation();
        self.maintainAutoGroup(currentBreak);
        self.updateArrows(self.opts.arrows[currentBreak]);
        self.loadAllGalleryImages();

        _.defer(function () {
          if (self.mySwipe) {
            self.mySwipe.setup();
          }
          // for IE8, recalculate containers
          if (Utils.isIE(8)) {
            self.containImages();
          }
        });
      }).on('hide', function (e) {
        self.visible = false;
      });

      // By default, 'show' will be triggered on the element,
      // but can be disabled by instantiator.
      // A slider contained in an overlay, for instance,
      // shouldn't receive a 'show' event until it is actually visible.
      if (this.visible) {
        this.els.$slider.trigger('show');
      }
    },

    // Updates all elements for slide index.
    setActiveSlide: function (index) {
      this.showActiveSlide(index);
      this.setActiveArrows(index);
      this.setActiveDot(index);
      this.activeSlideIndex = index;
    },

    // used to highlight an active thumbnail
    setActiveItem: function (index) {
      var $items = this.$slides().children();
      $items.removeClass(this.state.activeItem);
      if (typeof index === 'number') {
        $items.eq(index).addClass(this.state.activeItem);
      }
    },

    // Updates swiper to slide index.
    showActiveSlide: function (index) {
      var swipe = this.mySwipe;
      if (swipe && this.activeSlideIndex !== index) {
        swipe.slide(index);
        this.broadcast('slid', index);
      }
    },

    // Updates arrows for slide index.
    setActiveArrows: function (index) {
      var $arrows = this.els.$arrows;
      if ($arrows) {
        $arrows.find(this.select.prevArrow).toggleClass(this.state.hideArrow, index === 0);
        $arrows.find(this.select.nextArrow).toggleClass(this.state.hideArrow, index + 1 === this.$slides().length);
      }
    },

    // Updates active dot for slide index.
    setActiveDot: function (index) {
      var $dots = this.els.$dots,
          $eachDot;
      if ($dots) {
        $eachDot = $dots.find(this.select.dot);
        $eachDot.removeClass(this.state.activeDot).eq(index % $eachDot.length) // modulo for the case of auto-duplicated
        // continuous scroll slides when there
        // are exactly two.
        .addClass(this.state.activeDot);
      }
    },

    // Set state (including listeners) for all sub-components.
    updateForBreak: function (media) {
      var visible = !!this.opts.visible[media];

      this.updateVisibility(visible);

      if (visible) {
        // update swipe control
        this.updateSwipe(visible, this.opts.group[media], this.opts.continuous[media] || false, this.opts.disableswipe[media] || false);

        // previous logic: update arrows first as may affect slider width calculations
        // now: update second so that we can decide to display arrows
        // based on whether there is more than one slide.
        this.updateArrows(visible && !!this.opts.arrows[media]);

        // dots updated after the slider since number of slides may vary
        this.updateDots(visible && !!this.opts.dots[media]);

        // set (or unset or reset) autoadvance timer
        this.updateAutoAdvance(visible, this.opts.autoadvance[media]);
      }
    },

    // Show/hide slider.
    updateVisibility: function (show) {
      this.els.$slider.toggle(show);
    },

    // Create/kill Swipe functionality.
    updateSwipe: function (show, grouping, continuous, disableSwipe) {
      var self = this,
          $slider = this.els.$slider,
          swipe = this.mySwipe;

      if (swipe) {
        swipe.kill();
      }

      if (show) {
        this.regroupItems(grouping);

        this.mySwipe = $slider.Swipe({
          startSlide: 0,
          continuous: continuous,
          disableScroll: false,
          stopPropagation: false,
          disableSwipe: disableSwipe,
          callback: function (index, element) {
            self.setActiveSlide(index);
            window.setTimeout(function () {
              self.broadcast('slid', index);
            }, 600); // delay for slide to become hidden
          }
        }).data('Swipe');
        this.setActiveSlide(0);
      }
    },

    // Update auto grouping if needed.
    // Note that this will try to regroup even if slider
    // is not shown, i.e. hasn't received a 'show' event.
    maintainAutoGroup: function (media) {
      if (this.opts.visible[media] && this.opts.group[media] === 'auto') {
        this.regroupItems('auto');
      }
    },

    // Group slider items as 1-up, 2-up etc., auto (as many as fit), or none (no action taken).
    regroupItems: function (grouping) {
      var quantity;
      if (grouping === 'auto') {
        quantity = this.itemsPerGroup();
        if (quantity > 0 && quantity !== this.autoGroupSize) {
          // new valid group size?
          this.regroupByQuantity(quantity);
          this.setActiveSlide(0);
        }
        this.adjustSliderWidth();
      } else if (typeof grouping === "number") {
        this.regroupByQuantity(grouping);
        this.distributeItemWidths(grouping);
      }
    },

    // Calculate the number of items that will fit on one slide.
    itemsPerGroup: function () {
      var itemWidth = this.$slides().children().first().outerWidth(true),
          groupCount;
      if (Utils.isIE(8)) {
        itemWidth += 2; // IE8 fudge factor. Borders?
      }
      this.els.$slider.width(''); // clear inline width to get natural width
      groupCount = Math.floor(this.els.$slider.width() / itemWidth);
      return groupCount > 0 ? groupCount : 0; // no negative numbers!
    },

    // Group items x-per-slide.
    regroupByQuantity: function (quantity) {
      var $items = this.$slides().children(),
          groupIndex = 0;

      // do nothing if quantity is not a positive integer
      // IE8 will return negative width values in itemsPerGroup
      // above when the slider is not visible, so just avoiding
      // the issue here.
      if (quantity > 0) {

        _.each($items, function (el, index) {
          var $item = $(el),
              offset = index % quantity,
              $group;

          groupIndex = Math.floor(index / quantity);

          if (groupIndex === this.$slides().length) {
            // need another slide
            this.$slides().first().clone().empty() // copy first to end
            .insertAfter(this.$slides().last());
          }

          $group = this.$slides().eq(groupIndex);

          if (offset === 0) {
            $group.prepend($item);
          } else {
            $group.children().eq(offset - 1).after($item);
          }
        }, this);

        // delete extra unneeded empty slides at end
        this.$slides().slice(groupIndex + 1).remove();

        this.autoGroupSize = quantity;
      }
    },

    // Resize slider by adding up items in the first slider group.
    adjustSliderWidth: function () {
      var $slider = this.els.$slider,
          $firstSet = this.$slides().eq(0).children(),
          totalWidth;
      totalWidth = _.reduce($firstSet, function (total, el) {
        return total + $(el).outerWidth(true);
      }, 0);
      if (Utils.isIE(8)) {
        // IE8 fudge factor: border widths?
        totalWidth = totalWidth + 2 * $firstSet.length;
      }
      // again for the benefit of IE8
      _.defer(function () {
        $slider.width(totalWidth);
      }, 100);
    },

    // Resize group items by dividing the width of the slider.
    distributeItemWidths: function (grouping) {
      var count;

      // special design case: if group = 4, but there are less than 4
      // items, total, to display, then group by 3 instead.
      if (grouping === 4 && this.$slides().children().length < 4) {
        count = 3;
      } else {
        count = this.$slides().eq(0).children().length;
      }

      if (count) {
        this.$slides().children().css({ width: 100 / count + '%' });
      }
    },

    // Show/hide arrows; set/release listeners.
    updateArrows: function (show) {
      var self = this,
          $arrows = this.els.$arrows,
          visible,
          presenceChanged = false,
          $container;

      if ($arrows) {
        // arrows visible? Are there slides to navigate?
        visible = !!show && this.$slides().length > 1;

        // show or hide the arrow container
        $arrows.toggle(visible);
        // provide padding for arrow display
        $container = this.els.$container;
        if ($container.hasClass(this.state.hasArrows) !== visible) {
          $container.toggleClass(this.state.hasArrows, visible);
          presenceChanged = true;
        }

        // set or clear arrow listeners
        this.updateListener($arrows.find(this.select.prevArrow), 'click', visible, function (e) {
          e.preventDefault();
          self.prev();
          self.cancelAutoAdvance();
        });
        this.updateListener($arrows.find(this.select.nextArrow), 'click', visible, function (e) {
          e.preventDefault();
          self.next();
          self.cancelAutoAdvance();
        });
      }

      return presenceChanged;
    },

    // Go to previous slide.
    prev: function () {
      if (this.mySwipe) {
        this.mySwipe.prev();
      }
    },

    // Go to next slide.
    next: function () {
      if (this.mySwipe) {
        this.mySwipe.next();
      }
    },

    broadcast: function (command, data) {
      this.els.$slider.trigger(command, data);
    },

    // Show/hide dots; set/release listeners.
    updateDots: function (show) {
      var self = this,
          $dotsContainer = this.els.$dots,
          $dots;
      if ($dotsContainer) {
        if (show) {
          this.maintainDots(); // update number of dots
          $dots = $dotsContainer.find(this.select.dot);
          this.setActiveDot(this.activeSlideIndex);
          this.updateListener($dots, 'click', show, function (e) {
            // when using the -continuous setting with only two slides,
            // Swipe.js automatically duplicates both slides to facilitate swiping.
            // When on the 3rd slide, clicking the second dot should advance to
            // the 4th slide, and likewise for 4th to 3rd (so the swipe doesn't
            // appear to be going the wrong way). The second line below tests for
            // this particular condition and adjusts the goto index.
            var goToIndex = $(this).index() + (self.activeSlideIndex >= $dots.length ? $dots.length : 0);
            self.els.$slider.trigger('goto', goToIndex);
            e.stopPropagation();
            self.cancelAutoAdvance();
          });
        }
        // display only if more than one dot
        $dotsContainer.toggle(show && $dots.length > 1);
      }
    },

    updateAutoAdvance: function (show, seconds) {

      // clear any interval currently set
      if (this.autoAdvanceInterval) {
        this.cancelAutoAdvance();
      }

      if (show && seconds) {
        if (!_.isNumber(seconds)) {
          seconds = this.autoadvanceDefault;
        } //  if seconds = true, for example
        this.autoAdvanceInterval = window.setInterval(_.bind(this.next, this), seconds * 1000);
      }
    },

    cancelAutoAdvance: function () {
      window.clearInterval(this.autoAdvanceInterval);
    },

    // Convenience method for adding/removing listeners.
    // SHOULD NAMESPACE LISTENERS TO THIS MODULE
    updateListener: function ($el, eventType, active, handler) {
      $el.off(eventType);
      if (active) {
        $el.on(eventType, handler);
      }
    },

    // Create and populate arrows and dots.
    createNav: function () {

      // only if there is more than one slide or auto grouping is configured
      if (this.$slides().length > 1 || !_.isEmpty(this.opts.group)) {
        // when using the -continuous setting with only two slides,
        // Swipe.js automatically duplicates both slides to facilitate swiping.
        // This checks for that condition and ensures that only 2 dots get displayed.
        if (this.$slides().length === 2 && this.hasTrueOption(this.opts.continuous)) {
          this.freezeDotsCount = 2;
        }

        if (this.hasTrueOption(this.opts.arrows)) {
          // if arrows are used anywhere
          this.els.$arrows = this.findOrCreateControlContainer(this.select.arrowsContainer, this.template.arrowsContainer);
          this.createArrows(this.els.$arrows);
        }

        if (this.hasTrueOption(this.opts.dots)) {
          // if dots are used anywhere
          this.els.$dots = this.findOrCreateControlContainer(this.select.dotsContainer, this.template.dotsContainer);
        }
      }
    },

    // Find selector inside this.els.$container.
    // Return the found or created element, created using template.
    // If created, is appended to this.els.$container.
    findOrCreateControlContainer: function (selector, template) {
      var $controlContainer = this.els.$container.find(selector);
      if ($controlContainer.length === 0) {
        $controlContainer = $(template);
        this.els.$container.append($controlContainer); // append to end of container
      }
      return $controlContainer;
    },

    // Add prev/next arrows to element.
    createArrows: function ($arrowsContainer) {
      $arrowsContainer.append($(this.template.arrows));
    },

    // Add dots to element.
    maintainDots: function () {
      if (this.els.$dots.children().length === 0) {
        this.els.$dots.append($(this.template.dots)); // insert template if missing
      }
      var $inner = $(this.select.dotsInnerWrap, this.els.$dots);
      $inner.empty(); // clear existing dots

      _.times(this.freezeDotsCount || this.$slides().length, _.bind(function () {
        $inner.append($(this.template.dot));
      }, this));
    },

    // Return true if any property of the object evaluates truthy.
    hasTrueOption: function (options) {
      return !!_.find(_.values(options), function (val) {
        return val;
      });
    },

    // Items or groups of items.
    $slides: function () {
      return this.els.$slideWrap.children();
    },

    // Is the string found in the list of recognized media types (this.media)?
    isMediaType: function (descriptor) {
      return _.contains(this.media, descriptor);
    }

  };

  return def;
}();

$(function () {
  $('.jnpr-slider').each(function () {
    new SuperSlider(this);
  });
});

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Accordion
 */



var Accordion = module.exports = function () {

	var def = function (el) {
		this.$els = {
			'item': el,
			'control': '.accordion-control',
			'icon': '.accordion-control .icon',
			'activeAccordion': '.accordion-active'
		};

		this.states = {
			'arrowUp': 'icon-arrow-up',
			'active': 'accordion-active'
		};

		//var ourControl = $(this.$els.control, this.$els.item);

		init.call(this);
	};

	var init = function () {
		this.bind();
	};

	def.prototype = {
		bind: function () {
			var self = this;
			$(this.$els.control, this.$els.item).on("click", function (e) {
				// This comment has been added to resolve RESP-1100
				// e.preventDefault();
				self.toggleList();
			});
		},
		toggleList: function () {
			if ($(this.$els.item).hasClass(this.states.active)) {
				this.close();
			} else {
				this.open($(this.$els.activeAccordion).length > 0);
			}

			/*if($(this.$els.activeAccordion).length > 0) {
   	$(this.$els.item).hasClass(this.states.active) ? this.close() : this.open(true);
   } else {
   	$(this.$els.item).hasClass(this.states.active) ? this.close() : this.open(false);
   }*/
		},
		open: function (allClosed) {
			var self = this;
			$(this.$els.activeAccordion).removeClass(this.states.active);
			$(this.$els.control + ' .' + this.states.arrowUp).removeClass(this.states.arrowUp);
			if (allClosed !== false) {
				window.setTimeout(function () {
					$(self.$els.item).addClass(self.states.active);
					$(self.$els.icon, self.$els.item).addClass(self.states.arrowUp);
				}, 500);
			} else {
				$(this.$els.item).addClass(this.states.active);
				$(this.$els.icon, this.$els.item).addClass(this.states.arrowUp);
			}
		},

		close: function () {
			$(this.$els.activeAccordion).removeClass(this.states.active);
			$(this.$els.icon, this.$els.item).removeClass(this.states.arrowUp);
		}
	};

	return def;
}();

$(function () {
	$('.accordion').each(function () {
		new Accordion(this);
	});
});

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Equal Height
 */



var EqualHeight = module.exports = function () {

  var def = function (el, childClass, isMax) {
    this.$els = {
      'el': el,
      'item': $(childClass, el)
    };
    this.isMax = isMax;
    init.call(this);
  };

  var init = function () {

    if (this.isMax) {
      window.setTimeout(_.bind(this.findMax, this), 300);
    } else {
      window.setTimeout(_.bind(this.findMin, this), 300);
    }
    this.bind();
  };

  def.prototype = {
    findMax: function () {

      _.defer(_.bind(function () {
        this.$els.item.height('');

        if (!this.isVertical()) {
          var h = _.max(_.map(this.$els.item, function (el) {
            return $(el).height();
          }));
          this.$els.item.height(h);
        }
      }, this));
    },

    findMin: function () {

      _.defer(_.bind(function () {
        this.$els.item.height('');

        if (!this.isVertical()) {
          var h = _.min(_.map(this.$els.item, function (el) {
            return $(el).height();
          }));
          this.$els.item.height(h);
        }
      }, this));
    },

    isVertical: function () {
      if (this.$els.item.length > 1) {
        if ($(this.$els.item[0]).offset().top === $(this.$els.item[1]).offset().top ||
        //for absolutely positioned elements
        $(this.$els.item[0]).offset().top + $(this.$els.item[0]).outerHeight(true) === $(this.$els.item[1]).offset().top + $(this.$els.item[1]).outerHeight(true)) {
          return false;
        }
      }

      return true;
    },

    bind: function () {
      if (this.isMax) {
        $(window).resize(_.debounce(_.bind(this.findMax, this), 50));
      } else {
        $(window).resize(_.debounce(_.bind(this.findMin, this), 50));
      }
    }
  };

  return def;
}();

$(function () {
  $('.promo').each(function () {
    new EqualHeight(this, '.promo-wrapper', true);
  });

  $('.show-more-products').each(function () {
    new EqualHeight(this, '.more-product', true);
  });

  $('.equal-height-image-wrapper').each(function () {
    new EqualHeight(this, '.equal-height-image', false);
  });

  $('.multi-col').each(function () {
    new EqualHeight(this, '.multi-col-image', false);
    new EqualHeight(this, '.multi-col-header', true);
    new EqualHeight(this, '.multi-col-body', true);
    new EqualHeight(this, '.multi-col-column', true);
  });

  $('.equal-height-wrapper').each(function () {
    new EqualHeight(this, '.equal-height-item', true);
  });

  $('.equal-height-title-wrapper').each(function () {
    new EqualHeight(this, '.equal-height-title', true);
  });
});

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Gallery
 */



var Utils = __webpack_require__(0),
    HoverFooter = __webpack_require__(13),
    SuperSlider = __webpack_require__(4);

var Gallery = module.exports = function () {

  var def = function (el, options) {
    this.els = {
      $root: $(el)
    };

    this.initOpts = options || {};

    init.call(this);
  };

  var init = function () {
    this.visible = _.has(this.initOpts, 'visible') ? this.initOpts.visible : true;
    this.els.$slider = $(this.select.slider, this.els.$root);
    this.els.$slides = $(this.select.slides, this.els.$slider);
    this.createResizeScreen();
    this.createNav(); // create hover-footer containing thumbnails
    this.instantiateSliders();
    this.bind();
  };

  def.prototype = {

    template: {
      thumbnails: '<div class="slider-control-wrapper slide-control-overlay tab-footer"><div class="wrapper"><div class="jnpr-slider jnpr-slider-group-auto jnpr-slider-desktop jnpr-slider-dots-none jnpr-slider-arrows clearfix"><div class="swipe-wrap clearfix"><ul class="slide-item list list-unstyled list-slider"></ul></div><div class="jnpr-slider-arrows-container"></div></div></div></div>',
      resizingScreen: '<div class="resizing-screen" />',
      thumbnail: '<li class="list-slider-item slider-control"><a href="#/"></a></li>',
      thumbImage: '<div class="thumbnail-image" />'
    },

    select: {
      sliderWrapper: '.overlay-gallery-wrapper',
      resizingScreen: '.resizing-screen',
      slider: '.overlay-gallery-wrapper .jnpr-slider',
      slides: '.swipe-wrap > *',
      footer: '.tab-footer',
      thumbnailSlider: '.tab-footer .jnpr-slider',
      thumbnails: '.list-slider-item',
      thumbsInnerWrap: '.slide-item',
      thumbInnerWrap: 'a',
      thumbImage: '.thumbnail-image'
    },

    bind: function () {
      var self = this,
          ignoreEventBubbling = false;

      this.els.$root.on('slid', function (e, slideIndex) {
        self.slideIndex = slideIndex;
        self.$thumbnailSlider().trigger('active-item', slideIndex);
        if (self.visible) {
          self.autoplayAt(slideIndex);
        }
      });

      this.els.$root.on('show hide', function (e) {
        e.stopPropagation();
        if (!ignoreEventBubbling) {
          // do not respond to event recursion from bubbling
          ignoreEventBubbling = true;
          self.nowVisible(e.type === 'show');
          ignoreEventBubbling = false;
        }
      });

      $(window).resize(function () {
        self.positionResizeScreen();
      });
    },

    bindThumbnails: function () {
      var self = this,
          $thumbnails = this.$thumbnailSlider().find(this.select.thumbnails);

      $thumbnails.on('click', function (e) {
        var el = this,
            index = $thumbnails.index(el);
        self.$thumbnailSlider().trigger('active-item', index);
        self.els.$slider.trigger('goto', index);
        self.resetVideo();
      });
    },

    createNav: function () {
      // if there is anything to navigate...
      if (this.els.$slides.length > 1) {
        if ($(this.select.thumbnails, this.els.$root).length === 0) {
          this.els.$root.append(this.createThumbnails());
        }
        if ($('.hover-footer', this.els.$root).length === 0) {
          new HoverFooter($(this.select.footer, this.els.$root));
        }
      }
    },

    createResizeScreen: function () {
      if (!Utils.isIE(8)) {
        // only makes things worse in IE8
        $(this.select.sliderWrapper, this.els.$root).append($(this.template.resizingScreen));
      }
    },

    // Position white screen to block flashes of next slide when resizing.
    positionResizeScreen: function () {
      var self = this,
          sliderRight = this.els.$slider.position().left + this.els.$slider.outerWidth();
      // wait for other resizing activities to complete
      _.defer(function () {
        $(self.select.resizingScreen, self.els.$root).css('left', sliderRight - 1);
      }, 100);
    },

    // create sliders
    instantiateSliders: function ($el) {
      var $thumbnailSlider;
      if (this.els.$slider.length > 0) {
        this.slideIndex = 0;
        new SuperSlider(this.els.$slider, { visible: false });
        $thumbnailSlider = this.$thumbnailSlider();
        if ($thumbnailSlider.length > 0) {
          new SuperSlider($thumbnailSlider, { visible: false });
          $thumbnailSlider.trigger('active-item', 0);
          this.bindThumbnails();
        }
      }
    },

    createThumbnails: function () {
      var $el = $(this.template.thumbnails),
          $inner = $(this.select.thumbsInnerWrap, $el),
          index,
          srcUrl,
          $thumb;

      for (index = 0; index < this.els.$slides.length; index++) {

        // get thumbnail image url from the slide's data-thumbnail attribute
        srcUrl = this.els.$slides.eq(index).data('thumbnail');

        // for the moment going around the templates to get stuff working
        $thumb = $('<li />', {
          'class': 'list-slider-item slider-control',
          'html': $('<a />', {
            'href': '#/',
            'html': $('<div />', {
              'class': 'thumbnail-image',
              'data-image': srcUrl
            })
          })
        });

        $inner.append($thumb);
      }
      return $el;
    },

    nowVisible: function (show) {
      var propagateEvent = show ? 'show' : 'hide';

      this.visible = show;
      this.els.$slider.trigger(propagateEvent);
      this.$thumbnailSlider().trigger(propagateEvent);

      if (show) {
        this.positionResizeScreen();
        this.showFooterBriefly();

        // to enable auto play of a single video as the overlay opens
        this.autoplayAt(this.slideIndex);
      } else {
        this.resetVideo();
      }
    },

    autoplayAt: function (index) {
      var $video = this.els.$slides.eq(index).find('.youtube-video').first(),
          vidDataName = 'yt';

      // Try youku
      if ($video.length === 0) {
        $video = this.els.$slides.eq(index).find('.youku-video').first();
        vidDataName = 'yku';
      }

      if ($video.length) {
        $video.data(vidDataName).openIfAutoplay();
      }
    },

    // stop / reset any running video
    resetVideo: function () {
      $('.youtube-video', this.els.$root).each(function () {
        if (!_.isUndefined($(this).data('yt')) && !_.isUndefined($(this).data('yt').resetVideo)) {
          $(this).data('yt').resetVideo();
        }
      });
      $('.youku-video', this.els.$root).each(function () {
        if (!_.isUndefined($(this).data('yku')) && !_.isUndefined($(this).data('yku').resetVideo)) {
          $(this).data('yku').resetVideo();
        }
      });
    },

    showFooterBriefly: function () {
      $(this.select.footer, this.els.$root).trigger('show-briefly');
    },

    hideFooter: function () {
      $(this.select.footer, this.els.$root).trigger('hide');
    },

    $thumbnailSlider: function () {
      return $(this.select.thumbnailSlider, this.els.$root);
    }
  };

  return def;
}();

$(function () {
  $('.gallery').each(function () {
    var visible = $(this).closest('.overlay').length === 0;
    new Gallery(this, { 'visible': visible });
  });
});

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 * Locale
 */



var Locale = module.exports = function () {

  var def = function (el) {
    this.$els = {
      'item': el || null
    };
    if (el) {
      init.call(this);
    }
  };

  var init = function () {
    this.bind();
  };

  var getLocaleFromURL = function () {
    return document.location.pathname.split('/');
  };

  def.prototype = {
    get: function () {
      return getLocaleFromURL().splice(1, 1).toString().toUpperCase();
    },

    getFull: function () {
      return getLocaleFromURL().splice(1, 2).join('/').toString();
    },

    bind: function () {
      var $el = $(this.$els.item);
      this.target = $el.data('need-locale');
      var locale = getLocaleFromURL().splice(1, 1).toString().toUpperCase();
      $el.attr(this.target, locale);
    }
  };

  return def;
}();

$(function () {
  $('[data-need-locale]').each(function () {
    new Locale(this);
  });
});

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Overlay
 */



var Utils = __webpack_require__(0);

var Overlay = module.exports = function () {

  var def = function (openSelector) {
    this.$open = $(openSelector);
    this.rel = this.$open.attr('data-relationship');
    init.call(this);
  };

  var init = function () {
    if (this.$open.length > 0) {
      this.$overlay = $('.overlay[data-relationship="' + this.rel + '"]');
      this.$children = $(this.$overlay.find(this.select.content).children());
      this.$inlineVideo = $(this.$overlay.find('.inline-video.autoplay'));
      this.$ieVideoWrapper = $(this.$overlay.find('.ie8-video'));
      this.swfPath = this.$ieVideoWrapper.data('swf');
      this.$close = this.$overlay.find('.close-box');
      this.$scroll = $('body');
      this.bind();
    }
  };

  def.prototype = {

    select: {
      content: '> .content',
      tableWrapper: '.overlay-table-wrapper',
      menu: '.main-header'
    },

    state: {
      overlayActive: 'is-active',
      preventScroll: 'prevent-scroll'
    },

    bind: function () {
      var self = this,
          tableResizeOffset;

      var vid = $('.youtube-video', self.$overlay),
          vidDataName = 'yt';

      // Youtube / Youku / MP4 ?
      if (vid.length === 0) {
        vid = $('.youku-video', self.$overlay);
        vidDataName = 'yku';
      }

      if (vid.length === 0) {
        vid = $('video', self.$overlay);
        vidDataName = 'mp4';
      }

      this.$overlay.on('video-done', function () {
        self.toggleOverlay(false);
      });

      this.$open.on('click', function (e) {
        e.preventDefault();

        self.toggleOverlay(true);
        self.playInlineVideo();
        if (vid.hasClass('jsapi')) {
          if (!_.isUndefined(vid.data(vidDataName))) {
            vid.data(vidDataName).whenVideoReady();
          }
        }
        if (Utils.isIE(8)) {
          $('.home').addClass('hidden');
          $('.footer').css('z-index', '-10');
        }
      });

      this.$close.on('click', function (e) {
        e.preventDefault();

        // Pause video for IE9
        if (Utils.isIE(9)) {
          //vid.data(vidDataName).resetVideo();
          window.setTimeout(function () {
            self.toggleOverlay(false);
          }, 200);
        } else {
          self.$overlay.find('.video-follow-up').remove();
          self.toggleOverlay(false);
        }
        self.pauseInlineVideo();

        if (Utils.isIE(8)) {
          $('.home').removeClass('hidden');
          $('.footer').css('z-index', '0');
          $('object').remove();
        }
      });

      $(window).on('keydown', function (e) {
        if ((e.keyCode || e.which) === 27) {
          // Pause video for IE9
          if (Utils.isIE(9)) {
            vid.data(vidDataName).pause();
            window.setTimeout(function () {
              self.toggleOverlay(false);
            }, 200);
          } else {
            self.toggleOverlay(false);
          }

          self.pauseInlineVideo();
          $('object').remove();
        }
      });

      tableResizeOffset = !!window.navigator.userAgent.match(/Trident.*rv[ :]*11\./) ? -30 : 0;
      $(window).on('resize', function () {
        // this line relates specifically to the table sub-view,
        // ought to be broken out elsewhere
        $(self.select.tableWrapper).css('max-height', window.innerHeight * 0.9 + tableResizeOffset);
        if ($('.overlay.is-active').length > 0) {
          self.$scroll.addClass('prevent-scroll');
        }
      }).trigger('resize');
    },

    toggleOverlay: function (show) {
      this.$children.trigger(show ? 'show' : 'hide');
      this.$scroll.toggleClass(this.state.preventScroll, show);
      this.$overlay.toggleClass(this.state.overlayActive, show);
      this.$overlay.attr('aria-hidden', show ? 'false' : 'true');
      if (show) {
        this.$overlay.focus();
      }
      if (Utils.isIE(8)) {
        $(this.select.menu).toggle(!show);
      }
    },

    playInlineVideo: function () {
      var self = this;
      this.$inlineVideo.each(function () {
        $(this).get(0).play();
        $(this).get(0).addEventListener('ended', function () {
          self.toggleOverlay(false);
        });
      });
    },

    pauseInlineVideo: function () {
      if (!Utils.isIE(8) && !Utils.isIE(9)) {
        this.$inlineVideo.each(function () {
          $(this).get(0).pause();
        });
      }
    }
  };

  return def;
}();

$(function () {
  $('.overlay-trigger').each(function () {
    new Overlay(this);
  });
});

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Overlay
 */



var Overlay = __webpack_require__(9),
    Yt = __webpack_require__(12),
    Yku = __webpack_require__(11),
    Shv = __webpack_require__(71),
    _ = __webpack_require__(1),
    Gallery = __webpack_require__(7);

var VideoOverlay = function () {

    var overlayKeyword = 'overlay';

    var overlayTemplate = _.template('<div class="' + overlayKeyword + '" id="' + overlayKeyword + '<%-data.overlayId%>" data-videoRel="<%-data.overlayId%>" data-relationship="<%-data.overlayId%>" aria-hidden="true" tabindex="-1">' + '<div class="content">' + '<div class="gallery full-height">' + '<div class="overlay-gallery-wrapper border-none">' + '<div class="jnpr-slider">' + '<div class="swipe-wrap">' + '<div class="overlay-video-slide-wrapper">' + '<div class="overlay-video-wrapper clearfix">' + '<div class="<%-data.source%>-overlay-wrapper">' + '<div class="<%-data.source%>-video jsapi autoplay" data-video-id="<%-data.videoId%>" data-follow-up="<%-data.isFollowUp%>">' + '</div>' + '</div>' + '</div>' + '</div>' + '</div>' + '</div>' + '</div>' + '</div>' + '</div>' + '<a href="javascript:void(0);" class="close-box icon icon-overlay-close"></a>' + '<div class="lightbox"></div>' + '</div>');

    var overlayFollowUpTemplate = _.template('<div class="video-follow-up" data-videoRel="<%-data.followUpId%>" style="background-image: url(<%-data.followUpBackground%>); background-size: 100% 100%; background-repeat: no-repeat;">' + '<div class="video-follow-up-wrapper">' + '<div class="video-follow-up-title"><%-data.followUpTitle%></div>' + '<div class="video-follow-up-subtitle"><%-data.followUpSubtitle%></div>' + '<div class="video-follow-up-cta"><a class="button" href="<%-data.followUpLink%>"><%-data.followUpCta%></a></div>' + '</div>' + '</div>');

    var result = function (triggerSelector) {
        this.$triggerElement = $(triggerSelector);
        this.source = this.$triggerElement.attr('data-source');
        this.videoId = this.$triggerElement.attr('data-video-id');

        this.isFollowUp = this.$triggerElement[0].hasAttribute('data-followUpCta');

        this.overlayId = Date.now();
        this.$triggerElement.attr('data-relationship', this.overlayId);
        this.$triggerElement.attr('aria-controls', overlayKeyword + this.overlayId);

        $('body').append(overlayTemplate({
            data: {
                overlayId: this.overlayId,
                source: this.source,
                videoId: this.videoId,
                isFollowUp: this.isFollowUp
            }
        }));
        if (this.isFollowUp) {
            this.followUpTitle = this.$triggerElement.attr('data-followUpTitle');
            this.followUpSubtitle = this.$triggerElement.attr('data-followUpSubtitle');
            this.followUpCta = this.$triggerElement.attr('data-followUpCta');
            this.followUpLink = this.$triggerElement.attr('data-followUpLink');
            this.followUpBackground = this.$triggerElement.attr('data-followUpBackground');
            this.followUpId = this.overlayId;
            $('body').append(overlayFollowUpTemplate({
                data: {
                    followUpTitle: this.followUpTitle,
                    followUpSubtitle: this.followUpSubtitle,
                    followUpCta: this.followUpCta,
                    followUpLink: this.followUpLink,
                    followUpBackground: this.followUpBackground,
                    followUpId: this.followUpId
                }
            }));
        }

        //adding additional classes for better styling
        $('.youku-overlay-wrapper').addClass('youku-player-area').removeClass('youku-overlay-wrapper');
        $('.youku-video').addClass("youku-player");

        $('.youtube-overlay-wrapper').addClass("yt-overlay-wrapper-alt");
        $('.mp4-overlay-wrapper').addClass("yt-overlay-wrapper-alt");
        $('.youku-overlay-wrapper').addClass("yku-overlay-wrapper-alt");

        this.$overlayElement = $('.overlay[data-relationship=' + this.overlayId + ']');

        // Video

        if (this.source === 'youtube') {
            // Youtube
            this.$overlayElement.find('.youtube-video').each(function () {
                //console.log('youtube init');
                $(this).data('yt', new Yt(this, { 'jsApi': true, 'trigger': true }));
                //$(this).data('yt', new Yt(this));
            });
        } else if (this.source === 'youku') {
            // Youku
            this.$overlayElement.find('.youku-video').each(function () {
                $(this).data('yku', new Yku(this, { 'jsApi': true, 'trigger': true }));
                //$(this).data('yku', new Yku(this));
            });
        } else if (this.source === 'mp4') {
            //Self-hosted MP4
            $(this).data('shv', new Shv(this));
        }

        // init Overlay
        this.overlay = new Overlay(this.$triggerElement);
    };

    return result;
}();

VideoOverlay.prototype.setup = function (triggerSelector) {
    new VideoOverlay(triggerSelector);
};

VideoOverlay.prototype.scan = function () {
    var $rel,
        $gallery,
        visible,
        _videoOverlay = this;
    //run this only on those video-overlay-triggers that do not have data-relationship attribute yet (i.e. no overlays)
    $('.video-overlay-trigger').each(function () {
        if ($(this).is('[data-relationship]') === false) {
            _videoOverlay.setup(this);
            //find a data-relationship value on the video-trigger element
            $rel = $(this).attr('data-relationship');
            //find the gallery inside the overlay with this data-relationship
            $gallery = $('.overlay[data-relationship=' + $rel + ']').find('.gallery');
            //initialize the gallery
            visible = $($gallery).closest('.overlay').length === 0;
            new Gallery($gallery, { 'visible': visible });
        }
    });
};

$(function () {
    VideoOverlay.prototype.scan();

    if (_.isUndefined(window.JNPR) === true) {
        window.JNPR = {};
    }

    if (_.isUndefined(window.JNPR.VideoOverlay) === true) {
        window.JNPR.VideoOverlay = {};
    }

    window.JNPR.VideoOverlay.scan = function () {
        VideoOverlay.prototype.scan();
    };
});

module.exports = VideoOverlay;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 * Youku
 */



var Utils = __webpack_require__(0);

var Yku = module.exports = function () {

  var def = function (el, options) {
    this.$el = el;
    this.ogContent = $(this.$el).html();
    this.options = !_.isUndefined(options) ? options : '';
    this.og = $(this.$el).html();
    this.player = null;
    init.call(this);
  };

  var init = function () {
    //this.autoplay = $(this.$el).hasClass('autoplay');
    this.bind();
  };

  def.prototype = {
    bind: function () {
      var self = this;

      if (!_.isUndefined(this.options) && !_.isUndefined(this.options.trigger)) {
        $('.youku-trigger').on('click', function (e) {
          e.preventDefault();
          self.open();
        });
      } else {
        $(this.$el).on("click", function (e) {
          e.preventDefault();
          self.open();
        });
      }

      _.defer(function () {
        $(self.$el).closest('.jnpr-slider').on('slid', function () {
          self.resetVideo();
        });
      });
    },

    showAfterContent: function () {
      var self = this;
      this.player.destroy();
      this.resetVideo();
      $('.before-video-content', $(self.$el)).addClass('hidden');
      window.setTimeout(function () {
        $('.after-video-content', $(self.$el)).addClass('is-active');
        self.bind(true);
      }, 500);
    },

    open: function () {
      var _this = this;

      if (!$(this.$el).attr('data-video-id')) {
        return false;
      }

      var id = $(this.$el).attr('data-video-id'),
          self = this,
          w = $(this.$el).outerWidth(true),

      //h = $(this.$el).outerHeight(true);
      h = w / 1.77868852459;

      this.movie = '<iframe id="player" width="' + w + '" height="' + h + '" src="https://player.youku.com/embed/' + id + '" frameborder="0" allowfullscreen></iframe>';

      if (this.options.inPromo) {
        this.promoVideoActive(h);

        this.options.target.on('slid', function () {
          self.resetVideo();
        });
      }
      $(this.$el).addClass('is-active-video is-active');
      $(this.$el).html(this.movie);

      var isYoukuPlayerValid = Utils.isYoukuPlayerValid(function (result) {
        if (result === true || result === "true") return;
        _this.flashMessage = '<h2 class="flash-fallback">You need <a href="https://www.adobe.com/go/getflash" target="_blank">Adobe Flash Player</a> to be able to watch this video</h2>';
        if (!$(_this.$el).prev().is('h2.flash-fallback')) {
          $(_this.flashMessage).insertBefore($(_this.$el));
        }
      });

      return false;
    },

    whenVideoReady: function () {
      this.open();
    },

    openIfAutoplay: function () {
      if (this.autoplay) {
        this.open();
      }
    },

    promoVideoActive: function (h) {
      if (this.options.target.data('setControlBackgrond')) {
        this.options.target.data().setControlBackgrond();
      }

      if (this.options.inPromo && $('html').hasClass('ie8')) {
        $('.slider-dots-overlay', $(this.$el).parent().parent().parent()).css({ 'background-color': '#000000', 'padding-top': '30px' });
      }
    },

    resetVideo: function () {
      $(this.$el).removeClass('is-active-video is-active').html(this.ogContent);
      if (this.options.inPromo && $('html').hasClass('ie8')) {
        $('.slider-dots-overlay', $(this.$el).parent().parent().parent()).css({ 'background-color': 'transparent', 'padding-top': '0px' });
      }
    },

    destroyVideoActive: function () {
      $(this.$el).html();
    }
  };

  return def;
}();

$(function () {
  $('.youku-video').each(function () {
    var p = $(this).parent().parent().parent();

    if ($(this).hasClass('jsapi')) {
      $(this).data('yku', new Yku(this, { 'jsApi': true, 'trigger': true }));
      return;
    }

    if ((p.hasClass('slider') || p.hasClass('jnpr-slider')) && p.attr('data-inPromoOverride') !== "true") {
      $(this).data('yku', new Yku(this, { 'inPromo': true, 'target': p }));
    } else {
      $(this).data('yku', new Yku(this));
    }
  });
});

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Youtube Init
 */



var Utils = __webpack_require__(0);
var PageLocale = __webpack_require__(70);

var Yt = module.exports = function () {

  var def = function (el, options) {
    this.$el = el;
    this.ogContent = $(this.$el).html();
    this.options = !_.isUndefined(options) ? options : '';
    this.og = $(this.$el).html();
    init.call(this);
  };

  var init = function () {
    this.autoplay = $(this.$el).hasClass('autoplay');
    this.bind();
  };

  def.prototype = {
    bind: function (triggerYouTubeReady) {
      var self = this;
      if (!_.isUndefined(this.options) && !_.isUndefined(this.options.trigger)) {
        $('.youtube-trigger').on('click', function (e) {
          e.preventDefault();
          self.open();
          if (!_.isUndefined(triggerYouTubeReady) && triggerYouTubeReady === true) {
            window.onYouTubeIframeAPIReady();
          }
        });
      } else {
        $(this.$el).on("click", function (e) {
          e.preventDefault();
          self.open();
        });
      }

      _.defer(function () {
        $(self.$el).closest('.jnpr-slider').on('slid', function () {
          self.resetVideo();
        });
      });
    },

    onPlayerReady: function () {
      return true;
    },

    onPlayerStateChange: function (e) {
      if (e.data === 0) {
        if ($('.youtube-video.is-active').parents('.overlay').length === 1) {
          var active = $('.youtube-video.is-active').data('yt'),
              over = $('.youtube-video.is-active').parents('.overlay'),
              followUp = $('.youtube-video.is-active').data('follow-up');
          var followUpId = over.data('videorel');

          if (followUp) {
            $('.video-follow-up[data-videoRel=' + followUpId + ']').clone().insertAfter('.youtube-video.is-active').animate({ 'marginLeft': 0 }, { duration: 300 });
          }
        }
      }

      if (typeof window.juniperVideoOnPlayerStateChange === 'function') {
        window.juniperVideoOnPlayerStateChange(e);
      }
    },

    showAfterContent: function () {
      var self = this;

      this.player.destroy();
      this.resetVideo();

      $('.before-video-content', $(self.$el)).addClass('hidden');
      window.setTimeout(function () {
        $('.after-video-content', $(self.$el)).addClass('is-active');
        self.bind(true);
      }, 500);
    },

    // Load Youtube API
    loadYoutubeAPI: function () {
      var tag = document.createElement('script'),
          self = this,
          firstScriptTag = document.getElementsByTagName('script')[0];
      tag.src = "https://www.youtube.com/iframe_api";
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
      window.onYouTubeIframeAPIReady = function () {
        self.whenVideoReady();
        window.youtubeAPILoaded = true;
      };
    },

    open: function () {
      if (!$(this.$el).attr('data-video-id')) {
        return false;
      }

      // iframe jsApi
      if (!Utils.isIE(8)) {
        this.height = $(this.$el).outerHeight(true);
        this.width = $(this.$el).outerWidth(true);
        this.id = $(this.$el).attr('data-video-id');

        this.randomID = _.now();
        this.movie = '<div id="player' + this.randomID + '"></div>';
        $(this.$el).html(this.movie);
        $(this.$el).addClass('is-active');

        var a;
        if (this.autoplay) {
          a = 1;
        } else {
          a = 0;
        }

        this.autoplay = a;
        this.player = null;

        // Will play the video if API already loaded, otherwise onYouTubeIframeAPIReady does it
        if (window.youtubeAPILoaded) {
          this.whenVideoReady();
        } else {
          this.loadYoutubeAPI();
        }
      }
      // iframe
      else {
          var id = $(this.$el).attr('data-video-id'),
              w = $(this.$el).outerWidth(true),
              h = $(this.$el).outerHeight(true),
              self = this;

          this.movie = '<iframe width="' + w + '" height="' + h + '" src="https://www.youtube.com/embed/' + id + '?wmode=transparent&amp;rel=0&amp;autohide=1&amp;autoplay=1&amp;hl=' + PageLocale + '" frameborder="0" allowfullscreen></iframe>';

          if (this.options.inPromo) {
            this.promoVideoActive(h);
            this.options.target.on('slid', function () {
              self.resetVideo();
            });
          }
          var playerVidName = 'player-video-' + Date.now();
          var $inlineVidContainer = $('<div class="' + playerVidName + '"/>');
          $inlineVidContainer.html(this.movie);
          $inlineVidContainer.addClass('is-active-video is-active');
          $(this.$el).replaceWith($inlineVidContainer);
          this.$el = '.' + playerVidName;

          $(this.$el).addClass('is-active-video is-active');
          $(this.$el).html(this.movie);
        }
    },

    whenVideoReady: function () {
      var self = this;
      if (!_.isUndefined(window.YT)) {
        this.player = new window.YT.Player('player' + this.randomID, {
          height: self.height,
          width: self.width,
          videoId: self.id,
          playerVars: {
            autoplay: 1, //self.autoplay
            wmode: 'transparent',
            hl: PageLocale
          },
          events: {
            'onReady': self.onPlayerReady,
            'onStateChange': self.onPlayerStateChange
          }
        });
      }
    },

    pause: function () {
      this.player.pauseVideo();
      this.resetVideo();
    },

    openIfAutoplay: function () {
      if (this.autoplay) {
        this.open();
      }
    },

    promoVideoActive: function (h) {
      if (this.options.target.data('setControlBackgrond')) {
        this.options.target.data().setControlBackgrond();
      }
      if (this.options.inPromo && $('html').hasClass('ie8')) {
        $('.slider-dots-overlay', $(this.$el).parent().parent().parent()).css({ 'background-color': '#000000', 'padding-top': '30px' });
      }
    },

    resetVideo: function () {
      this.player = null;
      if (!Utils.isIE(9)) {
        $(this.$el).removeClass('is-active-video is-active').html(this.ogContent);
        if (this.options.inPromo && $('html').hasClass('ie8')) {
          $('.slider-dots-overlay', $(this.$el).parent().parent().parent()).css({ 'background-color': 'transparent', 'padding-top': '0px' });
        }
      } else {
        $('iframe', this.$el).attr('src', '');
      }
    },

    destroyVideoActive: function () {
      this.resetVideo();
    }
  };

  return def;
}();

$(function () {
  $('.youtube-video').each(function (i) {
    var p = $(this).parent().parent().parent();

    if ($(this).hasClass('jsapi')) {
      $(this).data('yt', new Yt(this, { 'jsApi': true, 'trigger': true }));
      return;
    }

    if ((p.hasClass('slider') || p.hasClass('jnpr-slider')) && p.attr('data-inPromoOverride') !== "true") {
      $(this).data('yt', new Yt(this, { 'inPromo': true, 'target': p }));
    } else {
      $(this).data('yt', new Yt(this));
    }
  });
});

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Hover Footer
 */



module.exports = function () {

  var def = function (el) {
    this.els = {
      $root: $(el)
    };
    init.call(this);
  };

  var init = function () {
    this.closingTimeout = null;
    this.createTrigger();
    this.initClasses();
    this.bind();
  };

  def.prototype = {

    createTrigger: function () {
      this.$trigger = $('<div class="hover-footer-trigger"><div class="open-icon icon-arrow-up"></div></div>');
      this.els.$root.after(this.$trigger);
    },

    initClasses: function () {
      this.els.$root.addClass('hover-footer');
      this.toggle(false);
    },

    bind: function () {
      var self = this;

      this.$trigger.on('mouseover click', function () {
        self.toggle(true);
      });

      this.els.$root.on('show-briefly', function (e) {
        e.stopPropagation(); // custom listener to display footer
        self.toggle(2000); // for two seconds
      }).on('hide', function (e) {
        e.stopPropagation(); // custom listener hides footer
        self.toggle(false);
      }).on('mouseover', function () {
        self.toggle(true);
      }).on('mouseout', function () {
        self.toggle(1000);
      });

      $(window).resize(function () {
        self.toggle(false);
      });
    },

    toggle: function (boolOrDelay) {
      // set to auto-close after specified time (in ms)
      this.setClosingTimeout(boolOrDelay);

      // update classes of footer and trigger div
      this.els.$root.toggleClass('footer-is-retracted', !boolOrDelay);
      this.$trigger.toggleClass('is-hidden', !!boolOrDelay);

      // set click event listeners to close footer
      // if clicked outside -- to support mobile UI
      this.bindClickClose(!!boolOrDelay);
    },

    setClosingTimeout: function (ms) {
      var self = this;
      // clear any existing timeout
      if (this.closingTimeout) {
        window.clearTimeout(this.closingTimeout);
      }

      // set new closing timeout if delay provided
      if (parseInt(ms) === ms && ms > 0) {
        // set a closing delay if a positive integer
        this.closingTimeout = window.setTimeout(function () {
          self.toggle(false);
        }, ms);
      } else {
        this.closingTimeout = null;
      }
    },

    bindClickClose: function (active) {
      var self = this,
          $content = this.els.$root;

      // clear listeners
      $content.off('click.hover-footer');
      $(window).off('click.hover-footer');

      // put in place if active
      if (active) {
        // defer until after current click event has cleared
        // so doesn't get picked up by window listener
        _.defer(function () {
          $content.on('click.hover-footer', function (e) {
            e.stopPropagation(); // catch event in footer
          });
          $(window).on('click.hover-footer', function () {
            self.toggle(false); // close footer if clicked outside
          });
        });
      }
    }
  };

  return def;
}();

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 * Alerter
 */



var locale = __webpack_require__(8);

var Alerter = module.exports = function () {

  var localizedMessages = {
    'default': 'You are currently using a browser that we do not support. For the best possible experience on our site, we recommend that you upgrade your browser.',
    'fr/fr': 'Nous ne prenons pas en charge le navigateur que vous utilisez. Pour une expérience optimale, nous vous recommandons de le mettre à jour.',
    'kr/kr': '현재 사용하는 브라우저는 지원되지 않습니다. 당사 사이트를 최상의 환경으로 사용하기 위해 브라우저를 업그레이드하는것이 좋습니다.',
    'cn/zh': '您当前使用的浏览器不受支持。为了您可以在我们网站上获得最佳体验，我们建议您升级浏览器。',
    'jp/jp': '現在ご使用のブラウザーはサポートされていません。ジュニパーのサイトを最適に表示するには、ブラウザーをアップグレードすることをお勧めします。',
    'de/de': 'Sie verwenden zurzeit einen Browser, den wir nicht unterstützen. Um unsere Website optimal nutzen zu können, empfehlen wir, dass Sie Ihren Browser aktualisieren.'
  };

  var def = function () {
    this.options = {};
    this.$els = {};

    init.call(this);
  };

  var init = function () {
    this.states = {
      'active': 'is-active'
    };

    var Loc = new locale();
    var curLocale = Loc.getFull();

    this.options = {
      message: localizedMessages[curLocale] !== undefined ? localizedMessages[curLocale] : localizedMessages['default'],
      classes: 'warning',
      cookied: true
    };

    this.goToIt();
  };

  def.prototype = {
    goToIt: function () {
      if (!this.options.cookied || !this.readCookie()) {
        this.append();
      }
    },

    bind: function () {
      this.$els.item = $('.alerter');
      this.$els.close = $('.alerter-close');
      this.$els.close.on('click', $.proxy(this.hide, this));
    },

    append: function () {
      var templ = '<div class="alerter ' + this.options.classes + '">' + this.options.message + '<div class="alerter-close">X</div></div>';
      $('body').prepend(templ);
      this.bind();
      this.$els.item.addClass(this.states.active);
      $(this).css('display', 'block');
    },

    hide: function () {
      this.$els.item.removeClass(this.states.active);
      this.setCookie();
    },

    readCookie: function () {
      return document.cookie.indexOf(this.options.message) > -1;
    },

    setCookie: function () {
      document.cookie = this.options.message + '=true';
    }
  };

  return def;
}();

$(function () {
  if ($('html').hasClass('ie9') || $('html').hasClass('ie8') || $('html').hasClass('ie7')) {
    new Alerter();
    $(window).trigger('resize');
  }
});

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Audio Player
 */



var _ = __webpack_require__(1);

var AudioPlayer = module.exports = function () {

    var audioPlayerTemplate = _.template('<div class="modal audio-modal clearfix pull-right" style="display:none;" data-relationship="<%-data.podcastId%>">' + '<div class="modal-dialog">' + '<a href="javascript:void(0);" class="close-box icon pull-right icon-overlay-close"></a>' + '<div class="modal-content">' + '<div class="modal-body">' + '<h1 class="header header-date-large">"<%-data.podcastName%>"</h1>' + '<audio id="podcast" controls>' + '<source src="<%-data.podcastSource%>" type="audio/mpeg">' + 'Your browser does not support the audio element.' + '</audio>' + '</div>' + '</div>' + '</div>' + '</div>');

    var result = function (triggerSelector) {
        this.$triggerElement = $(triggerSelector);
        this.podcastName = this.$triggerElement.attr('data-podcastName');
        this.podcastSource = this.$triggerElement.attr('data-podcastSource');
        this.podcastId = Date.now();
        this.$triggerElement.attr('data-relationship', this.podcastId);

        $('body').append(audioPlayerTemplate({
            data: {
                podcastId: this.podcastId,
                podcastName: this.podcastName,
                podcastSource: this.podcastSource
            }
        }));

        var $audioModal = $('.audio-modal[data-relationship=' + this.podcastId + ']');

        $(this.$triggerElement).on('click', function (e) {
            $audioModal.show();
            $audioModal.find('#podcast')[0].play();
        });

        $audioModal.find('.close-box').on('click', function (e) {
            $audioModal.find('#podcast')[0].pause();
            $audioModal.find('#podcast')[0].currentTime = 0;
            $audioModal.hide();
        });
    };

    return result;
}();

$(function () {
    $('.podcast-trigger').each(function () {
        new AudioPlayer(this);
    });
});

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Bubble Machine
 */



var BubbleGroup = __webpack_require__(59);

var BubbleMachine = module.exports = function () {

  var def = function (el) {
    this.$el = $(el);
    if (this.$el.length > 0) {
      init.call(this);
    }
  };

  var init = function () {
    this.load(this.$el.data('url'));
  };

  def.prototype = {

    text: {
      backArrow: '&#8592;Back'
    },

    footer: {
      bodyBubble: {
        main: '<span class="icon icon-bubble-arrow"></span>',
        child: '<i class="subtle-arrow">&#8594;</i>'
      }
    },

    classes: {
      group: {
        all: 'bubble-wrapper clearfix',
        main: 'bubble-wrapper-main',
        child: 'bubble-inner-data view-2'
      },
      topWrapper: {
        child: 'bubble-large-wrapper'
      },
      topBubble: {
        all: 'bubble bubble-no-action bubble-top'
      },
      topLink: {
        child: 'bubble bubble-no-action bubble-link'
      },
      bodyWrapper: {
        all: 'bubble-small-wrapper',
        main: 'clearfix bubble-group'
      },
      bodyBubble: {
        all: 'bubble',
        main: 'bubble-top-level bubble-alt',
        child: 'subtle-bubble clearfix'
      },
      backArrow: 'bubble-backlnk'
    },

    color: {
      topBubble: {
        main: 'dark-grey',
        child: 'dark-grey'
      },
      topLink: {
        child: 'teal'
      },
      bodyBubble: {
        main: 'teal',
        child: 'white'
      }
    },

    dataNthPrefix: 'view2-',

    load: function (url) {
      var self = this;
      $.getJSON(url).done(function (data) {
        self.populate(data);
      }).fail(function (jqxhr, textStatus, error) {
        // alert("Unable to construct text bubbles: " + textStatus + ", " + error);
      });
    },

    populate: function (data) {
      this.$build = $('<div/>'); // temporary node to hold...
      this.addGroup(data); // ...JSON-generated content
      this.$el.empty(); // clear any placeholder content
      this.$el.append(this.$build.children()); // and replace with generated groups
      this.initBubbleGroups(); // finally, initialize event listeners
    },

    initBubbleGroups: function () {
      $('.bubble-group').each(function () {
        $(this).data('bubbleGroup', new BubbleGroup(this));
      });
    },

    addGroup: function (data, subgroupNumber) {
      var area, wrapper;
      area = _.isNumber(subgroupNumber) ? 'child' : 'main';
      wrapper = this.addEl(this.$build, '<div/>', this.classesFor('group', area), { "data-rel": subgroupNumber });
      this.addTop(wrapper, data, area);
      this.addBody(wrapper, data.bubbles, area);
      return wrapper;
    },

    addTop: function (container, data, area) {
      var wrapper = this.addEl(container, '<div/>', this.classesFor('topWrapper', area));
      if (area === 'child') {
        this.addBackArrow(wrapper);
      }
      if (data.topLink) {
        this.addBubble(wrapper, data.topLink, area, null, 'topLink');
      }
      if (data.top) {
        this.addBubble(wrapper, data.top, area, null, 'topBubble');
      }
      return wrapper;
    },

    addBackArrow: function (container) {
      return this.addEl(container, '<a/>', this.classes.backArrow, { html: this.text.backArrow, href: 'javascript:void(0);' });
    },

    addBody: function (container, data, area) {
      var wrapper = this.addEl(container, '<div/>', this.classesFor('bodyWrapper', area));
      _.each(data, function (item, index) {
        this.addBubble(wrapper, item, area, index, 'bodyBubble');
      }, this);
      return wrapper;
    },

    addBubble: function (container, data, area, lineNumber, category) {
      var el, appendage;

      el = this.addEl(container, data.url ? '<a/>' : '<div/>', this.classesFor(category, area, data.classes, data.color), this.bubbleOptions(data, area, lineNumber, category));
      if (data.children) {
        this.addGroup(data.children, lineNumber);
      }
      if (!data.skipAppend && (appendage = this.bubbleFooter(area, category))) {
        $(el).append(appendage);
      }
      return el;
    },

    bubbleOptions: function (data, area, lineNumber, category) {
      var options = {
        html: data.copy,
        href: data.url
      };
      if (category === 'bodyBubble') {
        if (area === 'main') {
          options['data-nth'] = options['data-rel'] = lineNumber;
        } else {
          options['data-nth'] = this.dataNthPrefix + lineNumber;
        }
      }
      return options;
    },

    bubbleFooter: function (area, category) {
      var descriptor = this.footer[category] || {};
      return descriptor[area] || null;
    },

    classesFor: function (category, area, addClasses, color) {
      var classList = [addClasses, color || (this.color[category] || {})[area]];
      var descriptor = this.classes[category];
      if (descriptor) {
        classList = [descriptor.all, descriptor[area]].concat(classList);
      }
      return this.joinClasses(classList);
    },

    addEl: function (container, tag, classes, options) {
      var el = this.buildEl(tag, classes, options);
      $(container).append(el);
      return el;
    },

    buildEl: function (tag, classes, options) {
      var attrs = _.clone(options || {});
      attrs['class'] = this.joinClasses([attrs.classes, classes]);
      return $(tag, _.omit(attrs, 'classes'));
    },

    joinClasses: function (classList) {
      var output = [];
      _.each(classList, function (classes) {
        if (_.isString(classes)) {
          output = _.union(output, _.map(classes.split(' '), function (arg) {
            return $.trim(arg);
          }));
        }
      });
      return output.length > 0 ? output.join(' ') : null;
    }
  };

  return def;
}();

$(function () {
  $('.bubble-tree').each(function () {
    new BubbleMachine(this);
  });
});

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 * C2C
 */



var _ = __webpack_require__(1);

var ChatStatic = function () {

    var chatButtonOnlinePrefix = "liveagent_button_online_";
    var chatButtonOfflinePrefix = "liveagent_button_offline_";

    var chatTemplate = _.template('<a class="button button-green <%-data.classes%>" id="<%-data.id.online%>" href="javascript://Chat" style="display: none;" onclick="liveagent.startChat(<%-data.liveagentIdStr%>)"><%-data.translationStr.available%></a>' + '<button class="button button-gray <%-data.classes%>" id="<%-data.id.offline%>" style="display: none;" tabIndex="-1" aria-disabled="true" disabled="disabled"><%-data.translationStr.unavailable%></div>');

    var chatCtrl = function (triggerElement) {
        if (this === undefined) return;
        this.type = 'chatstatic';

        this.$triggerElement = $(triggerElement);
        this.initUrl = this.$triggerElement.attr('data-liveagent-init-url');
        this.initOrg1 = this.$triggerElement.attr('data-liveagent-init-org-value1');
        this.initOrg2 = this.$triggerElement.attr('data-liveagent-init-org-value2');
        this.liveagentId = this.$triggerElement.attr('data-liveagent-id');
        this.translationStr = {
            available: this.$triggerElement.attr('data-liveagent-available'),
            unavailable: this.$triggerElement.attr('data-liveagent-unavailable')
        };
        this.classes = this.$triggerElement.attr('class');

        this.$triggerElement.replaceWith(chatTemplate({
            data: {
                id: {
                    online: chatButtonOnlinePrefix + this.liveagentId,
                    offline: chatButtonOfflinePrefix + this.liveagentId
                },
                liveagentIdStr: "'" + this.liveagentId + "'",
                translationStr: this.translationStr,
                classes: this.classes
            }
        }));

        try {
            if (!window._laq) {
                window._laq = [];
            }
            window._laq.push(function () {
                window.liveagent.showWhenOnline(this.liveagentId, document.getElementById(chatButtonOnlinePrefix + this.liveagentId));
                window.liveagent.showWhenOffline(this.liveagentId, document.getElementById(chatButtonOfflinePrefix + this.liveagentId));
            }.bind(this));
            window.liveagent.init(this.initUrl, this.initOrg1, this.initOrg2);
            // window.liveagent.enableLogging();
            window.liveagent.setChatWindowWidth(680);
            window.liveagent.setChatWindowHeight(620);
        } catch (error) {
            console.warn(error, this.liveagentId);
        }
    };

    return chatCtrl;
}();

$(function () {
    $('.chat-static-trigger').each(function () {
        if (window.liveagent) {
            this.chatCtrl = new ChatStatic(this);
        }
    });
});

module.exports = ChatStatic;

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Campaign Hero
 */



var CampaignHero = module.exports = function () {

  var def = function (el) {
    this.$el = el;
    this.styles = {};
    this.setup();
  };

  def.prototype = {
    setup: function () {
      if (this.$el.attr('data-color')) {
        this.styles['background-color'] = this.$el.attr('data-color');
      }
      if (this.$el.attr('data-image')) {
        this.styles['background-image'] = 'url(' + this.$el.attr('data-image') + ')';
      }
      this.build();
    },

    build: function () {
      this.$el.parent().css(this.styles);
    }
  };

  return def;
}();

$(function () {
  $('.template .bg').each(function () {
    $(this).data('bg', new CampaignHero($(this)));
  });
});

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Campaign Resizer
 */



var CampaignResizer = module.exports = function () {
  var def = function (el) {
    this.el = $(el);
    this.wrapper = this.el.find('.no-hero-wrapper-alt');

    // resize
    this.setupResize();
    this.resize();
  };

  def.prototype = {
    setupResize: function () {
      $(window).on("resize", _.bind(this.resize, this));
    },
    resize: function () {
      this.el.height(this.wrapper.height() + 40);
    }
  };

  return def;
}();

$(function () {
  $('.campaign-height').each(function () {
    new CampaignResizer(this);
  });
});

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Case filter
 */



var Casefilter = module.exports = function () {

  //var rowTemplate = _.template('<div class="casefilter-row" data-index="<%= index %>" data-industry="<%= industry %>" data-product="<%= product %>" data-region="<%= region %>" data-timestamp="<%= timestamp %>" data-viewcount="<%= viewcount %>"><div class="slice"><div class="slice-item"><%= name %></div><div class="slice-item"><a href="<%= url %>"><%= linkText %></a></div></div></div>');

  var def = function (el) {
    this.filter = {};
    this.data = [];

    // set module base element
    setElement(this, el);

    // cache jquery selectors
    setupUI(this);

    // setup select input event listeners
    setupSelectors(this);

    // setup sorting inputs
    setupSorting(this);

    // setup expand button
    setupExpand(this);

    // setup stuff
    pullData(this);

    var self = this;
    _.defer(function () {
      sortData(self, "timestamp");
      sortDom(self, "timestamp");
      self.ui.sortLinks.eq(0).addClass('is-active');
    });
  };

  // sets the base element and
  // creates scoped search function
  function setElement(self, el) {
    self.el = el;
    self.$el = $(el);
    self.$ = function (selector) {
      return self.$el.find(selector);
    };
  }

  // cache jquery selectors
  function setupUI(self) {
    self.ui = {
      select: self.$('.casefilter-select > .select'),
      sortLinks: self.$(".casefilter-sort-item"),
      resultCount: self.$('.casefilter-result-count-number'),
      results: self.$('.casefilter-results'),
      header: self.$(".casefilter-header"),
      rows: self.$(".casefilter-row"),
      expand: self.$('.casefilter-expand')
    };
  }

  def.prototype.setupSelectors = function () {
    this.ui.select.on('change', function (e) {
      var $this = $(this),
          key = $this.attr('data-key'),
          val = $this.val();

      setFilter(this, key, val);
      filterDom(this);
    });
  };

  // setup event listenrs for select inputs
  function setupSelectors(self) {
    self.ui.select.on('change', function (e) {
      var $this = $(this),
          key = $this.attr('data-key'),
          val = $this.val();

      setFilter(self, key, val);
      filterDom(self);
    });
  }

  function setupSorting(self) {
    self.ui.sortLinks.on('click', function () {
      var $this = $(this),
          key = $this.attr('data-key');

      sortData(self, key);
      sortDom(self, key);

      $this.addClass('is-active').parent().siblings().children().removeClass('is-active');
    });
  }

  function setupExpand(self) {
    function calculateHeight(count) {
      var filteredRow = self.ui.rows.filter(function () {
        return !$(this).hasClass('is-hidden');
      });

      if (count) {
        filteredRow = filteredRow.slice(0, count);
      }

      var rowHeights = filteredRow.map(function (index, list) {
        return parseInt($(this).attr('data-start-height'));
      }).get();

      return 2 + _.reduce(rowHeights, function (total, height) {
        return total + height;
      }, self.ui.header.outerHeight());
    }

    self.isExpanded = false;

    self.ui.expand.on('click', function () {
      self.isExpanded = true;
      self.ui.results.css('height', calculateHeight()).addClass('is-expanded');
      $(this).hide();
    });

    $(window).on('resize', _.throttle(function () {
      self.ui.results.css('height', calculateHeight(!self.isExpanded ? 8 : undefined));
    }, 250)).trigger('resize');

    _.delay(function () {
      self.ui.results.css('height', calculateHeight(!self.isExpanded ? 8 : undefined));
    }, 500);
  }

  // render list of data from server responses
  /*function renderList(self, data) {
    var fragment = _.reduce(data, function (result, rowData) {
    result.push($(rowTemplate(rowData)));
    return result;
    }, []);
     self.ui.rows.remove();
    self.ui.results.append(fragment);
     _.defer(function () {
    self.ui.rows = self.$(".casefilter-row");
    });
    }*/

  function pullData(self) {
    self.data = self.ui.rows.map(function () {
      var attrs = ['index', 'industry', 'product', 'region', 'timestamp', 'viewcount'],
          $this = $(this),
          data = {};

      _.each(attrs, function (attr) {
        var dattr = 'data-' + attr;
        if ($this.attr(dattr)) {
          if (attr === 'index' || attr === 'viewcount') {
            data[attr] = parseInt($this.attr(dattr));
          } else if (attr === 'timestamp') {
            // convert timestamp to milliseconds
            // remove dashes or ff with return InvalidDate
            data[attr] = +new Date($this.attr(dattr).replace(/-/g, "/"));
          } else {
            data[attr] = $this.attr(dattr);
          }
        }
      });

      self.ui.rows.each(function () {
        $(this).attr('data-start-height', $(this).outerHeight());
      });

      // replace text with json
      // $this.children().eq(0).text(JSON.stringify(data));

      return data;
    });

    setResultCount(self, self.data.length);
  }

  function setResultCount(self, number) {
    self.ui.resultCount.text(number);

    self.ui.expand[number <= 8 ? "addClass" : "removeClass"]("is-hidden");
  }

  function setFilter(self, key, val) {
    if (key === undefined) {
      return;
    }
    if (val !== undefined && val !== "all") {
      self.filter[key] = val;
    } else {
      delete self.filter[key];
    }

    self.ui.rows.addClass('is-hidden');
  }

  // filters data based on obj match
  function filterDom(self) {
    var showCount = 0;

    self.ui.rows.each(function () {
      var $this = $(this),
          isValid = true,
          index = parseInt($this.attr('data-index'));

      _.each(self.filter, function (val, key) {
        if (self.data[index][key] !== val) {
          isValid = false;
        }
      });

      if (isValid) {
        showCount++;
      }
      $this[!isValid ? "addClass" : "removeClass"]("is-hidden");
    });

    setResultCount(self, showCount);
  }

  // sorts filter data based on key
  function sortData(self, key) {
    self.data = _.sortBy(self.data, key);
    if (key === 'timestamp' || key === 'viewcount') {
      self.data.reverse();
    }
  }

  /*function getRowIndex(data, index) {
    for (var i = 0; i < data.length - 1; i++) {
    if (data[i].index === i) {
    return i;
    }
    }
    }*/

  function sortDom(self, key, desc) {
    //var size = self.ui.rows.outerHeight();
    var els = {};

    self.ui.rows.each(function (index) {
      els[index] = $(this).detach();
    });

    _.each(self.data, function (row, i) {
      self.ui.results.append(els[row.index]);
    });
  }

  return def;
}();

$(function () {
  $('.casefilter').each(function () {
    new Casefilter(this);
  });
});

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Click-to-chat Popup
 */



var _ = __webpack_require__(1),
    Utils = __webpack_require__(0);

var ChatPopup = function () {

    var popupIdPrefix = "liveagent_invite_button_";

    var chatTemplate = _.template('<div class="chat-wrap">' + '<div class="modal chat-popup clearfix pull-right" id="<%-data.popupId%>" style="display:none;"' + '<div class="modal-dialog">' + '<a href="javascript:void(0);" class="close-box icon pull-right icon-overlay-close"></a>' + '<div class="modal-content">' + '<div class="modal-body">' + '<h1 class="header header-date-large"><%-data.translationStr.question%></h1>' + '</div>' + '<div class="modal-footer">' + '<button type="submit" class="slice-item button button-green button-ctc padded-right" onclick="liveagent.startChat(<%-data.liveagentIdStr%>)"><%-data.translationStr.accept%></button>' + '<button class="slice-item button button-ctc" onclick="liveagent.rejectChat(<%-data.liveagentIdStr%>)"><%-data.translationStr.reject%></button>' + '</div>' + '</div>' + '</div>' + '</div>' + '</div>');

    var chatCtrl = function (triggerElement) {
        if (this === undefined) return;
        this.type = 'chatpopup';

        this.$triggerElement = $(triggerElement);
        this.initUrl = this.$triggerElement.attr('data-liveagent-init-url');
        this.initOrg1 = this.$triggerElement.attr('data-liveagent-init-org-value1');
        this.initOrg2 = this.$triggerElement.attr('data-liveagent-init-org-value2');
        this.liveagentId = this.$triggerElement.attr('data-liveagent-id');
        this.translationStr = {
            question: this.$triggerElement.attr('data-liveagent-question'),
            accept: this.$triggerElement.attr('data-liveagent-accept'),
            reject: this.$triggerElement.attr('data-liveagent-reject')
        };
        this.popupId = popupIdPrefix + this.liveagentId;

        $('body').append(chatTemplate({
            data: {
                popupId: this.popupId,
                liveagentIdStr: "'" + this.liveagentId + "'",
                translationStr: this.translationStr
            }
        }));

        this.$popup = $('#' + this.popupId + '.chat-popup');
        this.$popupClose = this.$popup.find('.close-box');
        this.enable();

        try {
            window.liveagent.addButtonEventHandler(this.liveagentId, this.buttonEventHandler.bind(this));
            window.liveagent.init(this.initUrl, this.initOrg1, this.initOrg2);
            window.liveagent.enableLogging();
            window.liveagent.setChatWindowWidth(680);
            window.liveagent.setChatWindowHeight(620);
        } catch (error) {
            console.warn(error, this.liveagentId);
        }

        var $buttons = this.$popup.find('button');
        $buttons.on('click', this.buttonClickHandler.bind(this));

        this.$popupClose.on('click', this.closeBoxClickHandler.bind(this));

        this.$popup.get(0).addEventListener("animationiteration", this.animationIterationHandler.bind(this), false);
    };

    chatCtrl.prototype.enable = function () {
        this.status = true;
    };

    chatCtrl.prototype.disable = function () {
        this.status = false;
        this.hide();
    };

    chatCtrl.prototype.show = function () {
        this.$popup.show();
    };

    chatCtrl.prototype.hide = function () {
        this.$popup.hide();
    };

    chatCtrl.prototype.buttonClickHandler = function (e) {
        Utils.changeCookieExpirationDate("liveagent_invite_rejected_" + this.liveagentId, Utils.getCookieExpirationFromHours(0.01), '/');
        this.disable();
    };

    chatCtrl.prototype.buttonEventHandler = function (e) {
        switch (e) {
            case 'BUTTON_UNAVAILABLE':
                this.hide();break;
            case 'BUTTON_AVAILABLE':
                this.show();break;
            case 'BUTTON_ACCEPTED':
                break;
            case 'BUTTON_REJECTED':
                break;
        }
    };

    chatCtrl.prototype.closeBoxClickHandler = function (e) {
        this.$popupClose.each(function (elem) {
            $(this).parent().hide();
        });
    };

    chatCtrl.prototype.animationIterationHandler = function (e) {
        this.$popup.css('cssText', 'display: block !important');
        this.$popup.css('cssText', 'animation-name: none');
        this.$popup.css("right", "0");
    };

    return chatCtrl;
}();

$(function () {
    $('.chat-popup-trigger').each(function () {
        if (window.liveagent) {
            this.chatCtrl = new ChatPopup(this);
        }
    });
});

module.exports = ChatPopup;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Community Page
 */



var Utils = __webpack_require__(0);
var VideoOverlay = __webpack_require__(10);

var CommunityPage = module.exports = function () {
  var _this = this;
  var def = function () {
    $.ajax({
      type: 'GET',
      url: 'http://social.juniper.johnmcneilstudio.com/feeds/posts.php',
      //url: 'http://localhost/feeds/posts.php',
      dataType: 'jsonp',
      success: function (posts) {
        $.each(posts, function (k, v) {
          var html = '',
              network = k;
          if ($('#' + network + "_template").length !== 0) {
            $.each(v, function (k, v) {
              html += tmpl(network + "_template", v);
            });
            if (html.length === 0) {
              $('#' + k + "_container").parent().hide();
            } else {
              $('#' + k + "_container").append(html);
            }
            $('#' + k + "_container li:last").css('border', 'none');
          }
        });
        //loop through the newly added video overlays
        VideoOverlay.prototype.scan();
      },
      error: function (XMLHttpRequest, textStatus, errorThrown) {
        // console.log('error!!!!!:', XMLHttpRequest, textStatus, errorThrown);
      }
    });

    //check if we need to display Flash fallback message in the browser for Youku container
    if ($('#youku_container').length > 0) {
      var isYoukuPlayerValid = Utils.isYoukuPlayerValid(function (result) {
        if (result === true || result === "true") return;
        var flashMessage = '<p>You need <a href="http://www.adobe.com/go/getflash" target="_blank">Adobe Flash Player</a> to be able to watch these videos</p>';
        $('#youku_container').prepend(flashMessage);
      });
    }
  };

  return def;
}();

$(function () {
  if ($('.is-community-page').length > 0) {
    new CommunityPage();
  }
});

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Components
 */

__webpack_require__(74);
__webpack_require__(62);
__webpack_require__(65);
__webpack_require__(64);
__webpack_require__(66);
__webpack_require__(63);
__webpack_require__(61);
__webpack_require__(2);

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Comptable
 */

/*jshint camelcase: false*/
/*jshint -W069*/
/*jshint -W018*/



var Hammer = __webpack_require__(76),
    Hash = __webpack_require__(57),
    Responsive = __webpack_require__(3),
    Utils = __webpack_require__(0),
    Compcard = __webpack_require__(60);

var Comptable = module.exports = function () {

  var def = function (el, opts) {

    this.options = _.extend({
      timeout: 500
    }, opts);

    this.el = $(el);
    this.ui = {
      wrapper: $('.comptable-wrapper'),
      cards: this.el.find('.compcard'),
      key: this.el.find('.comptable-key'),
      keyItem: this.el.find('.comptable-key-item'),
      table: this.el.find('.comptable-table'),
      cloud: $('.comptable-select-cloud'),
      scrollbar: $('.comptable-scrollbar'),
      scrollLeft: $('.comptable-scroll-left'),
      scrollRight: $('.comptable-scroll-right'),
      scrollThumbWrap: $('.comptable-scroll-thumb-wrap'),
      scrollThumb: $('.comptable-scroll-thumb'),
      sticky: $('.comptable-sticky-bar'),
      headerRow: $('.comptable-header-row'),
      revealCloud: $('.reveal-cloud')
    };
    this.hash = null;

    init.call(this);
  };

  var init = function () {
    // Hash
    this.hash = new Hash();
    this.hash.subscribe(['p', 'a'], $.proxy(this.onHashChanged, this));

    // Pinned & Added cards
    this.pinnedCards = [];
    this.addedCards = [];

    this.offset = 0; // initial horizontal scroll position
    this.createCards();

    // Init hash with all cards compared by default
    this.hash.init('a=' + this.cards.map(function (elem) {
      return elem.prodId;
    }).join(","));

    this.ui.keyBlocks = this.el.find('[data-key]');
    this.setupBlockRows();
    this.maintainToggleControls();
    this.bind();

    _.defer(_.bind(function () {
      this.doneLoading();
      this.resize();
    }, this));
  };

  def.prototype = {

    bind: function () {
      var columnDragHandlers, thumbDragHandlers;

      columnDragHandlers = _.bind(function ($el) {
        var hammer = new Hammer($el[0]);
        hammer.on('panstart', _.bind(this.dragStart, this)).on('panmove', _.bind(this.drag, this)).on('panend', _.bind(this.dragEnd, this));
      }, this);
      columnDragHandlers(this.el);
      columnDragHandlers(this.ui.headerRow);

      thumbDragHandlers = _.bind(function ($thumb) {
        var hammer = new Hammer($thumb[0]);
        hammer.on('panstart', _.bind(this.thumbDragStart, this)).on('panmove', _.bind(this.thumbDrag, this)).on('panend', _.bind(this.thumbDragEnd, this));
      }, this);
      thumbDragHandlers(this.ui.scrollThumb);

      $(window).on('resize orientationchange', _.throttle(_.bind(this.resize, this), 100)).on('scroll', _.throttle(_.bind(this.scroll, this), 50));

      // reveal/hide row key names at mobile break
      this.ui.key.on('click', _.bind(this.toggleKey, this)).on('mouseenter', _.bind(this.toggleKey, this, true)).on('mouseleave blur focusout', _.bind(this.toggleKey, this, false));

      // Toggle specs on load
      var self = this;
      $(document).on('click', function (ev) {
        ev.stopPropagation();
        self.toggleKey(false);
      });
      this.ui.key.trigger('mouseenter');
      window.setTimeout(function () {
        self.toggleKey(false);
      }, 3000);

      // callback from card actions
      this.ui.cards.on('comp:card:add comp:card:remove comp:card:lock comp:card:unlock', _.bind(this.changeOfCardState, this));

      // nav controls
      this.ui.scrollLeft.on('click', _.bind(this.moveColumnOffset, this, -1));
      this.ui.scrollRight.on('click', _.bind(this.moveColumnOffset, this, 1));
      this.ui.scrollThumbWrap.on('mousedown', _.bind(this.pageScrollbar, this));
      this.ui.scrollThumb.on('mousedown', function (e) {
        e.stopPropagation();
      }); // so won't trigger paging
      this.ui.addAll.on('click', _.bind(this.addAllProducts, this));
      this.ui.revealCloud.on('click', _.bind(this.toggleCloud, this));
    },

    //////////////////
    // INITIALIZATION
    //////////////////

    // called after cards have been instantiated, to avoid load-time glitchiness
    doneLoading: function () {
      this.ui.wrapper.removeClass('is-loading');
    },

    // instantiate card objects
    createCards: function () {
      // Save a copy of the 'Add all products' button and remove it from the DOM
      var $addAllButtons = this.ui.cloud.find('.comptable-add-all');
      var addAllButton = $addAllButtons.first().clone();
      $addAllButtons.remove();

      this.cards = _.map(this.ui.cards, function (cardEl) {
        var compcard = new Compcard(cardEl, this);
        $(compcard).on('productClicked', $.proxy(this.onProductClicked, this));
        $(compcard).on('productLockClicked', $.proxy(this.onProductLockClicked, this));
        return compcard;
      }, this);

      // needs to happen after card objects are created.
      // since control is appended to the toggle switch cloud
      if (addAllButton.length === 0) {
        this.createAddAllButton();
      } else {
        this.ui.cloud.append(addAllButton);
        this.ui.addAll = addAllButton;
      }
    },

    // append 'Add all products' button
    createAddAllButton: function () {
      this.ui.addAll = $('<div />', {
        class: 'comptable-add-all',
        html: 'Add&nbsp;all&nbsp;products'
      });
      this.ui.cloud.append(this.ui.addAll);
    },

    // Read the URL for a product=XXX param. If exists,
    // filter the list to the single indicated product.
    filterByURLParam: function (params) {
      if (params === null) {
        return;
      }

      var self = this;
      this.pinnedCards = params.p !== undefined ? params.p['values'] : [];
      this.addedCards = params.a !== undefined ? params.a['values'] : [];

      // Default pinned & added cards
      _.each(this.cards, function (card) {
        var productId = card.productId();

        // If pinned, lock it
        if (self.pinnedCards.indexOf(productId) > -1) {
          card.toggleLock(true);
        } else {
          // Toggle remove
          card.toggleRemove(self.addedCards.indexOf(productId) === -1);
        }
      });
    },

    // associates blocks with equal data-keys
    setupBlockRows: function () {
      var self = this;

      this.rows = {};
      this.ui.keyBlocks.each(function () {
        var $this = $(this),
            key = $this.attr('data-key');

        if (_.isUndefined(self.rows[key])) {
          self.rows[key] = [];
        }

        self.rows[key].push($this);
      });
    },

    // Set number of columns and card width based on screen size.
    // This is an idealized width. Actual card widths are not set here,
    // but are rounded to whole pixels when set by assignCardPositions().
    calculateCardWidths: function () {
      var containingWidth = this.ui.table.width(),
          columns;

      switch (Responsive.getSize()) {
        case 'small':
        case 'mobile':
          columns = 2;
          break;
        case 'large':
        case 'medium':
          columns = 4;
          break;
        default:
          columns = 3;
      }

      this.lockedCardWidth = this.cardWidth = containingWidth / columns;
      this.onScreenCount = Math.floor(containingWidth / this.cardWidth);
    },

    //////////////////
    // EVENT HANDLERS
    //////////////////

    onHashChanged: function (data) {
      this.filterByURLParam(data);
    },

    // Called on product clicked
    onProductClicked: function (ev, data) {
      var type = data.type,
          action = 'add',
          product = data.product,
          inAdded = this.addedCards.indexOf(product),
          inPinned = this.pinnedCards.indexOf(product);

      // If already in added, remove it from the added
      if (inAdded > -1) {
        this.addedCards.splice(inAdded, 1);
        // If it's a compare that goes to pin
        action = type === 'pin' ? 'add' : 'remove';
        // If already in pinned, remove if from the pinned
      } else if (inPinned > -1) {
        this.pinnedCards.splice(inPinned, 1);
        // It's a remove
        action = 'remove';
      }

      // if type not forceRemove
      if (type !== 'forceRemove') {
        // If it's an add or a type == pinned to remove, let's add to added
        if (action === 'add' && type === 'compare' || action === 'remove' && type === 'pin') {
          this.addedCards.push(product);
        }

        // If add action & pin type, then add it to the pinned
        if (action === 'add' && type === 'pin') {
          this.pinnedCards.push(product);
        }
      }

      this.hash.setHashParams({
        a: this.addedCards,
        p: this.pinnedCards
      });
    },

    dragStart: function (e) {
      this.dragStartOffset = this.offset;
      this.beginTrackDragX();
    },

    drag: function (e) {
      this.maintainStickyBar(); // for iOS response
      this.trackDragX(e.deltaX);
      this.scrollToOffset((this.dragStartOffset || 0) + e.deltaX, { skipMaintain: true });
    },

    dragEnd: function (e) {
      this.maintainStickyBar(); // for iOS response
      this.trackDragX(e.deltaX);
      this.scrollToOffset((this.dragStartOffset || 0) + e.deltaX, { momentum: this.dragMomentum(), animate: true });
    },

    thumbDragStart: function (e) {
      this.thumbDragStartX = this.ui.scrollThumb.position().left;
    },

    thumbDrag: function (e) {
      var newLeft = this.thumbDragStartX + e.deltaX,
          maxLeft = this.ui.scrollThumb.parent().width() - this.ui.scrollThumb.width();

      this.scrollToFraction(parseFloat(newLeft) / maxLeft, { skipMaintain: true });
    },

    thumbDragEnd: function (e) {
      var newLeft = this.thumbDragStartX + e.deltaX,
          maxLeft = this.ui.scrollThumb.parent().width() - this.ui.scrollThumb.width();

      this.scrollToFraction(parseFloat(newLeft) / maxLeft, { animate: true });
    },

    pageScrollbar: function (event) {
      var vector = event.pageX < this.ui.scrollThumb.offset().left ? -1 : 1,
          visibleUnlockedColCount = _.max([this.onScreenCount - this.countCards({ locked: true }), 0]);

      this.moveColumnOffset(visibleUnlockedColCount * vector);
    },

    resize: function () {
      this.calculateCardWidths();
      this.maintainLocked();
      this.assignCardPositions();
      this.scrollToOffset(null, { snap: true });
      this.maintainScrollbar(true);

      // defer for height calculations
      _.defer(_.bind(function () {
        this.setBlockHeights();
        this.setHeaderRowHeight();
        this.maintainStickyBar({ resize: true });
      }, this));
    },

    scroll: function () {
      this.maintainStickyBar();
    },

    beginTrackDragX: function () {
      var throttleMS = 50;
      this.recentDragX = [];
      this.throttledTrackDragX = this.throttledTrackDragX || _.throttle(_.bind(function (x) {
        this.recentDragX.unshift(x);
      }, this), throttleMS, { leading: false, trailing: false });
    },

    trackDragX: function (x) {
      this.throttledTrackDragX(x);
    },

    // returns -1 for left momentum, +1 for right, 0 for insignificant/none
    dragMomentum: function () {
      var frames = 2,
          // number of throttled frames to compare back
      minimumTravel = 10,
          // minimum drag distance for momentum
      delta = (this.recentDragX[0] || 0) - (this.recentDragX[frames] || 0); // previous offset
      return delta >= minimumTravel ? 'right' : -delta >= minimumTravel ? 'left' : null;
    },

    // event handler for callbacks from card actions --
    // comp:card:add comp:card:remove comp:card:lock comp:card:unlock
    changeOfCardState: function (e, card) {
      var freeze = {},
          self = this,
          action = (e.type.match(/:(\w*)$/) || [])[1];

      // For any event BUT :add, try to keep the same card in the left scroll column.
      // Best to get this info before setting card positions below.
      if (action !== 'add') {
        freeze = {
          card: this.leftmostUnlockedCard(action === 'unlock' ? card : null),
          // if card was just unlocked, should not yet be counted as an unlocked card
          width: this.lockedCardsWidth()
        };
      }

      // move columns over when column is pinned
      if (action === 'lock') {
        freeze.width += this.cardWidth;
      }

      // update card position attributes for current state of locks/removes
      this.assignCardPositions();

      // If card is unlocked from the rightmost lock position
      // and is in order with the first visible scrolling card,
      // it should stay in place.
      if (!freeze.card || action === 'unlock' && card.position + card.width + 1 >= freeze.card.position) {
        this.scrollToCards([card]);
      } else {
        this.scrollToOffset(freeze.width - freeze.card.position, { animate: true });
      }

      this.maintainLocked();
      this.maintainToggleControls();
      this.maintainVisibleCards();
      this.maintainScrollbar(true);

      // for any event - let's recalculate the heights
      _.defer(function () {
        self.setBlockHeights();
      });
    },

    // open and close row key label drawer
    toggleKey: function (force) {
      if (force) {
        this.ui.key.focus();
      } else {
        var ev = $._data(document, 'events');
        if (ev && ev.click) {
          $(document).off('click');
        }
      }
      this.ui.key.toggleClass('is-expanded', force);
    },

    toggleCloud: function () {
      // callback to resize stick bar
      var maintainStickyHeight = _.bind(this.maintainStickyBar, this, { resize: true });
      this.ui.cloud.slideToggle({
        duration: this.options.timeout / 2,
        step: maintainStickyHeight,
        complete: _.bind(function () {
          // now open (after animation)?
          var open = this.ui.cloud.is(':visible');

          // Swap out jQuery display property for descriptive class so that
          // visibility in non-mobile won't require inline styling in break-response code.
          this.ui.cloud.css('display', '');
          this.ui.cloud.toggleClass('is-open-mobile', open);

          // update toggle control
          this.ui.revealCloud.toggleClass('icon-reveal-active-white', open).toggleClass('icon-reveal-white', !open);

          // update height of sticky bar at finish
          maintainStickyHeight();
        }, this)
      });
    },

    // any removed cards are restored to visibility.
    // locked cards are not affected and stay in place.
    addAllProducts: function () {
      var addedCards = _.where(this.cards, { removeState: true });

      for (var i = 0, len = addedCards.length; i < len; i++) {
        this.addedCards.push(addedCards[i].prodId);
      }
      this.hash.setHashParams({
        a: this.addedCards,
        p: this.pinnedCards
      });
    },

    //////////////////////
    // COLUMN MANIPULATION
    //////////////////////

    // Sets the `position` property on each card. Note that this function does NOT
    // actually move the cards, which requires a call to `scrollToOffset`.
    // `position` is the positive pixel offset of each card within the scrolling area,
    // always beginning at 0. Scrolling cards' positions start after the locked cards,
    // and also have negative offset when scrolled.
    assignCardPositions: function () {
      var orderCards = this.findCards({ locked: true }, 'lockOrder').concat(this.findCards({ locked: false })),
          fractionalPosition = 0,
          realPosition = 0,
          nextFractionalPosition,
          nextRealPosition;
      _.each(orderCards, _.bind(function (card) {
        var fractionalWidth = card.lockState ? this.lockedCardWidth : this.cardWidth;
        nextFractionalPosition = fractionalPosition + fractionalWidth;
        nextRealPosition = Math.round(nextFractionalPosition);
        card.setPosition(realPosition);
        card.setWidth(nextRealPosition - realPosition);
        // advance fractional and real positions only if current card is visible
        if (!card.removeState) {
          fractionalPosition = nextFractionalPosition;
          realPosition = nextRealPosition;
        }
      }, this));
    },

    // offset is the negative horizontal pixel offset of the scrolling columns area.
    // An offset of 'freeze' maintains columns visually in the same location.
    // opts.animate: enable animation (transition slide)
    // opts.snap : snap to nearest round column
    // opts.animate : animate to nearest round column
    // opts.momentum : 'left', 'right', or null -- consider momentum when animating/snapping
    // opts.skipMaintain : do not update scrollbars, etc.
    scrollToOffset: function (offset, opts) {
      opts = opts || {};

      if (!_.isNumber(offset)) {
        offset = this.offset || 0; // i.e if undefined or null
      }

      if (opts.animate) {
        this.beginAnimating();
      }

      if (opts.animate || opts.snap) {
        this.offset = this.snapToOffset(offset, opts.momentum);
      } else {
        this.offset = offset; // skip animation for dragging, initialization, resize, etc.
      }

      // assign new transforms
      _.invoke(this.cards, 'setTransform', this.offset);

      // control maintenance
      this.maintainScrollThumbOffset();
      if (!opts.skipMaintain) {
        this.maintainScrollbar();
      }
    },

    // scroll to a fraction of the total range of the scroll.
    // Constrains input within the scrollable range (i.e. 0 to 1)
    // options are passed to this.scrollToOffset()
    scrollToFraction: function (fraction, options) {
      var cardOffset = this.offScreenCount() * _.min([_.max([0, fraction]), 1]);

      this.scrollToOffset(-cardOffset * this.cardWidth, options || {});
    },

    // `delta` is relative column offset.
    moveColumnOffset: function (delta) {
      this.setColumnOffset(delta - this.offset / this.cardWidth);
    },

    // Set scroll to an absolute column position.
    setColumnOffset: function (columnOffset) {
      this.scrollToOffset(this.constrainColumnOffset(columnOffset) * -this.cardWidth, { animate: true });
    },

    // maintainance for locking states
    maintainLocked: function () {
      // keep at least one column scrollable
      _.invoke(this.findCards({ locked: true }).slice(this.onScreenCount - 1), 'toggleLock', false);

      // if locks are maxed out (only one scrolling column), disable additional locking
      this.ui.headerRow.toggleClass('max-locks', this.countCards({ locked: true }) >= this.onScreenCount - 1);
    },

    // Display as many cards in array as is possible by scrolling.
    // If more than can be shown, leftmost card is scrolled to left edge.
    scrollToCards: function (cards) {
      var leftScrollPosition, cardPositions, offset;

      if (cards.length === 0) {
        return; // empty set
      }

      // left edge of scroll area is width of the combined locked cards
      leftScrollPosition = this.lockedCardsWidth();

      // position of each passed card
      cardPositions = _.pluck(cards, 'position').sort(function (a, b) {
        return a - b;
      });

      // if first card is currently scrolled off screen to left or at left edge (plus 1 pixel rounding fudge factor)
      if (cardPositions[0] <= leftScrollPosition - this.offset + 1 ||
      // or if passed cards will fill the screen
      cards.length >= this.onScreenCount - this.countCards({ locked: true })) {

        offset = leftScrollPosition - cardPositions[0]; // ... then put first card in first scrolling column
      } else {
        // fill in cards from the right
        // i.e. position the last card in the rightmost visible column
        offset = this.ui.table.width() - _.last(cardPositions) - this.cardWidth;
      }

      this.scrollToOffset(offset, { animate: true });
    },

    ///////////////////////////////////////
    // COLUMN / SCROLL CONSTRAINTS & STATS
    ///////////////////////////////////////

    // Constrain offset to full columns.
    // If momentum === 'left' or 'right' and the minimum movement threshold is met
    // it will adjust the column over by one in the direction of the momentum.
    snapToOffset: function (offset, momentum) {
      var targetColumn = Math.round(-offset / this.cardWidth),
          percentOffsetFromColumn = targetColumn + offset.toFixed(2) / this.cardWidth,
          momentumThreshold = 0.2;

      if (momentum === 'left' && percentOffsetFromColumn <= -momentumThreshold) {
        targetColumn += 1;
      } else if (momentum === 'right' && percentOffsetFromColumn >= momentumThreshold) {
        targetColumn -= 1;
      }

      return this.constrainColumnOffset(targetColumn) * -this.cardWidth;
    },

    // constrain horizontal scrolling
    constrainColumnOffset: function (columnOffset) {
      if (columnOffset <= 0 || this.countCards({ visible: true }) <= this.onScreenCount) {
        return 0;
      }
      return _.min([columnOffset, this.offScreenCount()]);
    },

    // number of columns not appearing on screen (but not removed).
    offScreenCount: function () {
      return _.filter(this.cards, function (card) {
        return !card.removeState;
      }).length - this.onScreenCount;
    },

    ////////////////////////
    // HEIGHT MANIPULATION
    ////////////////////////

    // fixes header row height to tallest inner element
    setHeaderRowHeight: function () {
      var height = _.max($('.compcard-block-header', this.ui.headerRow).map(function () {
        return $(this).outerHeight();
      }).get());
      this.ui.headerRow.css({ height: height, minHeight: height });
    },

    setBlockHeights: function () {
      // set data: interior for key column blocks
      this.setKeyData();

      // set data: interior on each block
      _.invoke(this.cards, 'setBlockData');

      // set each block in row to height of tallest block
      _.each(this.rows, function (row) {
        var max = _.max(_.invoke(row, 'data', 'interior'));
        _.invoke(row, 'css', 'height', max);
      });

      // set height of card
      this.el.height(this.ui.cards.outerHeight(true));
    },

    // adds interior height info
    setKeyData: function () {
      this.ui.keyItem.each(_.bind(function (i, el) {
        var $el = $(el);
        $el.data('interior', this.getBlockHeight($el));
      }, this));
    },

    // redundant with method in compcard.js
    getBlockHeight: function (el) {
      var heights = el.children().map(function () {
        var $this = $(this);
        if ($this.hasClass('js-nocomp')) {
          return 0;
        }
        return $this.outerHeight(true);
      }).get();

      heights.push(el.innerHeight() - el.height());

      return _.reduce(heights, function (sum, h) {
        return sum + h;
      }, 0);
    },

    //////////////////////
    // ANIMATION
    //////////////////////

    beginAnimating: function (ms) {
      if (this.animationTimeout) {
        // already animating?
        window.clearTimeout(this.animationTimeout); // clear any running timeout
      } else {
        _.invoke(this.cards, 'setAnimating', true); // else set animation classes
        this.ui.scrollbar.addClass('is-animating');
      }

      this.animationTimeout = _.delay(_.bind(function () {
        // on timeout completion:
        _.invoke(this.cards, 'setAnimating', false); // remove animation classes
        this.ui.scrollbar.removeClass('is-animating');
        this.animationTimeout = null; // clear timeout attribute for use above as a flag
      }, this), ms || this.options.timeout);
    },

    //////////////////////////////
    // CARD SELECTORS AND STATS
    //////////////////////////////

    // select options
    //     visible: true || false
    //     locked: true || false
    // sortBy
    //     card property, or custom function
    findCards: function (select, sortBy) {
      var cards = _.filter(this.cards, function (card) {
        // test against visible and locked selectors, if included
        return (_.isUndefined(select.visible) || !select.visible === !!card.removeState) && (_.isUndefined(select.locked) || !select.locked === !card.lockState);
      });
      return sortBy ? _.sortBy(cards, sortBy) : cards;
    },

    // ** card counter **
    // same selector options as findCards
    countCards: function (select) {
      return this.findCards(select).length;
    },

    // total width of locked card area of screen
    lockedCardsWidth: function () {
      return _.reduce(this.findCards({ locked: true }), function (sum, card) {
        return sum + card.width;
      }, 0);
    },

    // get the first unlocked, unremoved card object in view
    leftmostUnlockedCard: function (cardAsLocked) {
      var position = this.lockedCardsWidth() - this.offset,
          select = { locked: false, visible: true },
          cards = _.reject(this.findCards(select), function (card) {
        return cardAsLocked === card; // pretend this card is locked, and omit
      });

      // add width of pretend locked card
      if (cardAsLocked) {
        position += cardAsLocked.width;
      }

      return _.find(cards, function (card) {
        return card.position >= position - 1; // with rounding factor
      });
    },

    /////////////
    // CONTROLS
    /////////////

    maintainStickyBar: function (opts) {
      var $sticker, isDesktop, contentTop, hideTop;

      // recalculate dimensions on resize
      if (opts && opts.resize) {
        $sticker = $('.sticker', this.ui.sticky);
        isDesktop = _.contains(['desktop', 'medium', 'large'], Responsive.getSize());
        contentTop = isDesktop ? 0 : $('.main-header').height();
        hideTop = isDesktop ? 0 : $('.js-no-stick-mobile', $sticker).outerHeight();

        this.stickyBarStickPoint = this.ui.sticky.offset().top - contentTop + hideTop;
        this.stickyBarOffset = contentTop - hideTop;

        // set sticky bar to match height of contents so content will be pushed below
        this.ui.sticky.height($sticker.outerHeight());
      }

      // update stuckedness
      this.maintainStickyBarStuck();
    },

    maintainStickyBarStuck: function () {
      var isStuck = $(window).scrollTop() >= this.stickyBarStickPoint;
      this.ui.sticky.toggleClass('is-stuck', isStuck).css('top', isStuck ? this.stickyBarOffset : '');
    },

    maintainToggleControls: function () {
      // set the 'Add all' button to active if any card is not active

      this.ui.addAll.toggleClass('is-active', this.countCards({ visible: false }) > 0);
    },

    maintainScrollThumbOffset: function () {
      var style = this.ui.scrollThumb.attr('style'),
          percentLeft = -100 * (parseFloat(this.offset) / this.cardWidth) / this.countCards({ visible: true, locked: false }),
          maxPercentLeft = 100 - (style ? (style.match(/width\: *(\d+\.?\d*)%/) || [])[1] : 0);

      // constrain so doesn't run off the left or right sides:
      percentLeft = _.min([_.max([0, percentLeft]), maxPercentLeft]);

      this.ui.scrollThumb.css('left', percentLeft + '%');
    },

    compTableWidth: function () {
      Math.floor(this.ui.table.outerWidth());
    },

    // update scrollbar visibility and arrows for current state
    // as well as the size of the scroll thumb (but not its location)
    maintainScrollbar: function (doResize) {
      var visibleUnlockedColCount = _.max([this.onScreenCount - this.countCards({ locked: true }), 0]),
          scrollbarIsActive = visibleUnlockedColCount > 0 && this.offScreenCount() > 0,
          hiddenLeftColCount = -Math.round(this.offset / this.cardWidth),
          hiddenRightColCount = _.max([this.countCards({ visible: true }) - this.onScreenCount - hiddenLeftColCount, 0]);

      if (doResize) {
        this.ui.scrollbar.toggleClass('is-active', scrollbarIsActive);
        //this.ui.scrollbar.innerWidth(this.ui.table.width() - this.lockedCardsWidth());

        var outerW = this.ui.scrollLeft.outerWidth() + this.ui.scrollRight.outerWidth();
        this.ui.scrollbar.width(this.ui.table.width() - outerW - this.lockedCardsWidth() + 0.5);
      }
      this.ui.scrollThumb.css('width', 100 * visibleUnlockedColCount / this.countCards({ visible: true, locked: false }) + '%');
      this.ui.scrollLeft.toggleClass('is-active', scrollbarIsActive && hiddenLeftColCount > 0);
      this.ui.scrollRight.toggleClass('is-active', scrollbarIsActive && hiddenRightColCount > 0);
    },

    maintainVisibleCards: function () {
      if (Utils.isIE(8)) {
        _.defer(_.bind(function () {
          _.invoke(this.findCards({ visible: true }), 'maintainIE8');
        }, this));
      }
    }

  }; // END def.prototype

  return def;
}();

$(function () {
  $('.comptable').each(function () {
    $(this).data(new Comptable(this));
  });
});

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Dropdown Block
 */



var DropDownBlock = module.exports = function () {

  var def = function (el) {
    this.$el = $(el);
    this.rel = this.$el.attr('data-relationship');
    init.call(this);
  };

  var init = function () {
    this.$trigger = $('.dropdown-block-trigger', this.$el);
    this.$dropDown = $('.dropdown-block-content[data-relationship="' + this.rel + '"]');
    this.$phone = $('.dropdown-block-phone', this.$dropDown);
    this.$close = this.$dropDown.find('.close-box');
    this.bind();
  };

  def.prototype = {
    bind: function () {
      var self = this;

      this.$trigger.on('click', function (e) {
        if ($(window).width() >= 801) {
          e.preventDefault();
          self.toggleClasses();
        }
      });

      this.$phone.on('click', function (e) {
        if (!self.$dropDown.hasClass('is-shown')) {
          e.preventDefault();
        }
      });

      this.$close.on('click', function (e) {
        e.preventDefault();
        self.toggleClasses(false);
      });
    },

    toggleClasses: function () {
      this.$el.toggleClass('is-active');
      this.$dropDown.toggleClass('is-shown');
    }
  };

  return def;
}();

$(function () {
  $('.dropdown-block-trigger-wrap').each(function () {
    new DropDownBlock(this);
  });
});

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 * Events Page
 */



var Accordion = __webpack_require__(5);

var EventsPage = module.exports = function () {
  var def = function (el) {
    this.$els = {
      'item': el,
      'target': '.event-target'
    };

    init.call(this);

    this.tmpls = {
      'countries': "<% _.each(countries, function(countryList) { print(countryList.item.tmpls.countryName({name: countryList.country})); _.each(countryList.events, function(event){ print(countryList.item.tmpls.event({'name': event.name, 'date': event.date, 'place': event.place, 'summary': event.summary})); });  }); %>",
      'countryName': _.template("<h2 class='header header-sub header-large header-layout-list pull-left spaced-top-double'><%= name %></h2>"),
      'event': _.template("<li class='accordion about-event-accordion'><div class='full cf'><p class='paragraph-small full'><%= date %></p><div class='header-accordion-alt pull-left'><p class='paragraph'><%= name %></p><i class='location-type icon-location icon ie8-is-active icon-inline icon-24'></i><p class='paragraph-medium paragraph-inline'><a href='#/'><%= place %></a></p></div><div class='accordion-control pull-right'><i class='icon ie8-is-active icon-34 icon-arrow-down'></i></div></div><ul class='accordion-child list-unstyled'><li><p class='paragraph-medium spaced-bottom spaced-top'><%= summary %></p></li></ul></li>")
    };

    this.domTarget = "<ul class='list event-target list-unstyled about-event-list slice-item full'></ul>";
  };

  var init = function () {
    this.loadData();
  };

  def.prototype = {

    loadData: function () {
      var self = this;

      $.ajax({
        url: "http://json2jsonp.com/?url=http://www.juniper.net/us/en/sandbox/events.json&callback=_",
        type: 'GET',
        dataType: 'jsonp',
        success: function (data) {

          $(self.$els.item).append(self.domTarget);

          $.each(data.countries, function (i) {
            _.extend(data.countries[i], { 'item': self });
          });

          $(self.$els.target).append(_.template(self.tmpls.countries, data));

          $('.accordion', self.$els.item).each(function () {
            new Accordion(this);
          });
        }
      });
    }
  };
  return def;
}();

$(function () {
  var evl = $('.events-list');
  if (evl.length > 0) {
    new EventsPage(evl);
  }
});

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Feature Detector
 */



module.exports = function () {
    function init() {
        if (!Modernizr.input.placeholder) {
            $(function () {
                loadJavaScript("https://cdnjs.cloudflare.com/ajax/libs/placeholders/4.0.1/placeholders.jquery.min.js");
            });
        }
    }

    function appendToHead(el) {
        document.getElementsByTagName("head")[0].appendChild(el);
    }

    function addStylesheet(url) {
        var el = document.createElement("link");
        el.type = "text/css";
        el.rel = "stylesheet";
        el.href = url;
        appendToHead(el);
    }

    function loadJavaScript(url) {
        var el = document.createElement("script");
        el.type = "text/javascript";
        el.src = url;
        appendToHead(el);
    }

    init();
}();

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


(function () {

  $('select[name="country-select"]').each(
  /** @param {HTMLElement} el */
  function selectForEach(i, el) {
    $(el).attr('onchange', null);
    $(el).attr('onChange', null);
  });
  $('select[name="country-select"]').change(
  /**
   * When the select changes, we reset the value and then navigate
   * @param {Event} e
   */
  function selectOnChange(e) {
    var select = $(e.currentTarget || e.target);
    var selectVal = select.val();
    var selectedOptionInDOM = select.find('option[selected]').index();

    if (selectedOptionInDOM > 0) {
      select.val(selectedOptionInDOM);
    } else {
      select.prop('selectedIndex', 0);
    }

    window.location = selectVal;
  });
})();

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Form Validation
 */



var FormValidation = module.exports = function () {
    var def = function (el) {
        this.$els = {
            'form': el
        };

        this.sel = {
            invalidField: 'is-invalid',
            invalidForm: 'form-is-invalid',
            validatePresence: 'validate-presence',
            validateEmail: 'validate-email',
            validateZip: 'validate-zip',
            fieldMessage: 'field-message',
            formErrMsgNotPresent: 'form-err-msg-notPresent',
            formErrMsgNotEmail: 'form-err-msg-notEmail'
        };

        var notPresentMsgFromDOM = el && el.getAttribute ? el.getAttribute(this.sel.formErrMsgNotPresent) : null;
        var notEmailMsgFromDOM = el && el.getAttribute ? el.getAttribute(this.sel.formErrMsgNotEmail) : null;

        this.messages = {
            notPresent: typeof notPresentMsgFromDOM === 'string' && notPresentMsgFromDOM.length > 0 ? notPresentMsgFromDOM : 'Please fill out this field',
            notEmail: typeof notEmailMsgFromDOM === 'string' && notEmailMsgFromDOM.length > 0 ? notEmailMsgFromDOM : 'Please use a valid email'
        };

        init.call(this);
    };

    var init = function () {
        this.bind();
    };

    def.prototype = {
        bind: function () {
            var self = this;

            $(this.$els.form).on('submit', function (e) {
                if (!self.validate()) {
                    e.preventDefault();
                    //scrolling to the first invalid field
                    var target = $('.is-invalid')[0];
                    $('html, body').animate({
                        scrollTop: $(target).offset().top - $(target).height()
                    }, 1000);
                    // Windows Phone doesn't animate properly,
                    // this makes sure it scrolls to the appropriate position
                    window.setTimeout(function () {
                        window.scrollTo(0, $(target).offset().top - $(target).height());
                    }, 1075);
                }
            });
        },

        validate: function () {
            var self = this,
                $form = $(this.$els.form),
                formInvalid = false;

            // reset validation indicators
            $('.' + this.sel.invalidField, $form).removeClass(this.sel.invalidField);

            $('.' + this.sel.fieldMessage, $form).remove();

            $('.' + this.sel.validatePresence, $form).each(function () {
                if (!self.isPresent($(this))) {
                    self.markInvalid($(this), self.messages.notPresent);
                    formInvalid = true;
                }
            });

            $('.' + this.sel.validateEmail, $form).each(function () {
                if (!self.isEmail($(this))) {
                    self.markInvalid($(this), self.messages.notEmail);
                    formInvalid = true;
                }
            });

            $('.' + this.sel.validateZip, $form).each(function () {
                if ($form.find('select#country option:selected').val() === "US" || $form.find('select#country option:selected').val() === "CA") {
                    if (!self.isPresent($(this))) {
                        self.markInvalid($(this), self.messages.notPresent);
                        formInvalid = true;
                    }
                }
            });

            if (formInvalid) {
                $form.addClass(this.sel.invalidForm);
            }

            return !formInvalid;
        },

        markInvalid: function ($el, message) {
            var $message = $('<span />', {
                class: this.sel.fieldMessage,
                text: message
            });
            $el.append($message);
            $el.addClass(this.sel.invalidField);
        },

        isPresent: function ($el) {
            var val = this.getVal($el);
            return !!val && $.trim(val).length > 0;
        },

        isEmail: function ($el) {
            var emailExpression = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
            return !this.isPresent($el) || emailExpression.test(this.getVal($el));
        },

        getVal: function ($el) {
            return $($el.find('input:not([type="radio"])')).val() || $($el.find('select option:selected')).attr('value') || $($el.find('input[type="radio"]:checked')).val();
        }

    };

    return def;
}();

$(function () {
    $('.validate-form').each(function () {
        new FormValidation(this);
    });
});

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * IE
 */



var Utils = __webpack_require__(0);

module.exports = function () {
  function init() {
    switch (Utils.ieVersion()) {
      case 10:
      case 11:
        $('html').addClass('ie10+');
        break;
      // lte IE9
      case 9:
      case 8:
      case 7:
      case 6:
        addStylesheet("/assets/style/style-ie9.min-blessed1.css");
        addStylesheet("/assets/style/style-ie9.min.css");
        break;
    }
  }

  function appendToHead(el) {
    document.getElementsByTagName("head")[0].appendChild(el);
  }

  function addStylesheet(url) {
    var el = document.createElement("link");
    el.type = "text/css";
    el.rel = "stylesheet";
    el.href = url;
    appendToHead(el);
  }

  function loadJavaScript(url) {
    var el = document.createElement("script");
    el.type = "text/javascript";
    el.src = url;
    appendToHead(el);
  }

  init();
}();

/***/ }),
/* 31 */
/***/ (function(module, exports) {

/**
 * Salesforce Liveagent
 *
 * https://c.la1-c1-dfw.salesforceliveagent.com/content/g/js/37.0/deployment.js
 */

module.exports = function () {
  function Ba(a) {
    switch (a) {case "'":
        return "\x26#39;";case "\x26":
        return "\x26amp;";case "\x3c":
        return "\x26lt;";case "\x3e":
        return "\x26gt;";case '"':
        return "\x26quot;";case "\u00a9":
        return "\x26copy;";case "\u2028":
        return "\x3cbr\x3e";case "\u2029":
        return "\x3cp\x3e";default:
        return a;}
  }function l() {}function t() {}function la(a) {
    l.prototype.init.call(this, a, l.TYPE.STANDARD);
  }function ma(a) {
    k[a] || (k[a] = new la(a));return k[a];
  }function S(a, b) {
    l.prototype.init.call(this, b + "_" + a, l.TYPE.AGENT);
  }function L(a, b) {
    var c = b + "_" + a;if (!k[c]) {
      var e = new S(a, b),
          d;k[a] && (d = k[a], d.endpoint && e.setEndpoint(d.endpoint), d.prechat && e.setPrechat(d.prechat), d.language && e.setLanguage(d.language), e.setOnlineState(d.onlineState));k[c] = e;
    }return k[c];
  }function T(a, b) {
    t.prototype.init.call(this, a, b);
  }function U(a, b) {
    t.prototype.init.call(this, a, b);
  }function n(a) {
    l.prototype.init.call(this, a, l.TYPE.INVITE);this.active = !1;this.filterLogic = null;this.rules = {};this.autoRejectTimeout = this.inviteTimeout = this.inviteDelay = this.ruleTree = null;
  }function u(a) {
    k[a] || (k[a] = new n(a));return k[a];
  }function A(a, b, c, e, d, g, C, y) {
    t.prototype.init.call(this, a, b);this.hasInviteAfterAccept = g;this.hasInviteAfterReject = C;this.rejectTime = y;null !== f.getCssAnimation(b) || "Custom" == c ? this.renderer = new n.RENDERER[c].renderClass(a, b, n.START_POSITION[e], n.END_POSITION[d]) : this.renderer = new n.RENDERER.Appear.renderClass(a, b, n.START_POSITION[e], n.END_POSITION[d]);
  }function D(a) {
    return u(a) ? u(a).getTracker() : null;
  }function r() {}function J(a, b, c, e) {
    r.prototype.init.call(this, a, b, c, e);
  }function K(a, b, c, e) {
    r.prototype.init.call(this, a, b, null, e);
  }function M(a, b, c, e) {
    r.prototype.init.call(this, a, b, null, e);
  }function E(a, b, c, e) {
    E.prototype.init.call(this, a, b, null, null);
  }function h() {}function N(a, b, c, e, d) {
    h.prototype.init.call(this, a, b, c, e, d);
  }function O(a, b, c, e, d) {
    h.prototype.init.call(this, a, b, c, e, d);
  }function V(a, b, c, e, d) {
    h.prototype.init.call(this, a, b, c, e, d);
  }function F(a) {
    na++;if (1E3 < na) throw Error("Error processing rule filter logic, preventing recursion");for (var b = 0, c = 0, e = 0; e < a.length; e++) "(" == a.charAt(e) ? c++ : ")" == a.charAt(e) && c--, "," == a.charAt(e) && 1 == c && (b = e);if (0 == a.indexOf("AND(")) return c = F(a.substring(4, b)), a = F(a.substring(b + 1, a.length - 1)), new W(c, a);if (0 == a.indexOf("OR(")) return c = F(a.substring(3, b)), a = F(a.substring(b + 1, a.length - 1)), new X(c, a);if (0 == a.indexOf("NOT(")) return c = F(a.substring(4, a.length - 1)), new Y(c);if (!isNaN(parseInt(a, 10))) return new Z(parseInt(a, 10));throw Error("Encountered unexpected character in filter logic");
  }function z() {}function Z(a) {
    this.ruleId = a;z.prototype.init.call(this, null, null);
  }function W(a, b) {
    z.prototype.init.call(this, a, b);
  }function X(a, b) {
    z.prototype.init.call(this, a, b);
  }function Y(a) {
    z.prototype.init.call(this, a, null);
  }function Ca(a, b, c, e) {
    var d = document.createElement("div");d.id = "liveagent_invite_button_" + a;var g = document.createElement("img");g.style.cursor = "pointer";g.style.position = "absolute";g.style.right = "-20px";g.style.top = "-20px";g.src = f.addPrefixToURL(m.contentServerUrl, m.urlPrefix, !0) + "/images/x.png";f.addEventListener(g, "click", function () {
      p.rejectChat(a);
    });d.appendChild(g);g = document.createElement("img");g.style.cursor = "pointer";g.style.clear = "right";g.src = b;g.width = c;g.height = e;f.addEventListener(g, "click", function () {
      p.startChat(a);
    });d.appendChild(g);document.body.appendChild(d);return d;
  }function oa(a, b, c) {
    "undefined" == typeof c && (c = !0);this.getLabel = function () {
      return a;
    };this.getValue = function () {
      return b;
    };this.getDisplayToAgent = function () {
      return c;
    };var e = new aa();this.getMapper = function () {
      return e;
    };this.doKnowledgeSearch = !1;this.getDoKnowledgeSearch = function () {
      return this.doKnowledgeSearch;
    };this.setDoKnowledgeSearch = function () {
      this.doKnowledgeSearch = !0;
    };
  }function aa() {
    var a = [],
        b = [];this.getEntityMaps = function () {
      return a;
    };this.getTranscriptFields = function () {
      return b;
    };
  }function pa(a, b, c, e, d) {
    this.getEntityName = function () {
      return a;
    };this.getFieldName = function () {
      return b;
    };this.getFastFill = function () {
      return c;
    };this.getAutoQuery = function () {
      return e;
    };this.getExactMatch = function () {
      return d;
    };
  }function qa(a) {
    this.saveToTranscript = "";this.showOnCreate = !1;this.linkToEntityField = this.linkToEntityName = "";var b = new ra();this.getEntityName = function () {
      return a;
    };this.getSaveTranscript = function () {
      return this.saveTranscript;
    };this.getShowOnCreate = function () {
      return this.showOnCreate;
    };this.getLinkToEntityName = function () {
      return this.linkToEntityName;
    };this.getLinkToEntityField = function () {
      return this.linkToEntityField;
    };this.getEntityMapper = function () {
      return b;
    };this.setSaveTranscript = function (a) {
      this.saveTranscript = a;
    };this.setShowOnCreate = function (a) {
      this.showOnCreate = a;
    };this.setLinkToEntityName = function (a) {
      this.linkToEntityName = a;
    };this.setLinkToEntityField = function (a) {
      this.linkToEntityField = a;
    };
  }function ra() {
    var a = [];this.getEntityFieldsMaps = function () {
      return a;
    };
  }function sa(a, b, c, e, d) {
    this.getFieldName = function () {
      return a;
    };this.getLabel = function () {
      return b;
    };this.getDoFind = function () {
      return c;
    };this.getIsExactMatch = function () {
      return e;
    };this.getDoCreate = function () {
      return d;
    };
  }function P() {
    if (!ta) {
      ta = !0;f.log("DOM is ready. Setting up environment.");null == v.getOref() && v.setOref(document.referrer);null == v.getVisitCount() && v.setVisitCount(1);if (window._laq) for (var a = 0; a < window._laq.length; a++) window._laq[a].call(window);q.connection.setCallback("liveagent._.handlePing");ua();
    }
  }function ua() {
    var a = [],
        b = {};ba && (b.chatted = 1);x ? (b.sid = x, f.log("Reusing existing session.")) : (a.push(new q.Noun("VisitorId")), f.log("Requesting new session."));a.push(new q.Noun("Settings", { buttonIds: "[" + va() + "]", updateBreadcrumb: 1, urlPrefix: m.urlPrefix }));q.connection.send(a, b);
  }function wa(a, b) {
    b.endpointUrl && a.setEndpoint(b.endpointUrl);b.prechatUrl && a.setPrechat(b.prechatUrl);b.language && a.setLanguage(b.language);a.setOnlineState(b.isAvailable);
  }function Da() {
    if (q.connection.isRunning()) if (null == x || ca) ca = !1, ua();else {
      f.log("Pinging server to keep presence");Q = null;var a = {};a.sid = x;ba && (a.chatted = 1);a.r = new Date().getMilliseconds();var b = [new q.Noun("Availability", { ids: "[" + va() + "]" })];q.connection.send(b, a);
    }
  }function da() {
    f.log("Disconnecting from Live Agent");q.connection.setIsRunning(!1);
    for (var a in k) k.hasOwnProperty(a) && k[a].setOnlineState(!1);
  }function va() {
    var a = [],
        b = {},
        c;for (c in k) k.hasOwnProperty(c) && k[c].getType() == l.TYPE.STANDARD && (b[c] = k[c]);for (var e in b) a.push(e);var b = {},
        d;for (d in k) k.hasOwnProperty(d) && k[d].getType() == l.TYPE.AGENT && (b[d] = k[d]);for (e in b) a.push(e);d = {};for (var g in k) k.hasOwnProperty(g) && k[g].getType() == l.TYPE.INVITE && (d[g] = k[g]);for (e in d) a.push(e);e = "";for (g = 0; g < a.length; g++) e += a[g], g < a.length - 1 && (e += ",");return e;
  }function xa(a, b, c, e) {
    document.cookie = "liveagent_chatted\x3d1;path\x3d/;";ba = !0;var d;d = "deployment_id\x3d" + m.deploymentId;d = d + "\x26org_id\x3d" + m.orgId;d += "\x26button_id\x3d";d += a;c && (d += "\x26agent_id\x3d", d += c);e && (d += "\x26do_fallback\x3d1");d += "\x26session_id\x3d";d += x;a = c ? k[c + "_" + a].getEndpoint(d) : k[a].getEndpoint(d);c = "height\x3d" + m.chatWindowHeight;c = c + ",width\x3d" + m.chatWindowWidth;c += ",menubar\x3dno";c += ",toolbar\x3dno";c += ",location\x3dno";c += ",personalbar\x3dno";window.open("", b, c);Ea(b, a);
  }function Ea(a, b) {
    function c(a, b, c) {
      var d = document.createElement("input");d.name = b;d.value = c;a.appendChild(d);
    }var e = v.getVisitCount();null == e && (e = "0");var d = document.createElement("form");d.style.display = "none";c(d, "deploymentId", m.deploymentId);c(d, "orgId", m.orgId);c(d, "vc", e);c(d, "sid", x);c(d, "ptid", v.getPermanentId());c(d, "det", f.jsonEncode(ya));c(d, "oref", v.getOref());c(d, "pages", f.jsonEncode(B.getPages()));c(d, "sessionStart", new Date().getTime() - B.getSessionStart());c(d, "ent", f.jsonEncode(za));ea && c(d, "visitorName", ea);d.method = "POST";
    d.action = b;d.target = a;document.body.appendChild(d);d.submit();
  }function fa(a) {
    a ? f.log("Server Warning: " + a) : f.log("Server sent an anoymous warning.");
  }function Aa(a) {
    a ? f.log("Server Error: " + a) : f.log("Server responded with an error.");da();
  }if (!window.liveAgentDeployment) {
    window.liveAgentDeployment = !0;var p = {};window.liveagent && (p = window.liveagent);window.liveagent = p;var f = { getCookie: function (a) {
        var b = document.cookie,
            c = b.indexOf(a + "\x3d");if (-1 == c) return null;c += (a + "\x3d").length;a = b.indexOf(";", c);
        -1 == a && (a = b.length);return b.substring(c, a);
      }, setCookie: function (a, b, c) {
        a = a + "\x3d" + b + ";";c && (c = new Date(), c.setFullYear(c.getFullYear() + 10), a += "expires\x3d" + c.toGMTString() + ";");document.cookie = a + "path\x3d/;";
      }, addEventListener: function (a, b, c) {
        if (a.addEventListener) a.addEventListener(b, c, !1);else if (a.attachEvent) a.attachEvent("on" + b, c, !1);else throw Error("Could not add event listener");
      }, log: function (a) {
        R && window.console && window.console.log && window.console.log("LIVE AGENT: " + a);
      }, logGroupStart: function (a) {
        R && window.console && (window.console.group ? window.console.groupCollapsed("LIVE AGENT: " + a) : f.log(a));
      }, logGroupEnd: function () {
        R && window.console && window.console.group && window.console.groupEnd();
      }, getLanguage: function () {
        return "undefined" != typeof window.navigator.language ? window.navigator.language : "undefined" != typeof window.navigator.userLanguage ? window.navigator.userLanguage : "";
      }, arrayHasItem: function (a, b) {
        if (Array.prototype.indexOf) return -1 < a.indexOf(b);for (var c = 0; c < a.length; c++) if (a[c] == b) return !0;
      }, jsonEncode: function (a, b, c) {
        function e(a) {
          g.lastIndex = 0;return g.test(a) ? '"' + a.replace(g, function (a) {
            var b = f[a];return "string" === typeof b ? b : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
          }) + '"' : '"' + a + '"';
        }function d(a, b) {
          var c,
              g,
              f,
              C,
              y = w,
              k,
              h = b[a];h && "object" === typeof h && "function" === typeof h.toJSON && (h = h.toJSON(a));"function" === typeof m && (h = m.call(b, a, h));switch (typeof h) {case "string":
              return e(h);case "number":
              return isFinite(h) ? String(h) : "null";case "boolean":case "null":
              return String(h);case "object":
              if (!h) return "null";
              w += l;k = [];if ("[object Array]" === Object.prototype.toString.apply(h)) {
                C = h.length;for (c = 0; c < C; c += 1) k[c] = d(c, h) || "null";f = 0 === k.length ? "[]" : w ? "[\n" + w + k.join(",\n" + w) + "\n" + y + "]" : "[" + k.join(",") + "]";w = y;return f;
              }if (m && "object" === typeof m) for (C = m.length, c = 0; c < C; c += 1) "string" === typeof m[c] && (g = m[c], (f = d(g, h)) && k.push(e(g) + (w ? ": " : ":") + f));else for (g in h) Object.prototype.hasOwnProperty.call(Object(h), g) && (f = d(g, h)) && k.push(e(g) + (w ? ": " : ":") + f);f = 0 === k.length ? "{}" : w ? "{\n" + w + k.join(",\n" + w) + "\n" + y + "}" : "{" + k.join(",") + "}";w = y;return f;}
        }if ("undefined" !== typeof window.JSON) return window.JSON.stringify(a, b, c);if (void 0 === a || null === a) return "null";var g = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
            f = { "\b": "\\b", "\t": "\\t", "\n": "\\n", "\f": "\\f", "\r": "\\r", '"': '\\"', "\\": "\\\\" },
            y,
            w = "",
            l = "",
            m = b;if ("number" === typeof c) for (y = 0; y < c; y += 1) l += " ";else "string" === typeof c && (l = c);if (b && "function" !== typeof b && ("object" !== typeof b || "number" !== typeof b.length)) throw Error("Error during JSON.stringify");return d("", { "": a });
      }, jsonDecode: function (a) {
        a = String(a);if ("undefined" !== typeof window.JSON) return window.JSON.parse(a);var b = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;b.lastIndex = 0;b.test(a) && (a = a.replace(b, function (a) {
          return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
        }));if (/^[\],:{}\s]*$/.test(a.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) return eval("(" + a + ")");throw Error("Error during JSON.parse");
      }, getCssAnimation: function (a) {
        var b = ["Webkit", "Moz", "O", "ms", "Khtml"];if (void 0 !== a.style.animationName) return "";for (var c = 0; c < b.length; c++) if (void 0 !== a.style[b[c] + "AnimationName"]) return b[c].toLowerCase();return null;
      }, addPrefixToURL: function (a, b, c) {
        if (!f.isEmpty(a) && !f.isEmpty(b) && 0 !== a.indexOf(b)) {
          c && (b = f.escapeToHtml(b));var e = /(https?:\/\/)(.*)/i;c = a.replace(e, "$1");a = a.replace(e, "$2");b = b.replace(e, "$2");a = c + b + "/" + a;
        }return a;
      }, getDomainFromUrl: function (a) {
        if (f.isEmpty(a)) return "";var b;ga || (ga = document.createElement("a"));b = ga;b.href = a;a = a.match(/:(\d+)/g);b = b.protocol + "//" + b.hostname || window.location.protocol + "//" + window.location.hostname;return a ? b + a[0] : b;
      }, isEmpty: function (a) {
        return null === a || void 0 === a || "" === a;
      }, escapeToHtml: function (a) {
        return null === a || void 0 === a || "" === a ? "" : a = a.replace(/[&<>"'\u00a9\u2028\u2029]/g, Ba);
      }, isValidEntityId: function (a) {
        return a && "string" === typeof a && (18 === a.length || 15 === a.length);
      }, getKeyPrefix: function (a) {
        return this.isValidEntityId(a) ? a.substr(0, 3) : null;
      }, isOrganizationId: function (a) {
        return "00D" === this.getKeyPrefix(a);
      }, isDeploymentId: function (a) {
        return "572" === this.getKeyPrefix(a);
      } },
        ga,
        v = { getVisitCount: function () {
        var a = parseInt(f.getCookie("liveagent_vc"), 10);return isNaN(a) ? null : a;
      }, getOref: function () {
        return f.getCookie("liveagent_oref");
      }, getPermanentId: function () {
        var a = f.getCookie("liveagent_ptid");return null != a ? a : "";
      }, setVisitCount: function (a) {
        f.setCookie("liveagent_vc", a, !0);
      }, setOref: function (a) {
        return f.setCookie("liveagent_oref", a, !0);
      }, setPermanentId: function (a) {
        f.setCookie("liveagent_ptid", a, !0);
      } },
        B = new function () {
      function a() {
        return window.localStorage ? window.localStorage : window.sessionStorage;
      }function b() {
        var a = document.createElement("div");a.style.display = "none";document.body.appendChild(a);a.id = "liveagent_userdata_provider";a.addBehavior("#default#userData");a.load("liveagent");return { getItem: function (b) {
            return a.getAttribute(b);
          }, setItem: function (b, c) {
            a.setAttribute(b, c);a.save("liveagent");
          }, removeItem: function (b) {
            a.removeAttribute(b);a.save("liveagent");
          } };
      }function c() {
        var a = {};return { getItem: function (b) {
            return a[b];
          }, setItem: function (b, c) {
            a[b] = c;
          }, removeItem: function (b) {
            delete a[b];
          } };
      }function e() {
        g.setItem(d.SESSION_ID, x);g.setItem(d.PAGE_COUNT, "0");g.setItem(d.SESSION_START, new Date().getTime().toString());
      }var d = { SESSION_ID: "liveAgentSid", PAGE_COUNT: "liveAgentPc", SESSION_START: "liveAgentStart", PAGE: "liveAgentPage_", PAGE_TIME: "liveAgentPageTime_" };a.isSupported = function () {
        try {
          if (window.localStorage || window.sessionStorage) {
            var a = window.localStorage ? window.localStorage : window.sessionStorage;a.setItem("liveAgentTestKey", "1");a.removeItem("liveAgentTestKey");return !0;
          }return !1;
        } catch (b) {
          return !1;
        }
      };b.isSupported = function () {
        return document.createElement("div").addBehavior;
      };var g;g = a.isSupported() ? a() : b.isSupported() ? b() : c();this.init = function () {
        if (g.getItem(d.SESSION_ID)) {
          if (g.getItem(d.SESSION_ID) != x) {
            g.removeItem(d.SESSION_START);for (var a = g.getItem(d.PAGE_COUNT), b = 25 > a ? 0 : a - 25; b < a; b++) g.removeItem(d.PAGE + b), g.removeItem(d.PAGE_TIME + b);e();
          }
        } else e();a = parseInt(g.getItem(d.PAGE_COUNT), 10);25 <= a && (g.removeItem(d.PAGE + (a - 25)), g.removeItem(d.PAGE_TIME + (a - 25)));g.setItem(d.PAGE_COUNT, (a + 1).toString());g.setItem(d.PAGE + a.toString(), window.location.href);g.setItem(d.PAGE_TIME + a.toString(), new Date().getTime());
      };this.getPageCount = function () {
        return parseInt(g.getItem(d.PAGE_COUNT), 10);
      };this.getSessionStart = function () {
        return g.getItem(d.SESSION_START);
      };this.getPages = function () {
        for (var a = [], b = this.getPageCount(), c = 25 > b ? 0 : b - 25; c < b; c++) a.unshift({ location: g.getItem(d.PAGE + c.toString()), time: (new Date().getTime() - parseInt(g.getItem(d.PAGE_TIME + c.toString()), 10)).toString() });return a;
      };this.getCurrentPage = function () {
        return g.getItem(d.PAGE + (this.getPageCount() - 1).toString());
      };this.clear = function () {
        g.clear();
      };
    }();l.TYPE = { STANDARD: "STANDARD", INVITE: "INVITE", AGENT: "AGENT" };l.EVENT = { BUTTON_AVAILABLE: "BUTTON_AVAILABLE", BUTTON_UNAVAILABLE: "BUTTON_UNAVAILABLE", BUTTON_ACCEPTED: "BUTTON_ACCEPTED",
      BUTTON_REJECTED: "BUTTON_REJECTED" };l.prototype.init = function (a, b) {
      this.buttonId = a;this.type = b;this.onlineState = null;this.trackers = [];this.language = this.prechat = this.endpoint = null;
    };l.prototype.getType = function () {
      return this.type;
    };l.prototype.getOnlineState = function () {
      return this.onlineState;
    };l.prototype.setOnlineState = function (a) {
      this.onlineState = a;for (var b = 0; b < this.trackers.length; b++) this.trackers[b].setState(a);
    };l.prototype.addTracker = function (a) {
      this.trackers.push(a);
    };l.prototype.setPrechat = function (a) {
      this.prechat = a;
    };l.prototype.setEndpoint = function (a) {
      this.endpoint = a;
    };l.prototype.getEndpoint = function (a) {
      function b() {
        var b = m.contentServerUrl,
            c = m.urlPrefix;if (null == b) throw Error("You cannot call liveagent.startChat until the asynchronous call to liveagent.init has completed!");m.contentServerUrl = f.addPrefixToURL(b, c, !0);b = this.endpoint;b = !f.isEmpty(b) && -1 < f.getDomainFromUrl(b).indexOf("force") ? f.addPrefixToURL(b, c, !0) : b;this.endpoint = b;b = (null != this.endpoint ? this.endpoint : m.contentServerUrl + m.chatPage) + "?language\x3d" + (this.language ? this.language : "");f.isEmpty(c) || (b += "\x26proxy\x3d" + c + "\x26proxyKey\x3d" + m.prefixKey + "\x26org_id\x3d" + m.orgId + "\x26deployment_id\x3d" + m.deploymentId);return b += "#" + a;
      }var c = null,
          c = null == this.prechat ? b.call(this) : this.prechat + "?endpoint\x3d" + encodeURIComponent(b.call(this));return m.contentServerUrl + m.prechatHandler + "?endpoint\x3d" + encodeURIComponent(c);
    };l.prototype.setLanguage = function (a) {
      this.language = a;
    };l.prototype.startChat = function (a) {
      return this.dispatchEvent(l.EVENT.BUTTON_ACCEPTED) ? (xa(this.buttonId, a), !0) : !1;
    };l.prototype.rejectChat = function () {
      return this.dispatchEvent(l.EVENT.BUTTON_REJECTED) ? !0 : !1;
    };l.prototype.dispatchEvent = function (a) {
      return ha.hasOwnProperty(this.buttonId) ? !1 === ha[this.buttonId].call(this, a) ? !1 : !0 : !0;
    };t.prototype.init = function (a, b) {
      this.buttonId = a;this.element = b;
    };t.prototype.getId = function () {
      return this.buttonId;
    };t.prototype.setState = function (a) {
      f.log("Setting state for button " + this.buttonId + " to " + (a ? "online" : "offline"));return k[this.buttonId].dispatchEvent(a ? l.EVENT.BUTTON_AVAILABLE : l.EVENT.BUTTON_UNAVAILABLE) ? !0 : !1;
    };la.prototype = new l();S.prototype = new l();S.prototype.startChat = function (a, b) {
      if (this.dispatchEvent(l.EVENT.BUTTON_ACCEPTED)) {
        var c = this.buttonId.split("_");xa(c[1], a, c[0], b);return !0;
      }return !1;
    };T.prototype = new t();T.prototype.setState = function (a) {
      t.prototype.setState.call(this, a) && (this.element.style.display = a ? "" : "none");
    };U.prototype = new t();U.prototype.setState = function (a) {
      t.prototype.setState.call(this, a) && (this.element.style.display = a ? "none" : "");
    };
    var ia = !1,
        G = null,
        ja = {},
        H = {};n.prototype = new l();n.RENDERER = { Slide: { renderClass: J }, Fade: { renderClass: K }, Appear: { renderClass: M }, Custom: { renderClass: E } };n.START_POSITION = { TopLeft: { xPercent: 0, xPosition: -1, xOffset: -1, yPercent: 0, yPosition: -1, yOffset: -1 }, TopLeftTop: { xPercent: 0, xPosition: 0, xOffset: 1, yPercent: 0, yPosition: -1, yOffset: -1 }, Top: { xPercent: .5, xPosition: -.5, xOffset: 0, yPercent: 0, yPosition: -1, yOffset: -1 }, TopRightTop: { xPercent: 1, xPosition: -1, xOffset: -1, yPercent: 0, yPosition: -1, yOffset: -1 }, TopRight: { xPercent: 1,
        xPosition: 0, xOffset: 1, yPercent: 0, yPosition: -1, yOffset: -1 }, TopRightRight: { xPercent: 1, xPosition: 0, xOffset: 1, yPercent: 0, yPosition: 0, yOffset: 1 }, Right: { xPercent: 1, xPosition: 0, xOffset: 1, yPercent: .5, yPosition: -.5, yOffset: 0 }, BottomRightRight: { xPercent: 1, xPosition: 0, xOffset: 1, yPercent: 1, yPosition: -1, yOffset: -1 }, BottomRight: { xPercent: 1, xPosition: 0, xOffset: 1, yPercent: 1, yPosition: 0, yOffset: 1 }, BottomRightBottom: { xPercent: 1, xPosition: -1, xOffset: -1, yPercent: 1, yPosition: 0, yOffset: 1 }, Bottom: { xPercent: .5, xPosition: -.5,
        xOffset: 0, yPercent: 1, yPosition: 0, yOffset: 1 }, BottomLeftBottom: { xPercent: 0, xPosition: 0, xOffset: 1, yPercent: 1, yPosition: 0, yOffset: 1 }, BottomLeft: { xPercent: 0, xPosition: -1, xOffset: -1, yPercent: 1, yPosition: 0, yOffset: 1 }, BottomLeftLeft: { xPercent: 0, xPosition: -1, xOffset: -1, yPercent: 1, yPosition: -1, yOffset: -1 }, Left: { xPercent: 0, xPosition: -1, xOffset: -1, yPercent: .5, yPosition: -.5, yOffset: 0 }, TopLeftLeft: { xPercent: 0, xPosition: -1, xOffset: -1, yPercent: 0, yPosition: 0, yOffset: 1 } };n.END_POSITION = { TopLeft: { xPercent: 0, xOffset: 1,
        yPercent: 0, yOffset: 1 }, Top: { xPercent: .5, xOffset: 0, yPercent: 0, yOffset: 1 }, TopRight: { xPercent: 1, xOffset: -1, yPercent: 0, yOffset: 1 }, Left: { xPercent: 0, xOffset: 1, yPercent: .5, yOffset: 0 }, Center: { xPercent: .5, xOffset: 0, yPercent: .5, yOffset: 0 }, Right: { xPercent: 1, xOffset: -1, yPercent: .5, yOffset: 0 }, BottomLeft: { xPercent: 0, xOffset: 1, yPercent: 1, yOffset: -1 }, Bottom: { xPercent: .5, xOffset: 0, yPercent: 1, yOffset: -1 }, BottomRight: { xPercent: 1, xOffset: -1, yPercent: 1, yOffset: -1 } };n.prototype.setRules = function (a, b) {
      if (a && b) {
        for (var c in a) {
          var e = a[c],
              d = null;switch (e.type) {case h.TYPE.NUMBER_OF_PAGE_VIEWS:
              d = new N(e.order, this.buttonId, B.getPageCount(), e.operator, parseInt(e.value, 10));break;case h.TYPE.URL_MATCH:
              d = new N(e.order, this.buttonId, B.getCurrentPage(), e.operator, e.value);break;case h.TYPE.SECONDS_ON_PAGE:
              d = new O(e.order, this.buttonId, new Date().getTime(), e.operator, 1E3 * parseInt(e.value, 10));break;case h.TYPE.SECONDS_ON_SITE:
              d = new O(e.order, this.buttonId, parseInt(B.getSessionStart(), 10), e.operator, 1E3 * parseInt(e.value, 10));break;case h.TYPE.CUSTOM_VARIABLE:
              d = new V(e.order, this.buttonId, e.name, e.operator, e.value), H.hasOwnProperty(e.name) || (H[e.name] = []), H[e.name].push(this.buttonId);}null != d && this.addRule(d);
        }this.filterLogic = b;this.ruleTree = F(b);
      }
    };n.prototype.setOnlineState = function (a) {
      a || null === this.inviteTimeout || (clearTimeout(this.inviteTimeout), this.inviteTimeout = null);a || null === this.autoRejectTimeout || (clearTimeout(this.autoRejectTimeout), this.autoRejectTimeout = null);l.prototype.setOnlineState.call(this, a);
    };n.prototype.isActive = function () {
      return this.active;
    };
    n.prototype.setActive = function (a) {
      this.active = a;
    };n.prototype.addTracker = function (a) {
      this.trackers = [];l.prototype.addTracker.call(this, a);
    };n.prototype.getTracker = function () {
      if (1 != this.trackers.length) throw Error("InviteButtons should have exactly 1 tracker");return this.trackers[0];
    };n.prototype.startChat = function (a) {
      return this.active && l.prototype.startChat.call(this, a) ? (this.getTracker().accept(), !0) : !1;
    };n.prototype.rejectChat = function () {
      return this.active && l.prototype.rejectChat.call(this) ? (this.getTracker().reject(), !0) : !1;
    };n.prototype.trigger = function () {
      if (f.getCookie("liveagent_invite_rejected_" + this.buttonId)) return !1;var a = !0;null != this.ruleTree && (f.logGroupStart("Invite " + this.buttonId + " Rule Evaluation"), f.log("Filter Logic: " + this.filterLogic), a = this.ruleTree.evaluate(this), f.logGroupEnd());if (!a && null != this.inviteDelay) {
        var b = this;this.inviteTimeout = window.setTimeout(function () {
          b.setOnlineState(!0);
        }, this.inviteDelay);this.inviteDelay = null;
      }return a;
    };n.prototype.addRule = function (a) {
      this.rules[a.getId()] = a;
    };n.prototype.getRule = function (a) {
      return this.rules[a];
    };n.prototype.getInviteDelay = function () {
      return this.inviteDelay;
    };n.prototype.setInviteDelay = function (a) {
      f.log("Setting invite delay to: " + a);this.inviteDelay = a;
    };n.prototype.setAutoRejectTimeout = function (a) {
      this.autoRejectTimeout = a;
    };A.prototype = new t();A.prototype.setState = function (a) {
      a && !ia && u(this.buttonId).trigger() && t.prototype.setState.call(this, !0) ? (ia = !0, G = this.buttonId, this.renderer.render()) : !a && u(this.buttonId).isActive() && t.prototype.setState.call(this, !1) && (ia = !1, this.remove(!0));
    };A.prototype.renderFinish = function () {
      u(this.buttonId).setActive(!0);if (-1 != this.rejectTime) {
        var a = this.buttonId;u(this.buttonId).setAutoRejectTimeout(window.setTimeout(function () {
          u(a).rejectChat();
        }, 1E3 * this.rejectTime));
      }this.renderer.renderFinish();
    };A.prototype.accept = function () {
      this.hasInviteAfterAccept || f.setCookie("liveagent_invite_rejected_" + this.buttonId, !0, !1);this.remove(!1);
    };A.prototype.reject = function () {
      this.hasInviteAfterReject || f.setCookie("liveagent_invite_rejected_" + this.buttonId, !0, !1);this.remove(!0);
    };A.prototype.remove = function (a) {
      u(this.buttonId).setActive(!1);this.renderer.remove(a);
    };A.prototype.removeFinish = function () {
      this.renderer.remove(!1);
    };r.prototype.init = function (a, b, c, e) {
      window.innerWidth ? this.realWidth = window.innerWidth : document.documentElement && document.documentElement.clientWidth ? this.realWidth = document.documentElement.clientWidth : document.body && (this.realWidth = document.body.clientWidth);window.innerHeight ? this.realHeight = window.innerHeight : document.documentElement && document.documentElement.clientHeight ? this.realHeight = document.documentElement.clientHeight : document.body && (this.realHeight = document.body.clientHeight);this.offset = 25;this.buttonId = a;this.animationPrefix = f.getCssAnimation(b);this.element = b;this.element.style.position = null !== this.animationPrefix ? "fixed" : "absolute";this.element.style.left = "-1000px";this.element.style.top = "-1000px";this.element.style.zIndex = "10000";this.element.style.display = "";this.width = this.element.offsetWidth;this.height = this.element.offsetHeight;
      this.startPosition = c;this.endPosition = e;
    };r.prototype.render = function () {
      this.element.style.display = "";
    };r.prototype.renderFinish = function () {};r.prototype.remove = function (a) {
      this.element.style.left = "-1000px";this.element.style.top = "-1000px";
    };r.prototype.addRenderListeners = function () {
      var a = this.buttonId,
          b = "AnimationIteration",
          c = "AnimationEnd";"" == this.animationPrefix ? (b = b.toLowerCase(), c = c.toLowerCase()) : (b = this.animationPrefix + b, c = this.animationPrefix + c);f.addEventListener(this.element, b, function () {
        D(a).renderFinish();
      });
      f.addEventListener(this.element, c, function () {
        D(a).removeFinish();
      });
    };J.prototype = new r();J.prototype.render = function () {
      r.prototype.addRenderListeners.call(this);var a = this.width * this.startPosition.xPosition + this.offset * this.startPosition.xOffset,
          b = this.height * this.startPosition.yPosition + this.offset * this.startPosition.yOffset,
          c = this.width * this.endPosition.xPercent * -1 + this.offset * this.endPosition.xOffset,
          e = this.height * this.endPosition.yPercent * -1 + this.offset * this.endPosition.yOffset,
          d = "";"" !== this.animationPrefix && (d = "-" + this.animationPrefix + "-");var g = document.createElement("style");g.innerHTML = "@" + d + "keyframes slide" + this.buttonId + "{from { margin-left: " + a + "px; margin-top: " + b + "px; left: " + 100 * this.startPosition.xPercent + "%; top: " + 100 * this.startPosition.yPercent + "%; }to { margin-left: " + c + "px; margin-top: " + e + "px; left: " + 100 * this.endPosition.xPercent + "%; top: " + 100 * this.endPosition.yPercent + "%; }}";document.getElementsByTagName("head")[0].appendChild(g);this.element.style[d + "animation-name"] = "slide" + this.buttonId;
      this.element.style[d + "animation-duration"] = "1s";this.element.style[d + "animation-iteration-count"] = "2";this.element.style[d + "animation-direction"] = "alternate";this.element.style[d + "animation-timing-function"] = "ease-in-out";this.element.style.setProperty(d + "animation-name", "slide" + this.buttonId, "");this.element.style.setProperty(d + "animation-duration", "1s", "");this.element.style.setProperty(d + "animation-iteration-count", "2", "");this.element.style.setProperty(d + "animation-direction", "alternate", "");
      this.element.style.setProperty(d + "animation-timing-function", "ease-in-out", "");r.prototype.render.call(this);
    };J.prototype.renderFinish = function () {
      var a = "";"" !== this.animationPrefix && (a = "-" + this.animationPrefix + "-");this.element.style[a + "animation-play-state"] = "paused";this.element.style.setProperty(a + "animation-play-state", "paused", "");
    };J.prototype.remove = function (a) {
      var b = "";"" !== this.animationPrefix && (b = "-" + this.animationPrefix + "-");a ? (this.element.style[b + "animation-play-state"] = "running", this.element.style.setProperty(b + "animation-play-state", "running", "")) : (this.element.style[b + "animation-name"] = "", this.element.style.setProperty(b + "animation-name", "", ""), r.prototype.remove.call(this, a));
    };K.prototype = new r();K.prototype.render = function () {
      r.prototype.addRenderListeners.call(this);var a = "";"" !== this.animationPrefix && (a = "-" + this.animationPrefix + "-");var b = document.createElement("style");b.innerHTML = "@" + a + "keyframes fade" + this.buttonId + "{from { opacity: 0; }to { opacity: 1; }}";document.getElementsByTagName("head")[0].appendChild(b);
      this.element.style[a + "animation-name"] = "fade" + this.buttonId;this.element.style[a + "animation-duration"] = "1s";this.element.style[a + "animation-iteration-count"] = "2";this.element.style[a + "animation-direction"] = "alternate";this.element.style[a + "animation-timing-function"] = "ease-in-out";this.element.style.setProperty(a + "animation-name", "fade" + this.buttonId, "");this.element.style.setProperty(a + "animation-duration", "1s", "");this.element.style.setProperty(a + "animation-iteration-count", "2", "");this.element.style.setProperty(a + "animation-direction", "alternate", "");this.element.style.setProperty(a + "animation-timing-function", "ease-in-out", "");this.element.style.marginLeft = this.width * this.endPosition.xPercent * -1 + this.offset * this.endPosition.xOffset + "px";this.element.style.left = 100 * this.endPosition.xPercent + "%";this.element.style.marginTop = this.height * this.endPosition.yPercent * -1 + this.offset * this.endPosition.yOffset + "px";this.element.style.top = 100 * this.endPosition.yPercent + "%";r.prototype.render.call(this);
    };K.prototype.renderFinish = function () {
      var a = "";"" !== this.animationPrefix && (a = "-" + this.animationPrefix + "-");this.element.style[a + "animation-play-state"] = "paused";this.element.style.setProperty(a + "animation-play-state", "paused", "");
    };K.prototype.remove = function (a) {
      var b = "";"" !== this.animationPrefix && (b = "-" + this.animationPrefix + "-");a ? (this.element.style[b + "animation-play-state"] = "running", this.element.style.setProperty(b + "animation-play-state", "running", ""), this.element.style.opacity = 0) : (this.element.style[b + "animation-name"] = "", this.element.style.setProperty(b + "animation-name", "", ""), r.prototype.remove.call(this, a));
    };M.prototype = new r();M.prototype.render = function () {
      this.element.style.marginLeft = this.width * this.endPosition.xPercent * -1 + this.offset * this.endPosition.xOffset + "px";this.element.style.left = 100 * this.endPosition.xPercent + "%";this.element.style.marginTop = this.height * this.endPosition.yPercent * -1 + this.offset * this.endPosition.yOffset + "px";this.element.style.top = 100 * this.endPosition.yPercent + "%";r.prototype.render.call(this);
      D(this.buttonId).renderFinish();
    };M.prototype.remove = function (a) {
      a ? D(this.buttonId).removeFinish() : r.prototype.remove.call(this, a);
    };E.prototype = new r();E.prototype.render = function () {
      D(this.buttonId).renderFinish();
    };E.prototype.renderFinish = function () {};E.prototype.remove = function (a) {
      a && D(this.buttonId).removeFinish();
    };h.TYPE = { NUMBER_OF_PAGE_VIEWS: "NUMBER_OF_PAGE_VIEWS", URL_MATCH: "URL_MATCH", SECONDS_ON_PAGE: "SECONDS_ON_PAGE", SECONDS_ON_SITE: "SECONDS_ON_SITE", CUSTOM_VARIABLE: "CUSTOM_VARIABLE" };h.OPERATOR = { EQUALS: "EQUALS", NOT_EQUAL: "NOT_EQUAL", START_WITH: "START_WITH", CONTAINS: "CONTAINS", NOT_CONTAIN: "NOT_CONTAIN", LESS_THAN: "LESS_THAN", GREATER_THAN: "GREATER_THAN", LESS_OR_EQUAL: "LESS_OR_EQUAL", GREATER_OR_EQUAL: "GREATER_OR_EQUAL" };h.prototype.init = function (a, b, c, e, d) {
      this.ruleId = a;this.buttonId = b;this.compareFrom = c;this.operator = e;this.compareTo = d;
    };h.prototype.getId = function () {
      return this.ruleId;
    };h.prototype.evaluate = function (a, b) {
      switch (this.operator) {case h.OPERATOR.EQUALS:
          return f.log("Evaluate: " + a + " \x3d\x3d " + b), a == b;case h.OPERATOR.NOT_EQUAL:
          return f.log("Evaluate: " + a + " !\x3d " + b), a != b;case h.OPERATOR.START_WITH:
          return f.log("Evaluate: " + a + " indexOf " + b + " \x3d\x3d 0"), 0 == a.indexOf(b);case h.OPERATOR.CONTAINS:
          return f.log("Evaluate: " + a + " indexOf " + b + " !\x3d -1"), -1 != a.indexOf(b);case h.OPERATOR.NOT_CONTAIN:
          return f.log("Evaluate: " + a + " indexOf " + b + " \x3d\x3d -1"), -1 == a.indexOf(b);case h.OPERATOR.LESS_THAN:
          return f.log("Evaluate: " + parseFloat(a) + " \x3c " + parseFloat(b)), parseFloat(a) < parseFloat(b);
        case h.OPERATOR.GREATER_THAN:
          return f.log("Evaluate: " + parseFloat(a) + " \x3e " + parseFloat(b)), parseFloat(a) > parseFloat(b);case h.OPERATOR.LESS_OR_EQUAL:
          return f.log("Evaluate: " + parseFloat(a) + " \x3c\x3d " + parseFloat(b)), parseFloat(a) <= parseFloat(b);case h.OPERATOR.GREATER_OR_EQUAL:
          return f.log("Evaluate: " + parseFloat(a) + " \x3e\x3d " + parseFloat(b)), parseFloat(a) >= parseFloat(b);}
    };N.prototype = new h();N.prototype.evaluate = function () {
      f.log("Evaluating StandardInviteRule");return h.prototype.evaluate.call(this, this.compareFrom, this.compareTo);
    };O.prototype = new h();O.prototype.evaluate = function () {
      f.log("Evaluating TimerInviteRule");var a = new Date().getTime() - this.compareFrom,
          b = h.prototype.evaluate.call(this, a, this.compareTo);!b && a <= this.compareTo && (a = this.compareTo - a, (null == u(this.buttonId).getInviteDelay() || a < u(this.buttonId).getInviteDelay()) && u(this.buttonId).setInviteDelay(a));return b;
    };V.prototype = new h();V.prototype.evaluate = function () {
      if (ja.hasOwnProperty(this.compareFrom)) return f.log("Evaluating CustomInviteRule"), h.prototype.evaluate.call(this, ja[this.compareFrom].toString(), this.compareTo);f.log("CustomInviteRule evaluation failed due to missing custom variable");return !1;
    };var na = 0;z.prototype.init = function (a, b) {
      this.left = a;this.right = b;
    };z.prototype.evaluate = function (a) {
      return !1;
    };Z.prototype = new z();Z.prototype.evaluate = function (a) {
      f.log("Evaluating Atom Node: " + this.ruleId);return a.getRule(this.ruleId).evaluate();
    };W.prototype = new z();W.prototype.evaluate = function (a) {
      f.logGroupStart("Evaluating And Node");a = this.left.evaluate(a) && this.right.evaluate(a);f.logGroupEnd();return a;
    };X.prototype = new z();X.prototype.evaluate = function (a) {
      f.logGroupStart("Evaluating Or Node");a = this.left.evaluate(a) || this.right.evaluate(a);f.logGroupEnd();return a;
    };Y.prototype = new z();Y.prototype.evaluate = function (a) {
      f.logGroupStart("Evaluating Not Node");a = !this.left.evaluate(a);f.logGroupEnd();return a;
    };oa.prototype.toJSON = function () {
      return { label: this.getLabel(), value: this.getValue(), displayToAgent: this.getDisplayToAgent(), entityMaps: this.getMapper().getEntityMaps(),
        transcriptFields: this.getMapper().getTranscriptFields(), doKnowledgeSearch: this.getDoKnowledgeSearch() };
    };aa.prototype.map = function (a, b, c, e, d) {
      "undefined" == typeof c && (c = !0);"undefined" == typeof e && (e = !0);"undefined" == typeof d && (d = !0);this.getEntityMaps().push(new pa(a, b, c, e, d));
    };aa.prototype.saveToTranscript = function (a) {
      this.getTranscriptFields().push(a);
    };pa.prototype.toJSON = function () {
      return { entityName: this.getEntityName(), fieldName: this.getFieldName(), fastFill: this.getFastFill(), autoQuery: this.getAutoQuery(),
        exactMatch: this.getExactMatch() };
    };var I = {};p._ = I;I.handlePing = function (a) {
      q.connection.handlePing(a);
    };I.error = function (a) {
      a ? f.log("Server Error: " + a) : f.log("Server responded with an error.");da();
    };I.warning = function (a) {
      a ? f.log("Server Warning: " + a) : f.log("Server sent an anoymous warning.");
    };I.setNewPtid = function (a) {
      v.setPermanentId(a);
    };I.clearStorage = function () {
      B.clear();
    };p.init = function (a, b, c) {
      if ("string" != typeof a) throw Error("The url to init must be strings");if (!f.isOrganizationId(c)) throw Error("Invalid OrganizationId Parameter Value: " + c);if (!f.isDeploymentId(b)) throw Error("Invalid DeploymentId Parameter Value: " + b);m.url = a;m.deploymentId = b;m.orgId = c;f.log("System Initialized. Waiting for the DOM to be ready");"complete" === document.readyState ? setTimeout(P, 1) : document.addEventListener ? (document.addEventListener("DOMContentLoaded", P, !1), window.addEventListener("load", P, !1)) : window.attachEvent ? window.attachEvent("onload", P) : f.log("No available event model. Exiting.");
    };p.getSid = function () {
      return x;
    };p.enableLogging = function () {
      R = !0;
    };
    p.setLocation = function (a) {};p.setChatWindowWidth = function (a) {
      m.chatWindowWidth = a;
    };p.setChatWindowHeight = function (a) {
      m.chatWindowHeight = a;
    };p.disconnect = function () {
      da();
    };p.startChat = function (a, b, c) {
      (b ? L(a, b) : k[a]).startChat("liveagent" + Math.round(1E5 * Math.random()) + new Date().getTime(), c);
    };p.startChatWithWindow = function (a, b, c, e) {
      (c ? L(a, c) : k[a]).startChat(b, e);
    };p.rejectChat = function (a) {
      k[a].rejectChat();
    };p.showWhenOnline = function (a, b, c) {
      if (q.connection.isRunning()) throw Error("You cannot add a button after page initialization.");
      a = c ? L(a, c) : ma(a);a.addTracker(new T(a.buttonId, b));
    };p.showWhenOffline = function (a, b, c) {
      if (q.connection.isRunning()) throw Error("You cannot add a button after page initialization.");a = c ? L(a, c) : ma(a);a.addTracker(new U(a.buttonId, b));
    };p.addCustomDetail = function (a, b, c) {
      if (q.connection.isRunning()) throw Error("You cannot add a detail after page initialization.");if ("undefined" == typeof a || "undefined" == typeof b || null === a || null === b) throw Error("CustomDetail contains null value");var e = new oa(a, b, c);ya.push(e);
      var d = { map: function (a, b, c, f, h) {
          if ("undefined" == typeof a || null === a || "undefined" == typeof b || null === b || null === c || null === f || null === h) throw Error("CustomDetail.map contains null value");e.getMapper().map(a, b, c, f, h);return d;
        }, saveToTranscript: function (a) {
          if ("undefined" == typeof a || null === a) throw Error("CustomDetail.saveToTranscript contains null value");e.getMapper().saveToTranscript(a);return d;
        }, doKnowledgeSearch: function () {
          e.setDoKnowledgeSearch();return d;
        } };return d;
    };p.setName = function (a) {
      if (q.connection.isRunning()) throw Error("You cannot set the name after page initialization.");
      ea = a;
    };p.addButtonEventHandler = function (a, b) {
      "function" == typeof b && (ha[a] = b);
    };p.BUTTON_EVENT = l.EVENT;p.setCustomVariable = function (a, b) {
      ja[a] = b;if (H.hasOwnProperty(a)) for (var c = 0; c < H[a].length; c++) {
        var e = u(H[a][c]);e.getOnlineState() && e.setOnlineState(!0);
      }
    };p.findOrCreate = function (a) {
      if (q.connection.isRunning()) throw Error("You cannot find or create after page initialization.");var b = new qa(a);za.push(b);var c = { map: function (a, d, g, f, h) {
          b.getEntityMapper().map(a, d, g, f, h);return c;
        }, saveToTranscript: function (a) {
          b.setSaveTranscript(a);
          return c;
        }, showOnCreate: function () {
          b.setShowOnCreate(!0);return c;
        }, linkToEntity: function (a, d) {
          if (ka.hasOwnProperty(a) && ka[a] == b.getEntityName()) return fa("Warning: Recursive links detected, skip link " + b.getEntityName() + " to " + a), c;b.setLinkToEntityName(a);b.setLinkToEntityField(d);ka[b.getEntityName()] = a;return c;
        } };return c;
    };p.addURLPrefix = function (a) {
      if (q.connection.isRunning()) throw Error("You cannot set a URL Prefix after page initialization.");if ("string" != typeof a) throw Error("The parameter to addURLPrefix must be a string");
      m.url = f.addPrefixToURL(m.url, a, !0);m.urlPrefix = a;
    };var q = { VisitorMessage: { ERROR: "Error", WARNING: "Warning" }, SystemMessage: { ASYNC_RESULT: "AsyncResult", SWITCH_SERVER: "SwitchServer" } };(function () {
      var a = null,
          b = !1,
          c = null,
          e = null,
          d = {};(function () {
        d.send = function (b, f) {
          if (null !== c) d.onError.call(window, "Did not handle response before sending another message");else {
            "undefined" == typeof f && (f = {});var h = "Visitor",
                k = "",
                l = !1;1 < b.length ? (h = "System", k = "MultiNoun", f.nouns = "", l = !0) : k = b[0].getName();h = m.url + "/rest/" + h + "/" + k + ".jsonp?";for (k = 0; k < b.length; k++) {
              l && (f.nouns += b[k].getName() + ",");f[b[k].getName() + ".prefix"] = "Visitor";for (var n in b[k].getData()) b[k].getData().hasOwnProperty(n) && (f[b[k].getName() + "." + n] = b[k].getData()[n]);
            }l && (f.nouns = f.nouns.substr(0, f.nouns.length - 1));for (var p in f) f.hasOwnProperty(p) && (h += p + "\x3d" + f[p] + "\x26");h += "callback\x3d" + a;h += "\x26deployment_id\x3d" + m.deploymentId;h += "\x26org_id\x3d" + m.orgId;h += "\x26version\x3d36";l = document.createElement("script");l.type = "text/javascript";l.src = h;c = document.body.appendChild(l);e = window.setTimeout(function () {
              d.onError.call(window, "Server failed to respond.");
            }, m.pingTimeout);
          }
        };d.handlePing = function (a) {
          e && (clearTimeout(e), e = null);b = !0;a = a.messages;for (var f = 0; f < a.length; f++) d.messageHandler.call(window, a[f].type, a[f].message);d.onSuccess.call(window);null !== c && (document.body.removeChild(c), c = null);
        };d.messageHandler = function (a, b) {};d.onSuccess = function () {};d.onError = function (a) {};d.isRunning = function () {
          return b;
        };d.setIsRunning = function (a) {
          b = a;
        };d.setCallback = function (b) {
          a = b;
        };
      })();q.connection = d;q.Noun = function (a, b) {
        this.getName = function () {
          return a;
        };this.getData = function () {
          return b;
        };
      };
    })();qa.prototype.toJSON = function () {
      return { entityName: this.getEntityName(), saveToTranscript: this.getSaveTranscript(), showOnCreate: this.getShowOnCreate(), linkToEntityName: this.getLinkToEntityName(), linkToEntityField: this.getLinkToEntityField(), entityFieldsMaps: this.getEntityMapper().getEntityFieldsMaps() };
    };ra.prototype.map = function (a, b, c, e, d) {
      "undefined" == typeof c && (c = !0);"undefined" == typeof e && (e = !0);"undefined" == typeof d && (d = !0);this.getEntityFieldsMaps().push(new sa(a, b, c, e, d));
    };sa.prototype.toJSON = function () {
      return { fieldName: this.getFieldName(), label: this.getLabel(), doFind: this.getDoFind(), isExactMatch: this.getIsExactMatch(), doCreate: this.getDoCreate() };
    };var x = f.getCookie("liveagent_sid"),
        ba = f.getCookie("liveagent_chatted"),
        ta = !1,
        R = !1,
        k = {},
        ya = [],
        za = [],
        ea = null,
        ha = {},
        Q = null,
        ka = {},
        ca = !1,
        m = { url: null, deploymentId: null, orgId: null, pingRate: null, pingTimeout: 5E3,
      chatWindowWidth: 482, chatWindowHeight: 450, contentServerUrl: null, chatPage: "/s/chat", prechatHandler: "/s/prechatVisitor" };q.connection.messageHandler = function (a, b) {
      switch (a) {case "VisitorId":
          b.sessionId && (f.log("Received new session ID"), x = b.sessionId, document.cookie = "liveagent_sid\x3d" + encodeURIComponent(x) + ";path\x3d/;", null != v.getVisitCount() && v.setVisitCount(v.getVisitCount() + 1), v.getPermanentId() || v.setPermanentId(x));break;case "Settings":
          B.init();f.log("Ping rate set to " + b.pingRate + "ms");m.pingRate = b.pingRate;m.contentServerUrl = b.contentServerUrl;m.prefixKey = b.prefixKey;for (var c = 0; c < b.buttons.length; c++) switch (b.buttons[c].type) {case "ToAgent":case "Standard":
              var e = b.buttons[c],
                  d = k[e.id];d && wa(d, e);break;case "Invite":
              var e = b.buttons[c],
                  g = null,
                  g = e.inviteImageUrl ? Ca(e.id, e.inviteImageUrl, e.inviteImageWidth, e.inviteImageHeight) : document.getElementById("liveagent_invite_button_" + e.id);null == g ? fa("Warning: Button " + e.id + " disabled because HTML element was not found") : (d = u(e.id), d.addTracker(new A(e.id, g, e.inviteRenderer, e.inviteStartPosition, e.inviteEndPosition, e.hasInviteAfterAccept, e.hasInviteAfterReject, e.inviteRejectTime)), g = f.jsonDecode(e.inviteRules), d.setRules(g.rules, g.filter), wa(d, e));}break;case "Availability":
          c = {};for (e = 0; e < b.results.length; e++) (d = k[b.results[e].id]) && (c[b.results[e].id] = { button: d, isAvailable: b.results[e].isAvailable });null != G && c.hasOwnProperty(G) && (c[G].button.setOnlineState(c[G].isAvailable), delete c[G]);for (g in c) c.hasOwnProperty(g) && c[g].button.setOnlineState(c[g].isAvailable);
          break;case q.VisitorMessage.WARNING:
          fa(b.text);break;case q.VisitorMessage.ERROR:
          Aa(b.text);break;case q.SystemMessage.SWITCH_SERVER:
          c = b.newUrl;if ("string" === typeof c) m.url = c, f.log("Received updated LiveAgent server url: " + c + "! Consider updating this site's deployment code.");else throw Error("Trying to set invalid LiveAgent server url: " + c);ca = !0;}
    };q.connection.onSuccess = function () {
      null !== Q && clearTimeout(Q);Q = window.setTimeout(Da, m.pingRate);
    };q.connection.onError = function (a) {
      Aa(a);
    };
  }
}();

/***/ }),
/* 32 */
/***/ (function(module, exports) {

/*! modernizr 3.5.0 (Custom Build) | MIT *
 * https://modernizr.com/download/?-csstransforms3d-csstransitions-input-placeholder-setclasses-shiv-testprop !*/
!function (e, t, n) {
  function r(e, t) {
    return typeof e === t;
  }function o() {
    var e, t, n, o, i, a, s;for (var l in C) if (C.hasOwnProperty(l)) {
      if (e = [], t = C[l], t.name && (e.push(t.name.toLowerCase()), t.options && t.options.aliases && t.options.aliases.length)) for (n = 0; n < t.options.aliases.length; n++) e.push(t.options.aliases[n].toLowerCase());for (o = r(t.fn, "function") ? t.fn() : t.fn, i = 0; i < e.length; i++) a = e[i], s = a.split("."), 1 === s.length ? Modernizr[s[0]] = o : (!Modernizr[s[0]] || Modernizr[s[0]] instanceof Boolean || (Modernizr[s[0]] = new Boolean(Modernizr[s[0]])), Modernizr[s[0]][s[1]] = o), E.push((o ? "" : "no-") + s.join("-"));
    }
  }function i(e) {
    var t = b.className,
        n = Modernizr._config.classPrefix || "";if (x && (t = t.baseVal), Modernizr._config.enableJSClass) {
      var r = new RegExp("(^|\\s)" + n + "no-js(\\s|$)");t = t.replace(r, "$1" + n + "js$2");
    }Modernizr._config.enableClasses && (t += " " + n + e.join(" " + n), x ? b.className.baseVal = t : b.className = t);
  }function a(e, t) {
    return !!~("" + e).indexOf(t);
  }function s() {
    return "function" != typeof t.createElement ? t.createElement(arguments[0]) : x ? t.createElementNS.call(t, "http://www.w3.org/2000/svg", arguments[0]) : t.createElement.apply(t, arguments);
  }function l() {
    var e = t.body;return e || (e = s(x ? "svg" : "body"), e.fake = !0), e;
  }function u(e, n, r, o) {
    var i,
        a,
        u,
        c,
        f = "modernizr",
        d = s("div"),
        p = l();if (parseInt(r, 10)) for (; r--;) u = s("div"), u.id = o ? o[r] : f + (r + 1), d.appendChild(u);return i = s("style"), i.type = "text/css", i.id = "s" + f, (p.fake ? p : d).appendChild(i), p.appendChild(d), i.styleSheet ? i.styleSheet.cssText = e : i.appendChild(t.createTextNode(e)), d.id = f, p.fake && (p.style.background = "", p.style.overflow = "hidden", c = b.style.overflow, b.style.overflow = "hidden", b.appendChild(p)), a = n(d, e), p.fake ? (p.parentNode.removeChild(p), b.style.overflow = c, b.offsetHeight) : d.parentNode.removeChild(d), !!a;
  }function c(e) {
    return e.replace(/([A-Z])/g, function (e, t) {
      return "-" + t.toLowerCase();
    }).replace(/^ms-/, "-ms-");
  }function f(t, n, r) {
    var o;if ("getComputedStyle" in e) {
      o = getComputedStyle.call(e, t, n);var i = e.console;if (null !== o) r && (o = o.getPropertyValue(r));else if (i) {
        var a = i.error ? "error" : "log";i[a].call(i, "getComputedStyle returning null, its possible modernizr test results are inaccurate");
      }
    } else o = !n && t.currentStyle && t.currentStyle[r];return o;
  }function d(t, r) {
    var o = t.length;if ("CSS" in e && "supports" in e.CSS) {
      for (; o--;) if (e.CSS.supports(c(t[o]), r)) return !0;return !1;
    }if ("CSSSupportsRule" in e) {
      for (var i = []; o--;) i.push("(" + c(t[o]) + ":" + r + ")");return i = i.join(" or "), u("@supports (" + i + ") { #modernizr { position: absolute; } }", function (e) {
        return "absolute" == f(e, null, "position");
      });
    }return n;
  }function p(e) {
    return e.replace(/([a-z])-([a-z])/g, function (e, t, n) {
      return t + n.toUpperCase();
    }).replace(/^-/, "");
  }function m(e, t, o, i) {
    function l() {
      c && (delete _.style, delete _.modElem);
    }if (i = r(i, "undefined") ? !1 : i, !r(o, "undefined")) {
      var u = d(e, o);if (!r(u, "undefined")) return u;
    }for (var c, f, m, h, g, v = ["modernizr", "tspan", "samp"]; !_.style && v.length;) c = !0, _.modElem = s(v.shift()), _.style = _.modElem.style;for (m = e.length, f = 0; m > f; f++) if (h = e[f], g = _.style[h], a(h, "-") && (h = p(h)), _.style[h] !== n) {
      if (i || r(o, "undefined")) return l(), "pfx" == t ? h : !0;try {
        _.style[h] = o;
      } catch (y) {}if (_.style[h] != g) return l(), "pfx" == t ? h : !0;
    }return l(), !1;
  }function h(e, t) {
    return function () {
      return e.apply(t, arguments);
    };
  }function g(e, t, n) {
    var o;for (var i in e) if (e[i] in t) return n === !1 ? e[i] : (o = t[e[i]], r(o, "function") ? h(o, n || t) : o);return !1;
  }function v(e, t, n, o, i) {
    var a = e.charAt(0).toUpperCase() + e.slice(1),
        s = (e + " " + k.join(a + " ") + a).split(" ");return r(t, "string") || r(t, "undefined") ? m(s, t, o, i) : (s = (e + " " + j.join(a + " ") + a).split(" "), g(s, t, n));
  }function y(e, t, r) {
    return v(e, n, n, t, r);
  }var C = [],
      S = { _version: "3.5.0", _config: { classPrefix: "", enableClasses: !0, enableJSClass: !0, usePrefixes: !0 }, _q: [], on: function (e, t) {
      var n = this;setTimeout(function () {
        t(n[e]);
      }, 0);
    }, addTest: function (e, t, n) {
      C.push({ name: e, fn: t, options: n });
    }, addAsyncTest: function (e) {
      C.push({ name: null, fn: e });
    } },
      Modernizr = function () {};Modernizr.prototype = S, Modernizr = new Modernizr();var E = [],
      b = t.documentElement,
      x = "svg" === b.nodeName.toLowerCase(),
      w = { elem: s("modernizr") };Modernizr._q.push(function () {
    delete w.elem;
  });var _ = { style: w.elem.style };Modernizr._q.unshift(function () {
    delete _.style;
  });S.testProp = function (e, t, r) {
    return m([e], n, t, r);
  };x || !function (e, t) {
    function n(e, t) {
      var n = e.createElement("p"),
          r = e.getElementsByTagName("head")[0] || e.documentElement;return n.innerHTML = "x<style>" + t + "</style>", r.insertBefore(n.lastChild, r.firstChild);
    }function r() {
      var e = C.elements;return "string" == typeof e ? e.split(" ") : e;
    }function o(e, t) {
      var n = C.elements;"string" != typeof n && (n = n.join(" ")), "string" != typeof e && (e = e.join(" ")), C.elements = n + " " + e, u(t);
    }function i(e) {
      var t = y[e[g]];return t || (t = {}, v++, e[g] = v, y[v] = t), t;
    }function a(e, n, r) {
      if (n || (n = t), f) return n.createElement(e);r || (r = i(n));var o;return o = r.cache[e] ? r.cache[e].cloneNode() : h.test(e) ? (r.cache[e] = r.createElem(e)).cloneNode() : r.createElem(e), !o.canHaveChildren || m.test(e) || o.tagUrn ? o : r.frag.appendChild(o);
    }function s(e, n) {
      if (e || (e = t), f) return e.createDocumentFragment();n = n || i(e);for (var o = n.frag.cloneNode(), a = 0, s = r(), l = s.length; l > a; a++) o.createElement(s[a]);return o;
    }function l(e, t) {
      t.cache || (t.cache = {}, t.createElem = e.createElement, t.createFrag = e.createDocumentFragment, t.frag = t.createFrag()), e.createElement = function (n) {
        return C.shivMethods ? a(n, e, t) : t.createElem(n);
      }, e.createDocumentFragment = Function("h,f", "return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&(" + r().join().replace(/[\w\-:]+/g, function (e) {
        return t.createElem(e), t.frag.createElement(e), 'c("' + e + '")';
      }) + ");return n}")(C, t.frag);
    }function u(e) {
      e || (e = t);var r = i(e);return !C.shivCSS || c || r.hasCSS || (r.hasCSS = !!n(e, "article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}template{display:none}")), f || l(e, r), e;
    }var c,
        f,
        d = "3.7.3",
        p = e.html5 || {},
        m = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,
        h = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,
        g = "_html5shiv",
        v = 0,
        y = {};!function () {
      try {
        var e = t.createElement("a");e.innerHTML = "<xyz></xyz>", c = "hidden" in e, f = 1 == e.childNodes.length || function () {
          t.createElement("a");var e = t.createDocumentFragment();return "undefined" == typeof e.cloneNode || "undefined" == typeof e.createDocumentFragment || "undefined" == typeof e.createElement;
        }();
      } catch (n) {
        c = !0, f = !0;
      }
    }();var C = { elements: p.elements || "abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output picture progress section summary template time video", version: d, shivCSS: p.shivCSS !== !1, supportsUnknownElements: f, shivMethods: p.shivMethods !== !1, type: "default", shivDocument: u, createElement: a, createDocumentFragment: s, addElements: o };e.html5 = C, u(t), "object" == typeof module && module.exports && (module.exports = C);
  }("undefined" != typeof e ? e : this, t);var N = s("input"),
      T = "autocomplete autofocus list placeholder max min multiple pattern required step".split(" "),
      z = {};Modernizr.input = function (t) {
    for (var n = 0, r = t.length; r > n; n++) z[t[n]] = !!(t[n] in N);return z.list && (z.list = !(!s("datalist") || !e.HTMLDataListElement)), z;
  }(T);var P = "Moz O ms Webkit",
      k = S._config.usePrefixes ? P.split(" ") : [];S._cssomPrefixes = k;var j = S._config.usePrefixes ? P.toLowerCase().split(" ") : [];S._domPrefixes = j, S.testAllProps = v, S.testAllProps = y;var F = S.testStyles = u,
      L = "CSS" in e && "supports" in e.CSS,
      M = "supportsCSS" in e;Modernizr.addTest("supports", L || M), Modernizr.addTest("csstransforms3d", function () {
    var e = !!y("perspective", "1px", !0),
        t = Modernizr._config.usePrefixes;if (e && (!t || "webkitPerspective" in b.style)) {
      var n,
          r = "#modernizr{width:0;height:0}";Modernizr.supports ? n = "@supports (perspective: 1px)" : (n = "@media (transform-3d)", t && (n += ",(-webkit-transform-3d)")), n += "{#modernizr{width:7px;height:18px;margin:0;padding:0;border:0}}", F(r + n, function (t) {
        e = 7 === t.offsetWidth && 18 === t.offsetHeight;
      });
    }return e;
  }), Modernizr.addTest("csstransitions", y("transition", "all", !0)), Modernizr.addTest("placeholder", "placeholder" in s("input") && "placeholder" in s("textarea")), o(), i(E), delete S.addTest, delete S.addAsyncTest;for (var D = 0; D < Modernizr._q.length; D++) Modernizr._q[D]();e.Modernizr = Modernizr;
}(window, document);

/***/ }),
/* 33 */
/***/ (function(module, exports) {

/*
 * Swipe 2.0
 *
 * Brad Birdsall
 * Copyright 2013, MIT License
 *
*/

var Swipe = module.exports = function (container, options) {

  "use strict";

  // utilities

  var noop = function () {}; // simple no operation function
  var offloadFn = function (fn) {
    setTimeout(fn || noop, 0);
  }; // offload a functions execution

  // check browser capabilities
  var browser = {
    addEventListener: !!window.addEventListener,
    touch: 'ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch,
    transitions: function (temp) {
      var props = ['transitionProperty', 'WebkitTransition', 'MozTransition', 'OTransition', 'msTransition'];
      for (var i in props) if (temp.style[props[i]] !== undefined) return true;
      return false;
    }(document.createElement('swipe'))
  };

  // quit if no root element
  if (!container) return;
  var element = container.children[0];
  var slides, slidePos, width, length;
  options = options || {};
  var index = parseInt(options.startSlide, 10) || 0;
  var speed = options.speed || 300;
  options.continuous = options.continuous !== undefined ? options.continuous : true;

  function setup() {

    // cache slides
    slides = element.children;
    length = slides.length;

    // set continuous to false if only one slide
    if (slides.length < 2) options.continuous = false;

    //special case if two slides
    if (browser.transitions && options.continuous && slides.length < 3) {
      element.appendChild(slides[0].cloneNode(true));
      element.appendChild(element.children[1].cloneNode(true));
      slides = element.children;
    }

    // create an array to store current positions of each slide
    slidePos = new Array(slides.length);

    // determine width of each slide
    width = Math.ceil(container.getBoundingClientRect().width || container.offsetWidth);

    element.style.width = slides.length * (width + 3) + 'px';

    // stack elements
    var pos = slides.length;
    while (pos--) {

      var slide = slides[pos];

      slide.style.width = width + 'px';
      slide.setAttribute('data-index', pos);

      if (browser.transitions) {
        slide.style.left = pos * -width + 'px';
        move(pos, index > pos ? -width : index < pos ? width : 0, 0);
      }
    }

    // reposition elements before and after index
    if (options.continuous && browser.transitions) {
      move(circle(index - 1), -width, 0);
      move(circle(index + 1), width, 0);
    }

    if (!browser.transitions) element.style.left = index * -width + 'px';

    container.style.visibility = 'visible';
  }

  function prev() {

    if (options.continuous) slide(index - 1);else if (index) slide(index - 1);
  }

  function next() {

    if (options.continuous) slide(index + 1);else if (index < slides.length - 1) slide(index + 1);
  }

  function circle(index) {

    // a simple positive modulo using slides.length
    return (slides.length + index % slides.length) % slides.length;
  }

  function slide(to, slideSpeed) {

    // do nothing if already on requested slide
    if (index == to) return;

    if (browser.transitions) {

      var direction = Math.abs(index - to) / (index - to); // 1: backward, -1: forward

      // get the actual position of the slide
      if (options.continuous) {
        var natural_direction = direction;
        direction = -slidePos[circle(to)] / width;

        // if going forward but to < index, use to = slides.length + to
        // if going backward but to > index, use to = -slides.length + to
        if (direction !== natural_direction) to = -direction * slides.length + to;
      }

      var diff = Math.abs(index - to) - 1;

      // move all the slides between index and to in the right direction
      while (diff--) move(circle((to > index ? to : index) - diff - 1), width * direction, 0);

      to = circle(to);

      move(index, width * direction, slideSpeed || speed);
      move(to, 0, slideSpeed || speed);

      if (options.continuous) move(circle(to - direction), -(width * direction), 0); // we need to get the next in place
    } else {

      to = circle(to);
      animate(index * -width, to * -width, slideSpeed || speed);
      //no fallback for a circular continuous if the browser does not accept transitions
    }

    index = to;
    offloadFn(options.callback && options.callback(index, slides[index]));
  }

  function move(index, dist, speed) {

    translate(index, dist, speed);
    slidePos[index] = dist;
  }

  function translate(index, dist, speed) {

    var slide = slides[index];
    var style = slide && slide.style;

    if (!style) return;

    style.webkitTransitionDuration = style.MozTransitionDuration = style.msTransitionDuration = style.OTransitionDuration = style.transitionDuration = speed + 'ms';

    style.webkitTransform = 'translate(' + dist + 'px,0)' + 'translateZ(0)';
    style.msTransform = style.MozTransform = style.OTransform = 'translateX(' + dist + 'px)';
  }

  function animate(from, to, speed) {

    // if not an animation, just reposition
    if (!speed) {

      element.style.left = to + 'px';
      return;
    }

    var start = +new Date();

    var timer = setInterval(function () {

      var timeElap = +new Date() - start;

      if (timeElap > speed) {

        element.style.left = to + 'px';

        if (delay) begin();

        options.transitionEnd && options.transitionEnd.call(event, index, slides[index]);

        clearInterval(timer);
        return;
      }

      element.style.left = (to - from) * (Math.floor(timeElap / speed * 100) / 100) + from + 'px';
    }, 4);
  }

  // setup auto slideshow
  var delay = options.auto || 0;
  var interval;

  function begin() {

    interval = setTimeout(next, delay);
  }

  function stop() {

    delay = 0;
    clearTimeout(interval);
  }

  // setup initial vars
  var start = {};
  var delta = {};
  var isScrolling;

  // setup event capturing
  var events = {

    handleEvent: function (event) {

      switch (event.type) {
        case 'touchstart':
          this.start(event);break;
        case 'touchmove':
          this.move(event);break;
        case 'touchend':
          offloadFn(this.end(event));break;
        case 'webkitTransitionEnd':
        case 'msTransitionEnd':
        case 'oTransitionEnd':
        case 'otransitionend':
        case 'transitionend':
          offloadFn(this.transitionEnd(event));break;
        case 'resize':
          {
            setup();
            break;
          }

      }

      if (options.stopPropagation) event.stopPropagation();
    },
    start: function (event) {

      var touches = event.touches[0];

      // measure start values
      start = {

        // get initial touch coords
        x: touches.pageX,
        y: touches.pageY,

        // store time to determine touch duration
        time: +new Date()

      };

      // used for testing first move event
      isScrolling = undefined;

      // reset delta and end measurements
      delta = {};

      // attach touchmove and touchend listeners
      element.addEventListener('touchmove', this, false);
      element.addEventListener('touchend', this, false);
    },
    move: function (event) {

      // ensure swiping with one touch and not pinching
      if (event.touches.length > 1 || event.scale && event.scale !== 1) return;

      if (options.disableScroll) event.preventDefault();

      var touches = event.touches[0];

      // measure change in x and y
      delta = {
        x: touches.pageX - start.x,
        y: touches.pageY - start.y

        // determine if scrolling test has run - one time test
      };if (typeof isScrolling == 'undefined') {
        isScrolling = !!(isScrolling || Math.abs(delta.x) < Math.abs(delta.y));
      }

      // if user is not trying to scroll vertically
      if (!isScrolling) {

        // prevent native scrolling
        event.preventDefault();

        // stop slideshow
        stop();

        // increase resistance if first or last slide
        if (options.continuous) {
          // we don't add resistance at the end

          translate(circle(index - 1), delta.x + slidePos[circle(index - 1)], 0);
          translate(index, delta.x + slidePos[index], 0);
          translate(circle(index + 1), delta.x + slidePos[circle(index + 1)], 0);
        } else {

          delta.x = delta.x / (!index && delta.x > 0 // if first slide and sliding left
          || index == slides.length - 1 // or if last slide and sliding right
          && delta.x < 0 // and if sliding at all
          ? Math.abs(delta.x) / width + 1 : // determine resistance level
          1); // no resistance if false

          // translate 1:1
          translate(index - 1, delta.x + slidePos[index - 1], 0);
          translate(index, delta.x + slidePos[index], 0);
          translate(index + 1, delta.x + slidePos[index + 1], 0);
        }
      }
    },
    end: function (event) {

      // measure duration
      var duration = +new Date() - start.time;

      // determine if slide attempt triggers next/prev slide
      var isValidSlide = Number(duration) < 250 // if slide duration is less than 250ms
      && Math.abs(delta.x) > 20 // and if slide amt is greater than 20px
      || Math.abs(delta.x) > width / 2; // or if slide amt is greater than half the width

      // determine if slide attempt is past start and end
      var isPastBounds = !index && delta.x > 0 // if first slide and slide amt is greater than 0
      || index == slides.length - 1 && delta.x < 0; // or if last slide and slide amt is less than 0

      if (options.continuous) isPastBounds = false;

      // determine direction of swipe (true:right, false:left)
      var direction = delta.x < 0;

      // if not scrolling vertically
      if (!isScrolling) {

        if (isValidSlide && !isPastBounds) {

          if (direction) {

            if (options.continuous) {
              // we need to get the next in this direction in place

              move(circle(index - 1), -width, 0);
              move(circle(index + 2), width, 0);
            } else {
              move(index - 1, -width, 0);
            }

            move(index, slidePos[index] - width, speed);
            move(circle(index + 1), slidePos[circle(index + 1)] - width, speed);
            index = circle(index + 1);
          } else {
            if (options.continuous) {
              // we need to get the next in this direction in place

              move(circle(index + 1), width, 0);
              move(circle(index - 2), -width, 0);
            } else {
              move(index + 1, width, 0);
            }

            move(index, slidePos[index] + width, speed);
            move(circle(index - 1), slidePos[circle(index - 1)] + width, speed);
            index = circle(index - 1);
          }

          options.callback && options.callback(index, slides[index]);
        } else {

          if (options.continuous) {

            move(circle(index - 1), -width, speed);
            move(index, 0, speed);
            move(circle(index + 1), width, speed);
          } else {

            move(index - 1, -width, speed);
            move(index, 0, speed);
            move(index + 1, width, speed);
          }
        }
      }

      // kill touchmove and touchend event listeners until touchstart called again
      element.removeEventListener('touchmove', events, false);
      element.removeEventListener('touchend', events, false);
    },
    transitionEnd: function (event) {

      if (parseInt(event.target.getAttribute('data-index'), 10) == index) {

        if (delay) begin();

        options.transitionEnd && options.transitionEnd.call(event, index, slides[index]);
      }
    }

    // trigger setup
  };setup();

  // start auto slideshow if applicable
  if (delay) begin();

  // add event listeners
  if (browser.addEventListener && !options.disableSwipe) {

    // set touchstart event on element
    if (browser.touch) element.addEventListener('touchstart', events, false);

    if (browser.transitions) {
      element.addEventListener('webkitTransitionEnd', events, false);
      element.addEventListener('msTransitionEnd', events, false);
      element.addEventListener('oTransitionEnd', events, false);
      element.addEventListener('otransitionend', events, false);
      element.addEventListener('transitionend', events, false);
    }

    // set resize event on window
    window.addEventListener('resize', events, false);
  } else {

    window.onresize = function () {
      setup();
    }; // to play nice with old IE
  }

  // expose the Swipe API
  return {
    setup: function () {

      setup();
    },
    slide: function (to, speed) {

      // cancel slideshow
      stop();

      slide(to, speed);
    },
    prev: function () {

      // cancel slideshow
      stop();

      prev();
    },
    next: function () {

      // cancel slideshow
      stop();

      next();
    },
    stop: function () {

      // cancel slideshow
      stop();
    },
    getPos: function () {

      // return current index position
      return index;
    },
    getNumSlides: function () {

      // return total number of slides
      return length;
    },

    destroyStyles: function () {
      var children = $('.slide-item', element),
          item = $(element);

      item.css('width', '');
      item.css('left', '');
      item.css('webkitTransform', '');
      item.css('msTransform', '');
      item.css('MozTransform', '');
      item.css('OTransform', '');

      children.removeClass('mobile-slide-item opacity-one');
      children.css('width', '');
      children.css('left', '');
      children.css('webkitTransform', '');
      children.css('msTransform', '');
      children.css('MozTransform', '');
      children.css('OTransform', '');

      // remove current event listeners
      element.removeEventListener('touchstart', events, false);
      element.removeEventListener('webkitTransitionEnd', events, false);
      element.removeEventListener('msTransitionEnd', events, false);
      element.removeEventListener('oTransitionEnd', events, false);
      element.removeEventListener('otransitionend', events, false);
      element.removeEventListener('transitionend', events, false);
      window.removeEventListener('resize', events, false);
    },

    kill: function () {

      // cancel slideshow
      stop();

      // reset element
      element.style.width = '';
      element.style.left = '';

      // reset slides
      var pos = slides.length;
      while (pos--) {
        var slide = slides[pos];
        slide.style.width = '';
        slide.style.left = '';
        if (browser.transitions) translate(pos, 0, 0);
      }

      // removed event listeners
      if (browser.addEventListener) {
        // remove current event listeners
        element.removeEventListener('touchstart', events, false);
        element.removeEventListener('webkitTransitionEnd', events, false);
        element.removeEventListener('msTransitionEnd', events, false);
        element.removeEventListener('oTransitionEnd', events, false);
        element.removeEventListener('otransitionend', events, false);
        element.removeEventListener('transitionend', events, false);
        window.removeEventListener('resize', events, false);
      } else {
        window.onresize = null;
      }
    }
  };
};

if (window.jQuery || window.Zepto) {
  (function ($) {
    $.fn.Swipe = function (params) {
      return this.each(function () {
        $(this).data('Swipe', new Swipe($(this)[0], params));
      });
    };
  })(window.jQuery || window.Zepto);
}

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * List Filter
 */



var ListFilter = module.exports = function () {
  var def = function (el) {
    this.el = el;
    this.$el = $(el);

    this.setupMenu();
    this.setupExpand();
  };

  def.prototype = {
    toggle: function (idx) {
      this.ui.contentItems.eq(idx).toggleClass('is-expanded').siblings().removeClass('is-expanded');
    },

    setupMenu: function () {
      var self = this;
      this.ui = {
        list: this.$el.find('.selector-list'),
        menuItems: this.$el.find('.selector-item'),
        menuLinks: this.$el.find('.selector-item > a'),
        contentItems: this.$el.find('.selector-content-item'),
        expandLink: this.$el.find('.selector-content-expand')
      };

      this.ui.menuLinks.on('click', function () {
        $(this).parent().addClass('is-active').siblings().removeClass('is-active');
        self.updateDesktopHeight($(this).parent().find('.selector-content'));
      }).eq(0).trigger('click');

      $(window).on('resize', _.throttle(function () {
        self.ui.menuItems.filter('.is-active').find('.selector-content');
        //self.updateDesktopHeight($(self), self.ui.menuItems.filter('.is-active').find('.selector-content'));
      }, 250));
    },

    updateDesktopHeight: function (el) {
      this.ui.list.css('min-height', el.height());
    },

    setupExpand: function () {
      var self = this;
      this.ui.contentItems.each(function (index) {
        var $this = $(this),
            subLength = $this.find('li').length;

        if (subLength > 12) {
          self.ui.expandLink.eq(index).parent().removeClass('is-hidden');
        }

        self.ui.expandLink.eq(index).on('click', function () {
          self.toggle(index);
        });
      });
    }
  };

  return def;
}();

$(function () {
  $('.selector').each(function () {
    new ListFilter(this);
  });
});

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 * Misc
 */



var Utils = __webpack_require__(0),
    FastClick = __webpack_require__(75);

module.exports = function () {

  $(function () {
    // removes the click event for the main menu items on anything
    // less than 1024 wide screen size
    // this is not ideal - what we really want is to detect touch...
    // no, not even, what we really need is a sep UI for triggering flyout
    // and for triggering click -> out link
    $(window).on('break-medium-screen', function () {
      $('.no-mobile-click').each(function () {
        $(this).on('click.noMobileClick', function (e) {
          e.preventDefault();
        });
      });
    });
    $(window).on('break-greater-than-medium', function () {
      $('.no-mobile-click').each(function () {
        $(this).off('click.noMobileClick');
      });
    });

    //add touch-device class to body on touch start detect
    if (Utils.isTouchDevice()) {
      $('body').addClass('touch-device');
    }
    // once the firefox issue around select boxes is fixed
    // this brower check should be updated to have an upper bound
    // https://bugzilla.mozilla.org/show_bug.cgi?id=1017864
    var browserInfo = Utils.getBrowser();
    if (browserInfo[0] === "Firefox" && parseInt(browserInfo[1]) >= 30) {
      $('html').addClass('ff30plus');

      /*$('.select').each(function () {
        var $this = $(this);
        var hasWrapper = $this.parent().hasClass('select-pretty');
         if (!hasWrapper) {
          $this.wrapAll('<div class="select-ff" />');
        } else {
          $this.parent().addClass('select-ff');
        }
      });*/
    }

    // clear value of select box on product category pages so
    // that the original question state is restored when the
    // page is reached via the browser back button (for instance)
    $('select.reset-on-page-load').prop('selectedIndex', 0);

    // slice switcher for plus-sign-box
    $('.plus-sign-box .slice-3col').each(function () {
      var $slicer = $(this);
      if ($slicer.children().length === 4) {
        $slicer.removeClass('slice-3col');
        $slicer.addClass('slice-4col');
      }
    });

    // Event listener for AddThis Email button
    // Changes .overlay  position so modal is not covered
    // http://support.addthis.com/customer/portal/articles/1365497-addthis-javascript-events
    if (window.addthis) {
      addthis.addEventListener('addthis.menu.open', function () {
        $(".overlay").css("position", "initial");
      });
      addthis.addEventListener('addthis.menu.close', function () {
        $(".overlay").css("position", "fixed");
      });
    }

    // Fastclick
    FastClick.attach(document.body);
  });

  // BLUR INPUTS ON ROTATE TO FIX IOS BUGS
  if (window.addEventListener) {
    window.addEventListener("orientationchange", function () {
      $('form:focus, select:focus, search:focus, input:focus').blur();
    }, false);
  }

  // REPLACE PASSWORD FIELD FOR IE8 TO BE ABLE TO SHOW A PLACEHOLDER TEXT (JIRA: RESP-892)
  // found solution at: http://stackoverflow.com/questions/13415151/jquery-input-placeholder-for-type-password-in-ie8
  if ($('html').hasClass('ie8' || 'ie9')) {
    var pswds = $('input[type="password"]'),
        faker = '<input class="input input-text-alt faker" type="text" placeholder="Password" />';

    pswds.addClass('real-pass');

    if (pswds.length !== 0) {
      pswds.after(faker);

      var fk = $('.faker');

      // On DOM ready, hide the real password and replace with
      pswds.hide();

      // On focus of the fake password field
      fk.focus(function () {
        $(this).hide();
        pswds.show().focus(); // and show the real password input password
      });

      // On blur of the real pass
      pswds.blur(function () {
        if ($(this).val() === "") {
          // if the value is empty,
          $(this).hide();
          fk.show();
          // otherwise, a password has been entered,
          // so do nothing (leave the real password showing)
        }
      });
    }
  }

  // prevent click on last item in breadcrumb list
  $('.breadcrumb-link:last').replaceWith("<span class='breadcrumb-link breadcrumb-link-last'>" + $('.breadcrumb-link:last').text() + "</span>");

  $('.breadcrumb-link:last').on('click', function (e) {
    e.preventDefault();
  });
}();

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 * MobileNav
 */



var Utils = __webpack_require__(0);

var MobileNav = module.exports = function () {

  var def = function (el) {
    this.$el = $(el);
    init.call(this);
  };

  var init = function () {
    this.tabletActive = false;
    this.$toggle = this.$el.find('.header-nav-control');
    this.$nav = this.$el.find('nav');
    this.$back = this.$nav.find('.global-back-button');
    this.$topMenu = this.$nav.find('.top-menu');
    this.$topNavItems = this.$topMenu.find('> .nav-link-item');
    this.$topNavItemsMobile = this.$topNavItems.find('> .no-mobile-click');
    this.$search = this.$nav.find('.header-search'); // so we can close the menus if search gets activated
    this.$screens = this.$nav.find('.navbar-screen, .nav-link-list');
    this.$contentScroll = $('body');
    this.$pageContent = $('#content');

    this.bind();
    window.juniGetResponsiveInstace();
  };

  def.prototype = {

    bind: function () {
      var self = this;

      $(window).on('break-small break-mobile break-tablet', function () {
        self.clearTopMenuHoverStates(); // To address a specific bug with Android -- see method description
        self.setTabletState(true);
      });

      $(window).on('break-greater-than-tablet', function () {
        self.setTabletState(false);
      });

      if (self.$el.hasClass('dark')) {
        $(window).scroll(function () {
          if ($(window).scrollTop() > 0) {
            self.$el.addClass('is-stuck');
          } else {
            self.$el.removeClass('is-stuck');
          }
        });
      }

      if (Utils.isTouchDevice()) {
        // TOP MENU EVENT HANDLING FOR TOUCH DEVICES
        $('body').on('click', function () {
          // when clicking outside the menus
          self.openFlyout(null); // ... close all flyouts
        });

        this.$topNavItemsMobile.on('click', function (e) {
          e.preventDefault(); // stop outbound links on top menu items
        });
      } else {
        // TOP MENU EVENT HANDLING FOR MOUSE DEVICES
        this.$topNavItems.on('mouseenter', function (e) {
          self.openFlyoutOnEnter(this);
        }).on('mouseleave', function (e) {
          self.closeFlyoutAfterExit(this);
        });
      }

      this.bindNavEvents();
      this.ieShims();
    },

    openFlyoutOnEnter: function (el) {
      if (this.hoverTimeout) {
        // some menu is already open...
        this.setHoverTimeout(el, 200); // open newly-hovered menu after delay
      } else {
        this.openFlyout(el); // no menu was open: open immediately
      }
    },

    // Keeps a menu open briefly after leaving to allow the possibility it
    // may be quickly re-entered (such as through diagonal paths)
    closeFlyoutAfterExit: function (el) {
      this.setHoverTimeout(null, 250);
    },

    // 1) Clears any existing timeout;
    // 2) sets a timeout to call callback(el) after ms milliseconds;
    // 3) clears this.hoverTimeout after callback is executed.
    // -- If called with null, simply clears any existing timeout.
    setHoverTimeout: function (el, ms) {
      // clear any existing timeout
      if (this.hoverTimeout) {
        window.clearTimeout(this.hoverTimeout);
      }
      // set new timeout
      this.hoverTimeout = _.delay(_.bind(function () {
        this.openFlyout(el);
        this.hoverTimeout = null; // clear, so can be used as flag
      }, this), ms);
    },

    openFlyout: function (el) {
      // close any open flyout
      this.$topNavItems.removeClass('hover');
      // open flyout contained in passed element (if any)
      if (el) {
        $(el).addClass('hover');
      }
    },

    setBaseState: function () {
      this.$nav.removeClass('is-displaying-menus');
      this.$nav.removeClass('is-back-active');

      this.$nav.find('.nav-link-list.is-active').removeClass('is-active');
      this.$topMenu.addClass('is-active');
      this.$nav.find('.nav-link-list.is-previous').removeClass('is-previous');

      this.$nav.find('.nav-link-list').scrollTop(0);
      this.$topMenu.addClass('can-scroll');
      this.$contentScroll.removeClass('prevent-scroll');
      this.$pageContent.removeClass('is-background');
    },

    setTabletState: function (setActive) {
      if (setActive !== this.tabletActive) {
        this.tabletActive = setActive;
        this.setBaseState();
        $(':focus').blur();
      }
    },

    bindNavEvents: function (bind) {
      var self = this,
          namespaced = "click" + '.mobile-nav';

      this.$toggle.on(namespaced, function (e) {
        self.toggleMenus();
        $('.header-search').data('headerSearch').close();
      });
      this.$screens.on(namespaced, function (e) {
        self.closeMenus();
        $('.header-search').data('headerSearch').close();
      });
      this.$el.find('.has-submenu').on(namespaced, function (e) {
        if (self.tabletActive) {
          e.preventDefault();
          e.stopPropagation();
          self.openSubMenu($(this));
        }
      });
      this.$back.on(namespaced, function (e) {
        e.stopPropagation();
        self.goBack();
      });
      this.$search.on(namespaced, function () {
        if (self.isDisplayingMenus()) {
          self.closeMenus();
        }
      });
      this.$topMenu.find('>li').on('mouseenter', function () {
        $('select:focus').blur();
      });
    },

    ieShims: function () {
      var $target;
      if ($('html').hasClass('ie8')) {
        // programmatically add and remove hover class
        // since ie8 native hover response is VERY VERY VERY slow (25-40 seconds)
        $target = $('a.nav-link-name', this.$topMenu);
        $target.on('mouseenter', function () {
          $(this).addClass('hover-highlight');
        });
        $target.on('mouseleave', function () {
          $(this).removeClass('hover-highlight');
        });
      }
    },

    toggleMenus: function () {
      if (this.isDisplayingMenus()) {
        this.closeMenus();
      } else {
        this.openMenus();
      }
    },

    isDisplayingMenus: function () {
      return this.$nav.hasClass('is-displaying-menus');
    },

    openMenus: function () {
      this.$topMenu.addClass('is-active');
      this.$nav.addClass('is-displaying-menus');
      this.$contentScroll.addClass('prevent-scroll');
      this.$pageContent.addClass('is-background');
    },

    closeMenus: function () {
      var self = this;
      this.$nav.removeClass('is-displaying-menus');
      this.$nav.removeClass('is-back-active');
      window.setTimeout(function () {
        self.setBaseState();
      }, 600);
    },

    openSubMenu: function ($selection) {
      var self, $activeMenu, $subMenu;
      self = this;

      $activeMenu = this.$nav.find('.nav-link-list.is-active');
      $activeMenu.addClass('is-previous');
      $activeMenu.removeClass('is-active');
      $activeMenu.removeClass('can-scroll');

      $subMenu = $selection.closest('li').find('.nav-link-list').eq(0);
      $subMenu.addClass('is-active');
      $subMenu.addClass('can-scroll');

      this.$nav.addClass('is-back-active');
    },

    goBack: function () {
      var $activeMenu, $backToMenu;

      $activeMenu = this.$nav.find('.nav-link-list.is-active');
      $activeMenu.removeClass('is-active');
      $activeMenu.removeClass('can-scroll');

      $backToMenu = $activeMenu.parent().closest('.nav-link-list');
      $backToMenu.addClass('is-active');
      $backToMenu.removeClass('is-previous');

      if ($($backToMenu)[0] === this.$topMenu[0]) {
        this.$nav.removeClass('is-back-active');
      }

      window.setTimeout(function () {
        $backToMenu.addClass('can-scroll'); // { overflow-y: scroll } is added after the transition right slide;
      }, 600); // if added sooner, outgoing menu will not display during transition.
    },

    // On Android/Chrome the hover state of the top menu items can get stuck on orientation change.
    // To force the hover off, this function pulls the elements from the DOM and then replaces them.
    // The problem arose with the Support menu when the search text box in the menu had focus, and
    // then orientation was changed (i.e. triggering a break-mobile event), and then the screen was
    // touched. When switching back to lanscape, the Support menu was open but somehow detached from the
    // event context. Better solution is probably to not use hover in the mobile interface at all, but
    // run the states completely through JavaScript.
    clearTopMenuHoverStates: function () {
      this.$topNavItems.each(function () {
        var el = this,
            par = el.parentNode,
            next = el.nextSibling;
        if (par && !$('html').hasClass('ie8')) {
          // breaks in ie8, but no need for it
          par.removeChild(el);
          window.setTimeout(function () {
            par.insertBefore(el, next);
          }, 0);
        }
      });
    }

  };

  return def;
}();

$(function () {
  $('.main-header').data('mainHeader', new MobileNav('.main-header'));
});

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * News Filter
 */



var EqualHeight = __webpack_require__(6);

var NewsFilter = module.exports = function () {

  var def = function (el) {
    this.relationship = $(el).attr('data-relationship');
    this.keys = [];

    this.$els = {
      'item': el,
      'controller': $('.item-select[data-relationship="' + this.relationship + '"]'),
      'items': $('.item-filter', el)
    };

    init.call(this);
  };

  var init = function () {
    this.setup();
    this.bind();
  };

  def.prototype = {

    setup: function () {
      var self = this;

      this.$els.items.each(function () {
        var string = ',All';
        $(this).attr('data-type', $(this).attr('data-type') + string);
        var thisKeys = $(this).attr('data-type').split(',');

        _.each(thisKeys, function (i) {
          if ($.inArray(i, self.keys) > -1) {
            return false;
          } else {
            self.keys.push(i);
          }
        });
      });

      self.keys.sort();

      _.each(self.keys, function (i) {
        self.$els.controller.append('<option value="' + i + '">' + i + '</option>');
      });

      new EqualHeight(this.$els.item, '.item-filter');
    },

    bind: function () {
      var self = this;

      this.$els.controller.on('change', function () {
        self.selectFilter();
      });
    },

    selectFilter: function () {
      var self = this;

      this.$els.items.each(function () {
        var arr = $(this).data('type').split(','),
            value = self.$els.controller.val(),
            isMatch = $.inArray(value, arr) > -1;

        $(this).parent().toggleClass('hide', !isMatch);
      });
    }
  };

  return def;
}();

$(function () {
  $('.filter-container').each(function () {
    new NewsFilter(this);
  });
});

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Node Tree
 */



var NodeTree = module.exports = function () {

  /* jshint validthis: true */

  var def = function (el) {
    this.$el = $(el);
    setup.call(this);
  };

  function setup() {
    var treeEl = this.$el.get(0);

    $('body').on('click', '.nodetree .nodetree-node', function (e) {
      var $node = $(this),
          $branch,
          $target;

      if ($.contains(treeEl, this)) {
        // only toggle if is in this tree
        $branch = getBranchIfControlNode($node);

        if ($branch.length > 0) {
          $target = $(e.target);
          if ($target.hasClass('checkbox-input') && $target.prop("checked")) {
            $branch.addClass('is-expanded'); // expand branch if the checkbox received the click
          } else {
            $branch.toggleClass('is-expanded'); // otherwise just toggle expand
          }
        }
      }
    });

    $('body').on('click', '.nodetree .nodetree-node :checkbox', function (e) {
      var $checkbox = $(this),
          $node = containingNode($checkbox),
          isChecked = $checkbox[0].checked;

      if ($.contains(treeEl, this)) {
        // only click if is in this tree
        setChildCheckStates($node, isChecked); // set any children to the same value
        setCheckedState($checkbox, undefined, false); // clicking a box will always fully set or clear it
        maintainParentCheckState($node);
      }
    });
  }

  function containingNode($el) {
    return $el.closest('.nodetree-node');
  }

  function getBranchIfControlNode($node) {
    return $node.parent('.nodetree-branch');
  }

  function setCheckedState($node, checked, semiState) {
    if (!_.isUndefined(checked)) {
      $node.find(':checkbox').prop("checked", !!checked);
    }
    $node.find('.checkbox-label').toggleClass('icon-uncheck', !!semiState).toggleClass('icon-checkmark', !semiState);
  }

  function setChildCheckStates($node, checked) {
    var $branch = getBranchIfControlNode($node);
    if ($branch.length > 0) {
      $branch.find('.nodetree-node').each(function () {
        setCheckedState($(this), checked);
      });
    }
  }

  function maintainParentCheckState($node) {
    var $tree = $node.closest('.nodetree-tree'),
        $parent,
        $checked,
        $childBoxes;

    if ($tree.length > 0) {
      // if there is no containing tree, we are at the root element
      $parent = $tree.closest('.nodetree-branch').find('.nodetree-node').eq(0); // control node
      $childBoxes = $tree.find('.nodetree-node :checkbox');
      $checked = $childBoxes.filter(':checked');

      if ($childBoxes.length === $checked.length) {
        setCheckedState($parent, true, false); // set parent to checked
      } else if ($checked.length === 0) {
        setCheckedState($parent, false, false); // set parent to unchecked
      } else {
        setCheckedState($parent, true, true); // set parent to semiState
      }

      // climb to next parent up the tree
      maintainParentCheckState($parent);
    }
  }

  return def;
}();

$(function () {
  $('.nodetree').each(function () {
    $(this).data('nodetree', new NodeTree(this));
  });
});

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Popup Window
 */



var Popup = module.exports = function () {

    var def = function (el) {
        this.$el = $(el);
        this.rel = this.$el.attr('data-relationship');
        init.call(this);
    };

    var init = function () {
        this.$popup = $('.popup-modal[data-relationship="' + this.rel + '"]');
        this.$close = this.$popup.find('.close-box');
        this.$wrapper = this.$popup.parent('.popup-wrapper');
        this.$contentScroll = $('body');
        this.bind();
    };

    def.prototype = {
        bind: function () {
            var self = this;

            this.$el.on('click', function (e) {
                e.preventDefault();
                self.toggleClasses();
                self.$contentScroll.addClass('prevent-scroll');
                self.$contentScroll.addClass('is-background');
            });

            this.$close.on('click', function (e) {
                e.preventDefault();
                self.toggleClasses(false);
                self.$contentScroll.removeClass('prevent-scroll');
                self.$contentScroll.removeClass('is-background');
            });
        },

        toggleClasses: function () {
            this.$el.toggleClass('is-active');
            this.$popup.toggleClass('is-shown');
            this.$wrapper.toggleClass('is-shown');
        }
    };

    return def;
}();

$(function () {
    $('.popup-trigger').each(function () {
        new Popup(this);
    });
});

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * ScrollPos
 */



var ScrollPos = module.exports = function () {
  var def = function (el) {
    this.$els = {
      'item': el,
      'root': $('html, body')
    };

    this.target = $(this.$els.item).attr('href');
    this.offset = $(this.$els.item).attr('data-pos') || 45;
    init.call(this);
  };

  var init = function () {
    this.bind();
  };

  def.prototype = {
    bind: function () {
      var self = this;

      $(this.$els.item).on("click", function (e) {
        e.preventDefault();
        self.goTo();
        return false;
      });
    },

    goTo: function () {
      var self = this;

      this.$els.root.animate({
        scrollTop: parseInt($(self.target).offset().top) - self.offset
      }, 500);
      return false;
    }
  };

  return def;
}();

$(function () {
  $('.scrollable-link').each(function () {
    new ScrollPos(this);
  });
});

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * SearchControl
 */



var SearchControl = module.exports = function () {

  var def = function (el) {
    this.$els = {
      'item': el,
      'control': '.header-search-submit',
      'input': 'header-search-input'
    };
    this.states = {
      'active': 'is-active'
    };
    init.call(this);
  };

  var init = function () {
    this.bind();
  };

  def.prototype = {

    bind: function () {
      var self = this;

      $(this.$els.control, this.$els.item).on("click", function (a) {
        a.preventDefault();
        self.toggleState();

        var mainHeader = $('.main-header').data('mainHeader');
        if (mainHeader.closeMenus) {
          mainHeader.closeMenus();
        }
      });

      $('.' + this.$els.input).on('click', function (e) {
        e.stopPropagation();
      });
    },

    bindDoc: function () {
      $('html').on('click.search', $.proxy(this.toggleState, this));
    },

    unBindDoc: function () {
      $('html').off('click.search');
    },

    bindEsc: function () {
      var self = this;
      $(window).on('keydown.search', function (e) {
        if (e.which === 27) {
          self.toggleState();
        }
      });
    },

    unBindEsc: function () {
      $(window).off('keydown.search');
    },

    toggleState: function () {
      var self = this;

      $(this.$els.item).toggleClass(this.states.active);

      if ($(this.$els.item).hasClass(this.states.active)) {
        window.setTimeout(function () {
          $('.' + self.$els.input, self.$els.item).focus();
          self.bindDoc();
          self.bindEsc();
        }, 450);
      } else {
        $('.' + self.$els.input, self.$els.item).blur();
        this.unBindDoc();
        this.unBindEsc();
      }
    },

    close: function () {
      $(this.$els.item).removeClass(this.states.active);
      $('.' + this.$els.input, this.$els.item).blur();
      this.unBindDoc();
      this.unBindEsc();
    }
  };

  return def;
}();

$(function () {
  $('.header-search').data('headerSearch', new SearchControl($('.header-search')));
});

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Sidebar
 */



var Sidebar = module.exports = function () {

  var def = function (el) {
    this.$els = {
      'item': el,
      'headers': $('.sidebar-title-link', el)
    };
    this.states = {
      collapsed: 'is-collapsed'
    };
    init.call(this);
  };

  var init = function () {
    this.bind();
  };

  def.prototype = {
    bind: function () {
      var self = this;
      $(this.$els.headers).on("click", function (e) {
        self.toggleDiv($(this));
      });
    },

    toggleDiv: function ($control) {
      $control.closest('.search-section').toggleClass(this.states.collapsed);
    }
  };

  return def;
}();

$(function () {
  $('.sidebar.sidebar-search').each(function () {
    new Sidebar(this);
  });
});

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Slider Master
 */



var Slider = __webpack_require__(72);

var SliderMaster = module.exports = function () {
  var def = function () {
    init.call(this);
  };
  var init = function () {
    this.goForIt();
  };

  def.prototype = {
    goForIt: function () {
      //check for desktop only sliders
      $(window).on('break-greater-than-tablet', function () {
        $('.slider-desktop').each(function () {
          if (!$(this).hasClass('.jnpr-slider')) {
            // ignore .jnpr-slider instances
            if ($(this).hasClass('swipe')) {
              return;
            } else {
              $(this).addClass('swipe slider');
              $(this).data('slider', new Slider(this, { 'isDesktopOnly': true }));
            }
          }
        });
      });

      // instantiate all by default
      $('.slider').each(function () {
        if (!$(this).hasClass('.jnpr-slider')) {
          // ignore .jnpr-slider instances
          $(this).data(new Slider(this));
        }
      }).data('Slider');

      // switch to three col layout if less than 4 child items
      $('.slider-mobile .slice-4col, .slider-desktop .slice-4col').each(function () {
        var $slicer = $(this);
        if (!$(this).hasClass('.jnpr-slider')) {
          // ignore .jnpr-slider instances
          if ($slicer.children().length < 4) {
            $slicer.removeClass('slice-4col');
            $slicer.addClass('slice-3col');
          }
        }
      });

      var promoWrapper = $('.swipe-wrap'),
          promoItems = $('.slide-item', promoWrapper),
          promoArrows = promoWrapper.parent().siblings('.promo-slider-control'),
          promoMobileNav = promoWrapper.siblings('.slider-control-wrapper');

      if (promoItems.length <= 1) {
        promoArrows.addClass('hidden');
        promoMobileNav.addClass('is-hidden');
      }

      // WHY
      $(window).on('break-mobile break-small break-tablet', function () {
        var sliderItem = $('.slider-desktop');
        $('.swipe-wrap', sliderItem).css('width', $('.list-slider', sliderItem).length * 300 + 30 + 'vw');
      });

      // WHY
      $(window).on('break-mobile', function () {
        // mobile only slider
        $('.slider-mobile').each(function () {
          if (!$(this).hasClass('.jnpr-slider')) {
            // ignore .jnpr-slider instances
            if ($('.slide-item', this).hasClass('mobile-slide-item')) {
              return;
            } else {
              $(this).addClass('swipe');
              $('.slide-item', this).each(function (i) {
                $(this).addClass('mobile-slide-item');
                if (i <= 1) {
                  $(this).eq(i - 1).addClass('opacity-one').css('z-index', '3');
                }
              });
              this.slider = new Slider(this, { 'is_mobile_only': true });
            }
          }
        });
      });
    }
  };

  return def;
}();

$(function () {
  new SliderMaster();
});

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Sticky
 */



var Sticky = module.exports = function () {

  var def = function (el) {
    this.$el = $(el);
    init.call(this);
  };

  var init = function () {
    this.$sticker = this.$el.find('.sticker');
    this.setContainerHeight();
    this.tabletActive = false;
    this.scrollBreakActive = false;
    this.bind();
  };

  def.prototype = {

    bind: function () {
      var self = this,
          $win = $(window);

      $win.on('break-small break-mobile break-tablet', function () {
        self.setTabletState(true);
      });

      $win.on('break-greater-than-tablet', function () {
        self.setTabletState(false);
      });

      $win.scroll(function () {
        self.setScrollBreakState($win.scrollTop() > self.$el.offset().top);
      });
    },

    setTabletState: function (setActive) {
      if (setActive !== this.tabletActive) {
        this.tabletActive = setActive;
        this.updateStickyState();
      }
    },

    setScrollBreakState: function (setActive) {
      if (setActive !== this.scrollBreakActive) {
        this.scrollBreakActive = setActive;
        this.updateStickyState();
      }
    },

    updateStickyState: function () {
      this.$el.toggleClass('is-stuck', !this.tabletActive && this.scrollBreakActive);
    },

    setContainerHeight: function () {
      this.$el.css({ height: this.$sticker.outerHeight() });
    }
  };

  return def;
}();

$(function () {
  $('.sticky-bar').each(function () {
    new Sticky(this);
  });
});

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Subnav
 */



var SubNav = module.exports = function () {
  var def = function (el) {
    this.$els = {
      'item': el,
      'sub': '.sub-nav',
      'back': '.back-up'
    };

    this.states = {
      'active': 'sub-nav-show',
      'activeBack': 'back-up-show',
      'arrow': 'icon-arrow-up icon-arrow-down'
    };

    init.call(this);
  };

  var init = function () {
    this.bind();
  };

  def.prototype = {
    bind: function () {
      var self = this;
      $(this.$els.item).on('click', function (e) {
        e.preventDefault();
        self.toggle();
      });
    },

    toggle: function () {
      $(this.$els.sub).toggleClass(this.states.active); // not contextualized on purpose
      $(this.$els.back).toggleClass(this.states.activeBack); // not contextualized on purpose
      $('i', this.$els.item).toggleClass(this.states.arrow);
    }
  };

  return def;
}();

$(function () {
  $('.mobile-accordion-link').each(function () {
    $(this).data('subNav', new SubNav(this));
  });
});

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Tabcordion
 */



var Hash = __webpack_require__(67),
    _ = __webpack_require__(1);

var TabCordion = module.exports = function () {

  var def = function (el) {
    this.$els = {
      'item': el,
      'control': '.tab-cordion-header',
      'children': '.tab-cordion-child',
      'parent': $(el).parent()
    };
    init.call(this);
  };

  var init = function () {
    this.states = {
      'activeTab': 'tab-cordion-active'
    };

    this.settingHeight = false;

    // Init Hash
    this.hash = new Hash();
    this.hash.subscribe(['tab'], $.proxy(this.onHashChanged, this));

    //set the initial height
    this.setHeight();
    this.setTopOffset();
    this.bind();

    var defaultTabTitle = $(this.$els.children).eq(0).find('.tab-cordion-header').data('tab-title');
    this.hash.init('tab=' + defaultTabTitle);
  };

  def.prototype = {

    bind: function () {
      var self = this;

      $(this.$els.control, this.$els.item).on('click', function (e) {
        e.preventDefault();
        self.hash.setHashParams({
          tab: $(this).attr('data-tab-title')
        });
      });

      $('.youtube-video', this.$els.item).on('click', function () {
        self.setHeight();
      });

      $('.' + this.states.activeTab + ' .tab-cordion-content ', this.$els.item).on('DOMSubtreeModified', function () {
        self.setHeight();
      });

      $(window).on('load orientationchange', function () {
        if ($(window).width() > 640) {
          var thisHeight = _.once(self.setHeight());
          if (self.settingHeight === false) {
            thisHeight();
          }
        }
      });

      var throttledHeight = _.throttle(function () {
        self.setHeight();
      }, 350);

      $(window).resize(function () {
        throttledHeight();
      });
    },

    onHashChanged: function (params) {
      if (params === null) {
        return;
      }
      this.toggleTab(params.tab.values[0]);
    },

    toggleTab: function (code) {
      var _class = this.states.activeTab;
      $(this.$els.children + '.' + _class, this.$els.item).removeClass(_class);
      $('[data-tab-title="' + code + '"]').parent().addClass(_class);
      this.setHeight();
      if ($(window).width() < 769) {
        $('html, body').animate({
          scrollTop: $('[data-tab-title="' + code + '"]').parent().offset().top - 60
        }, 50);
      }
    },

    setTopOffset: function () {
      var pos = $(this.$els.item).outerHeight() + 20;
      $('.tab-cordion-content', $(this.$els.item)).each(function () {
        $(this).css({ 'top': pos });
      });
    },

    setHeight: function (scroll) {
      this.settingHeight = true;
      var self = this,
          h = '';

      if ($(window).width() > 769) {
        h = $('.' + this.states.activeTab + ' .tab-cordion-content ', this.$els.item).outerHeight() + 80 + $(self.$els.item).outerHeight() + 20 + 'px';
        this.$els.parent.animate({ 'height': h }, 210, function () {
          $(self.$els.item).trigger('doneSettingHeight');
          self.settingHeight = false;
        });
      } else {
        h = 'auto';
        this.$els.parent.css('height', h);
        $(self.$els.item).trigger('doneSettingHeight');
        self.settingHeight = false;
      }

      if ($('html').hasClass('ie9')) {
        window.setTimeout(function () {
          $('body').addClass('b').removeClass('b');
        }, 400);
      }
      this.setTopOffset();
    }
  };

  return def;
}();

$(function () {
  $('.tab-cordion').each(function () {
    new TabCordion(this);
  });
});

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 * Tab Switcher
 */



var Utils = __webpack_require__(0);

var TabSwitcher = module.exports = function () {

  var def = function (el, options) {
    this.els = {
      $root: $(el)
    };

    this.initOpts = options || {};

    init.call(this);
  };

  var init = function () {
    this.visible = _.has(this.initOpts, 'visible') ? this.initOpts.visible : true;
    this.activateTab(0);
    this.bind();
  };

  def.prototype = {

    select: {
      control: '.tab-control',
      tab: '.tab',
      controlBorder: '.tab-border',
      controlList: '.tab-control-list'
    },

    states: {
      tabActive: 'tab-is-active',
      controlActive: 'tab-control-is-active',
      ie8Active: 'ie8-is-active'
    },

    bind: function () {
      var self = this,
          ignoreEventBubbling = false;

      // handle tab switcher click events
      $(this.select.control, this.els.$root).on("click", function (e) {
        e.preventDefault();
        self.activateTab($(self.select.control, self.els.$root).index(this));
      });

      // propagate show/hide events to content
      this.els.$root.on('show hide', function (e) {
        e.stopPropagation();
        if (!ignoreEventBubbling) {
          // ignore same event bubbling back up
          ignoreEventBubbling = true;
          self.visible = e.type === 'show';
          self.notifyVisibility(self.activeTab(), self.visible);
          ignoreEventBubbling = false;
        }
      });
    },

    // returns DOM element of active tab, or null if none active
    activeTab: function () {
      return $(this.select.tab + '.' + this.states.tabActive, this.els.$root)[0];
    },

    // returns index of the active tab, or null if none
    activeTabIndex: function () {
      var tab = this.activeTab();
      return tab ? $(tab).eq(0).index(this.select.tab) : null;
    },

    // switches to tab at index number
    // and fires visibility events for old and new tabs if tab switcher is visible
    activateTab: function (at) {
      // don't reactivate a current tab
      if (at !== this.activeTabIndex()) {
        // set border position
        this.setBorderState(at);

        // Use jQuery fade for IE8/9 and CSS transitions otherwise
        if (Utils.isIE(8)) {
          this.jQueryFadeTabs(at);
          this.selectTabEl(this.els.$root, this.select.tab, this.states.ie8Active, at, '.icon'); // RESP-1120
        } else if (Utils.isIE()) {
          // any other version of IE
          this.jQueryFadeTabs(at);
        } else {
          this.notifyVisibility(this.activeTab(), false); // send hide event to old tab contents
          this.setActiveTabClasses(at); // update classes
          this.notifyVisibility(this.activeTab(), true); // send show event to new tab contents
        }
      }
    },

    // Send show/hide events to content elements.
    // Only sent if tab switcher is visible and element exists.
    notifyVisibility: function (tabEl, visible) {
      if (tabEl) {
        $(tabEl).children().trigger(visible && this.visible ? 'show' : 'hide');
      }
    },

    jQueryFadeTabs: function (at) {
      var self = this,
          $tabs = $(this.select.tab, this.els.$root),
          $old = $tabs.filter('.' + this.states.tabActive),
          $new = $tabs.eq(at);

      /***************************
        / disabling crossfade for the moment... this...
      /***************************/
      self.setActiveTabClasses(at);
      $new.show();
      $new.siblings(self.select.tab).hide();
      this.notifyVisibility($new[0], true); // lets the tab take any needed action
      $old.each(function () {
        self.notifyVisibility(this, false);
      });

      /***************************
        / instead of this...
      /***************************/

      // // this happens at the end whether or not there was already an active tab
      // function completion() {
      // 	$new.css('z-index', 10);
      // 	$new.siblings(self.select.tab).hide();
      // 	self.setActiveTabClasses(at);
      // 	if ($old[0]) {
      // 		self.notifyVisibility($old[0], false);
      // 	}
      // }
      // // process begins here
      // $new.show();
      // $new.addClass(self.states.tabActive); // enables correct display of elements
      // self.notifyVisibility($new[0], true); // lets the tab take any needed action

      // if ($old.length > 0) {
      // 	$new.css('z-index', 9);
      // 	$old.css('z-index', 10);
      // 	$old.fadeOut(700, completion);
      // } else {
      // 	completion();
      // }
    },

    setActiveTabClasses: function (at) {
      // set tab and active control
      this.selectTabEl(this.els.$root, this.select.tab, this.states.tabActive, at);
      this.selectTabEl(this.els.$root, this.select.control, this.states.controlActive, at);
    },

    setBorderState: function (at) {
      var count = $(this.select.controlList).hasClass('slice-4col') ? 4 : $(this.select.control, this.els.$root).length;

      if (count) {
        $(this.select.controlBorder, this.els.$root).css('left', 100 * at / count + '%');
      }
    },

    // convenience function:
    // applies the [cls] to the element of [selector] at [index]
    // or to the subselected element(s) within it if [subselect] provided
    selectTabEl: function (container, selector, cls, index, subselect) {
      var $el = $(selector, container).eq(index);
      $('.' + cls, container).removeClass(cls);
      (subselect ? $el.find(subselect) : $el).addClass(cls);
    }
  };

  return def;
}();

$(function () {
  $('.tab-view').each(function () {
    // initially not visible if inside an overlay
    var withinOverlay = $(this).closest('.overlay').length > 0;
    $(this).data('tab', new TabSwitcher(this, { visible: !withinOverlay }));
  });
});

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * ThreedGallery
 */



var Utils = __webpack_require__(0),
    HoverFooter = __webpack_require__(13),
    SuperSlider = __webpack_require__(4);

var ThreedGallery = module.exports = function () {

  var def = function (el, options) {
    this.els = {
      $root: $(el)
    };
    this.initOpts = options || {};
    init.call(this);
  };

  var init = function () {
    this.visible = _.has(this.initOpts, 'visible') ? this.initOpts.visible : true;
    this.els.$slider = $(this.select.slider, this.els.$root);
    this.els.$title = $(this.select.title, this.els.$root);
    this.els.$slides = $(this.select.slides, this.els.$slider);
    this.$currentThreedViewer = null;
    this.createResizeScreen();
    this.createNav(); // create hover-footer containing thumbnails
    this.instantiateSliders();
    this.bind();
  };

  def.prototype = {

    template: {
      thumbnails: '<div class="slider-control-wrapper slide-control-overlay tab-footer"><div class="wrapper"><div class="jnpr-slider jnpr-slider-group-auto jnpr-slider-desktop jnpr-slider-dots-none jnpr-slider-arrows clearfix"><div class="swipe-wrap clearfix"><ul class="slide-item list list-unstyled list-slider"></ul></div><div class="jnpr-slider-arrows-container"></div></div></div></div>',
      resizingScreen: '<div class="resizing-screen" />',
      thumbnail: '<li class="list-slider-item slider-control"><a href="#/"></a></li>',
      thumbImage: '<div class="thumbnail-image" />'
    },

    select: {
      sliderWrapper: '.overlay-gallery-wrapper',
      resizingScreen: '.resizing-screen',
      slider: '.overlay-gallery-wrapper .jnpr-slider',
      slides: '.3d-slide > *',
      title: '.overlay-title',
      footer: '.tab-footer',
      thumbnailSlider: '.tab-footer .jnpr-slider',
      thumbnails: '.list-slider-item',
      thumbsInnerWrap: '.slide-item',
      thumbInnerWrap: 'a',
      thumbImage: '.thumbnail-image'
    },

    bind: function () {
      var self = this,
          ignoreEventBubbling = false;

      this.els.$root.on('slid', function (e, pIndex) {
        if (pIndex === self.slideIndex) {
          return;
        }
        self.$thumbnailSlider().trigger('active-item', pIndex);
        if (self.visible) {
          self.loadThreeDViewer(pIndex);
        }
      });

      this.els.$root.on('show hide', function (e) {
        e.stopPropagation();
        if (!ignoreEventBubbling) {
          // do not respond to event recursion from bubbling
          ignoreEventBubbling = true;
          self.nowVisible(e.type === 'show');
          ignoreEventBubbling = false;
        }

        // If hide
        if (e.type === 'hide') {
          self.els.$slides.each(function (index) {
            self.els.$slides.eq(index).data('threedviewer').destroy();
          });
          self.slideIndex = null;
          self.els.$slider.trigger('goto', 0);
        }
      });

      $(window).resize(function () {
        self.positionResizeScreen();
      });
    },

    bindThumbnails: function () {
      var self = this,
          $thumbnails = this.$thumbnailSlider().find(this.select.thumbnails);

      $thumbnails.on('click', function (e) {
        var el = this,
            index = $thumbnails.index(el);
        self.$thumbnailSlider().trigger('active-item', index);
        self.els.$slider.trigger('goto', index);
      });
    },

    createNav: function () {
      // if there is anything to navigate...
      if (this.els.$slides.length > 1) {
        if ($(this.select.thumbnails, this.els.$root).length === 0) {
          this.els.$root.append(this.createThumbnails());
        }
        if ($('.hover-footer', this.els.$root).length === 0) {
          new HoverFooter($(this.select.footer, this.els.$root));
        }
      }
    },

    createResizeScreen: function () {
      if (!Utils.isIE(8)) {
        // only makes things worse in IE8
        $(this.select.sliderWrapper, this.els.$root).append($(this.template.resizingScreen));
      }
    },

    // Position white screen to block flashes of next slide when resizing.
    positionResizeScreen: function () {
      var self = this,
          sliderRight = this.els.$slider.position().left + this.els.$slider.outerWidth();
      // wait for other resizing activities to complete
      _.defer(function () {
        $(self.select.resizingScreen, self.els.$root).css('left', sliderRight - 1);
      }, 100);
    },

    // create sliders
    instantiateSliders: function ($el) {
      var $thumbnailSlider;
      if (this.els.$slider.length > 0) {
        this.slideIndex = 0;
        new SuperSlider(this.els.$slider, { visible: false });
        $thumbnailSlider = this.$thumbnailSlider();
        if ($thumbnailSlider.length > 0) {
          new SuperSlider($thumbnailSlider, { visible: false });
          $thumbnailSlider.trigger('active-item', 0);
          this.bindThumbnails();
        }
      }
    },

    createThumbnails: function () {
      var $el = $(this.template.thumbnails),
          $inner = $(this.select.thumbsInnerWrap, $el),
          index,
          srcUrl,
          $thumb;

      for (index = 0; index < this.els.$slides.length; index++) {

        // get thumbnail image url from the slide's data-thumbnail attribute
        srcUrl = this.els.$slides.eq(index).data('thumbnail');

        // for the moment going around the templates to get stuff working
        $thumb = $('<li />', {
          'class': 'list-slider-item slider-control',
          'html': $('<a />', {
            'href': '#/',
            'html': $('<div />', {
              'class': 'thumbnail-image',
              'data-image': srcUrl
            })
          })
        });

        $inner.append($thumb);
      }
      return $el;
    },

    nowVisible: function (show) {
      var propagateEvent = show ? 'show' : 'hide';

      this.visible = show;
      this.els.$slider.trigger(propagateEvent);
      this.$thumbnailSlider().trigger(propagateEvent);

      if (show) {
        this.positionResizeScreen();
        this.showFooterBriefly();
        this.loadThreeDViewer(0);

        var $thumbnailSlider = this.$thumbnailSlider();
        if ($thumbnailSlider.length > 0) {
          this.$thumbnailSlider().trigger('active-item', 0);
        }
      }
    },

    // stop / reset any running video
    loadThreeDViewer: function (index) {
      var title = this.els.$slides.eq(index).data('threedviewer-title');
      this.els.$title.html(title);

      if (!this.els.$slides.eq(index).data('threedviewer').isInitialized()) {
        this.els.$slides.eq(index).data('threedviewer').init(index);
      }
      this.slideIndex = index;
    },

    showFooterBriefly: function () {
      $(this.select.footer, this.els.$root).trigger('show-briefly');
    },

    hideFooter: function () {
      $(this.select.footer, this.els.$root).trigger('hide');
    },

    $thumbnailSlider: function () {
      return $(this.select.thumbnailSlider, this.els.$root);
    }
  };

  return def;
}();

$(function () {
  $('.threedgallery').each(function () {
    new ThreedGallery(this, { visible: $(this).closest('.overlay').length === 0 });
  });
});

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * 3D Viewer
 */



var Utils = __webpack_require__(0),
    KeyshotVR = __webpack_require__(68),
    Responsive = __webpack_require__(3);

var ThreeDViewer = module.exports = function () {

  var def = function (el) {
    this.els = {
      $root: $(el),
      $container: $(el).find('.threedviewer-container'),
      $viewer: null
    };
    this.initialized = false;
  };

  def.prototype = {
    init: function (index) {
      this.index = index;
      this.bind();
      this.initialized = true;
    },

    isInitialized: function () {
      return this.initialized;
    },

    bind: function () {
      var self = this;

      this.options = this.els.$root.data();

      $(window).resize($.proxy(self.size, this));

      this.build();
      this.addHand();
      window.setTimeout(function () {
        self.removeHand();
      }, 4000);
    },

    size: function () {
      var elH = $(window).height() - parseFloat(this.els.$root.css('padding-top'), 10) - $('.overlay-title').outerHeight(true) - $('.hover-footer-trigger').outerHeight(true);

      var $footerHover = $('.hover-footer-trigger');
      if ($footerHover.length > 0) {
        elH -= $footerHover.height();
      }

      var elW = $(window).width() - 2 * parseFloat($('.overlay-gallery-wrapper').css('padding-left'), 10);
      var ratioW = this.options.threedviewerImagewidth / elW;
      var ratioH = this.options.threedviewerImageheight / elH;
      var imgRatio = this.options.threedviewerImagewidth / this.options.threedviewerImageheight;

      if (ratioW <= 1 && ratioH <= 1) {
        this.els.$container.width(this.options.threedviewerImagewidth);
        this.els.$container.height(this.options.threedviewerImageheight);
      } else {
        // Height 100%
        if (ratioH >= ratioW) {
          this.els.$container.height('100%');
          this.els.$container.width(this.els.$container.height() * imgRatio);
          // Width 100%
        } else {
          this.els.$container.width('100%');
          var H = this.els.$container.width() * imgRatio;
          if (parseInt(H, 10) === 0) {
            H = 'auto';
          }
          this.els.$container.height(H);
        }
      }
    },

    //
    // @function    getOptions
    // @returns     options depending on device size
    //
    getOptions: function () {
      // Desktop
      var desktopOpts = {
        folder: this.options.threedviewerFolder,
        imagewidth: this.options.threedviewerImagewidth,
        imageheight: this.options.threedviewerImageheight,
        ucount: this.options.threedviewerUcount,
        vcount: this.options.threedviewerVcount,
        ustartindex: this.options.threedviewerUstartindex,
        vstartindex: this.options.threedviewerVstartindex
      };

      // Mobile
      var mobileOpts = {
        folder: this.options.threedviewerMobileFolder,
        imagewidth: this.options.threedviewerMobileImagewidth,
        imageheight: this.options.threedviewerMobileImageheight,
        ucount: this.options.threedviewerMobileUcount,
        vcount: this.options.threedviewerMobileVcount,
        ustartindex: this.options.threedviewerMobileUstartindex,
        vstartindex: this.options.threedviewerMobileVstartindex
      };

      var currentSize = Responsive.getSize();
      return currentSize === 'small' || currentSize === 'mobile' ? mobileOpts : desktopOpts;
    },

    build: function () {
      this.els.$viewer = $('<div id="threedviewer_' + this.index + '"></div>');
      this.els.$container.append(this.els.$viewer);
      this.size();

      var opts = this.getOptions();

      var nameOfDiv = 'threedviewer_' + this.index;
      var folderName = opts.folder;
      var imageWidth = opts.imagewidth;
      var imageHeight = opts.imageheight;
      var backgroundColor = '#FFFFFF';
      var uCount = opts.ucount;
      var vCount = opts.vcount;
      var uWrap = true;
      var vWrap = false;
      var uMouseSensitivity = -0.050000;
      var vMouseSensitivity = 0.075000;
      var uStartIndex = opts.ustartindex;
      var vStartIndex = opts.vstartindex;
      var minZoom = 1.000000;
      var maxZoom = 2.000000;
      var rotationDamping = 0.960000;
      var downScaleToBrowser = true;
      var addDownScaleGUIButton = false;
      var downloadOnInteraction = false;
      var imageExtension = 'jpg';
      var showLoading = true;
      var loadingIcon = '/assets/img/threedviewer/loader.' + (Utils.isIE() ? 'gif' : 'svg');
      var allowFullscreen = false;

      this.keyshotvr = new KeyshotVR(nameOfDiv, folderName, imageWidth, imageHeight, backgroundColor, uCount, vCount, uWrap, vWrap, uMouseSensitivity, vMouseSensitivity, uStartIndex, vStartIndex, minZoom, maxZoom, rotationDamping, downScaleToBrowser, addDownScaleGUIButton, downloadOnInteraction, imageExtension, showLoading, loadingIcon, allowFullscreen);
    },

    addHand: function () {
      this.$hand = $('<img class="hand" src="/assets/img/threedviewer/hand_arrow_icon.svg"/>');
      this.els.$container.append(this.$hand);
    },

    removeHand: function () {
      this.$hand.fadeOut(300, function () {
        $(this).remove();
      });
    },

    remove: function () {
      this.els.$container.html('');
    },

    destroy: function () {
      this.keyshotvr = null;
      delete this.keyshotvr;
      delete this.index;
      this.remove();
      this.initialized = false;
    }
  };

  return def;
}();

$(function () {
  $('.jnpr-threedviewer').each(function () {
    $(this).data('threedviewer', new ThreeDViewer(this));
  });
});

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Twitter
 */



var Twitter = module.exports = function () {

  var def = function (el) {
    this.$els = {
      'item': el
    };

    this.states = {
      'font': 't-antenna-extralight'
    };

    init.call(this);
  };

  var init = function () {
    this.bind();
  };

  def.prototype = {
    bind: function () {
      var self = this;

      $(window).on('load', function () {
        self.custom();
      });
    },

    custom: function () {
      // Define the style variables
      var $backgroundColor = "transparent";
      var $font = "";
      var $fontWeight = "normal";
      var $borderColor = "#ffffff";
      var $borderRadius = "0px";
      var $textColor = "#ffffff";
      var $linkColor = "#ffffff";
      var $nameColor = "#ffffff";
      var $subtextColor = "#ffffff"; // Colour of any small text
      var $sublinkColor = "#ffffff"; // Colour of smaller links, eg: @user, date, expand/collapse links
      var $avatarBorder = "0px solid #ffffff";
      var $avatarBorderRadius = "0";
      var $iconColor = ""; // Color of the reply/retweet/favourite icons
      var $iconHoverColor = ""; // Hover color the reply/retweet/favourite icons
      var $headerBackground = "";
      var $headerTextColor = "";
      var $followButtonLinkColor = "#ffffff";
      var $footerBackground = "";
      var $footerTweetboxBackground = "";
      var $footerTweetboxTextcolor = "";
      var $footerTweetboxBorder = "";
      var $loadMoreBackground = "transparent";
      var $loadMoreTextColor = "#ffffff";

      // Apply the styles
      $("#twitter-widget-0").contents().find('head').append('<style>html, body, h1, h2, h3, blockquote, p, ol, ul, li, img, iframe, button, .tweet-box-button{font-family: "' + $font + '" !important;font-weight:' + $fontWeight + ' !important;} .timeline{border-radius: ' + $borderRadius + '!important;} .thm-dark .retweet-credit,.h-feed, .stats-retweets, .stats-favorites, .stats strong{color:' + $textColor + ' !important;}a:not(.follow-button):not(.tweet-box-button):not(.expand):not(.u-url), .load-more{color:' + $linkColor + ' ;} .follow-button{color:' + $followButtonLinkColor + ' !important;} .timeline-header{background:' + $headerBackground + '; border-radius:' + $borderRadius + ' ' + $borderRadius + ' 0px 0px;} .timeline-header h1 a{color:' + $headerTextColor + ' !important;} .timeline-footer{border-radius:0px 0px ' + $borderRadius + ' ' + $borderRadius + ' !important; background:' + $footerBackground + ' !important;} .tweet-box-button{background-color:' + $footerTweetboxBackground + ' !important; color:' + $footerTweetboxTextcolor + ' !important; border:' + $footerTweetboxBorder + ' !important;} .timeline .stream, .tweet-actions{background:' + $backgroundColor + ' !important;} .tweet-actions{box-shadow:0 0 10px 5px' + $backgroundColor + ' !important;} .ic-mask{background-color:' + $iconColor + ' !important;} a:hover .ic-mask, a:focus .ic-mask{background-color:' + $iconHoverColor + ' !important;} .header .avatar{border-radius: ' + $avatarBorderRadius + ' !important; border:' + $avatarBorder + ' !important;} .p-name{color:' + $nameColor + ' !important;} .customisable-border{border-color:' + $borderColor + ' !important;} span.p-nickname, .u-url, .expand{color:' + $sublinkColor + ' !important;} .load-more, .no-more-pane {background-color:' + $loadMoreBackground + ' !important; color:' + $loadMoreTextColor + '!important;} .retweet-credit{color:' + $subtextColor + ' !important;}</style>');
    }
  };

  return def;
}();

$(function () {
  $('.twitter-profile-box').each(function () {
    new Twitter(this);
  });
});

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Update box
 */



var UpdateBox = module.exports = function () {

  var def = function (el) {
    this.$els = {
      'item': el,
      'control': '.update-control',
      'icon': '.update-control .icon',
      'activeAccordion': '.update-accordion-active'
    };

    this.rel = $(this.$els.item).attr('data-relationship');
    this.$acc = $('.update-accordion[data-relationship="' + this.rel + '"]');
    this.$rem = this.$acc.find('.update-close');
    this.$arrow = this.$acc.find('.update-control .icon');

    // get title of update box to set cookie based on title
    this.domTitle = $('.header', this.$el).html();

    this.states = {
      'arrowUp': 'icon-arrow-up-white',
      'active': 'update-accordion-active',
      'hidden': 'hidden'
    };

    init.call(this);
  };

  var init = function () {
    this.bind();
    this.checkCookie();
  };

  def.prototype = {
    bind: function () {
      var self = this;

      this.$rem.on('click', function () {
        self.removeUpdate();
      });

      this.$arrow.on("click", function () {
        self.toggleList();
        // console.log('toggle clicked');
      });
    },
    toggleList: function () {
      if ($(this.$els.item).hasClass(this.states.active)) {
        this.close();
      } else {
        this.open();
      }
    },
    open: function (allClosed) {
      var self = this;
      this.$acc.removeClass(this.states.active);
      this.$arrow.removeClass(this.states.arrowUp);

      window.setTimeout(function () {
        self.$acc.addClass(self.states.active);
        self.$arrow.addClass(self.states.arrowUp);
      }, 500);
    },
    close: function () {
      this.$acc.removeClass(this.states.active);
      this.$arrow.removeClass(this.states.arrowUp);
    },
    removeUpdate: function () {
      this.$acc.hide();
    },
    checkCookie: function () {
      //checks for cookie on update accordian and applies state change
      var updateRm = $.cookie('noUpdate-' + this.domTitle);
      if (updateRm !== 'viewed') {
        this.$acc.addClass(this.states.active);
        this.$rem.removeClass(this.states.hidden);
        $(this.$els.icon).addClass(this.states.arrowUp);
        //if no cookie, add cookie, expires 30 days
        $.cookie('noUpdate-' + this.domTitle, 'viewed', { expires: 30 });
      }
    }
  };

  return def;
}();

$(function () {
  $('.update-accordion').each(function () {
    new UpdateBox(this);
  });
});

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Background Video Cover
 */



var _ = __webpack_require__(1);

var backgroundVideoSelector = '[data-video-background]';

var BackgroundVideoCoverItem = function (videoContainer) {
    this.videoContainer = videoContainer;
    this.setVideo();
};

BackgroundVideoCoverItem.prototype.getVideoDimensions = function () {
    this.bgVideoWidth = $(this.video).outerWidth();
    this.bgVideoHeight = $(this.video).outerHeight();
    this.bgVideoAspectRatio = this.bgVideoWidth / this.bgVideoHeight;
};

BackgroundVideoCoverItem.prototype.setVideo = function (videoUrl) {
    var _this = this;

    this.videoUrl = videoUrl !== undefined & typeof videoUrl === 'string' ? videoUrl : this.videoContainer.getAttribute('data-video-background');
    var videoPlayerTemplate = _.template('<video loop class="background-video">' + ' <source src="<%-data.videoUrl%>" type="video/mp4" />' + 'Your browser does not support the video tag. Please upgrade your browser.' + '</video>');

    this.videoContainer.insertAdjacentHTML('afterbegin', videoPlayerTemplate({ data: { videoUrl: this.videoUrl } }));
    this.video = this.videoContainer.firstElementChild;
    this.videoContainer.bgVideo = this.video;

    this.getVideoDimensions();

    this.video.addEventListener("loadstart", function () {
        this.play();
    });

    this.video.addEventListener("loadedmetadata", function () {
        _this.getVideoDimensions();
        BackgroundVideoCoverCtrl.scaleBackgroundVideoCoverSize();
    });
};

BackgroundVideoCoverItem.prototype.setWidth = function (value) {
    $(this.video).width(value);
};

var BackgroundVideoCoverCtrl = function () {
    var bgVideoList = [];
    var resizeTimer = null;

    function scan() {
        bgVideoList = [];
        var bgVideos = Array.prototype.slice.call(document.querySelectorAll(backgroundVideoSelector));
        bgVideos.forEach(function (elem) {
            bgVideoList.push(new BackgroundVideoCoverItem(elem));
        });
    }

    function scaleBackgroundVideoCoverSize() {
        bgVideoList.forEach(function (bgVideo) {
            var marqueeWidth = $(bgVideo.videoContainer).outerWidth();
            var marqueeHeight = $(bgVideo.videoContainer).outerHeight();
            var videoWidthToSet = bgVideo.bgVideoWidth;

            var marqueeAspectRatio = marqueeWidth / marqueeHeight;

            if (bgVideo.bgVideoAspectRatio > marqueeAspectRatio) {
                videoWidthToSet = marqueeHeight * bgVideo.bgVideoAspectRatio;
            } else if (bgVideo.bgVideoAspectRatio <= marqueeAspectRatio) {
                videoWidthToSet = marqueeWidth;
            }

            bgVideo.setWidth(videoWidthToSet);
        });
    }

    function setEventListeners() {
        var _scope = {
            resizeTimer: resizeTimer,
            scaleBackgroundVideoCoverSize: scaleBackgroundVideoCoverSize,
            bgVideoList: bgVideoList
        };

        $(window).on('resize', function () {
            window.clearTimeout(_scope.resizeTimer);
            _scope.resizeTimer = window.setTimeout(function () {
                _scope.scaleBackgroundVideoCoverSize();
            }, 10);
        });

        _scope.scaleBackgroundVideoCoverSize();
    }

    function init() {
        scan();
        setEventListeners();
    };

    document.addEventListener('DOMContentLoaded', init, false);

    return {
        scaleBackgroundVideoCoverSize: scaleBackgroundVideoCoverSize
    };
}();

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * View more
 */



var ViewMore = module.exports = function () {

  var def = function (el) {
    this.$els = {
      'item': el,
      'view': '.' + $(el).attr('data-relationship'),
      'products': '.show-more-products'
    };

    this.publicStates = {
      'closed': $(this.$els.item).attr('data-copy'),
      'open': $(this.$els.item).html()
    };

    this.isOpen = false;

    init.call(this);
  };

  var init = function () {
    this.bind();
  };

  def.prototype = {
    bind: function () {
      var self = this;

      // If 'show-more-products' elements on the page, display element
      if ($(this.$els.products).length > 0) {
        $(this.$els.item).show();
        $(this.$els.item).on('click', function (e) {
          e.preventDefault();
          self.isOpen = !self.isOpen;
          self.toggleView();
        });
      }
    },
    toggleView: function () {
      $(this.$els.view).toggleClass('is-show-active', this.isOpen);
      $(this.$els.item).html(!this.isOpen ? this.publicStates.open : this.publicStates.closed);
    }
  };

  return def;
}();

$(function () {
  $('.view-more-button').each(function () {
    new ViewMore(this);
  });
});

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v2.2.4
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-05-20T17:23Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Support: Firefox 18+
// Can't be in strict mode, several libs including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
//"use strict";
var arr = [];

var document = window.document;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	version = "2.2.4",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = jQuery.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isFunction: function( obj ) {
		return jQuery.type( obj ) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {

		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		// adding 1 corrects loss of precision from parseFloat (#15100)
		var realStringObj = obj && obj.toString();
		return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
	},

	isPlainObject: function( obj ) {
		var key;

		// Not plain objects:
		// - Any object or value whose internal [[Class]] property is not "[object Object]"
		// - DOM nodes
		// - window
		if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		// Not own constructor property must be Object
		if ( obj.constructor &&
				!hasOwn.call( obj, "constructor" ) &&
				!hasOwn.call( obj.constructor.prototype || {}, "isPrototypeOf" ) ) {
			return false;
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own
		for ( key in obj ) {}

		return key === undefined || hasOwn.call( obj, key );
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}

		// Support: Android<4.0, iOS<6 (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		var script,
			indirect = eval;

		code = jQuery.trim( code );

		if ( code ) {

			// If the code includes a valid, prologue position
			// strict mode pragma, execute code by injecting a
			// script tag into the document.
			if ( code.indexOf( "use strict" ) === 1 ) {
				script = document.createElement( "script" );
				script.text = code;
				document.head.appendChild( script ).parentNode.removeChild( script );
			} else {

				// Otherwise, avoid the DOM node creation, insertion
				// and removal by using an indirect global eval

				indirect( code );
			}
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE9-11+
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

// JSHint would error on this code due to the Symbol not being defined in ES5.
// Defining this global in .jshintrc would create a danger of using the global
// unguarded in another place, it seems safer to just disable JSHint for these
// three lines.
/* jshint ignore: start */
if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}
/* jshint ignore: end */

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: iOS 8.2 (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.2.1
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-10-17
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// http://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, nidselect, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rescape, "\\$&" );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
					while ( i-- ) {
						groups[i] = nidselect + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, parent,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( (parent = document.defaultView) && parent.top !== parent ) {
		// Support: IE 11
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( document.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var m = context.getElementById( id );
				return m ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibing-combinator selector` fails
			if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( (oldCache = uniqueCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		} );

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
	} );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i,
			len = this.length,
			ret = [],
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					// Support: Blackberry 4.6
					// gEBID returns nodes no longer in the document (#6963)
					if ( elem && elem.parentNode ) {

						// Inject the element directly into the jQuery object
						this.length = 1;
						this[ 0 ] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

				// Always skip document fragments
				if ( cur.nodeType < 11 && ( pos ?
					pos.index( cur ) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector( cur, selectors ) ) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnotwhite = ( /\S+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( jQuery.isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];

							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this === promise ? newDefer.promise() : this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add( function() {

					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 ||
				( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred.
			// If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// Add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.progress( updateFunc( i, progressContexts, progressValues ) )
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject );
				} else {
					--remaining;
				}
			}
		}

		// If we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
} );


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {

	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
} );

/**
 * The ready event handler and self cleanup method
 */
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called
		// after the browser event has already occurred.
		// Support: IE9-10 only
		// Older IE sometimes signals "interactive" too soon
		if ( document.readyState === "complete" ||
			( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

			// Handle it asynchronously to allow scripts the opportunity to delay ready
			window.setTimeout( jQuery.ready );

		} else {

			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed );
		}
	}
	return readyList.promise( obj );
};

// Kick off the DOM ready check even if the user does not
jQuery.ready.promise();




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			len ? fn( elems[ 0 ], key ) : emptyGet;
};
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	/* jshint -W018 */
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	register: function( owner, initial ) {
		var value = initial || {};

		// If it is a node unlikely to be stringify-ed or looped over
		// use plain assignment
		if ( owner.nodeType ) {
			owner[ this.expando ] = value;

		// Otherwise secure it in a non-enumerable, non-writable property
		// configurability must be true to allow the property to be
		// deleted with the delete operator
		} else {
			Object.defineProperty( owner, this.expando, {
				value: value,
				writable: true,
				configurable: true
			} );
		}
		return owner[ this.expando ];
	},
	cache: function( owner ) {

		// We can accept data for non-element nodes in modern browsers,
		// but we should not, see #8335.
		// Always return an empty object.
		if ( !acceptData( owner ) ) {
			return {};
		}

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		if ( typeof data === "string" ) {
			cache[ data ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ prop ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :
			owner[ this.expando ] && owner[ this.expando ][ key ];
	},
	access: function( owner, key, value ) {
		var stored;

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			stored = this.get( owner, key );

			return stored !== undefined ?
				stored : this.get( owner, jQuery.camelCase( key ) );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i, name, camel,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key === undefined ) {
			this.register( owner );

		} else {

			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {

				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = key.concat( key.map( jQuery.camelCase ) );
			} else {
				camel = jQuery.camelCase( key );

				// Try the string as a key before any manipulation
				if ( key in cache ) {
					name = [ key, camel ];
				} else {

					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					name = camel;
					name = name in cache ?
						[ name ] : ( name.match( rnotwhite ) || [] );
				}
			}

			i = name.length;

			while ( i-- ) {
				delete cache[ name[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <= 35-45+
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://code.google.com/p/chromium/issues/detail?id=378607
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :

					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data, camelKey;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// with the key as-is
				data = dataUser.get( elem, key ) ||

					// Try to find dashed key if it exists (gh-2779)
					// This is for 2.2.x only
					dataUser.get( elem, key.replace( rmultiDash, "-$&" ).toLowerCase() );

				if ( data !== undefined ) {
					return data;
				}

				camelKey = jQuery.camelCase( key );

				// Attempt to get data from the cache
				// with the key camelized
				data = dataUser.get( elem, camelKey );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, camelKey, undefined );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			camelKey = jQuery.camelCase( key );
			this.each( function() {

				// First, attempt to store a copy or reference of any
				// data that might've been store with a camelCased key.
				var data = dataUser.get( this, camelKey );

				// For HTML5 data-* attribute interop, we have to
				// store property names with dashes in a camelCase form.
				// This might not apply to all properties...*
				dataUser.set( this, camelKey, value );

				// *... In the case of properties that might _actually_
				// have dashes, we need to also store a copy of that
				// unchanged property.
				if ( key.indexOf( "-" ) > -1 && data !== undefined ) {
					dataUser.set( this, key, value );
				}
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {

		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" ||
			!jQuery.contains( elem.ownerDocument, elem );
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted,
		scale = 1,
		maxIterations = 20,
		currentValue = tween ?
			function() { return tween.cur(); } :
			function() { return jQuery.css( elem, prop, "" ); },
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		do {

			// If previous iteration zeroed out, double until we get *something*.
			// Use string for doubling so we don't accidentally see scale as unchanged below
			scale = scale || ".5";

			// Adjust and apply
			initialInUnit = initialInUnit / scale;
			jQuery.style( elem, prop, initialInUnit + unit );

		// Update scale, tolerating zero or NaN from tween.cur()
		// Break the loop if scale is unchanged or perfect, or if we've just had enough.
		} while (
			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
		);
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([\w:-]+)/ );

var rscriptType = ( /^$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE9
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE9
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE9-11+
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret = typeof context.getElementsByTagName !== "undefined" ?
			context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== "undefined" ?
				context.querySelectorAll( tag || "*" ) :
			[];

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], ret ) :
		ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( jQuery.type( elem ) === "object" ) {

				// Support: Android<4.1, PhantomJS<2
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android<4.1, PhantomJS<2
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0-4.3, Safari<=5.1
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Safari<=5.1, Android<4.2
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<=11+
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE9
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, j, ret, matched, handleObj,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Support (at least): Chrome, IE9
		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		//
		// Support: Firefox<=42+
		// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
		if ( delegateCount && cur.nodeType &&
			( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push( { elem: cur, handlers: matches } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
		"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split( " " ),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: ( "button buttons clientX clientY offsetX offsetY pageX pageY " +
			"screenX screenY toElement" ).split( " " ),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX +
					( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
					( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY +
					( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
					( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: Cordova 2.5 (WebKit) (#13255)
		// All events should have a target; Cordova deviceready doesn't
		if ( !event.target ) {
			event.target = document;
		}

		// Support: Safari 6.0+, Chrome<28
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android<4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://code.google.com/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {
	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,

	// Support: IE 10-11, Edge 10240+
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName( "tbody" )[ 0 ] ||
			elem.appendChild( elem.ownerDocument.createElement( "tbody" ) ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		isFunction = jQuery.isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( isFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( isFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android<4.1, PhantomJS<2
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <= 35-45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <= 35-45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {

	// Keep domManip exposed until 3.0 (gh-2225)
	domManip: domManip,

	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: QtWebKit
			// .get() because push.apply(_, arraylike) throws
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );


var iframe,
	elemdisplay = {

		// Support: Firefox
		// We have to pre-define these values for FF (#10227)
		HTML: "block",
		BODY: "block"
	};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */

// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		display = jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
				.appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = iframe[ 0 ].contentDocument;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}
var rmargin = ( /^margin/ );

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var documentElement = document.documentElement;



( function() {
	var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE9-11+
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
		"padding:0;margin-top:1px;position:absolute";
	container.appendChild( div );

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {
		div.style.cssText =

			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" +
			"position:relative;display:block;" +
			"margin:auto;border:1px;padding:1px;" +
			"top:1%;width:50%";
		div.innerHTML = "";
		documentElement.appendChild( container );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";
		reliableMarginLeftVal = divStyle.marginLeft === "2px";
		boxSizingReliableVal = divStyle.width === "4px";

		// Support: Android 4.0 - 4.3 only
		// Some styles come back with percentage values, even though they shouldn't
		div.style.marginRight = "50%";
		pixelMarginRightVal = divStyle.marginRight === "4px";

		documentElement.removeChild( container );
	}

	jQuery.extend( support, {
		pixelPosition: function() {

			// This test is executed only once but we still do memoizing
			// since we can use the boxSizingReliable pre-computing.
			// No need to check if the test was already performed, though.
			computeStyleTests();
			return pixelPositionVal;
		},
		boxSizingReliable: function() {
			if ( boxSizingReliableVal == null ) {
				computeStyleTests();
			}
			return boxSizingReliableVal;
		},
		pixelMarginRight: function() {

			// Support: Android 4.0-4.3
			// We're checking for boxSizingReliableVal here instead of pixelMarginRightVal
			// since that compresses better and they're computed together anyway.
			if ( boxSizingReliableVal == null ) {
				computeStyleTests();
			}
			return pixelMarginRightVal;
		},
		reliableMarginLeft: function() {

			// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
			if ( boxSizingReliableVal == null ) {
				computeStyleTests();
			}
			return reliableMarginLeftVal;
		},
		reliableMarginRight: function() {

			// Support: Android 2.3
			// Check if div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container. (#3333)
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			// This support function is only executed once so no memoizing is needed.
			var ret,
				marginDiv = div.appendChild( document.createElement( "div" ) );

			// Reset CSS: box-sizing; display; margin; border; padding
			marginDiv.style.cssText = div.style.cssText =

				// Support: Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;box-sizing:content-box;" +
				"display:block;margin:0;border:0;padding:0";
			marginDiv.style.marginRight = marginDiv.style.width = "0";
			div.style.width = "1px";
			documentElement.appendChild( container );

			ret = !parseFloat( window.getComputedStyle( marginDiv ).marginRight );

			documentElement.removeChild( container );
			div.removeChild( marginDiv );

			return ret;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		style = elem.style;

	computed = computed || getStyles( elem );
	ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;

	// Support: Opera 12.1x only
	// Fall back to style even without computed
	// computed is undefined for elems on document fragments
	if ( ( ret === "" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {
		ret = jQuery.style( elem, name );
	}

	// Support: IE9
	// getPropertyValue is only needed for .css('filter') (#12537)
	if ( computed ) {

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// http://dev.w3.org/csswg/cssom/#resolved-values
		if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE9-11+
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?

		// If we already have the right measurement, avoid augmentation
		4 :

		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {

			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// At this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {

			// At this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// At this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// Some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {

		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test( val ) ) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// Use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = dataPriv.get( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {

			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = dataPriv.access(
					elem,
					"olddisplay",
					defaultDisplay( elem.nodeName )
				);
			}
		} else {
			hidden = isHidden( elem );

			if ( display !== "none" || !hidden ) {
				dataPriv.set(
					elem,
					"olddisplay",
					hidden ? display : jQuery.css( elem, "display" )
				);
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// Support: IE9-11+
			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				style[ name ] = value;
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}
		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
					elem.offsetWidth === 0 ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						} ) :
						getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = extra && getStyles( elem ),
				subtract = extra && augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				);

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ name ] = value;
				value = jQuery.css( elem, name );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// Support: Android 2.3
jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			return swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE9
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {

		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE9-10 do not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			dataPriv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
			style.display = "inline-block";
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show
				// and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = dataPriv.access( elem, "fxshow", {} );
		}

		// Store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done( function() {
				jQuery( elem ).hide();
			} );
		}
		anim.done( function() {
			var prop;

			dataPriv.remove( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		} );
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( jQuery.isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					jQuery.proxy( result.stop, result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {
	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnotwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ?
		opt.duration : opt.duration in jQuery.fx.speeds ?
			jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	window.clearInterval( timerId );

	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: iOS<=5.1, Android<=4.2+
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE<=11+
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: Android<=2.3
	// Options inside disabled selects are incorrectly marked as disabled
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE<=11+
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {

					// Set corresponding property to false
					elem[ propName ] = false;
				}

				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle;
		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ name ];
			attrHandle[ name ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				name.toLowerCase() :
				null;
			attrHandle[ name ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				return tabindex ?
					parseInt( tabindex, 10 ) :
					rfocusable.test( elem.nodeName ) ||
						rclickable.test( elem.nodeName ) && elem.href ?
							0 :
							-1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {
			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




var rclass = /[\t\r\n\f]/g;

function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnotwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnotwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( type === "string" ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = value.match( rnotwhite ) || [];

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + getClass( elem ) + " " ).replace( rclass, " " )
					.indexOf( className ) > -1
			) {
				return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g,
	rspaces = /[\x20\t\r\n\f]+/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?

					// Handle most common string cases
					ret.replace( rreturn, "" ) :

					// Handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ?
								!option.disabled : option.getAttribute( "disabled" ) === null ) &&
							( !option.parentNode.disabled ||
								!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];
					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




support.focusin = "onfocusin" in window;


// Support: Firefox
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome, Safari
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = jQuery.now();

var rquery = ( /\?/ );



// Support: Android 2.3
// Workaround failure to string-cast null input
jQuery.parseJSON = function( data ) {
	return JSON.parse( data + "" );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE9
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

		// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// The jqXHR state
			state = 0,

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {

								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" ).replace( rhash, "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE8-11+
			// IE throws exception if url is malformed, e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE8-11+
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( state === 2 ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );

				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapAll( html.call( this, i ) );
			} );
		}

		if ( this[ 0 ] ) {

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function() {
		return this.parent().each( function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		} ).end();
	}
} );


jQuery.expr.filters.hidden = function( elem ) {
	return !jQuery.expr.filters.visible( elem );
};
jQuery.expr.filters.visible = function( elem ) {

	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	// Use OR instead of AND as the element is not visible if either is true
	// See tickets #10406 and #13132
	return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {

			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					} ) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE9
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE9
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = callback( "error" );

				// Support: IE9
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = jQuery.trim( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var docElem, win,
			elem = this[ 0 ],
			box = { top: 0, left: 0 },
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		box = elem.getBoundingClientRect();
		win = getWindow( doc );
		return {
			top: box.top + win.pageYOffset - docElem.clientTop,
			left: box.left + win.pageXOffset - docElem.clientLeft
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
		// because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume getBoundingClientRect is there when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {

			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari<7-8+, Chrome<37-44+
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {

					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	} );
} );


jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	},
	size: function() {
		return this.length;
	}
} );

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
		return jQuery;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}



var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}

return jQuery;
}));


/***/ }),
/* 55 */,
/* 56 */,
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Hash
 */



module.exports = function () {

  var Subscriber = function (hashParams, cb) {
    var _subscriptions = hashParams,
        _cb = cb;

    var notify = function (params) {
      _cb.call(this, params);
    };

    return {
      subscriptions: function () {
        return _subscriptions;
      },
      notify: notify
    };
  };

  var def = function () {
    this._fn = {
      hash: '',
      hashParams: {},
      subscribers: [],
      subscribedPerParams: {},
      history: window.history,
      muted: false
    };

    return this;
  };

  // @function      isHashChangeSupported
  // @role          check if hash changed is supported
  // @returns       boolean
  //
  var isHashChangeSupported = function () {
    var eventName = 'onhashchange';
    var isSupported = eventName in document.body;
    if (!isSupported) {
      document.body.setAttribute(eventName, 'return;');
      isSupported = typeof document.body[eventName] === 'function';
    }
    // documentMode logic from YUI to filter out IE8 Compat Mode (which generates false positives).
    return isSupported && (document.documentMode === undefined || document.documentMode > 7);
  };

  // @function      clone
  // @role          clone element
  // @returns       element cloned
  //
  var clone = function (obj) {
    var out = [],
        i = 0;
    if (isArr(obj)) {
      var len = obj.length;
      for (; i < len; i++) {
        out[i] = clone(obj[i]);
      }
      return out;
    }
    if (typeof obj === 'object') {
      for (i in obj) {
        out[i] = clone(obj[i]);
      }
      return out;
    }
    return obj;
  };

  // @function      isArr
  // @role          is the element an array
  // @returns       boolean
  //
  var isArr = function (obj) {
    return Object.prototype.toString.call(obj) === '[object Array]';
  };

  // @function      areEqual
  // @role          are two values equal
  // @returns       boolean
  //
  var areEqual = function (obj1, obj2) {
    // If new obj2 is undefined or null -> new param
    if (typeof obj2 === "undefined" || obj2 === null) {
      return true;
    }

    // Strings ?
    if (typeof obj1 === 'string') {
      return obj1 === obj2;
      // Arrays ?
    } else if (isArr(obj1) && isArr(obj2)) {
      if (obj1.length !== obj2.length) {
        return true;
      }
      return obj1.sort().join() !== obj2.sort().join();
    }
  };

  def.prototype = {

    // Init
    init: function (defaultHash) {
      // Setup
      if (isHashChangeSupported()) {
        if (window.addEventListener) {
          window.addEventListener('hashchange', $.proxy(this.checkIfHashHasChanged, this), false);
        } else if (window.attachEvent) {
          window.attachEvent('onhashchange', $.proxy(this.checkIfHashHasChanged, this), this);
        }
      } else {
        // Change Opera navigation mode to improve history support.
        if (this._fn.history.navigationMode) {
          this._fn.history.navigationMode = 'compatible';
        }
        window.setInterval($.proxy(this.checkIfHashHasChanged, this), 50);
      }

      // First default hash ( direct access or default )
      var curHash = this.getHash();
      if (curHash !== '') {
        this.checkIfHashHasChanged();
      } else if (defaultHash !== '') {
        this.setHash(defaultHash);
      }
    },

    // @function      subscribe
    // @role          subscribe to hash
    //
    subscribe: function (hashParams, cb) {
      // New subscriber
      var subscriber = new Subscriber(hashParams, cb),
          subscriberIdx = this._fn.subscribers.push(subscriber);

      // Register params that subscriber is subscribing to
      for (var p in hashParams) {
        var paramName = hashParams[p];
        if (paramName in this._fn.subscribedPerParams === false) {
          this._fn.subscribedPerParams[paramName] = [];
        }
        this._fn.subscribedPerParams[hashParams[p]].push(subscriberIdx - 1);
      }
    },

    // @function      getHash
    // @role          get current hash
    // @returns       string
    //
    getHash: function () {
      var index = window.location.href.indexOf('#');
      return index === -1 ? '' : window.location.href.substr(index + 1);
    },

    // @function      setHash
    // @role          set hash
    //
    setHash: function (newHash) {
      if (newHash === this._fn.hash) {
        return;
      }
      window.location.hash = newHash;
    },

    // @function      getHashParams
    // @role          build hash params array from hash string
    // @returns       Array of hash params (names & values)
    //
    getHashParams: function (pHashStr) {
      // Use current hash if not specified
      var hashStr = pHashStr || this.getHash();

      var currHashParams = {};

      if (hashStr.length > 0) {
        var cutParamType = hashStr.split('&');
        for (var j in cutParamType) {
          var paramObj = cutParamType[j].split('=');
          if (paramObj[1].length > 0) {
            var paramValues = paramObj[1].split(',');
            currHashParams[paramObj[0]] = paramValues;
          }
        }
      }

      return currHashParams;
    },

    // @function      setHashParams
    // @role          set hash params
    //
    setHashParams: function (hashParamsArr) {
      var hashStr = this.buildHashFromParams(hashParamsArr);
      this.setHash(hashStr);
    },

    // @function      updateHashParam
    // @role          update on hash param in the hash
    //
    updateHashParam: function (name, value) {
      var curParams = $.extend([], this._fn.hashParams);
      curParams[name] = value;
      // Set hash params
      this.setHashParams(curParams);
    },

    // Mute
    mute: function () {
      this._fn.muted = true;
    },

    // Unmute
    unmute: function () {
      this._fn.muted = false;
    },

    // @function      checkIfHashHasChanged
    // @role          check if hash changed
    //
    checkIfHashHasChanged: function () {
      var curHash = this.getHash();
      if (curHash !== this._fn.hash && !this._fn.muted) {
        // Hash has changed
        this.hashHasChanged(curHash);
      }

      // Save for later
      this._fn.hash = curHash;
      this._fn.hashParams = clone(this.getHashParams(curHash));

      if (this._fn.muted) {
        this.unmute();
      }
    },

    // @function      buildHashFromParams
    // @role          build hash from params
    // @returns       string
    //
    buildHashFromParams: function (hashParamsArr) {
      var hashParams = [];
      for (var i in hashParamsArr) {
        hashParams.push(i + '=' + (isArr(hashParamsArr[i]) ? hashParamsArr[i].join(',') : hashParamsArr[i]));
      }
      return hashParams.join('&');
    },

    // @function      hashHasChanged
    // @role          called when hash has changed
    //
    hashHasChanged: function (curHash) {
      var tmpHashParams = this.getHashParams(curHash);
      var changedParams = this.getChangedParams(tmpHashParams);
      this._fn.hashParams = clone(tmpHashParams);
      if (Object.keys(changedParams).length > 0) {
        this.notifySubscribers(changedParams);
      }
    },

    // @function      getChangedParams
    // @role          Get the paramaters that changed since last hash change
    // @returns       Array of changed params
    //
    getChangedParams: function (params) {
      var changed = {};

      // For each param
      for (var p in params) {
        changed[p] = {
          changed: areEqual(params[p], this._fn.hashParams[p]),
          values: clone(params[p])
        };
      }

      return changed;
    },

    // @function      notifySubscribers
    // @role          Notify subscribers if one of the parameters they subscribed to has changed
    //
    notifySubscribers: function (params) {
      for (var s in this._fn.subscribers) {
        var subscriptions = this._fn.subscribers[s].subscriptions(),
            paramsToNotify = {};

        for (var ss in subscriptions) {
          var subscription = subscriptions[ss];
          if (subscription in params) {
            paramsToNotify[subscription] = params[subscription];
          }
        }

        if (Object.keys(paramsToNotify).length > 0) {
          this._fn.subscribers[s].notify(paramsToNotify);
        }
      }
    }
  };

  return def;
}();

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Bubble
 */



module.exports = function () {

  var def = function (el, parent, isInitallyOpen) {
    this.$els = {
      'item': el,
      'parent': parent,
      'related': '.bubble-inner-data',
      'back': '.bubble-backlnk',
      'topper': '.bubble-top',
      'person': '.partner-person',
      'main': '.bubble-wrapper-main'
    };

    this.isInitallyOpen = isInitallyOpen;

    this.rel = $(this.$els.item).attr('data-rel');
    this.target = $(this.$els.related + '[data-rel="' + this.rel + '"]');

    this.states = {
      'targetOpen': 'is-active',
      'top': 'bubble-top-level',
      'topperHidden': 'is-hidden',
      'personMod': 'alt-view'
    };

    this.options = {
      'topperHeight': $('.bubble-top').outerHeight()
    };

    init.call(this);
  };

  var init = function () {

    if (this.hashAddressedGroup() === this.rel) {
      this.hideTopper();
    }

    this.bind();

    $('.bubble-top-level').on('click', function () {
      $('.no-hero').addClass('mobile-height');
    });
    $(this.$els.back).on('click', function () {
      $('.no-hero').removeClass('mobile-height');
    });
  };

  def.prototype = {
    bind: function () {
      var self = this;
      $(this.$els.item).on('click', function (e) {
        if (!$(self.$els.item).attr('href')) {
          self.beginOpening(this); // only animate if not a link
        }
      });

      $(this.$els.back, this.target).on('click', function () {
        self.showTopper();
      });

      $(this.$els.item).on('parentDoneHiding', function () {
        self.hideTopper();
      });
    },

    beginOpening: function (item) {
      this.currentlyOpen = $(item);
      this.$els.parent.hideAll(item, $(this.$els.item));
    },

    hideTopper: function () {
      $(this.$els.main).addClass(this.states.topperHidden);
      this.open(this.currentlyOpen);
      this.$els.parent.slide();
    },

    showTopper: function () {
      this.close(this.currentlyOpen);
      $(this.$els.main).removeClass(this.states.topperHidden);
      this.$els.parent.slide();
    },

    hashAddressedGroup: function () {
      var result = /question-group-(\d+)$/.exec(window.location.hash);
      return result ? result[1] : null;
    },

    open: function () {
      var self = this;
      self.target.addClass(self.states.targetOpen);
      window.location.hash = "question-group-" + self.rel;
      $(self.$els.person).addClass(self.states.personMod);
      window.setTimeout(function () {
        self.$els.parent.setHeight();
      }, 250);
    },

    close: function () {
      var self = this;
      this.currentlyOpen = "";

      this.target.removeClass(this.states.targetOpen);
      $(self.$els.person).removeClass(self.states.personMod);
      window.setTimeout(function () {
        self.$els.parent.showAll();
        self.$els.parent.setHeight(true);
      }, 300);
    }
  };

  return def;
}();

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Bubble Group
 */



var Bubble = __webpack_require__(58);

module.exports = function () {

  var def = function (el) {
    this.$els = {
      'item': el,
      'topBubbles': '.bubble-top-level',
      'hiddenS': '.bubble-inner-data'
    };

    this.states = {
      'bubbleHidden': 'is-hidden',
      'gone': 'is-gone'
    };

    this.options = {
      'totalHeight': $(this.$els.item).outerHeight()
    };

    init.call(this);
  };

  var init = function () {
    var self = this;

    // have to build this set height function to deal with the css problems... aka. the hans brinker
    this.ogHeight = this.setHeight();

    // for each bubble - create new sub-bubble - passing this as the second argument for parent
    $(this.$els.topBubbles).each(function () {
      self.createBubble(this);
    });

    this.bind();
  };

  def.prototype = {

    bind: function () {},

    setHeight: function (override) {
      // var self= this,
      // 		h = '';

      // if(override) {
      // 	h = this.ogHeight;
      // } else {
      // 	h = $('.partner-page-wrapper').height() + $('.bubble-inner-data.is-active').height() + 50;
      // }

      // $('.partner').animate({height : h}, 300);
      // return h;
    },

    createBubble: function (item) {
      $(item).data('bubble', new Bubble(item, this));
    },

    hideAll: function (item, caller) {
      var self = this;
      $(this.$els.topBubbles).addClass(this.states.bubbleHidden);
      window.setTimeout(function () {
        $(self.$els.topBubbles).addClass(self.states.gone);
        caller.trigger('parentDoneHiding');
      }, 350);
    },

    showAll: function (item) {
      $(this.$els.topBubbles).removeClass(this.states.gone);
      $(this.$els.topBubbles).removeClass(this.states.bubbleHidden);
    },

    slide: function () {
      $(this.$els.item).toggleClass('is-active');
    }
  };

  return def;
}();

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Compcard
 */



var Utils = __webpack_require__(0);

module.exports = function () {

  var def = function (el, compTable) {
    this.el = $(el);
    this.prodId = this.el.data('product');
    this.header = $('.compcard-block-header[data-product="' + this.prodId + '"]');
    this.blocks = this.el.find('.compcard-block');
    this.compare = this.header.find('.compcard-header-compare');
    this.remove = this.header.find('.compcard-header-remove');

    this.compTable = compTable;
    this.cloud = this.compTable.ui.cloud;
    this.toggle = this.createToggleSwitch();

    init.call(this);
  };

  var init = function () {
    this.setState({ lock: false, remove: false });
    this.bind();
  };

  def.prototype = {

    bind: function () {
      var self = this;
      this.toggle.on('click', function () {
        $(self).trigger('productClicked', { product: self.prodId, type: 'compare' });
      });
      this.compare.on('click', function () {
        $(self).trigger('productClicked', { product: self.prodId, type: 'pin' });
      });
      this.compare.on('mouseover mouseout', _.bind(this.toggleLockClicked, this, false)); // clean up after click sequence
      this.remove.on('click', function () {
        $(self).trigger('productClicked', { product: self.prodId, type: 'forceRemove' });
      });
    },

    createToggleSwitch: function () {
      var $toggle = $('<div />', {
        'class': 'compcard-toggle',
        'text': this.productTitle(),
        'data-product': this.productId()
      });
      this.cloud.append($toggle);

      return $toggle;
    },

    setBlockData: function () {
      this.blocks.each(_.bind(function (i, el) {
        var $el = $(el);
        $el.data('interior', this.getBlockHeight($el));
      }, this));
    },

    productTitle: function () {
      return $('.compcard-header', this.header).text();
    },

    productId: function () {
      return this.prodId;
    },

    toggleLock: function (lock) {
      // no arg means toggle
      this.setState({ lock: typeof lock === "undefined" ? !this.lockState : lock });
      this.toggleLockClicked(true);
    },

    // `clicked` class is used to override hover state attributes
    // immediately following a click, so toggle will appear successful
    toggleLockClicked: function (clicked) {
      this.compare.toggleClass('clicked', clicked);
    },

    toggleRemove: function (remove) {
      // no arg means toggle
      this.setState({ remove: typeof remove === "undefined" ? !this.removeState : remove });
    },

    setState: function (opts) {
      var lock = !!opts.lock,
          remove = !!opts.remove;

      // safety check (for IE): if removing, must not be the only card
      if (remove && this.compTable.countCards({ visible: true }) < 2) {
        return; // no updates made
      }

      if (!_.isNull(remove) && remove !== this.removeState) {
        this.removeState = remove;
        this.header.toggleClass('is-removed', remove);
        this.el.toggleClass('is-removed', remove);
        this.toggle.toggleClass('is-active', !remove);
        this.maintainJustOneActive();
        if (!opts.preventTrigger) {
          this.el.trigger(remove ? 'comp:card:remove' : 'comp:card:add', [this]);
        }
      }

      if (!_.isNull(remove) && lock !== this.lockState) {
        this.lockState = lock;
        this.header.toggleClass('is-locked', lock);
        this.el.toggleClass('is-locked', lock);
        if (lock) {
          this.appendToLockOrder();
        } else {
          this.removeFromLockOrder();
        }
        if (!opts.preventTrigger) {
          this.el.trigger(lock ? 'comp:card:lock' : 'comp:card:unlock', [this]);
        }
      }
    },

    appendToLockOrder: function () {
      // next ordinal lock number = length of current number of lock numbers
      this.lockOrder = _.filter(this.compTable.cards, function (card) {
        return _.isNumber(card.lockOrder);
      }).length;
    },

    removeFromLockOrder: function () {
      // clear this card's lock order
      this.lockOrder = null;
      // re-ordinalize any remaining locked columns
      _.chain(this.compTable.cards).where({ lockState: true }).sortBy('lockOrder').each(function (card, index) {
        card.lockOrder = index;
      });
    },

    maintainJustOneActive: function () {
      var onlyOneActive = _.reject(this.compTable.cards, function (card) {
        return card.removeState;
      }).length === 1;

      _.each(this.compTable.cards, function (card) {
        card.setOnlyActive(onlyOneActive && !card.removeState);
      });
    },

    setOnlyActive: function (bool) {
      this.header.toggleClass('only-active', bool);
      this.el.toggleClass('only-active', bool);
      this.toggle.toggleClass('only-active', bool);
    },

    setWidth: function (width) {
      this.width = width;
      this.el.css('width', width);
      this.header.css('width', width);
    },

    setPosition: function (position) {
      this.position = position;
    },

    // set positive horizontal pixel offset within scrolling area
    setTransform: function (offset) {
      var $targets = this.el.add(this.header),
          left = this.position + (this.lockState ? 0 : offset),
          transform;

      if (Utils.isIE(8) || Utils.isIE(9)) {
        if (this.el.hasClass('is-animating')) {
          $targets.animate({ left: left });
        } else {
          $targets.css({ left: left });
        }
      } else {
        transform = 'translate(' + left + 'px,0)';
        $targets.css({
          '-webkit-transform': transform,
          '-khtml-transform': transform,
          '-moz-transform': transform,
          '-ms-transform': transform,
          'transform': transform
        });
      }
    },

    setAnimating: function (animating) {
      this.el.add(this.header).toggleClass('is-animating', animating);
    },

    getBlockHeight: function (el) {
      var heights = el.children().map(function () {
        var $this = $(this);
        if ($this.hasClass('js-nocomp')) {
          return 0;
        }
        return $this.outerHeight(true);
      }).get();

      heights.push(el.innerHeight() - el.height());

      return _.reduce(heights, function (sum, h) {
        return sum + h;
      }, 0);
    },

    // make sure the card header icons (compare / remove) refresh correctly in IE8.
    maintainIE8: function () {
      $('.compcard-header-compare, .compcard-header-remove', this.el).css({ position: 'fixed', top: -1000 }).css({ position: 'absolute', top: '' });
    }

  };

  return def;
}();

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Components - Billboard
 */



var ScrolledIntoViewCtrl = __webpack_require__(2);

(function () {
    document.registerElement('jnpr-billboard', {
        prototype: Object.create(HTMLElement.prototype, {
            attachedCallback: {
                value: function () {
                    this.parseAttributes();
                    ScrolledIntoViewCtrl.add(this);
                }
            },
            attributeChangedCallback: {
                value: function (name, previousValue, value) {
                    var ADDED = 1;
                    var CHANGED = 2;
                    var REMOVED = 3;

                    var changeState = previousValue == null ? ADDED : value == null ? REMOVED : CHANGED;

                    switch (name) {
                        case 'data-background':
                            this.style.backgroundImage = 'url(' + value + ')';
                            break;
                        case 'data-video-background':
                            // this.videoInsert(value);
                            // this.videoInit();
                            break;
                    }
                }
            },
            parseAttributes: {
                value: function () {
                    var _scope = this;
                    var attributeList = Array.prototype.slice.call(this.attributes);

                    attributeList.forEach(function (attribute) {
                        _scope.attributeChangedCallback(attribute.name, null, attribute.value);
                    });
                }
            }
        })
    });
})();

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Components - Marquee
 */
var ScrolledIntoViewCtrl = __webpack_require__(2);

(function () {
    document.registerElement('jnpr-marquee', {
        prototype: Object.create(HTMLElement.prototype, {
            createdCallback: {
                value: function () {}
            },
            attachedCallback: {
                value: function () {
                    var marqueeAside = this.querySelector('.jnpr-marquee-aside');

                    this.parseAttributes();
                    if (marqueeAside !== undefined && marqueeAside !== null && typeof marqueeAside === 'object') {
                        $(this).addClass('faceted');
                    } else {
                        $(this).removeClass('faceted');
                    }
                    ScrolledIntoViewCtrl.add(this);
                }
            },
            attributeChangedCallback: {
                value: function (name, previousValue, value) {
                    var ADDED = 1;
                    var CHANGED = 2;
                    var REMOVED = 3;

                    var changeState = previousValue == null ? ADDED : value == null ? REMOVED : CHANGED;

                    switch (name) {
                        case 'data-background':
                            this.style.backgroundImage = 'url(' + value + ')';
                            break;
                        case 'data-video-background':
                            // this.videoInsert(value);
                            // this.videoInit();
                            break;
                    }
                }
            },
            parseAttributes: {
                value: function () {
                    var _scope = this;
                    var attributeList = Array.prototype.slice.call(this.attributes);

                    attributeList.forEach(function (attribute) {
                        _scope.attributeChangedCallback(attribute.name, null, attribute.value);
                    });
                } //,
                // NOTE: This is taken over by videoBackground.js for the time being—until 2.0 framework.
                // videoInsert: {
                //     value: function(videoUrl) {
                //         // Add video to the DOM
                //         var videoPlayerTemplate = _.template(
                //             '<video autoplay loop class="fillCover">' +
                //                 ' <source src="<%-data.videoUrl%>" type="video/mp4" />' +
                //                 'Your browser does not support the video tag. Please upgrade your browser.' +
                //             '</video>'
                //         );
                //         $('jnpr-marquee').append(videoPlayerTemplate({
                //             data: {
                //                 videoUrl: videoUrl
                //             }
                //         }));
                //     }
                // },
                // videoInit: {
                //     value: function() {
                //         var _scope = this;

                //         this.resizeTimer = null;

                //         $(window).on('resize', function() {
                //             clearTimeout(_scope.resizeTimer);
                //             _scope.resizeTimer = setTimeout(function() {
                //                 _scope.scaleBannerVideoSize();
                //             }, 100);
                //         });

                //         _scope.scaleBannerVideoSize();
                //     }
                //},

                // scaleBannerVideoSize: {
                //     value: function() {
                //         this.bgVideo = this.bgVideo || $(this).find('video');
                //         this.bgVideoWidth = this.bgVideoWidth || this.bgVideo.innerWidth();
                //         this.bgVideoHeight = this.bgVideoHeight || this.bgVideo.innerHeight();
                //         this.bgVideoAspectRatio = this.bgVideoAspectRatio || (this.bgVideoHeight/this.bgVideoWidth);

                //         var marqueeWidth = $(this).innerWidth();
                //         var marqueeHeight = $(this).innerHeight();
                //         var videoWidthToSet = this.bgVideoWidth;

                //         var marqueeAspectRatio = marqueeHeight/marqueeWidth;

                //         if (this.bgVideoAspectRatio > marqueeAspectRatio) {
                //             videoWidthToSet = marqueeWidth;
                //         } else if (this.bgVideoAspectRatio <= marqueeAspectRatio) {
                //             videoWidthToSet = marqueeHeight / this.bgVideoAspectRatio;
                //         }

                //         $(this.bgVideo).width( videoWidthToSet );
                //     }
                // }
            } })
    });
})();

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Components - Mosaic
 */



var ScrolledIntoViewCtrl = __webpack_require__(2);

(function () {
    document.registerElement('jnpr-mosaic', {
        prototype: Object.create(HTMLElement.prototype, {
            attachedCallback: {
                value: function () {
                    // ScrolledIntoViewCtrl.add(this);
                }
            }
        })
    });
})();

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Components - Quick Links
 */



var ScrolledIntoViewCtrl = __webpack_require__(2);

(function () {
    document.registerElement('jnpr-quick-links', {
        prototype: Object.create(HTMLElement.prototype, {
            attachedCallback: {
                value: function () {
                    ScrolledIntoViewCtrl.add(this, { children: 'li' });
                }
            }
        })
    });
})();

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Components - Ticker
 */



var ScrolledIntoViewCtrl = __webpack_require__(2);

(function () {
    document.registerElement('jnpr-ticker', {
        prototype: Object.create(HTMLElement.prototype, {
            attachedCallback: {
                value: function () {
                    ScrolledIntoViewCtrl.add(this);
                }
            }
        })
    });
})();

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Components - Tile
 */



var ScrolledIntoViewCtrl = __webpack_require__(2);

(function () {
    document.registerElement('jnpr-tile', {
        prototype: Object.create(HTMLElement.prototype, {
            attachedCallback: {
                value: function () {
                    this.init();
                    ScrolledIntoViewCtrl.add(this);
                }
            },
            init: {
                value: function () {
                    var _scope = this;
                    var attributeList = Array.prototype.slice.call(this.attributes);
                    attributeList.forEach(function (attribute) {
                        if (attribute.name === 'data-background') {
                            _scope.style.backgroundImage = 'url(' + attribute.value + ')';
                        }
                    });
                }
            }

        })
    });
})();

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Hash
 */



module.exports = function () {

  var Subscriber = function (hashParams, cb) {
    var _subscriptions = hashParams,
        _cb = cb;

    var notify = function (params) {
      _cb.call(this, params);
    };

    return {
      subscriptions: function () {
        return _subscriptions;
      },
      notify: notify
    };
  };

  var def = function () {
    this._fn = {
      hash: '',
      hashParams: {},
      subscribers: [],
      subscribedPerParams: {},
      history: window.history,
      muted: false
    };

    return this;
  };

  // @function      isHashChangeSupported
  // @role          check if hash changed is supported
  // @returns       boolean
  //
  var isHashChangeSupported = function () {
    var eventName = 'onhashchange';
    var isSupported = eventName in document.body;
    if (!isSupported) {
      document.body.setAttribute(eventName, 'return;');
      isSupported = typeof document.body[eventName] === 'function';
    }
    // documentMode logic from YUI to filter out IE8 Compat Mode (which generates false positives).
    return isSupported && (document.documentMode === undefined || document.documentMode > 7);
  };

  // @function      clone
  // @role          clone element
  // @returns       element cloned
  //
  var clone = function (obj) {
    var out = [],
        i = 0;
    if (isArr(obj)) {
      var len = obj.length;
      for (; i < len; i++) {
        out[i] = clone(obj[i]);
      }
      return out;
    }
    if (typeof obj === 'object') {
      for (i in obj) {
        out[i] = clone(obj[i]);
      }
      return out;
    }
    return obj;
  };

  // @function      isArr
  // @role          is the element an array
  // @returns       boolean
  //
  var isArr = function (obj) {
    return Object.prototype.toString.call(obj) === '[object Array]';
  };

  // @function      areEqual
  // @role          are two values equal
  // @returns       boolean
  //
  var areEqual = function (obj1, obj2) {
    // If new obj2 is undefined or null -> new param
    if (typeof obj2 === "undefined" || obj2 === null) {
      return true;
    }

    // Strings ?
    if (typeof obj1 === 'string') {
      return obj1 === obj2;
      // Arrays ?
    } else if (isArr(obj1) && isArr(obj2)) {
      if (obj1.length !== obj2.length) {
        return true;
      }
      return obj1.sort().join() !== obj2.sort().join();
    }
  };

  def.prototype = {

    // Init
    init: function (defaultHash) {
      // Setup
      if (isHashChangeSupported()) {
        if (window.addEventListener) {
          window.addEventListener('hashchange', $.proxy(this.checkIfHashHasChanged, this), false);
        } else if (window.attachEvent) {
          window.attachEvent('onhashchange', $.proxy(this.checkIfHashHasChanged, this), this);
        }
      } else {
        // Change Opera navigation mode to improve history support.
        if (this._fn.history.navigationMode) {
          this._fn.history.navigationMode = 'compatible';
        }
        window.setInterval($.proxy(this.checkIfHashHasChanged, this), 50);
      }

      // First default hash ( direct access or default )
      var curHash = this.getHash();
      if (curHash !== '') {
        this.checkIfHashHasChanged();
      } else if (defaultHash !== '') {
        this.setHash(defaultHash);
      }
    },

    // @function      subscribe
    // @role          subscribe to hash
    //
    subscribe: function (hashParams, cb) {
      // New subscriber
      var subscriber = new Subscriber(hashParams, cb),
          subscriberIdx = this._fn.subscribers.push(subscriber);

      // Register params that subscriber is subscribing to
      for (var p in hashParams) {
        var paramName = hashParams[p];
        if (paramName in this._fn.subscribedPerParams === false) {
          this._fn.subscribedPerParams[paramName] = [];
        }
        this._fn.subscribedPerParams[hashParams[p]].push(subscriberIdx - 1);
      }
    },

    // @function      getHash
    // @role          get current hash
    // @returns       string
    //
    getHash: function () {
      var index = window.location.href.indexOf('#');
      return index === -1 ? '' : window.location.href.substr(index + 1);
    },

    // @function      setHash
    // @role          set hash
    //
    setHash: function (newHash) {
      if (newHash === this._fn.hash) {
        return;
      }
      window.location.hash = newHash;
    },

    // @function      getHashParams
    // @role          build hash params array from hash string
    // @returns       Array of hash params (names & values)
    //
    getHashParams: function (pHashStr) {
      // Use current hash if not specified
      var hashStr = pHashStr || this.getHash();

      var currHashParams = {};

      if (hashStr.length > 0) {
        var cutParamType = hashStr.split('&');
        for (var j in cutParamType) {
          var paramObj = cutParamType[j].split('=');
          if (paramObj[1].length > 0) {
            var paramValues = paramObj[1].split(',');
            currHashParams[paramObj[0]] = paramValues;
          }
        }
      }

      return currHashParams;
    },

    // @function      setHashParams
    // @role          set hash params
    //
    setHashParams: function (hashParamsArr) {
      var hashStr = this.buildHashFromParams(hashParamsArr);
      this.setHash(hashStr);
    },

    // @function      updateHashParam
    // @role          update on hash param in the hash
    //
    updateHashParam: function (name, value) {
      var curParams = $.extend([], this._fn.hashParams);
      curParams[name] = value;
      // Set hash params
      this.setHashParams(curParams);
    },

    // Mute
    mute: function () {
      this._fn.muted = true;
    },

    // Unmute
    unmute: function () {
      this._fn.muted = false;
    },

    // @function      checkIfHashHasChanged
    // @role          check if hash changed
    //
    checkIfHashHasChanged: function () {
      var curHash = this.getHash();
      if (curHash !== this._fn.hash && !this._fn.muted) {
        // Hash has changed
        this.hashHasChanged(curHash);
      }

      // Save for later
      this._fn.hash = curHash;
      this._fn.hashParams = clone(this.getHashParams(curHash));

      if (this._fn.muted) {
        this.unmute();
      }
    },

    // @function      buildHashFromParams
    // @role          build hash from params
    // @returns       string
    //
    buildHashFromParams: function (hashParamsArr) {
      var hashParams = [];
      for (var i in hashParamsArr) {
        hashParams.push(i + '=' + (isArr(hashParamsArr[i]) ? hashParamsArr[i].join(',') : hashParamsArr[i]));
      }
      return hashParams.join('&');
    },

    // @function      hashHasChanged
    // @role          called when hash has changed
    //
    hashHasChanged: function (curHash) {
      var tmpHashParams = this.getHashParams(curHash);
      var changedParams = this.getChangedParams(tmpHashParams);
      this._fn.hashParams = clone(tmpHashParams);
      if (Object.keys(changedParams).length > 0) {
        this.notifySubscribers(changedParams);
      }
    },

    // @function      getChangedParams
    // @role          Get the paramaters that changed since last hash change
    // @returns       Array of changed params
    //
    getChangedParams: function (params) {
      var changed = {};

      // For each param
      for (var p in params) {
        changed[p] = {
          changed: areEqual(params[p], this._fn.hashParams[p]),
          values: clone(params[p])
        };
      }

      return changed;
    },

    // @function      notifySubscribers
    // @role          Notify subscribers if one of the parameters they subscribed to has changed
    //
    notifySubscribers: function (params) {
      for (var s in this._fn.subscribers) {
        var subscriptions = this._fn.subscribers[s].subscriptions(),
            paramsToNotify = {};

        for (var ss in subscriptions) {
          var subscription = subscriptions[ss];
          if (subscription in params) {
            paramsToNotify[subscription] = params[subscription];
          }
        }

        if (Object.keys(paramsToNotify).length > 0) {
          this._fn.subscribers[s].notify(paramsToNotify);
        }
      }
    }
  };

  return def;
}();

/***/ }),
/* 68 */
/***/ (function(module, exports) {

/**
 * Juniper
 *
 *
 * KeyShotVR
 */

var p = !0,
    s = null,
    z = !1;
module.exports = function (T, u, U, V, la, C, ma, na, oa, pa, qa, I, J, ra, sa, ta, W, ua, X, va, Y, wa, xa) {

  function N(a, b, c) {
    a.removeEventListener ? a.removeEventListener(b, c, z) : a.detachEvent && (a.detachEvent("on" + b, a["e" + b + c]), a["e" + b + c] = s);
  }

  function l(a, b, c) {
    a.addEventListener ? a.addEventListener(b, c, z) : a.attachEvent && (a["e" + b + c] = c, a.attachEvent("on" + b, function () {
      a["e" + b + c]();
    }));
  }

  function Z() {
    var a = z;-1 != navigator.platform.toString().indexOf("Win") && -1 != navigator.appVersion.indexOf("MSIE") && (a = p);
    return a;
  }

  function ya() {
    var a = document.getElementById(T),
        b = a.requestFullScreen || a.webkitRequestFullScreen || a.mozRequestFullScreen || a.msRequestFullScreen;
    "undefined" != typeof b && b && b.call(a);
  }

  function za(m) {
    a.la = z;
    m.pointerId in a.G && delete a.G[m.pointerId];
    $(m);
  }

  function Aa(m) {
    a.la && (a.G[m.pointerId] = [m.pageX, m.pageY], aa(m));
  }

  function Ba(m) {
    a.la = p;
    a.G[m.pointerId] = [m.pageX, m.pageY];
    ba(m);
  }

  function ca() {
    a.l ? (setTimeout(function () {
      a.v(z);
    }, 20), setTimeout(function () {
      a.v(p);
    }, 120)) : (setTimeout(function () {
      a.v(p);
    }, 20), setTimeout(function () {
      a.v(z);
    }, 120));
  }

  function F() {
    var a = {
      x: 0,
      y: 0
    },
        b = r;
    if (b.offsetParent) {
      do a.x += b.offsetLeft, a.y += b.offsetTop; while (b = b.offsetParent);
    }
    return a;
  }

  function da() {
    var m = c.g;
    c.g = 1;
    m != c.g && a.R(a.w() * m / c.g);
    q.setAttribute("width", w.width);
    a.l ? (q.removeAttribute("height"), q.style.width = "100%", q.style[K] = "scale(" + c.n + ")", q.style.height = "auto", r.style["background-color"] = a.backgroundColor, document.body.style["background-color"] = a.backgroundColor) : (q.setAttribute("height", w.height), q.style[K] = "translate(" + -w.width / 2 + "px," + -w.height / 2 + "px) scale(" + c.g + ") translate(" + 0.5 * B.width / c.g + "px," + 0.5 * B.height / c.g + "px) translate(" + c.j + "px," + c.k + "px) scale(" + c.n + ")", q.style["max-width"] = "", q.style.width = "", q.style.height = "", r.style["background-color"] = a.backgroundColor);
  }

  function L() {
    a.Qa(a.h.offsetWidth, a.h.offsetHeight);
  }

  function ea(a, b) {
    k.start.x = a;
    k.start.y = b;
    k.a.x = a;
    k.a.y = b;
    h.a.x = a;
    h.a.y = b;
  }

  function fa(a, b) {
    k.b.x = a - k.a.x;
    k.b.y = b - k.a.y;
    k.n.x = a;
    k.n.y = b;
    k.a.x = a;
    k.a.y = b;
  }

  function E(m) {
    m || (m = window.event);
    var b = 0;
    m.keyCode ? b = m.keyCode : m.which && (b = m.which);
    1 == b ? i.d |= 1 : 1 < b && (i.d |= 2);
    a.ua(m);
    m.preventDefault ? m.preventDefault() : m.returnValue = z;
  }

  function G(b) {
    b || (b = window.event);
    var e = F();
    a.cursor.x = b.pageX - e.x + j.left;
    a.cursor.y = b.pageY - e.y + j.top;
    b.preventDefault ? b.preventDefault() : b.returnValue = z;
    0 < i.d && (1 == i.d ? fa(b.pageX, b.pageY) : 2 == i.d ? (b = a.cursor.y - D.start.y, e = a.w(), a.R(c.u * Math.exp(b / 200)), b = a.w(), c.j += parseFloat(a.e * e - a.e * b), c.k += parseFloat(a.f * e - a.f * b)) : 3 == i.d && (e = a.cursor.x - D.start.x, b = a.cursor.y - D.start.y, c.j += parseFloat((e - c.m.x) / c.g), c.k += parseFloat((b - c.m.y) / c.g), c.m.x = e, c.m.y = b));
  }

  function M(b) {
    b || (b = window.event);
    var e = 0;
    b.keyCode ? e = b.keyCode : b.which && (e = b.which);
    1 == e ? i.d &= -2 : 1 < e && (i.d &= -3);
    a.ua(b);
    b.preventDefault ? b.preventDefault() : b.returnValue = z;
  }

  function O(b) {
    b || (b = window.event);
    a.Fa(0 < (b.detail ? -1 * b.detail : b.wheelDelta / 40) ? 1 : -1);
    b.preventDefault ? b.preventDefault() : b.returnValue = z;
  }

  function ba(b) {
    b || (b = window.event);
    var e = ga(),
        d = F();
    a.cursor.x = e[0].pageX - d.x + j.left;
    a.cursor.y = e[0].pageY - d.y + j.top;
    if (1 == e.length && e[0]) if (i.start.x = e[0].pageX, i.start.y = e[0].pageY, i.a.x = e[0].pageX, i.a.y = e[0].pageY, a.oa = e[0].target, a.oa == a.r) i.d = 1, ea(e[0].pageX, e[0].pageY);else for (var f = a.oa; f && f != a.r;) {
      if (f.onclick) f.onclick();
      f = f.parentNode;
    }
    if (2 == e.length && e[0] && e[1]) {
      i.d = 3;
      i.ba.x = e[0].pageX - d.x + j.left;
      i.ba.y = e[0].pageY - d.y + j.top;
      i.ca.x = e[1].pageX - d.x + j.left;
      i.ca.y = e[1].pageY - d.y + j.top;
      var f = e[0].pageX - e[1].pageX,
          g = e[0].pageY - e[1].pageY,
          h = (e[0].pageX - d.x + j.left + (e[1].pageX - d.x + j.left)) / 2,
          e = (e[0].pageY - d.y + j.top + (e[1].pageY - d.y + j.top)) / 2;
      c.na = z;
      c.Ra = Math.sqrt(f * f + g * g);
      c.u = a.w();
      a.e = parseFloat(h - 0.5 * B.width);
      a.f = parseFloat(e - 0.5 * B.height);
      a.e *= parseFloat(a.P);
      a.f *= parseFloat(a.P);
      a.e -= parseFloat(c.j);
      a.f -= parseFloat(c.k);
      a.e /= parseFloat(c.u);
      a.f /= parseFloat(c.u);
    }
    b.preventDefault();
  }

  function aa(b) {
    b || (b = window.event);
    var e = ga(),
        d = F();
    a.cursor.x = e[0].pageX - d.x + j.left;
    a.cursor.y = e[0].pageY - d.y + j.top;
    1 == e.length && e[0] && (i.a.x = e[0].pageX, i.a.y = e[0].pageY, 0 <= i.d && fa(i.a.x, i.a.y));
    if (2 == e.length && e[0] && e[1]) {
      var f = a.w(),
          g = e[0].pageX - e[1].pageX,
          h = e[0].pageY - e[1].pageY;
      a.R(c.u / c.Ra * Math.sqrt(g * g + h * h));
      g = a.w();
      h = a.f * f - a.f * g;
      c.j += a.e * f - a.e * g;
      c.k += h;
      f = (a.cursor.x + e[1].pageX - d.x + j.left) / 2 - (i.ba.x + i.ca.x) / 2;
      e = (a.cursor.y + e[1].pageY - d.y + j.top) / 2 - (i.ba.y + i.ca.y) / 2;
      c.na == z && (c.m.x = f, c.m.y = e, c.na = p);
      c.j += (f - c.m.x) / c.g;
      c.k += (e - c.m.y) / c.g;
      c.m.x = f;
      c.m.y = e;
    }
    b.preventDefault();
  }

  function ga() {
    if (!Z()) return window.event.touches;
    var b = [];
    for (id in a.G) {
      var e = a.G[id],
          d = {};
      d.pageX = e[0];
      d.pageY = e[1];
      d.target = a.r;
      d.preventDefault = function () {};
      b.push(d);
    }
    return b;
  }

  function $(b) {
    b.preventDefault();
    a.oa = s;
    i.d = 0;
    var e = new Date().getTime(),
        d = e - (P || e + 1);
    clearTimeout(Q);
    500 > d && 0 < d || (P = e, Q = setTimeout(function () {
      clearTimeout(Q);
    }, 500, [b]));
    P = e;
  }

  function Ca(a) {
    a.preventDefault();
    i.d = 0;
  }

  function R() {
    Da(R);
    a.W == a.Z && (1 == i.d ? 0.01 < h.J ? (h.b.x = 0.4 * (k.a.x - h.a.x), h.b.y = 0.4 * (k.a.y - h.a.y), h.a.x += h.b.x, h.a.y += h.b.y, a.ka(h.b.x, h.b.y)) : (a.ka(k.b.x, k.b.y), k.b.x = 0, k.b.y = 0) : 0.01 < h.J && (h.b.x *= h.J, h.b.y *= h.J, 0.055 > h.b.x * h.b.x + h.b.y * h.b.y && (h.b.x = 0, h.b.y = 0, k.b.x = 0, k.b.y = 0, k.a.x = h.a.x, k.a.y = h.a.y), (0 != h.b.x || 0 != h.b.y) && a.ka(h.b.x, h.b.y)));
    a.Aa();
    var b = 0;
    if (-1 == a.ga) {
      for (var e = 1, e = 0; e < a.t.length; e++) {
        var c = a.C[e];
        if (0 == a.z[c] && a.t[e].complete && a.t[e].width == w.width && a.t[e].height == w.height) {
          a.F[c] = a.z[c];
          a.z[c] = -1;
          if (a.W == a.Z) {
            var f = a.t.length + a.ya;
            f > d.q && (f = d.q);
            if (f -= b) for (var g = 0; g < f; g++) a.fa();
          }
          d.I = p;
          0 == e && a.Aa();
        }-1 != a.F[c] && b++;
      }
      e = parseFloat(b / d.q);
      a.Pa(e);
      b == d.q && (a.ga = 0, a.Oa());
    }
  }

  function ha(a) {
    a = a ? a : window.event;
    13 == a.keyCode && (ca(), a.preventDefault ? a.preventDefault() : a.returnValue = z);
  }
  var A = "",
      H = window.location.href,
      ia = H.lastIndexOf("/");

  // HTTP absolute path ?
  var absolute = u.slice(0, 4) === 'http';
  0 <= ia && !absolute && (A = H.substr(0, ia + 1));

  var S = H = z;
  this.la = z;
  this.G = [];
  this.Aa = function () {
    if (d.I) {
      d.I = z;
      var b = parseInt(d.T * d.c + d.S);-1 == a.F[b] || ja.setAttribute("src", a.D[b]);
    }
    if (c.n != c.a || c.j != c.va || c.k != c.wa) c.a = c.n, c.va = c.j, c.wa = c.k, da();
  };
  this.Za = function (b) {
    for (var e = -1E3, c = b, f = parseFloat(parseInt(b % d.c)), g = parseFloat(parseInt(b / d.c)), f = f / d.c, f = f * 2 * Math.PI, g = g / d.i, g = g * Math.PI, b = Math.sin(f), f = Math.cos(f), g = Math.cos(g), h = Math.sqrt(b * b + f * f + g * g), b = b / h, f = f / h, g = g / h, h = 0; h < a.t.length; h++) {
      var i = a.C[h];
      if (-1 != a.F[i]) {
        var j = a.Ca[i].Va,
            j = b * j.x + f * j.y + g * j.Wa;
        e < j && (e = j, c = i);
      }
    }
    return c;
  };
  this.fa = function () {
    if (a.ma < d.q) {
      var b = new Image(),
          e = a.C[a.ma];
      a.z[e] = 0;
      b.src = a.D[e];
      a.t.push(b);
      var c = parseInt(e % d.c),
          f = parseInt(e / d.c),
          c = c / d.c,
          c = c * 2 * Math.PI,
          f = f / d.i,
          f = f * Math.PI,
          b = Math.sin(c),
          c = Math.cos(c),
          f = Math.cos(f),
          g = Math.sqrt(b * b + c * c + f * f);
      a.Ca[e] = {
        Va: {
          x: b / g,
          y: c / g,
          Wa: f / g
        }
      };
      a.ma++;
    }
  };
  this.Ea = function () {
    for (var b = d.pa, e = d.qa, c = 2, f = parseFloat(d.c / c), g = parseFloat(d.i / c), h = d.q, i = 0, j = 0, l = 0, n = 0, k = 0; a.N < h;) {
      var q = parseInt(b % d.c),
          r = parseInt(e % d.i),
          k = parseInt(r * d.c + q);
      a.D[k] || (a.C[a.N] = k, a.N++, a.D[k] = a.ta(q, r));
      0 == i && (b += f, j++);
      1 == i && (e += g, l++);
      n++;
      if (n >= c) if (n = 0, 0 == i) i = 1, j = 0;else if (1 == i && (b += f, j++, j >= c / 2)) {
        c *= 2;
        b = d.pa;
        e = d.qa;
        f = parseFloat(d.c / c);
        g = parseFloat(d.i / c);
        if (1 > f && 1 > g) {
          for (b = 0; b < h; b++) e = parseInt(b % d.c), c = parseInt(b / d.c), k = parseInt(c * d.c + e), a.D[k] || (a.C[a.N] = k, a.N++, a.D[k] = a.ta(e, c));
          break;
        }
        i = l = j = 0;
      }
    }
  };
  this.ta = function (b, e) {
    return A + a.s + "/" + parseInt(e) + "_" + parseInt(b) + "." + va;
  };
  this.ka = function (b, e) {
    var b = b * (1 < d.c ? a.Ta : 0),
        e = e * (1 < d.i ? a.Ua : 0),
        c = Math.sqrt(b * b + e * e);
    if (1E-4 < c && (d.da += b, d.ea += e, d.A += c, 1 < d.A)) {
      var c = parseInt(d.A),
          f = Math.atan2(d.da, d.ea);
      d.A -= c;
      d.da = 0;
      d.ea = 0;
      0 > f && (f += 2 * Math.PI);
      f += Math.PI / 8;
      f = parseInt(f / (Math.PI / 4));
      0 > f && (f += 8);
      f %= 8;
      if (0 != x[f]) {
        var g = d.S,
            g = g + c * x[f];
        if (d.Ba) {
          for (; 0 > g;) g += d.c;
          for (; g >= d.c;) g -= d.c;
        } else g >= d.c && (g = d.c - 1), 0 > g && (g = 0);
        d.S != g && (d.S = g, d.I = p);
      }
      if (0 != y[f]) {
        g = d.T;
        g += c * y[f];
        if (d.Da) {
          for (; 0 > g;) g += d.i;
          for (; g >= d.i;) g -= d.i;
        } else g >= d.i && (g = d.i - 1), 0 > g && (g = 0);
        d.T != g && (d.T = g, d.I = p);
      }
    }
  };
  this.Sa = function () {
    a.v(!a.l);
    a.l ? a.H.setAttribute("src", A + a.s + "/files/GoFullScreenIcon.png") : a.H.setAttribute("src", A + a.s + "/files/GoFixedSizeIcon.png");
  };
  this.v = function (b) {
    a.l = b;
    a.l ? (t.style.position = "relative", t.style.left = "0px", t.style.top = "0px", document.body.style.overflow = "") : (t.style.position = "absolute", b = F(), t.style.left = window.pageXOffset - b.x + j.left + "px", t.style.top = window.pageYOffset - b.y + j.top + "px", document.body.style.overflow = "hidden");
    document.body.style.margin = "0";
    document.body.style.padding = "0";
    L();
  };
  this.Ha = function () {
    var b = new Image();
    b.src = a.M.src;
    a.t[a.Y] = b;
    b = a.C[a.Y];
    a.F[b] = a.z[b];
    a.z[b] = -1;
    a.Y++;
    d.I = p;
    a.Y == d.q && (a.ga = 0, a.Ia());
  };
  var Q,
      P = s;
  this.ua = function (b) {
    var e = F();
    a.cursor.x = b.pageX - e.x + j.left;
    a.cursor.y = b.pageY - e.y + j.top;
    1 == i.d ? ea(b.pageX, b.pageY) : 2 == i.d ? (D.start.x = a.cursor.x, D.start.y = a.cursor.y, c.u = a.w(), a.e = a.cursor.x - 0.5 * B.width, a.f = a.cursor.y - 0.5 * B.height, a.e *= a.P, a.f *= a.P, a.e -= c.j, a.f -= c.k, a.e /= c.u, a.f /= c.u) : 3 == i.d && (D.start.x = a.cursor.x, D.start.y = a.cursor.y, c.m.x = 0, c.m.y = 0);
  };
  this.Fa = function (b) {
    a.R(c.n * Math.exp(-b / 50));
  };
  this.w = function () {
    return c.n;
  };
  this.R = function (a) {
    a > c.ia / c.g && (a = c.ia / c.g);
    a < c.ja / c.g && (a = c.ja / c.g);
    c.n = a;
  };
  this.Ya = function (a, b, c, d) {
    j.left = a;
    j.top = b;
    j.right = c;
    j.bottom = d;
    L();
  };
  this.Qa = function (b, c) {
    a.l || (b = window.innerWidth, c = window.innerHeight);
    var d = b - j.left - j.right,
        f = c - j.top - j.bottom;

    B.width = d;
    B.height = f;

    // If scale to browser
    /*if (a.l) {
      var innW = window.innerWidth,
        innH = window.innerHeight;
      // Scale needed
      if (innW < w.width || innH < w.height) {
        var ratio = w.width / w.height;
        var horizontal = w.width > w.height;
        console.log('innW:', innW, 'innH:', innH);
        if (innW >= innH) {
          console.log('innW >= innH');
          f = '100%';
        } else {
          console.log('innH > innW');
          d = '100%';//innW;
          //f = d * ratio;
        }
        r.style.width = d;
      } else {
      }
    }*/

    //a.l && window.innerHeight < w.height && (f = window.innerHeight);
    r.style.width = d + "px";
    r.style.height = f + "px";
    r.style.left = j.left + "px";
    r.style.top = j.top + "px";
    da();
    n.style.width = b + "px";
    a.l && window.innerHeight < w.height && (c = window.innerHeight);
    n.style.height = c + "px";
    a.h.style.height = c + "px";
    n.za && n.za(b, c);
    X && (a.L.style.height = window.innerHeight + "px", a.L.style.width = window.innerWidth + "px");
  };
  this.U = function (a) {
    l(a, "mousedown", E);
    l(a, "mousemove", G);
    l(a, "mouseup", M);
  };
  this.aa = function (a) {
    N(a, "mousedown", E);
    N(a, "mousemove", G);
    N(a, "mouseup", M);
  };
  this.Oa = function () {
    a.p && (a.p.style.visibility = "hidden", a.aa(a.p), a.aa(a.O), a.aa(a.o));
  };
  this.Ia = function () {
    a.B.style.visibility = "hidden";
    a.aa(a.B);
  };
  var Da = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (a) {
    window.setTimeout(a, 10);
  };
  this.sa = function () {
    a.p = document.createElement("div");
    a.U(a.p);
    a.p.V = function () {
      this.parentNode && (this.style.left = "16px", this.style.top = "16px");
    };
    b = "position:absolute;";
    b += "left: 0px;";
    b += "top:  0px;";
    b += "width: 80px;";
    b += "height: 80px;";
    b += v + "transform-origin: 50% 50%;";
    b += "visibility: inherit;";
    a.p.setAttribute("style", b);
    a.O = document.createElement("div");
    a.U(a.O);
    b = "position:absolute;";
    b += "left: 0px;";
    b += "top:  31px;";
    b += "width: 70px;";
    b += "height: 20px;";
    b += v + "transform-origin: 50% 50%;";
    b += "opacity: 1.0;";
    b += "visibility: inherit;";
    b += "border: 0px solid #000000;";
    b += "color: #000000;";
    b += "text-align: left;";
    b += "white-space: nowrap;";
    b += "padding: 0px 0px 0px 0px;";
    b += "overflow: hidden;";
    a.O.setAttribute("style", b);
    a.o = document.createElement("div");
    a.U(a.o);
    a.o.$ = {
      Ka: 0,
      La: 0,
      ha: 0,
      Ma: 1,
      Na: 1,
      ab: 1
    };
    b = "position:absolute;";
    b += "left: 0px;";
    b += "top:  0px;";
    b += "width: 70px;";
    b += "height: 70px;";
    b += v + "transform-origin: 50% 50%;";
    b += "opacity: 0.4;";
    b += "visibility: inherit;";
    b += "border: 0px solid #000000;";
    b += "color: #000000;";
    b += "text-align: left;";
    b += "white-space: nowrap;";
    b += "padding: 0px 0px 0px 0px;";
    b += "overflow: hidden;";
    var c = wa;
    "" == c && (c = "ks_logo.png");
    a.o.setAttribute("style", b);
    a.o.innerHTML = '<img src="' + c + '" style="width:70px;height:70px;"/>';
    a.p.appendChild(a.o);
    a.p.appendChild(a.O);
    n.appendChild(a.p);
    a.v(a.l);
    setTimeout(function () {
      a.v(a.l);
    }, 10);
  };
  this.Pa = function (b) {
    if (a.p) {
      a.O.innerHTML = "<center>" + parseInt(100 * b) + "</center>";
      a.o.$.ha += 2.1;
      b = "";
      /*if (a.o.$) var c = a.o.$,
        b = b + ("translate(" + c.Ka + "px," + c.La + "px) rotate(" + c.ha + "deg) scale(" + c.Ma + "," + c.Na + ") ");
      */
      a.o.style[K] = b + "scale(1.0,1.0)";
    }
  };
  this.ra = function () {
    S = p;
    R();
  };
  this.xa = function () {
    l(window, "resize", L);
    xa && l(n, "dblclick", ya);
    if (Z()) {
      if (l(window, "mousewheel", O), l(window, "keydown", ha), /Tablet PC/i.test(navigator.userAgent) && window.Xa) {
        var b = new MSGesture();
        b.target = a.h;
        a.h.Ga = b;
        a.h.Ga.pointerType = s;
        a.h.bb = [];
        l(a.h, "MSPointerDown", Ba);
        l(a.h, "MSPointerMove", Aa);
        l(a.h, "MSPointerUp", za);
      } else l(n, "mousedown", E), l(q, "mousedown", E), l(n, "mousemove", G), l(q, "mousemove", G), l(document, "mouseup", M);
    } else n.addEventListener && (l(document, "mouseup", M), l(n, "mousewheel", O), l(document, "keydown", ha), l(n, "mousedown", E), l(q, "mousedown", E), l(n, "mousemove", G), l(n, "touchstart", ba), l(n, "touchmove", aa), l(n, "touchcancel", Ca), l(n, "touchend", $), l(n, "DOMMouseScroll", O), l(window, "orientationchange", ca));
  };
  if (document.createElement("canvas").getContext) {
    var a = this,
        t = a.h = s,
        r = s,
        ja = s,
        n = s,
        q = s;
    a.l = W;
    a.s = u;
    a.$a = z;
    a.Z = z;
    a.W = X;
    a.cb = 0;
    a.N = 0;
    a.Ta = parseFloat(pa);
    a.Ua = parseFloat(qa);
    a.ya = 1;
    a.Y = 0;
    a.ga = -1;
    var j = {
      left: 0,
      top: 0,
      right: 0,
      bottom: 0
    },
        d = {
      S: 0,
      T: 0,
      c: 1,
      i: 1,
      pa: 0,
      qa: 0,
      A: 0,
      da: 0,
      ea: 0,
      I: z,
      q: 0,
      Ba: p,
      Da: z
    };
    I || (I = 0);
    J || (J = 0);
    d.pa = I;
    d.qa = J;
    d.S = I;
    d.T = J;
    d.c = C;
    d.i = ma;
    d.Ba = na;
    d.Da = oa;
    d.q = d.c * d.i;
    var w = {
      width: 0,
      height: 0
    };
    w.width = U;
    w.height = V;
    var v = "",
        K = "transform",
        B = {
      x: 640,
      y: 480
    },
        c = {
      n: 1,
      u: 1,
      a: -1,
      j: 0,
      k: 0,
      va: -1,
      wa: -1,
      g: 1,
      ja: 1,
      ia: 1,
      m: {
        x: 0,
        y: 0
      },
      na: z
    };
    c.ja = parseFloat(ra);
    c.ia = parseFloat(sa);
    var k = {
      start: {
        x: 0,
        y: 0
      },
      a: {
        x: 0,
        y: 0
      },
      Ja: {
        x: 0,
        y: 0
      },
      n: {
        x: 0,
        y: 0
      },
      b: {
        x: 0,
        y: 0
      }
    },
        D = {
      start: {
        x: 0,
        y: 0
      }
    },
        i = {
      d: 0,
      start: {
        x: 0,
        y: 0
      },
      a: {
        x: 0,
        y: 0
      },
      Ja: {
        x: 0,
        y: 0
      },
      n: {
        x: 0,
        y: 0
      },
      b: {
        x: 0,
        y: 0
      },
      ba: {
        x: 0,
        y: 0
      },
      ca: {
        x: 0,
        y: 0
      }
    },
        h = {
      a: {
        x: 0,
        y: 0
      },
      b: {
        x: 0,
        y: 0
      },
      J: 0.96
    };
    h.J = ta;
    a.cursor = {
      x: 0,
      y: 0
    };
    var x = [],
        y = [];
    x[0] = 0;
    y[0] = 1;
    x[1] = 1;
    y[1] = 1;
    x[2] = 1;
    y[2] = 0;
    x[3] = 1;
    y[3] = -1;
    x[4] = 0;
    y[4] = -1;
    x[5] = -1;
    y[5] = -1;
    x[6] = -1;
    y[6] = 0;
    x[7] = -1;
    y[7] = 1;
    a.e = 0;
    a.f = 0;
    a.ma = 0;
    a.t = [];
    a.C = [];
    a.z = [];
    a.F = [];
    a.Ca = [];
    for (u = 0; u < d.q; u++) a.z[u] = -1, a.F[u] = -1;
    a.D = [];
    u = ["Webkit", "Moz", "0", "ms", "Ms"];
    for (C = 0; C < u.length; C++) "undefined" != typeof document.documentElement.style[u[C] + "Transform"] && (v = "-" + u[C].toLowerCase() + "-", K = u[C] + "Transform");
    var b = "";
    a.h = document.getElementById(T);
    b = "width: " + U + "px;";
    b += "height: " + V + "px;";
    b += "max-width: 100%;";
    a.h.setAttribute("style", b);
    t = document.createElement("div");
    t.setAttribute("id", "viewwindow");
    b = "top:  0px;";
    b += "left: 0px;";
    b += "position: relative;";
    t.setAttribute("style", b);
    a.h.appendChild(t);
    r = document.createElement("div");
    r.setAttribute("id", "turntable");
    b = "top:  0px;";
    b += "left: 0px;";
    b += "overflow: hidden;";
    b += "position:absolute;";
    b += v + "user-select: none;";
    r.setAttribute("style", b);
    t.appendChild(r);
    q = document.createElement("img");
    q.setAttribute("id", "backbuffer");
    b = "top:  0px;";
    b += "left: 0px;";
    b += "position:absolute;";
    b += v + "user-select: none;";
    q.setAttribute("style", b);
    r.appendChild(q);
    ja = q;
    n = document.createElement("div");
    a.r = n;
    b = "top:  0px;";
    b += "left: 0px;";
    b += "width:  100px;";
    b += "height: 100px;";
    b += "overflow: hidden;";
    b += "position:absolute;";
    b += "z-index: 522;";
    b += v + "user-select: none;";
    n.setAttribute("style", b);
    t.appendChild(n);
    n.za = function (a, b) {
      var c = [];
      for (c.push(this); 0 < c.length;) {
        var d = c.pop();
        d.V && d.V(a, b);
        if (d.hasChildNodes()) for (var g = 0; g < d.childNodes.length; g++) c.push(d.childNodes[g]);
      }
    };
    this.B = document.createElement("div");
    b = "position:absolute;";
    b += "left: 0px;";
    b += "top:  0px;";
    b += "width: 256px;";
    b += "height: 256px;";
    b += "opacity: 0.0;";
    b += v + "transform-origin: 50% 50%;";
    b += "visibility: inherit;";
    b += "display: none";
    this.B.setAttribute("style", b);
    this.M = document.createElement("img");
    this.M.setAttribute("width", 256);
    this.M.setAttribute("height", 256);
    this.M.onload = function () {
      a.Ha();
    };
    a.U(this.B);
    this.B.appendChild(this.M);
    n.appendChild(this.B);
    this.backgroundColor = r.style.backgroundColor = la;
    ua && (a.Q = document.createElement("div"), b = "position:absolute;", b += "width: 38px;", b += "height: 32px;", b += v + "transform-origin: 50% 50%;", b += "visibility: inherit;", b += "cursor: pointer;", a.Q.setAttribute("style", b), a.H = document.createElement("img"), a.l ? a.H.setAttribute("src", A + a.s + "/files/GoFullScreenIcon.png") : a.H.setAttribute("src", A + a.s + "/files/GoFixedSizeIcon.png"), a.H.setAttribute("style", "position: absolute;top: 0px;left: 0px;width: 38px;height: 32px;"), a.Q.appendChild(a.H), a.Q.V = function (a, b) {
      this.style.left = a - 38 + "px";
      this.style.top = b - 32 + "px";
    }, a.Q.onclick = function () {
      a.Sa();
    }, a.r.appendChild(a.Q));
    if (a.W) {
      /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) && (H = p);
      a.K = document.createElement("div");
      b = "position:absolute;";
      b += "width: 92px;";
      b += "height: 92px;";
      b += v + "transform-origin: 50% 50%;";
      b += "visibility: inherit;";
      b += "cursor: pointer;";
      a.K.setAttribute("style", b);
      a.X = document.createElement("img");
      H ? a.X.setAttribute("src", A + a.s + "/files/vr_hand.gif") : a.X.setAttribute("src", A + a.s + "/files/vr_cursor.gif");
      a.X.setAttribute("style", "position: absolute;top: 0px;left: 0px;width: 92px;height: 92px;");
      a.K.appendChild(a.X);
      a.K.V = function (a, b) {
        this.style.left = 0.5 * a - 46 + "px";
        this.style.top = 0.5 * b - 46 + "px";
      };
      a.L = document.createElement("div");
      b = "position:absolute;";
      b += v + "transform-origin: 50% 50%;";
      b += " width: " + window.innerWidth + "px;";
      b += " height: " + window.innerHeight + "px;";
      b += " background-color: #ccc;";
      b += " opacity: .7";
      a.L.setAttribute("style", b);
      a.r.appendChild(a.L);
      var ka = function () {
        a.K.style.visibility = "hidden";
        a.L.style.visibility = "hidden";
        Y && a.sa();
        a.Z = p;
        for (var b = 0; b < a.ya; b++) a.fa();
        a.ra();
      };
      a.r.onmousedown = function () {
        S || ka();
      };
      a.r.ontouchstart = function (a) {
        S || ka();
        a.preventDefault();
      };
      a.r.appendChild(a.K);
      a.xa();
    } else a.W = p, a.Z = p, Y && a.sa(), a.xa(), a.ra();
    a.v(W);
    a.P = 1 / c.g;
    a.R(a.P);
    this.Ea();
    a.fa();
    setTimeout(function () {
      R();
    }, 10);
    setTimeout(function () {
      L();
    }, 15);
  } else alert("Your browser must support HTML5 to show KeyShotVR");
};

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Overflow Scroller
 */



module.exports = function () {
  var module = function (a, b) {
    this.$els = {
      'parent': a,
      'item': b
    };
    init.call(this);
  };

  var init = function () {
    this.bind();
  };

  module.prototype = {
    bind: function () {
      this.calculateWidth();
    },

    calculateWidth: function () {
      // var widthOption = parseInt((this.$els.target.length * this.options.multiplier)) + parseInt(this.options.padder) + this.options.units;
      var total = this.$els.item.length,
          single = this.$els.item.outerWidth(true) + ($('html').hasClass('ie8') ? 12 : 6),
          widthOption = parseInt(total * single) + 'px';

      this.applyStyles(widthOption);
    },

    applyStyles: function (w) {
      this.$els.parent.css({
        'width': w,
        'overflow': 'scroll'
      });
      this.$els.parent.parent().css('overflow', 'scroll');
    },

    destroy: function () {
      this.$els.parent.css('width', '');
    }
  };
  return module;
}();

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var PageLocale = function () {

  /**
   * Returns a string if it's non empty, otherwise `null`
   *
   * @param {string} str
   * @returns {string|null}
   */
  function validNonEmptyStr(str) {
    return typeof str === 'string' && str.length > 0 ? str : null;
  }

  return (
  // Use `xml:lang` attr from `html`, i.e., `<html xml:lang="en">`
  validNonEmptyStr(document.documentElement.getAttribute('xml:lang')) ||
  // Else use `lang` attr from `html`, i.e., `<html lang="en">`
  validNonEmptyStr(document.documentElement.lang) ||
  // Else just use `en` as default
  'en').toLowerCase();
}();

module.exports = PageLocale;

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Self-hosted Video
 */



var Shv = module.exports = function () {

    var def = function (el, options) {
        this.$el = el;
        this.format = $(this.$el).attr('source');
        this.videoId = $(this.$el).attr('videoId');
        init.call(this);
    };

    var init = function () {
        this.bind();
    };

    def.prototype = {
        bind: function () {
            var self = this;
            $('.video-overlay-trigger[data-video-id="' + this.videoId + '"]').on('click', function (e) {
                e.preventDefault();
                self.open();
            });
        },

        onVideoEnded: function (event) {
            var over = this.$video.parents('.overlay'),
                followUp = over.find('.mp4-video').data('follow-up'),
                followUpId = over.data('videorel');

            if (followUp) {
                $('.video-follow-up[data-videoRel=' + followUpId + ']').clone().insertAfter('.mp4-video').animate({ 'marginLeft': 0 }, { duration: 300 });

                // exit full-screen
                if (window.HTMLVideoElement.prototype.hasOwnProperty('webkitExitFullscreen')) {
                    $(this.$video)[0].webkitExitFullscreen();
                } else if (window.HTMLVideoElement.prototype.hasOwnProperty('mozCancelFullScreen')) {
                    $(this.$video)[0].mozCancelFullScreen();
                } else if (window.HTMLVideoElement.prototype.hasOwnProperty('msExitFullscreen')) {
                    $(this.$video)[0].msExitFullscreen();
                } else if (window.HTMLVideoElement.prototype.hasOwnProperty('exitFullscreen')) {
                    $(this.$video)[0].exitFullscreen();
                }
            }
        },

        /**
         * Remove video element from DOM
         */
        destroy: function () {
            if (this.$video) {
                this.unsubscribe();
                this.$video.remove();
                this.$video = undefined;
            }
        },

        subscribe: function () {
            //closing the overlay when the video ends
            this.$video.on('ended', _.bind(this.onVideoEnded, this));

            //setting the video to play from the beginning
            this.$closeIcon = this.$video.closest('.overlay').find('.icon-overlay-close');
            this.onCloseIconHandler = _.bind(this.destroy, this);
            this.$closeIcon.on('click', this.onCloseIconHandler);
        },

        unsubscribe: function () {
            this.$video.off();
            this.$closeIcon.off('click', this.onCloseIconHandler);
        },

        open: function () {
            var videoSelector = 'video[src="' + this.videoId + '"]';
            var videoElement = $(videoSelector)[0];
            if (_.isUndefined(videoElement)) {

                // Create video element and append it
                var videoContent = '<video autoplay controls src="' + this.videoId + '" type="video/' + this.format + '" frameborder="0" allowfullscreen style="' + 'width:100%">' + 'Your browser doesn\'t support HTML5 video tag.' + '</video>';
                $('.' + this.format + '-video[data-video-id="' + this.videoId + '"]').append(videoContent);

                this.video = $(videoSelector)[0];
                this.$video = $(this.video);
                this.subscribe();
            }
        }
    };

    return def;
}();

$(function () {
    $('.mp4-video').each(function (i) {
        $(this).data('shv', new Shv(this));
    });
});

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 *
 * Slider
 */



var OverflowScroller = __webpack_require__(69);

module.exports = function () {

  var def = function (el, options) {
    this.$els = {
      'item': $(el),
      'control': '.slider-control',
      'nextArrow': '.slider-control-next',
      'prevArrow': '.slider-control-prev',
      'controlWrapper': '.slider-control-wrapper'
    };
    this.options = options;

    this.states = {
      'activeControl': 'slider-ctl-promo-video'
    };

    init.call(this);
  };

  var init = function () {
    var self = this;
    this.mySwipe = $(this.$els.item).Swipe({
      startSlide: 0,
      //auto: 3000,
      continuous: false,
      disableScroll: false,
      stopPropagation: false,
      callback: function (index, element) {
        // self.setHeight(index, element);
        self.setActiveControl(index);
      }
      // transitionEnd: function(index, element) {}
    }).data('Swipe');

    this.dataRel = $(this.$els.item).attr('data-relationship');
    this.isSubcontrol = $(this.$els.item).hasClass('is-subcontrol');

    this.bind();
  };

  def.prototype = {

    bind: function () {
      var self = this.mySwipe,
          root = this,
          arrowNext = $(this.$els.nextArrow + '[data-relationship="' + root.dataRel + '"]'),
          arrowPrev = $(this.$els.prevArrow + '[data-relationship="' + root.dataRel + '"]');

      this.$controls = $(root.$els.control, root.$els.item);
      this.$dotControls = $('.slider-control-wrapper[data-relationship="' + root.dataRel + '"]').eq(1);

      updateArrowState(0, 3);

      function updateArrowState(pos, total) {
        arrowPrev.toggleClass('is-hidden', pos === 0);
        arrowNext.toggleClass('is-hidden', pos + 1 === total);
      }

      //next and previous slider arrows
      arrowNext.on('click', function () {
        self.next();
        updateArrowState(self.getPos(), self.getNumSlides());
      });

      arrowPrev.on('click', function () {
        self.prev();
        updateArrowState(self.getPos(), self.getNumSlides());
      });

      this.$controls.on('click', function () {
        _.defer(function () {
          updateArrowState(self.getPos(), self.getNumSlides());
        });
      });

      if (!root.isSubcontrol) {
        this.$controls.on("click", function (e) {
          e.preventDefault();
          var $this = $(this),
              index = $this.index();
          $this.addClass('is-active').siblings().removeClass('is-active');
          self.slide(index, 500);
          $(root.$els.item).trigger('doneMoving');
        }).eq(0).trigger("click");

        if (this.$controls.length !== 0) {
          this.$controls.on('click', function () {
            var index = $(this).index();
            self.slide(index, 500);
          });
        } else {
          $('.slider-control-wrapper[data-relationship="' + this.dataRel + '"]').find(this.$els.control).on('click', function () {
            var target = $(this);
            var siblings = target.closest(root.$els.controlWrapper).find(root.$els.control);
            siblings.each(function (index, el) {
              if ($(el).is(target)) {
                self.slide(index, 500);
              }
            });
          });
        }
      }

      $(window).trigger('updateSizes');

      $(window).on('break-tablet break-mobile break-small', function () {
        var sliderItem;
        if (root.options && root.options.isDesktopOnly) {
          self.destroyStyles();
          sliderItem = $(root.$els.item);
          sliderItem.removeClass('swipe slider');
          // sliderItem.data('overFlower', new jnpr.OverflowScroller($('.swipe-wrap', sliderItem), $('.list-slider', sliderItem), {'multiplier' : 300, 'padder' : 30, 'units' : 'vw'}));
          sliderItem.data('overFlower', new OverflowScroller($('.swipe-wrap', sliderItem), $('.list-slider', sliderItem)));
        }
        if (root.options && root.options.isDesktopOnlyAlt) {
          // self.destroyStyles();
          sliderItem = $(root.$els.item);
          // sliderItem.removeClass('swipe slider');
          root.childrenConvert();
          // sliderItem.data('overFlower', new jnpr.OverflowScroller($('.swipe-wrap', sliderItem), $('.promo-list-slider', sliderItem), {'multiplier' : 150, 'padder' : 10, 'units' : 'vw'}));
        }
      });

      if ($(root.$els.item).hasClass('slider-mobile')) {
        $(window).on('break-greater-than-tablet', function () {
          self.destroyStyles();
        });
      }

      // startup setup/decustruct functions
      // they will initiate event future calls
      // via window listeners
      if (window.innerWidth > 768) {
        onDesktop();
      } else {
        onTablet();
      }

      // fires once everytime tablet sizes are seen
      function onTablet() {
        $(window).one('break-greater-than-tablet', onDesktop);
      }

      // fires once everytime desktop sizes are seen
      function onDesktop() {
        resetSliderPosition();
        $(window).one('break-less-than-tablet', onTablet);
      }

      function resetSliderPosition() {
        // reset overflow scroll positions
        $('.slider-desktop').scrollLeft(0);
        $(root.$els.control, root.$els.item).eq(0).trigger('click');
      }
    },

    next: function () {
      this.mySwipe.next();
    },

    prev: function () {
      this.mySwipe.prev();
    },

    // set active control
    setActiveControl: function (index) {

      this.$controls.eq(index).addClass('is-active').siblings().removeClass('is-active');

      $('.slider-control', this.$dotControls).eq(index).addClass('is-active').siblings().removeClass('is-active');

      // maybe this should be somewhere else????
      if (this.$els.item.find('.youtube-video').hasClass('is-active-video')) {
        this.$els.item.find('.youtube-video').each(function () {
          $(this).data('yt').resetVideo();
        });
      }
    },

    childrenConvert: function () {
      //			console.log('ran children convert');
    },

    setHeight: function (index) {
      if ($(this.$els.item).hasClass('slider-mobile')) {

        $('div[data-index]', this.$els.item).each(function (i) {
          var self = this;
          var ind = $(this).attr('data-index');
          if (ind === index || ind === index + 1) {
            return;
          } else {
            $(self).css('z-index', '-1').removeClass('opacity-one');
          }
        });

        $('div[data-index="' + index + '"], div[data-index="' + (index + 1) + '"]', this.$els.item).css('z-index', '3').addClass('opacity-one');
      }
    },

    setControlBackgrond: function () {
      var root = this,
          t = $(this.$els.control, this.$els.item).parent();

      if (t.hasClass(this.states.activeControl)) {
        t.removeClass(this.states.activeControl);
        root.unBindToggled();
      } else {
        t.addClass(this.states.activeControl);
        root.bindToggled();
      }
    },

    bindToggled: function () {
      var self = this;

      $(this.$els.item).on('doneMoving.swipe', function () {
        self.setControlBackgrond();
        self.$els.item.find('.youtube-video').data('yt').destroyVideoActive();
      });
    },

    destroy: function () {
      this.mySwipe.destroyStyles();
      this.mySwipe.kill();
    },

    unBindToggled: function () {
      $(this.$els.item).off('doneMoving.swipe');
    }
  };

  return def;
}();

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Juniper
 *
 * Javascript main file
 */


window.$ = window.jQuery = __webpack_require__(54);
window._ = __webpack_require__(1);

__webpack_require__(3); // Responsive
__webpack_require__(30); // IE specific
__webpack_require__(33); // Swipe
__webpack_require__(31); // JNPR Deployment code
__webpack_require__(32); // Modernizr
__webpack_require__(27); // Feature Detector
__webpack_require__(8); // Locale
__webpack_require__(14); // Alerter
__webpack_require__(26); // Events Page
__webpack_require__(22); // Community Page
__webpack_require__(5); // Accordion
__webpack_require__(51); // Update box
__webpack_require__(53); // View more
__webpack_require__(47); // Tab Switcher
__webpack_require__(49); // 3D Viewer
__webpack_require__(43); // Slider Master
__webpack_require__(4); // Super Slider
__webpack_require__(41); // Header Search Control
__webpack_require__(12); // Youtube
__webpack_require__(11); // Youku
__webpack_require__(46); // Tabcordion
__webpack_require__(9); // Overlay
__webpack_require__(10); // Video Overlay
__webpack_require__(25); // Dropdown Block
__webpack_require__(7); // Galleries
__webpack_require__(48); // 3D Galleries
__webpack_require__(45); // Sub nav
__webpack_require__(40); // Scroll Pos
__webpack_require__(35); // Misc
__webpack_require__(16); // Bubble Machine
__webpack_require__(34); // List filter
__webpack_require__(44); // Sticky
__webpack_require__(36); // Mobile nav menu
__webpack_require__(20); // Case filters
__webpack_require__(19); // Campaign Resizer
__webpack_require__(17)(); // C2C
__webpack_require__(38); // Node Tree
__webpack_require__(18); // Campaign Hero Image
__webpack_require__(24); // Comptable
__webpack_require__(50); // Twitter
__webpack_require__(6); // Equal Height
__webpack_require__(37); // News Filter
__webpack_require__(29); // Form Validation
__webpack_require__(42); // Sidebar
__webpack_require__(15); // Audio Player
__webpack_require__(21); // Click-to-chat popup
__webpack_require__(39); // Popup Window
__webpack_require__(52); // Video Background
__webpack_require__(28); // Footer

__webpack_require__(23);

/***/ }),
/* 74 */
/***/ (function(module, exports) {

/*! (C) Andrea Giammarchi - @WebReflection - Mit Style License */
(function(e,t){"use strict";function Ht(){var e=wt.splice(0,wt.length);Et=0;while(e.length)e.shift().call(null,e.shift())}function Bt(e,t){for(var n=0,r=e.length;n<r;n++)Jt(e[n],t)}function jt(e){for(var t=0,n=e.length,r;t<n;t++)r=e[t],Pt(r,A[It(r)])}function Ft(e){return function(t){ut(t)&&(Jt(t,e),O.length&&Bt(t.querySelectorAll(O),e))}}function It(e){var t=ht.call(e,"is"),n=e.nodeName.toUpperCase(),r=_.call(L,t?N+t.toUpperCase():T+n);return t&&-1<r&&!qt(n,t)?-1:r}function qt(e,t){return-1<O.indexOf(e+'[is="'+t+'"]')}function Rt(e){var t=e.currentTarget,n=e.attrChange,r=e.attrName,i=e.target,s=e[y]||2,o=e[w]||3;kt&&(!i||i===t)&&t[h]&&r!=="style"&&(e.prevValue!==e.newValue||e.newValue===""&&(n===s||n===o))&&t[h](r,n===s?null:e.prevValue,n===o?null:e.newValue)}function Ut(e){var t=Ft(e);return function(e){wt.push(t,e.target),Et&&clearTimeout(Et),Et=setTimeout(Ht,1)}}function zt(e){Ct&&(Ct=!1,e.currentTarget.removeEventListener(S,zt)),O.length&&Bt((e.target||n).querySelectorAll(O),e.detail===l?l:a),st&&Vt()}function Wt(e,t){var n=this;vt.call(n,e,t),Lt.call(n,{target:n})}function Xt(e,t){nt(e,t),Mt?Mt.observe(e,yt):(Nt&&(e.setAttribute=Wt,e[o]=Ot(e),e[u](x,Lt)),e[u](E,Rt)),e[m]&&kt&&(e.created=!0,e[m](),e.created=!1)}function Vt(){for(var e,t=0,n=at.length;t<n;t++)e=at[t],M.contains(e)||(n--,at.splice(t--,1),Jt(e,l))}function $t(e){throw new Error("A "+e+" type is already registered")}function Jt(e,t){var n,r=It(e),i;-1<r&&(Dt(e,A[r]),r=0,t===a&&!e[a]?(e[l]=!1,e[a]=!0,i="connected",r=1,st&&_.call(at,e)<0&&at.push(e)):t===l&&!e[l]&&(e[a]=!1,e[l]=!0,i="disconnected",r=1),r&&(n=e[t+f]||e[i+f])&&n.call(e))}function Kt(){}function Qt(e,t,r){var i=r&&r[c]||"",o=t.prototype,u=tt(o),a=t.observedAttributes||j,f={prototype:u};ot(u,m,{value:function(){if(Q)Q=!1;else if(!this[W]){this[W]=!0,new t(this),o[m]&&o[m].call(this);var e=G[Z.get(t)];(!V||e.create.length>1)&&Zt(this)}}}),ot(u,h,{value:function(e){-1<_.call(a,e)&&o[h].apply(this,arguments)}}),o[d]&&ot(u,p,{value:o[d]}),o[v]&&ot(u,g,{value:o[v]}),i&&(f[c]=i),e=e.toUpperCase(),G[e]={constructor:t,create:i?[i,et(e)]:[e]},Z.set(t,e),n[s](e.toLowerCase(),f),en(e),Y[e].r()}function Gt(e){var t=G[e.toUpperCase()];return t&&t.constructor}function Yt(e){return typeof e=="string"?e:e&&e.is||""}function Zt(e){var t=e[h],n=t?e.attributes:j,r=n.length,i;while(r--)i=n[r],t.call(e,i.name||i.nodeName,null,i.value||i.nodeValue)}function en(e){return e=e.toUpperCase(),e in Y||(Y[e]={},Y[e].p=new K(function(t){Y[e].r=t})),Y[e].p}function tn(){X&&delete e.customElements,B(e,"customElements",{configurable:!0,value:new Kt}),B(e,"CustomElementRegistry",{configurable:!0,value:Kt});for(var t=function(t){var r=e[t];if(r){e[t]=function(t){var i,s;return t||(t=this),t[W]||(Q=!0,i=G[Z.get(t.constructor)],s=V&&i.create.length===1,t=s?Reflect.construct(r,j,i.constructor):n.createElement.apply(n,i.create),t[W]=!0,Q=!1,s||Zt(t)),t},e[t].prototype=r.prototype;try{r.prototype.constructor=e[t]}catch(i){z=!0,B(r,W,{value:e[t]})}}},r=i.get(/^HTML[A-Z]*[a-z]/),o=r.length;o--;t(r[o]));n.createElement=function(e,t){var n=Yt(t);return n?gt.call(this,e,et(n)):gt.call(this,e)},St||(Tt=!0,n[s](""))}var n=e.document,r=e.Object,i=function(e){var t=/^[A-Z]+[a-z]/,n=function(e){var t=[],n;for(n in s)e.test(n)&&t.push(n);return t},i=function(e,t){t=t.toLowerCase(),t in s||(s[e]=(s[e]||[]).concat(t),s[t]=s[t.toUpperCase()]=e)},s=(r.create||r)(null),o={},u,a,f,l;for(a in e)for(l in e[a]){f=e[a][l],s[l]=f;for(u=0;u<f.length;u++)s[f[u].toLowerCase()]=s[f[u].toUpperCase()]=l}return o.get=function(r){return typeof r=="string"?s[r]||(t.test(r)?[]:""):n(r)},o.set=function(n,r){return t.test(n)?i(n,r):i(r,n),o},o}({collections:{HTMLAllCollection:["all"],HTMLCollection:["forms"],HTMLFormControlsCollection:["elements"],HTMLOptionsCollection:["options"]},elements:{Element:["element"],HTMLAnchorElement:["a"],HTMLAppletElement:["applet"],HTMLAreaElement:["area"],HTMLAttachmentElement:["attachment"],HTMLAudioElement:["audio"],HTMLBRElement:["br"],HTMLBaseElement:["base"],HTMLBodyElement:["body"],HTMLButtonElement:["button"],HTMLCanvasElement:["canvas"],HTMLContentElement:["content"],HTMLDListElement:["dl"],HTMLDataElement:["data"],HTMLDataListElement:["datalist"],HTMLDetailsElement:["details"],HTMLDialogElement:["dialog"],HTMLDirectoryElement:["dir"],HTMLDivElement:["div"],HTMLDocument:["document"],HTMLElement:["element","abbr","address","article","aside","b","bdi","bdo","cite","code","command","dd","dfn","dt","em","figcaption","figure","footer","header","i","kbd","mark","nav","noscript","rp","rt","ruby","s","samp","section","small","strong","sub","summary","sup","u","var","wbr"],HTMLEmbedElement:["embed"],HTMLFieldSetElement:["fieldset"],HTMLFontElement:["font"],HTMLFormElement:["form"],HTMLFrameElement:["frame"],HTMLFrameSetElement:["frameset"],HTMLHRElement:["hr"],HTMLHeadElement:["head"],HTMLHeadingElement:["h1","h2","h3","h4","h5","h6"],HTMLHtmlElement:["html"],HTMLIFrameElement:["iframe"],HTMLImageElement:["img"],HTMLInputElement:["input"],HTMLKeygenElement:["keygen"],HTMLLIElement:["li"],HTMLLabelElement:["label"],HTMLLegendElement:["legend"],HTMLLinkElement:["link"],HTMLMapElement:["map"],HTMLMarqueeElement:["marquee"],HTMLMediaElement:["media"],HTMLMenuElement:["menu"],HTMLMenuItemElement:["menuitem"],HTMLMetaElement:["meta"],HTMLMeterElement:["meter"],HTMLModElement:["del","ins"],HTMLOListElement:["ol"],HTMLObjectElement:["object"],HTMLOptGroupElement:["optgroup"],HTMLOptionElement:["option"],HTMLOutputElement:["output"],HTMLParagraphElement:["p"],HTMLParamElement:["param"],HTMLPictureElement:["picture"],HTMLPreElement:["pre"],HTMLProgressElement:["progress"],HTMLQuoteElement:["blockquote","q","quote"],HTMLScriptElement:["script"],HTMLSelectElement:["select"],HTMLShadowElement:["shadow"],HTMLSlotElement:["slot"],HTMLSourceElement:["source"],HTMLSpanElement:["span"],HTMLStyleElement:["style"],HTMLTableCaptionElement:["caption"],HTMLTableCellElement:["td","th"],HTMLTableColElement:["col","colgroup"],HTMLTableElement:["table"],HTMLTableRowElement:["tr"],HTMLTableSectionElement:["thead","tbody","tfoot"],HTMLTemplateElement:["template"],HTMLTextAreaElement:["textarea"],HTMLTimeElement:["time"],HTMLTitleElement:["title"],HTMLTrackElement:["track"],HTMLUListElement:["ul"],HTMLUnknownElement:["unknown","vhgroupv","vkeygen"],HTMLVideoElement:["video"]},nodes:{Attr:["node"],Audio:["audio"],CDATASection:["node"],CharacterData:["node"],Comment:["#comment"],Document:["#document"],DocumentFragment:["#document-fragment"],DocumentType:["node"],HTMLDocument:["#document"],Image:["img"],Option:["option"],ProcessingInstruction:["node"],ShadowRoot:["#shadow-root"],Text:["#text"],XMLDocument:["xml"]}});typeof t!="object"&&(t={type:t||"auto"});var s="registerElement",o="__"+s+(e.Math.random()*1e5>>0),u="addEventListener",a="attached",f="Callback",l="detached",c="extends",h="attributeChanged"+f,p=a+f,d="connected"+f,v="disconnected"+f,m="created"+f,g=l+f,y="ADDITION",b="MODIFICATION",w="REMOVAL",E="DOMAttrModified",S="DOMContentLoaded",x="DOMSubtreeModified",T="<",N="=",C=/^[A-Z][A-Z0-9]*(?:-[A-Z0-9]+)+$/,k=["ANNOTATION-XML","COLOR-PROFILE","FONT-FACE","FONT-FACE-SRC","FONT-FACE-URI","FONT-FACE-FORMAT","FONT-FACE-NAME","MISSING-GLYPH"],L=[],A=[],O="",M=n.documentElement,_=L.indexOf||function(e){for(var t=this.length;t--&&this[t]!==e;);return t},D=r.prototype,P=D.hasOwnProperty,H=D.isPrototypeOf,B=r.defineProperty,j=[],F=r.getOwnPropertyDescriptor,I=r.getOwnPropertyNames,q=r.getPrototypeOf,R=r.setPrototypeOf,U=!!r.__proto__,z=!1,W="__dreCEv1",X=e.customElements,V=!/^force/.test(t.type)&&!!(X&&X.define&&X.get&&X.whenDefined),$=r.create||r,J=e.Map||function(){var t=[],n=[],r;return{get:function(e){return n[_.call(t,e)]},set:function(e,i){r=_.call(t,e),r<0?n[t.push(e)-1]=i:n[r]=i}}},K=e.Promise||function(e){function i(e){n=!0;while(t.length)t.shift()(e)}var t=[],n=!1,r={"catch":function(){return r},then:function(e){return t.push(e),n&&setTimeout(i,1),r}};return e(i),r},Q=!1,G=$(null),Y=$(null),Z=new J,et=function(e){return e.toLowerCase()},tt=r.create||function sn(e){return e?(sn.prototype=e,new sn):this},nt=R||(U?function(e,t){return e.__proto__=t,e}:I&&F?function(){function e(e,t){for(var n,r=I(t),i=0,s=r.length;i<s;i++)n=r[i],P.call(e,n)||B(e,n,F(t,n))}return function(t,n){do e(t,n);while((n=q(n))&&!H.call(n,t));return t}}():function(e,t){for(var n in t)e[n]=t[n];return e}),rt=e.MutationObserver||e.WebKitMutationObserver,it=(e.HTMLElement||e.Element||e.Node).prototype,st=!H.call(it,M),ot=st?function(e,t,n){return e[t]=n.value,e}:B,ut=st?function(e){return e.nodeType===1}:function(e){return H.call(it,e)},at=st&&[],ft=it.attachShadow,lt=it.cloneNode,ct=it.dispatchEvent,ht=it.getAttribute,pt=it.hasAttribute,dt=it.removeAttribute,vt=it.setAttribute,mt=n.createElement,gt=mt,yt=rt&&{attributes:!0,characterData:!0,attributeOldValue:!0},bt=rt||function(e){Nt=!1,M.removeEventListener(E,bt)},wt,Et=0,St=s in n&&!/^force-all/.test(t.type),xt=!0,Tt=!1,Nt=!0,Ct=!0,kt=!0,Lt,At,Ot,Mt,_t,Dt,Pt;St||(R||U?(Dt=function(e,t){H.call(t,e)||Xt(e,t)},Pt=Xt):(Dt=function(e,t){e[o]||(e[o]=r(!0),Xt(e,t))},Pt=Dt),st?(Nt=!1,function(){var e=F(it,u),t=e.value,n=function(e){var t=new CustomEvent(E,{bubbles:!0});t.attrName=e,t.prevValue=ht.call(this,e),t.newValue=null,t[w]=t.attrChange=2,dt.call(this,e),ct.call(this,t)},r=function(e,t){var n=pt.call(this,e),r=n&&ht.call(this,e),i=new CustomEvent(E,{bubbles:!0});vt.call(this,e,t),i.attrName=e,i.prevValue=n?r:null,i.newValue=t,n?i[b]=i.attrChange=1:i[y]=i.attrChange=0,ct.call(this,i)},i=function(e){var t=e.currentTarget,n=t[o],r=e.propertyName,i;n.hasOwnProperty(r)&&(n=n[r],i=new CustomEvent(E,{bubbles:!0}),i.attrName=n.name,i.prevValue=n.value||null,i.newValue=n.value=t[r]||null,i.prevValue==null?i[y]=i.attrChange=0:i[b]=i.attrChange=1,ct.call(t,i))};e.value=function(e,s,u){e===E&&this[h]&&this.setAttribute!==r&&(this[o]={className:{name:"class",value:this.className}},this.setAttribute=r,this.removeAttribute=n,t.call(this,"propertychange",i)),t.call(this,e,s,u)},B(it,u,e)}()):rt||(M[u](E,bt),M.setAttribute(o,1),M.removeAttribute(o),Nt&&(Lt=function(e){var t=this,n,r,i;if(t===e.target){n=t[o],t[o]=r=Ot(t);for(i in r){if(!(i in n))return At(0,t,i,n[i],r[i],y);if(r[i]!==n[i])return At(1,t,i,n[i],r[i],b)}for(i in n)if(!(i in r))return At(2,t,i,n[i],r[i],w)}},At=function(e,t,n,r,i,s){var o={attrChange:e,currentTarget:t,attrName:n,prevValue:r,newValue:i};o[s]=e,Rt(o)},Ot=function(e){for(var t,n,r={},i=e.attributes,s=0,o=i.length;s<o;s++)t=i[s],n=t.name,n!=="setAttribute"&&(r[n]=t.value);return r})),n[s]=function(t,r){p=t.toUpperCase(),xt&&(xt=!1,rt?(Mt=function(e,t){function n(e,t){for(var n=0,r=e.length;n<r;t(e[n++]));}return new rt(function(r){for(var i,s,o,u=0,a=r.length;u<a;u++)i=r[u],i.type==="childList"?(n(i.addedNodes,e),n(i.removedNodes,t)):(s=i.target,kt&&s[h]&&i.attributeName!=="style"&&(o=ht.call(s,i.attributeName),o!==i.oldValue&&s[h](i.attributeName,i.oldValue,o)))})}(Ft(a),Ft(l)),_t=function(e){return Mt.observe(e,{childList:!0,subtree:!0}),e},_t(n),ft&&(it.attachShadow=function(){return _t(ft.apply(this,arguments))})):(wt=[],n[u]("DOMNodeInserted",Ut(a)),n[u]("DOMNodeRemoved",Ut(l))),n[u](S,zt),n[u]("readystatechange",zt),it.cloneNode=function(e){var t=lt.call(this,!!e),n=It(t);return-1<n&&Pt(t,A[n]),e&&O.length&&jt(t.querySelectorAll(O)),t});if(Tt)return Tt=!1;-2<_.call(L,N+p)+_.call(L,T+p)&&$t(t);if(!C.test(p)||-1<_.call(k,p))throw new Error("The type "+t+" is invalid");var i=function(){return o?n.createElement(f,p):n.createElement(f)},s=r||D,o=P.call(s,c),f=o?r[c].toUpperCase():p,p,d;return o&&-1<_.call(L,T+f)&&$t(f),d=L.push((o?N:T)+p)-1,O=O.concat(O.length?",":"",o?f+'[is="'+t.toLowerCase()+'"]':f),i.prototype=A[d]=P.call(s,"prototype")?s.prototype:tt(it),O.length&&Bt(n.querySelectorAll(O),a),i},n.createElement=gt=function(e,t){var r=Yt(t),i=r?mt.call(n,e,et(r)):mt.call(n,e),s=""+e,o=_.call(L,(r?N:T)+(r||s).toUpperCase()),u=-1<o;return r&&(i.setAttribute("is",r=r.toLowerCase()),u&&(u=qt(s.toUpperCase(),r))),kt=!n.createElement.innerHTMLHelper,u&&Pt(i,A[o]),i}),Kt.prototype={constructor:Kt,define:V?function(e,t,n){if(n)Qt(e,t,n);else{var r=e.toUpperCase();G[r]={constructor:t,create:[r]},Z.set(t,r),X.define(e,t)}}:Qt,get:V?function(e){return X.get(e)||Gt(e)}:Gt,whenDefined:V?function(e){return K.race([X.whenDefined(e),en(e)])}:en};if(!X||/^force/.test(t.type))tn();else if(!t.noBuiltIn)try{(function(t,r,i){r[c]="a",t.prototype=tt(HTMLAnchorElement.prototype),t.prototype.constructor=t,e.customElements.define(i,t,r);if(ht.call(n.createElement("a",{is:i}),"is")!==i||V&&ht.call(new t,"is")!==i)throw r})(function on(){return Reflect.construct(HTMLAnchorElement,[],on)},{},"document-register-element-a")}catch(nn){tn()}if(!t.noBuiltIn)try{mt.call(n,"a","a")}catch(rn){et=function(e){return{is:e.toLowerCase()}}}})(window);

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;;(function () {
	'use strict';

	/**
	 * @preserve FastClick: polyfill to remove click delays on browsers with touch UIs.
	 *
	 * @codingstandard ftlabs-jsv2
	 * @copyright The Financial Times Limited [All Rights Reserved]
	 * @license MIT License (see LICENSE.txt)
	 */

	/*jslint browser:true, node:true*/
	/*global define, Event, Node*/


	/**
	 * Instantiate fast-clicking listeners on the specified layer.
	 *
	 * @constructor
	 * @param {Element} layer The layer to listen on
	 * @param {Object} [options={}] The options to override the defaults
	 */
	function FastClick(layer, options) {
		var oldOnClick;

		options = options || {};

		/**
		 * Whether a click is currently being tracked.
		 *
		 * @type boolean
		 */
		this.trackingClick = false;


		/**
		 * Timestamp for when click tracking started.
		 *
		 * @type number
		 */
		this.trackingClickStart = 0;


		/**
		 * The element being tracked for a click.
		 *
		 * @type EventTarget
		 */
		this.targetElement = null;


		/**
		 * X-coordinate of touch start event.
		 *
		 * @type number
		 */
		this.touchStartX = 0;


		/**
		 * Y-coordinate of touch start event.
		 *
		 * @type number
		 */
		this.touchStartY = 0;


		/**
		 * ID of the last touch, retrieved from Touch.identifier.
		 *
		 * @type number
		 */
		this.lastTouchIdentifier = 0;


		/**
		 * Touchmove boundary, beyond which a click will be cancelled.
		 *
		 * @type number
		 */
		this.touchBoundary = options.touchBoundary || 10;


		/**
		 * The FastClick layer.
		 *
		 * @type Element
		 */
		this.layer = layer;

		/**
		 * The minimum time between tap(touchstart and touchend) events
		 *
		 * @type number
		 */
		this.tapDelay = options.tapDelay || 200;

		/**
		 * The maximum time for a tap
		 *
		 * @type number
		 */
		this.tapTimeout = options.tapTimeout || 700;

		if (FastClick.notNeeded(layer)) {
			return;
		}

		// Some old versions of Android don't have Function.prototype.bind
		function bind(method, context) {
			return function() { return method.apply(context, arguments); };
		}


		var methods = ['onMouse', 'onClick', 'onTouchStart', 'onTouchMove', 'onTouchEnd', 'onTouchCancel'];
		var context = this;
		for (var i = 0, l = methods.length; i < l; i++) {
			context[methods[i]] = bind(context[methods[i]], context);
		}

		// Set up event handlers as required
		if (deviceIsAndroid) {
			layer.addEventListener('mouseover', this.onMouse, true);
			layer.addEventListener('mousedown', this.onMouse, true);
			layer.addEventListener('mouseup', this.onMouse, true);
		}

		layer.addEventListener('click', this.onClick, true);
		layer.addEventListener('touchstart', this.onTouchStart, false);
		layer.addEventListener('touchmove', this.onTouchMove, false);
		layer.addEventListener('touchend', this.onTouchEnd, false);
		layer.addEventListener('touchcancel', this.onTouchCancel, false);

		// Hack is required for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
		// which is how FastClick normally stops click events bubbling to callbacks registered on the FastClick
		// layer when they are cancelled.
		if (!Event.prototype.stopImmediatePropagation) {
			layer.removeEventListener = function(type, callback, capture) {
				var rmv = Node.prototype.removeEventListener;
				if (type === 'click') {
					rmv.call(layer, type, callback.hijacked || callback, capture);
				} else {
					rmv.call(layer, type, callback, capture);
				}
			};

			layer.addEventListener = function(type, callback, capture) {
				var adv = Node.prototype.addEventListener;
				if (type === 'click') {
					adv.call(layer, type, callback.hijacked || (callback.hijacked = function(event) {
						if (!event.propagationStopped) {
							callback(event);
						}
					}), capture);
				} else {
					adv.call(layer, type, callback, capture);
				}
			};
		}

		// If a handler is already declared in the element's onclick attribute, it will be fired before
		// FastClick's onClick handler. Fix this by pulling out the user-defined handler function and
		// adding it as listener.
		if (typeof layer.onclick === 'function') {

			// Android browser on at least 3.2 requires a new reference to the function in layer.onclick
			// - the old one won't work if passed to addEventListener directly.
			oldOnClick = layer.onclick;
			layer.addEventListener('click', function(event) {
				oldOnClick(event);
			}, false);
			layer.onclick = null;
		}
	}

	/**
	* Windows Phone 8.1 fakes user agent string to look like Android and iPhone.
	*
	* @type boolean
	*/
	var deviceIsWindowsPhone = navigator.userAgent.indexOf("Windows Phone") >= 0;

	/**
	 * Android requires exceptions.
	 *
	 * @type boolean
	 */
	var deviceIsAndroid = navigator.userAgent.indexOf('Android') > 0 && !deviceIsWindowsPhone;


	/**
	 * iOS requires exceptions.
	 *
	 * @type boolean
	 */
	var deviceIsIOS = /iP(ad|hone|od)/.test(navigator.userAgent) && !deviceIsWindowsPhone;


	/**
	 * iOS 4 requires an exception for select elements.
	 *
	 * @type boolean
	 */
	var deviceIsIOS4 = deviceIsIOS && (/OS 4_\d(_\d)?/).test(navigator.userAgent);


	/**
	 * iOS 6.0-7.* requires the target element to be manually derived
	 *
	 * @type boolean
	 */
	var deviceIsIOSWithBadTarget = deviceIsIOS && (/OS [6-7]_\d/).test(navigator.userAgent);

	/**
	 * BlackBerry requires exceptions.
	 *
	 * @type boolean
	 */
	var deviceIsBlackBerry10 = navigator.userAgent.indexOf('BB10') > 0;

	/**
	 * Determine whether a given element requires a native click.
	 *
	 * @param {EventTarget|Element} target Target DOM element
	 * @returns {boolean} Returns true if the element needs a native click
	 */
	FastClick.prototype.needsClick = function(target) {
		switch (target.nodeName.toLowerCase()) {

		// Don't send a synthetic click to disabled inputs (issue #62)
		case 'button':
		case 'select':
		case 'textarea':
			if (target.disabled) {
				return true;
			}

			break;
		case 'input':

			// File inputs need real clicks on iOS 6 due to a browser bug (issue #68)
			if ((deviceIsIOS && target.type === 'file') || target.disabled) {
				return true;
			}

			break;
		case 'label':
		case 'iframe': // iOS8 homescreen apps can prevent events bubbling into frames
		case 'video':
			return true;
		}

		return (/\bneedsclick\b/).test(target.className);
	};


	/**
	 * Determine whether a given element requires a call to focus to simulate click into element.
	 *
	 * @param {EventTarget|Element} target Target DOM element
	 * @returns {boolean} Returns true if the element requires a call to focus to simulate native click.
	 */
	FastClick.prototype.needsFocus = function(target) {
		switch (target.nodeName.toLowerCase()) {
		case 'textarea':
			return true;
		case 'select':
			return !deviceIsAndroid;
		case 'input':
			switch (target.type) {
			case 'button':
			case 'checkbox':
			case 'file':
			case 'image':
			case 'radio':
			case 'submit':
				return false;
			}

			// No point in attempting to focus disabled inputs
			return !target.disabled && !target.readOnly;
		default:
			return (/\bneedsfocus\b/).test(target.className);
		}
	};


	/**
	 * Send a click event to the specified element.
	 *
	 * @param {EventTarget|Element} targetElement
	 * @param {Event} event
	 */
	FastClick.prototype.sendClick = function(targetElement, event) {
		var clickEvent, touch;

		// On some Android devices activeElement needs to be blurred otherwise the synthetic click will have no effect (#24)
		if (document.activeElement && document.activeElement !== targetElement) {
			document.activeElement.blur();
		}

		touch = event.changedTouches[0];

		// Synthesise a click event, with an extra attribute so it can be tracked
		clickEvent = document.createEvent('MouseEvents');
		clickEvent.initMouseEvent(this.determineEventType(targetElement), true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
		clickEvent.forwardedTouchEvent = true;
		targetElement.dispatchEvent(clickEvent);
	};

	FastClick.prototype.determineEventType = function(targetElement) {

		//Issue #159: Android Chrome Select Box does not open with a synthetic click event
		if (deviceIsAndroid && targetElement.tagName.toLowerCase() === 'select') {
			return 'mousedown';
		}

		return 'click';
	};


	/**
	 * @param {EventTarget|Element} targetElement
	 */
	FastClick.prototype.focus = function(targetElement) {
		var length;

		// Issue #160: on iOS 7, some input elements (e.g. date datetime month) throw a vague TypeError on setSelectionRange. These elements don't have an integer value for the selectionStart and selectionEnd properties, but unfortunately that can't be used for detection because accessing the properties also throws a TypeError. Just check the type instead. Filed as Apple bug #15122724.
		if (deviceIsIOS && targetElement.setSelectionRange && targetElement.type.indexOf('date') !== 0 && targetElement.type !== 'time' && targetElement.type !== 'month') {
			length = targetElement.value.length;
			targetElement.setSelectionRange(length, length);
		} else {
			targetElement.focus();
		}
	};


	/**
	 * Check whether the given target element is a child of a scrollable layer and if so, set a flag on it.
	 *
	 * @param {EventTarget|Element} targetElement
	 */
	FastClick.prototype.updateScrollParent = function(targetElement) {
		var scrollParent, parentElement;

		scrollParent = targetElement.fastClickScrollParent;

		// Attempt to discover whether the target element is contained within a scrollable layer. Re-check if the
		// target element was moved to another parent.
		if (!scrollParent || !scrollParent.contains(targetElement)) {
			parentElement = targetElement;
			do {
				if (parentElement.scrollHeight > parentElement.offsetHeight) {
					scrollParent = parentElement;
					targetElement.fastClickScrollParent = parentElement;
					break;
				}

				parentElement = parentElement.parentElement;
			} while (parentElement);
		}

		// Always update the scroll top tracker if possible.
		if (scrollParent) {
			scrollParent.fastClickLastScrollTop = scrollParent.scrollTop;
		}
	};


	/**
	 * @param {EventTarget} targetElement
	 * @returns {Element|EventTarget}
	 */
	FastClick.prototype.getTargetElementFromEventTarget = function(eventTarget) {

		// On some older browsers (notably Safari on iOS 4.1 - see issue #56) the event target may be a text node.
		if (eventTarget.nodeType === Node.TEXT_NODE) {
			return eventTarget.parentNode;
		}

		return eventTarget;
	};


	/**
	 * On touch start, record the position and scroll offset.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onTouchStart = function(event) {
		var targetElement, touch, selection;

		// Ignore multiple touches, otherwise pinch-to-zoom is prevented if both fingers are on the FastClick element (issue #111).
		if (event.targetTouches.length > 1) {
			return true;
		}

		targetElement = this.getTargetElementFromEventTarget(event.target);
		touch = event.targetTouches[0];

		if (deviceIsIOS) {

			// Only trusted events will deselect text on iOS (issue #49)
			selection = window.getSelection();
			if (selection.rangeCount && !selection.isCollapsed) {
				return true;
			}

			if (!deviceIsIOS4) {

				// Weird things happen on iOS when an alert or confirm dialog is opened from a click event callback (issue #23):
				// when the user next taps anywhere else on the page, new touchstart and touchend events are dispatched
				// with the same identifier as the touch event that previously triggered the click that triggered the alert.
				// Sadly, there is an issue on iOS 4 that causes some normal touch events to have the same identifier as an
				// immediately preceeding touch event (issue #52), so this fix is unavailable on that platform.
				// Issue 120: touch.identifier is 0 when Chrome dev tools 'Emulate touch events' is set with an iOS device UA string,
				// which causes all touch events to be ignored. As this block only applies to iOS, and iOS identifiers are always long,
				// random integers, it's safe to to continue if the identifier is 0 here.
				if (touch.identifier && touch.identifier === this.lastTouchIdentifier) {
					event.preventDefault();
					return false;
				}

				this.lastTouchIdentifier = touch.identifier;

				// If the target element is a child of a scrollable layer (using -webkit-overflow-scrolling: touch) and:
				// 1) the user does a fling scroll on the scrollable layer
				// 2) the user stops the fling scroll with another tap
				// then the event.target of the last 'touchend' event will be the element that was under the user's finger
				// when the fling scroll was started, causing FastClick to send a click event to that layer - unless a check
				// is made to ensure that a parent layer was not scrolled before sending a synthetic click (issue #42).
				this.updateScrollParent(targetElement);
			}
		}

		this.trackingClick = true;
		this.trackingClickStart = event.timeStamp;
		this.targetElement = targetElement;

		this.touchStartX = touch.pageX;
		this.touchStartY = touch.pageY;

		// Prevent phantom clicks on fast double-tap (issue #36)
		if ((event.timeStamp - this.lastClickTime) < this.tapDelay) {
			event.preventDefault();
		}

		return true;
	};


	/**
	 * Based on a touchmove event object, check whether the touch has moved past a boundary since it started.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.touchHasMoved = function(event) {
		var touch = event.changedTouches[0], boundary = this.touchBoundary;

		if (Math.abs(touch.pageX - this.touchStartX) > boundary || Math.abs(touch.pageY - this.touchStartY) > boundary) {
			return true;
		}

		return false;
	};


	/**
	 * Update the last position.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onTouchMove = function(event) {
		if (!this.trackingClick) {
			return true;
		}

		// If the touch has moved, cancel the click tracking
		if (this.targetElement !== this.getTargetElementFromEventTarget(event.target) || this.touchHasMoved(event)) {
			this.trackingClick = false;
			this.targetElement = null;
		}

		return true;
	};


	/**
	 * Attempt to find the labelled control for the given label element.
	 *
	 * @param {EventTarget|HTMLLabelElement} labelElement
	 * @returns {Element|null}
	 */
	FastClick.prototype.findControl = function(labelElement) {

		// Fast path for newer browsers supporting the HTML5 control attribute
		if (labelElement.control !== undefined) {
			return labelElement.control;
		}

		// All browsers under test that support touch events also support the HTML5 htmlFor attribute
		if (labelElement.htmlFor) {
			return document.getElementById(labelElement.htmlFor);
		}

		// If no for attribute exists, attempt to retrieve the first labellable descendant element
		// the list of which is defined here: http://www.w3.org/TR/html5/forms.html#category-label
		return labelElement.querySelector('button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea');
	};


	/**
	 * On touch end, determine whether to send a click event at once.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onTouchEnd = function(event) {
		var forElement, trackingClickStart, targetTagName, scrollParent, touch, targetElement = this.targetElement;

		if (!this.trackingClick) {
			return true;
		}

		// Prevent phantom clicks on fast double-tap (issue #36)
		if ((event.timeStamp - this.lastClickTime) < this.tapDelay) {
			this.cancelNextClick = true;
			return true;
		}

		if ((event.timeStamp - this.trackingClickStart) > this.tapTimeout) {
			return true;
		}

		// Reset to prevent wrong click cancel on input (issue #156).
		this.cancelNextClick = false;

		this.lastClickTime = event.timeStamp;

		trackingClickStart = this.trackingClickStart;
		this.trackingClick = false;
		this.trackingClickStart = 0;

		// On some iOS devices, the targetElement supplied with the event is invalid if the layer
		// is performing a transition or scroll, and has to be re-detected manually. Note that
		// for this to function correctly, it must be called *after* the event target is checked!
		// See issue #57; also filed as rdar://13048589 .
		if (deviceIsIOSWithBadTarget) {
			touch = event.changedTouches[0];

			// In certain cases arguments of elementFromPoint can be negative, so prevent setting targetElement to null
			targetElement = document.elementFromPoint(touch.pageX - window.pageXOffset, touch.pageY - window.pageYOffset) || targetElement;
			targetElement.fastClickScrollParent = this.targetElement.fastClickScrollParent;
		}

		targetTagName = targetElement.tagName.toLowerCase();
		if (targetTagName === 'label') {
			forElement = this.findControl(targetElement);
			if (forElement) {
				this.focus(targetElement);
				if (deviceIsAndroid) {
					return false;
				}

				targetElement = forElement;
			}
		} else if (this.needsFocus(targetElement)) {

			// Case 1: If the touch started a while ago (best guess is 100ms based on tests for issue #36) then focus will be triggered anyway. Return early and unset the target element reference so that the subsequent click will be allowed through.
			// Case 2: Without this exception for input elements tapped when the document is contained in an iframe, then any inputted text won't be visible even though the value attribute is updated as the user types (issue #37).
			if ((event.timeStamp - trackingClickStart) > 100 || (deviceIsIOS && window.top !== window && targetTagName === 'input')) {
				this.targetElement = null;
				return false;
			}

			this.focus(targetElement);
			this.sendClick(targetElement, event);

			// Select elements need the event to go through on iOS 4, otherwise the selector menu won't open.
			// Also this breaks opening selects when VoiceOver is active on iOS6, iOS7 (and possibly others)
			if (!deviceIsIOS || targetTagName !== 'select') {
				this.targetElement = null;
				event.preventDefault();
			}

			return false;
		}

		if (deviceIsIOS && !deviceIsIOS4) {

			// Don't send a synthetic click event if the target element is contained within a parent layer that was scrolled
			// and this tap is being used to stop the scrolling (usually initiated by a fling - issue #42).
			scrollParent = targetElement.fastClickScrollParent;
			if (scrollParent && scrollParent.fastClickLastScrollTop !== scrollParent.scrollTop) {
				return true;
			}
		}

		// Prevent the actual click from going though - unless the target node is marked as requiring
		// real clicks or if it is in the whitelist in which case only non-programmatic clicks are permitted.
		if (!this.needsClick(targetElement)) {
			event.preventDefault();
			this.sendClick(targetElement, event);
		}

		return false;
	};


	/**
	 * On touch cancel, stop tracking the click.
	 *
	 * @returns {void}
	 */
	FastClick.prototype.onTouchCancel = function() {
		this.trackingClick = false;
		this.targetElement = null;
	};


	/**
	 * Determine mouse events which should be permitted.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onMouse = function(event) {

		// If a target element was never set (because a touch event was never fired) allow the event
		if (!this.targetElement) {
			return true;
		}

		if (event.forwardedTouchEvent) {
			return true;
		}

		// Programmatically generated events targeting a specific element should be permitted
		if (!event.cancelable) {
			return true;
		}

		// Derive and check the target element to see whether the mouse event needs to be permitted;
		// unless explicitly enabled, prevent non-touch click events from triggering actions,
		// to prevent ghost/doubleclicks.
		if (!this.needsClick(this.targetElement) || this.cancelNextClick) {

			// Prevent any user-added listeners declared on FastClick element from being fired.
			if (event.stopImmediatePropagation) {
				event.stopImmediatePropagation();
			} else {

				// Part of the hack for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
				event.propagationStopped = true;
			}

			// Cancel the event
			event.stopPropagation();
			event.preventDefault();

			return false;
		}

		// If the mouse event is permitted, return true for the action to go through.
		return true;
	};


	/**
	 * On actual clicks, determine whether this is a touch-generated click, a click action occurring
	 * naturally after a delay after a touch (which needs to be cancelled to avoid duplication), or
	 * an actual click which should be permitted.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onClick = function(event) {
		var permitted;

		// It's possible for another FastClick-like library delivered with third-party code to fire a click event before FastClick does (issue #44). In that case, set the click-tracking flag back to false and return early. This will cause onTouchEnd to return early.
		if (this.trackingClick) {
			this.targetElement = null;
			this.trackingClick = false;
			return true;
		}

		// Very odd behaviour on iOS (issue #18): if a submit element is present inside a form and the user hits enter in the iOS simulator or clicks the Go button on the pop-up OS keyboard the a kind of 'fake' click event will be triggered with the submit-type input element as the target.
		if (event.target.type === 'submit' && event.detail === 0) {
			return true;
		}

		permitted = this.onMouse(event);

		// Only unset targetElement if the click is not permitted. This will ensure that the check for !targetElement in onMouse fails and the browser's click doesn't go through.
		if (!permitted) {
			this.targetElement = null;
		}

		// If clicks are permitted, return true for the action to go through.
		return permitted;
	};


	/**
	 * Remove all FastClick's event listeners.
	 *
	 * @returns {void}
	 */
	FastClick.prototype.destroy = function() {
		var layer = this.layer;

		if (deviceIsAndroid) {
			layer.removeEventListener('mouseover', this.onMouse, true);
			layer.removeEventListener('mousedown', this.onMouse, true);
			layer.removeEventListener('mouseup', this.onMouse, true);
		}

		layer.removeEventListener('click', this.onClick, true);
		layer.removeEventListener('touchstart', this.onTouchStart, false);
		layer.removeEventListener('touchmove', this.onTouchMove, false);
		layer.removeEventListener('touchend', this.onTouchEnd, false);
		layer.removeEventListener('touchcancel', this.onTouchCancel, false);
	};


	/**
	 * Check whether FastClick is needed.
	 *
	 * @param {Element} layer The layer to listen on
	 */
	FastClick.notNeeded = function(layer) {
		var metaViewport;
		var chromeVersion;
		var blackberryVersion;
		var firefoxVersion;

		// Devices that don't support touch don't need FastClick
		if (typeof window.ontouchstart === 'undefined') {
			return true;
		}

		// Chrome version - zero for other browsers
		chromeVersion = +(/Chrome\/([0-9]+)/.exec(navigator.userAgent) || [,0])[1];

		if (chromeVersion) {

			if (deviceIsAndroid) {
				metaViewport = document.querySelector('meta[name=viewport]');

				if (metaViewport) {
					// Chrome on Android with user-scalable="no" doesn't need FastClick (issue #89)
					if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
						return true;
					}
					// Chrome 32 and above with width=device-width or less don't need FastClick
					if (chromeVersion > 31 && document.documentElement.scrollWidth <= window.outerWidth) {
						return true;
					}
				}

			// Chrome desktop doesn't need FastClick (issue #15)
			} else {
				return true;
			}
		}

		if (deviceIsBlackBerry10) {
			blackberryVersion = navigator.userAgent.match(/Version\/([0-9]*)\.([0-9]*)/);

			// BlackBerry 10.3+ does not require Fastclick library.
			// https://github.com/ftlabs/fastclick/issues/251
			if (blackberryVersion[1] >= 10 && blackberryVersion[2] >= 3) {
				metaViewport = document.querySelector('meta[name=viewport]');

				if (metaViewport) {
					// user-scalable=no eliminates click delay.
					if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
						return true;
					}
					// width=device-width (or less than device-width) eliminates click delay.
					if (document.documentElement.scrollWidth <= window.outerWidth) {
						return true;
					}
				}
			}
		}

		// IE10 with -ms-touch-action: none or manipulation, which disables double-tap-to-zoom (issue #97)
		if (layer.style.msTouchAction === 'none' || layer.style.touchAction === 'manipulation') {
			return true;
		}

		// Firefox version - zero for other browsers
		firefoxVersion = +(/Firefox\/([0-9]+)/.exec(navigator.userAgent) || [,0])[1];

		if (firefoxVersion >= 27) {
			// Firefox 27+ does not have tap delay if the content is not zoomable - https://bugzilla.mozilla.org/show_bug.cgi?id=922896

			metaViewport = document.querySelector('meta[name=viewport]');
			if (metaViewport && (metaViewport.content.indexOf('user-scalable=no') !== -1 || document.documentElement.scrollWidth <= window.outerWidth)) {
				return true;
			}
		}

		// IE11: prefixed -ms-touch-action is no longer supported and it's recomended to use non-prefixed version
		// http://msdn.microsoft.com/en-us/library/windows/apps/Hh767313.aspx
		if (layer.style.touchAction === 'none' || layer.style.touchAction === 'manipulation') {
			return true;
		}

		return false;
	};


	/**
	 * Factory method for creating a FastClick object
	 *
	 * @param {Element} layer The layer to listen on
	 * @param {Object} [options={}] The options to override the defaults
	 */
	FastClick.attach = function(layer, options) {
		return new FastClick(layer, options);
	};


	if (true) {

		// AMD. Register as an anonymous module.
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return FastClick;
		}.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else if (typeof module !== 'undefined' && module.exports) {
		module.exports = FastClick.attach;
		module.exports.FastClick = FastClick;
	} else {
		window.FastClick = FastClick;
	}
}());


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;/*! Hammer.JS - v2.0.7 - 2016-04-22
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the MIT license */
(function(window, document, exportName, undefined) {
  'use strict';

var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];
var TEST_ELEMENT = document.createElement('div');

var TYPE_FUNCTION = 'function';

var round = Math.round;
var abs = Math.abs;
var now = Date.now;

/**
 * set a timeout with a given scope
 * @param {Function} fn
 * @param {Number} timeout
 * @param {Object} context
 * @returns {number}
 */
function setTimeoutContext(fn, timeout, context) {
    return setTimeout(bindFn(fn, context), timeout);
}

/**
 * if the argument is an array, we want to execute the fn on each entry
 * if it aint an array we don't want to do a thing.
 * this is used by all the methods that accept a single and array argument.
 * @param {*|Array} arg
 * @param {String} fn
 * @param {Object} [context]
 * @returns {Boolean}
 */
function invokeArrayArg(arg, fn, context) {
    if (Array.isArray(arg)) {
        each(arg, context[fn], context);
        return true;
    }
    return false;
}

/**
 * walk objects and arrays
 * @param {Object} obj
 * @param {Function} iterator
 * @param {Object} context
 */
function each(obj, iterator, context) {
    var i;

    if (!obj) {
        return;
    }

    if (obj.forEach) {
        obj.forEach(iterator, context);
    } else if (obj.length !== undefined) {
        i = 0;
        while (i < obj.length) {
            iterator.call(context, obj[i], i, obj);
            i++;
        }
    } else {
        for (i in obj) {
            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
        }
    }
}

/**
 * wrap a method with a deprecation warning and stack trace
 * @param {Function} method
 * @param {String} name
 * @param {String} message
 * @returns {Function} A new function wrapping the supplied method.
 */
function deprecate(method, name, message) {
    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\n' + message + ' AT \n';
    return function() {
        var e = new Error('get-stack-trace');
        var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, '')
            .replace(/^\s+at\s+/gm, '')
            .replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';

        var log = window.console && (window.console.warn || window.console.log);
        if (log) {
            log.call(window.console, deprecationMessage, stack);
        }
        return method.apply(this, arguments);
    };
}

/**
 * extend object.
 * means that properties in dest will be overwritten by the ones in src.
 * @param {Object} target
 * @param {...Object} objects_to_assign
 * @returns {Object} target
 */
var assign;
if (typeof Object.assign !== 'function') {
    assign = function assign(target) {
        if (target === undefined || target === null) {
            throw new TypeError('Cannot convert undefined or null to object');
        }

        var output = Object(target);
        for (var index = 1; index < arguments.length; index++) {
            var source = arguments[index];
            if (source !== undefined && source !== null) {
                for (var nextKey in source) {
                    if (source.hasOwnProperty(nextKey)) {
                        output[nextKey] = source[nextKey];
                    }
                }
            }
        }
        return output;
    };
} else {
    assign = Object.assign;
}

/**
 * extend object.
 * means that properties in dest will be overwritten by the ones in src.
 * @param {Object} dest
 * @param {Object} src
 * @param {Boolean} [merge=false]
 * @returns {Object} dest
 */
var extend = deprecate(function extend(dest, src, merge) {
    var keys = Object.keys(src);
    var i = 0;
    while (i < keys.length) {
        if (!merge || (merge && dest[keys[i]] === undefined)) {
            dest[keys[i]] = src[keys[i]];
        }
        i++;
    }
    return dest;
}, 'extend', 'Use `assign`.');

/**
 * merge the values from src in the dest.
 * means that properties that exist in dest will not be overwritten by src
 * @param {Object} dest
 * @param {Object} src
 * @returns {Object} dest
 */
var merge = deprecate(function merge(dest, src) {
    return extend(dest, src, true);
}, 'merge', 'Use `assign`.');

/**
 * simple class inheritance
 * @param {Function} child
 * @param {Function} base
 * @param {Object} [properties]
 */
function inherit(child, base, properties) {
    var baseP = base.prototype,
        childP;

    childP = child.prototype = Object.create(baseP);
    childP.constructor = child;
    childP._super = baseP;

    if (properties) {
        assign(childP, properties);
    }
}

/**
 * simple function bind
 * @param {Function} fn
 * @param {Object} context
 * @returns {Function}
 */
function bindFn(fn, context) {
    return function boundFn() {
        return fn.apply(context, arguments);
    };
}

/**
 * let a boolean value also be a function that must return a boolean
 * this first item in args will be used as the context
 * @param {Boolean|Function} val
 * @param {Array} [args]
 * @returns {Boolean}
 */
function boolOrFn(val, args) {
    if (typeof val == TYPE_FUNCTION) {
        return val.apply(args ? args[0] || undefined : undefined, args);
    }
    return val;
}

/**
 * use the val2 when val1 is undefined
 * @param {*} val1
 * @param {*} val2
 * @returns {*}
 */
function ifUndefined(val1, val2) {
    return (val1 === undefined) ? val2 : val1;
}

/**
 * addEventListener with multiple events at once
 * @param {EventTarget} target
 * @param {String} types
 * @param {Function} handler
 */
function addEventListeners(target, types, handler) {
    each(splitStr(types), function(type) {
        target.addEventListener(type, handler, false);
    });
}

/**
 * removeEventListener with multiple events at once
 * @param {EventTarget} target
 * @param {String} types
 * @param {Function} handler
 */
function removeEventListeners(target, types, handler) {
    each(splitStr(types), function(type) {
        target.removeEventListener(type, handler, false);
    });
}

/**
 * find if a node is in the given parent
 * @method hasParent
 * @param {HTMLElement} node
 * @param {HTMLElement} parent
 * @return {Boolean} found
 */
function hasParent(node, parent) {
    while (node) {
        if (node == parent) {
            return true;
        }
        node = node.parentNode;
    }
    return false;
}

/**
 * small indexOf wrapper
 * @param {String} str
 * @param {String} find
 * @returns {Boolean} found
 */
function inStr(str, find) {
    return str.indexOf(find) > -1;
}

/**
 * split string on whitespace
 * @param {String} str
 * @returns {Array} words
 */
function splitStr(str) {
    return str.trim().split(/\s+/g);
}

/**
 * find if a array contains the object using indexOf or a simple polyFill
 * @param {Array} src
 * @param {String} find
 * @param {String} [findByKey]
 * @return {Boolean|Number} false when not found, or the index
 */
function inArray(src, find, findByKey) {
    if (src.indexOf && !findByKey) {
        return src.indexOf(find);
    } else {
        var i = 0;
        while (i < src.length) {
            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {
                return i;
            }
            i++;
        }
        return -1;
    }
}

/**
 * convert array-like objects to real arrays
 * @param {Object} obj
 * @returns {Array}
 */
function toArray(obj) {
    return Array.prototype.slice.call(obj, 0);
}

/**
 * unique array with objects based on a key (like 'id') or just by the array's value
 * @param {Array} src [{id:1},{id:2},{id:1}]
 * @param {String} [key]
 * @param {Boolean} [sort=False]
 * @returns {Array} [{id:1},{id:2}]
 */
function uniqueArray(src, key, sort) {
    var results = [];
    var values = [];
    var i = 0;

    while (i < src.length) {
        var val = key ? src[i][key] : src[i];
        if (inArray(values, val) < 0) {
            results.push(src[i]);
        }
        values[i] = val;
        i++;
    }

    if (sort) {
        if (!key) {
            results = results.sort();
        } else {
            results = results.sort(function sortUniqueArray(a, b) {
                return a[key] > b[key];
            });
        }
    }

    return results;
}

/**
 * get the prefixed property
 * @param {Object} obj
 * @param {String} property
 * @returns {String|Undefined} prefixed
 */
function prefixed(obj, property) {
    var prefix, prop;
    var camelProp = property[0].toUpperCase() + property.slice(1);

    var i = 0;
    while (i < VENDOR_PREFIXES.length) {
        prefix = VENDOR_PREFIXES[i];
        prop = (prefix) ? prefix + camelProp : property;

        if (prop in obj) {
            return prop;
        }
        i++;
    }
    return undefined;
}

/**
 * get a unique id
 * @returns {number} uniqueId
 */
var _uniqueId = 1;
function uniqueId() {
    return _uniqueId++;
}

/**
 * get the window object of an element
 * @param {HTMLElement} element
 * @returns {DocumentView|Window}
 */
function getWindowForElement(element) {
    var doc = element.ownerDocument || element;
    return (doc.defaultView || doc.parentWindow || window);
}

var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;

var SUPPORT_TOUCH = ('ontouchstart' in window);
var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;
var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);

var INPUT_TYPE_TOUCH = 'touch';
var INPUT_TYPE_PEN = 'pen';
var INPUT_TYPE_MOUSE = 'mouse';
var INPUT_TYPE_KINECT = 'kinect';

var COMPUTE_INTERVAL = 25;

var INPUT_START = 1;
var INPUT_MOVE = 2;
var INPUT_END = 4;
var INPUT_CANCEL = 8;

var DIRECTION_NONE = 1;
var DIRECTION_LEFT = 2;
var DIRECTION_RIGHT = 4;
var DIRECTION_UP = 8;
var DIRECTION_DOWN = 16;

var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;

var PROPS_XY = ['x', 'y'];
var PROPS_CLIENT_XY = ['clientX', 'clientY'];

/**
 * create new input type manager
 * @param {Manager} manager
 * @param {Function} callback
 * @returns {Input}
 * @constructor
 */
function Input(manager, callback) {
    var self = this;
    this.manager = manager;
    this.callback = callback;
    this.element = manager.element;
    this.target = manager.options.inputTarget;

    // smaller wrapper around the handler, for the scope and the enabled state of the manager,
    // so when disabled the input events are completely bypassed.
    this.domHandler = function(ev) {
        if (boolOrFn(manager.options.enable, [manager])) {
            self.handler(ev);
        }
    };

    this.init();

}

Input.prototype = {
    /**
     * should handle the inputEvent data and trigger the callback
     * @virtual
     */
    handler: function() { },

    /**
     * bind the events
     */
    init: function() {
        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
    },

    /**
     * unbind the events
     */
    destroy: function() {
        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
    }
};

/**
 * create new input type manager
 * called by the Manager constructor
 * @param {Hammer} manager
 * @returns {Input}
 */
function createInputInstance(manager) {
    var Type;
    var inputClass = manager.options.inputClass;

    if (inputClass) {
        Type = inputClass;
    } else if (SUPPORT_POINTER_EVENTS) {
        Type = PointerEventInput;
    } else if (SUPPORT_ONLY_TOUCH) {
        Type = TouchInput;
    } else if (!SUPPORT_TOUCH) {
        Type = MouseInput;
    } else {
        Type = TouchMouseInput;
    }
    return new (Type)(manager, inputHandler);
}

/**
 * handle input events
 * @param {Manager} manager
 * @param {String} eventType
 * @param {Object} input
 */
function inputHandler(manager, eventType, input) {
    var pointersLen = input.pointers.length;
    var changedPointersLen = input.changedPointers.length;
    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));
    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));

    input.isFirst = !!isFirst;
    input.isFinal = !!isFinal;

    if (isFirst) {
        manager.session = {};
    }

    // source event is the normalized value of the domEvents
    // like 'touchstart, mouseup, pointerdown'
    input.eventType = eventType;

    // compute scale, rotation etc
    computeInputData(manager, input);

    // emit secret event
    manager.emit('hammer.input', input);

    manager.recognize(input);
    manager.session.prevInput = input;
}

/**
 * extend the data with some usable properties like scale, rotate, velocity etc
 * @param {Object} manager
 * @param {Object} input
 */
function computeInputData(manager, input) {
    var session = manager.session;
    var pointers = input.pointers;
    var pointersLength = pointers.length;

    // store the first input to calculate the distance and direction
    if (!session.firstInput) {
        session.firstInput = simpleCloneInputData(input);
    }

    // to compute scale and rotation we need to store the multiple touches
    if (pointersLength > 1 && !session.firstMultiple) {
        session.firstMultiple = simpleCloneInputData(input);
    } else if (pointersLength === 1) {
        session.firstMultiple = false;
    }

    var firstInput = session.firstInput;
    var firstMultiple = session.firstMultiple;
    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;

    var center = input.center = getCenter(pointers);
    input.timeStamp = now();
    input.deltaTime = input.timeStamp - firstInput.timeStamp;

    input.angle = getAngle(offsetCenter, center);
    input.distance = getDistance(offsetCenter, center);

    computeDeltaXY(session, input);
    input.offsetDirection = getDirection(input.deltaX, input.deltaY);

    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
    input.overallVelocityX = overallVelocity.x;
    input.overallVelocityY = overallVelocity.y;
    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;

    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;

    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >
        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);

    computeIntervalInputData(session, input);

    // find the correct target
    var target = manager.element;
    if (hasParent(input.srcEvent.target, target)) {
        target = input.srcEvent.target;
    }
    input.target = target;
}

function computeDeltaXY(session, input) {
    var center = input.center;
    var offset = session.offsetDelta || {};
    var prevDelta = session.prevDelta || {};
    var prevInput = session.prevInput || {};

    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
        prevDelta = session.prevDelta = {
            x: prevInput.deltaX || 0,
            y: prevInput.deltaY || 0
        };

        offset = session.offsetDelta = {
            x: center.x,
            y: center.y
        };
    }

    input.deltaX = prevDelta.x + (center.x - offset.x);
    input.deltaY = prevDelta.y + (center.y - offset.y);
}

/**
 * velocity is calculated every x ms
 * @param {Object} session
 * @param {Object} input
 */
function computeIntervalInputData(session, input) {
    var last = session.lastInterval || input,
        deltaTime = input.timeStamp - last.timeStamp,
        velocity, velocityX, velocityY, direction;

    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
        var deltaX = input.deltaX - last.deltaX;
        var deltaY = input.deltaY - last.deltaY;

        var v = getVelocity(deltaTime, deltaX, deltaY);
        velocityX = v.x;
        velocityY = v.y;
        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;
        direction = getDirection(deltaX, deltaY);

        session.lastInterval = input;
    } else {
        // use latest velocity info if it doesn't overtake a minimum period
        velocity = last.velocity;
        velocityX = last.velocityX;
        velocityY = last.velocityY;
        direction = last.direction;
    }

    input.velocity = velocity;
    input.velocityX = velocityX;
    input.velocityY = velocityY;
    input.direction = direction;
}

/**
 * create a simple clone from the input used for storage of firstInput and firstMultiple
 * @param {Object} input
 * @returns {Object} clonedInputData
 */
function simpleCloneInputData(input) {
    // make a simple copy of the pointers because we will get a reference if we don't
    // we only need clientXY for the calculations
    var pointers = [];
    var i = 0;
    while (i < input.pointers.length) {
        pointers[i] = {
            clientX: round(input.pointers[i].clientX),
            clientY: round(input.pointers[i].clientY)
        };
        i++;
    }

    return {
        timeStamp: now(),
        pointers: pointers,
        center: getCenter(pointers),
        deltaX: input.deltaX,
        deltaY: input.deltaY
    };
}

/**
 * get the center of all the pointers
 * @param {Array} pointers
 * @return {Object} center contains `x` and `y` properties
 */
function getCenter(pointers) {
    var pointersLength = pointers.length;

    // no need to loop when only one touch
    if (pointersLength === 1) {
        return {
            x: round(pointers[0].clientX),
            y: round(pointers[0].clientY)
        };
    }

    var x = 0, y = 0, i = 0;
    while (i < pointersLength) {
        x += pointers[i].clientX;
        y += pointers[i].clientY;
        i++;
    }

    return {
        x: round(x / pointersLength),
        y: round(y / pointersLength)
    };
}

/**
 * calculate the velocity between two points. unit is in px per ms.
 * @param {Number} deltaTime
 * @param {Number} x
 * @param {Number} y
 * @return {Object} velocity `x` and `y`
 */
function getVelocity(deltaTime, x, y) {
    return {
        x: x / deltaTime || 0,
        y: y / deltaTime || 0
    };
}

/**
 * get the direction between two points
 * @param {Number} x
 * @param {Number} y
 * @return {Number} direction
 */
function getDirection(x, y) {
    if (x === y) {
        return DIRECTION_NONE;
    }

    if (abs(x) >= abs(y)) {
        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
    }
    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
}

/**
 * calculate the absolute distance between two points
 * @param {Object} p1 {x, y}
 * @param {Object} p2 {x, y}
 * @param {Array} [props] containing x and y keys
 * @return {Number} distance
 */
function getDistance(p1, p2, props) {
    if (!props) {
        props = PROPS_XY;
    }
    var x = p2[props[0]] - p1[props[0]],
        y = p2[props[1]] - p1[props[1]];

    return Math.sqrt((x * x) + (y * y));
}

/**
 * calculate the angle between two coordinates
 * @param {Object} p1
 * @param {Object} p2
 * @param {Array} [props] containing x and y keys
 * @return {Number} angle
 */
function getAngle(p1, p2, props) {
    if (!props) {
        props = PROPS_XY;
    }
    var x = p2[props[0]] - p1[props[0]],
        y = p2[props[1]] - p1[props[1]];
    return Math.atan2(y, x) * 180 / Math.PI;
}

/**
 * calculate the rotation degrees between two pointersets
 * @param {Array} start array of pointers
 * @param {Array} end array of pointers
 * @return {Number} rotation
 */
function getRotation(start, end) {
    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
}

/**
 * calculate the scale factor between two pointersets
 * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
 * @param {Array} start array of pointers
 * @param {Array} end array of pointers
 * @return {Number} scale
 */
function getScale(start, end) {
    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
}

var MOUSE_INPUT_MAP = {
    mousedown: INPUT_START,
    mousemove: INPUT_MOVE,
    mouseup: INPUT_END
};

var MOUSE_ELEMENT_EVENTS = 'mousedown';
var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';

/**
 * Mouse events input
 * @constructor
 * @extends Input
 */
function MouseInput() {
    this.evEl = MOUSE_ELEMENT_EVENTS;
    this.evWin = MOUSE_WINDOW_EVENTS;

    this.pressed = false; // mousedown state

    Input.apply(this, arguments);
}

inherit(MouseInput, Input, {
    /**
     * handle mouse events
     * @param {Object} ev
     */
    handler: function MEhandler(ev) {
        var eventType = MOUSE_INPUT_MAP[ev.type];

        // on start we want to have the left mouse button down
        if (eventType & INPUT_START && ev.button === 0) {
            this.pressed = true;
        }

        if (eventType & INPUT_MOVE && ev.which !== 1) {
            eventType = INPUT_END;
        }

        // mouse must be down
        if (!this.pressed) {
            return;
        }

        if (eventType & INPUT_END) {
            this.pressed = false;
        }

        this.callback(this.manager, eventType, {
            pointers: [ev],
            changedPointers: [ev],
            pointerType: INPUT_TYPE_MOUSE,
            srcEvent: ev
        });
    }
});

var POINTER_INPUT_MAP = {
    pointerdown: INPUT_START,
    pointermove: INPUT_MOVE,
    pointerup: INPUT_END,
    pointercancel: INPUT_CANCEL,
    pointerout: INPUT_CANCEL
};

// in IE10 the pointer types is defined as an enum
var IE10_POINTER_TYPE_ENUM = {
    2: INPUT_TYPE_TOUCH,
    3: INPUT_TYPE_PEN,
    4: INPUT_TYPE_MOUSE,
    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
};

var POINTER_ELEMENT_EVENTS = 'pointerdown';
var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';

// IE10 has prefixed support, and case-sensitive
if (window.MSPointerEvent && !window.PointerEvent) {
    POINTER_ELEMENT_EVENTS = 'MSPointerDown';
    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
}

/**
 * Pointer events input
 * @constructor
 * @extends Input
 */
function PointerEventInput() {
    this.evEl = POINTER_ELEMENT_EVENTS;
    this.evWin = POINTER_WINDOW_EVENTS;

    Input.apply(this, arguments);

    this.store = (this.manager.session.pointerEvents = []);
}

inherit(PointerEventInput, Input, {
    /**
     * handle mouse events
     * @param {Object} ev
     */
    handler: function PEhandler(ev) {
        var store = this.store;
        var removePointer = false;

        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;

        var isTouch = (pointerType == INPUT_TYPE_TOUCH);

        // get index of the event in the store
        var storeIndex = inArray(store, ev.pointerId, 'pointerId');

        // start and mouse must be down
        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
            if (storeIndex < 0) {
                store.push(ev);
                storeIndex = store.length - 1;
            }
        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
            removePointer = true;
        }

        // it not found, so the pointer hasn't been down (so it's probably a hover)
        if (storeIndex < 0) {
            return;
        }

        // update the event in the store
        store[storeIndex] = ev;

        this.callback(this.manager, eventType, {
            pointers: store,
            changedPointers: [ev],
            pointerType: pointerType,
            srcEvent: ev
        });

        if (removePointer) {
            // remove from the store
            store.splice(storeIndex, 1);
        }
    }
});

var SINGLE_TOUCH_INPUT_MAP = {
    touchstart: INPUT_START,
    touchmove: INPUT_MOVE,
    touchend: INPUT_END,
    touchcancel: INPUT_CANCEL
};

var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';

/**
 * Touch events input
 * @constructor
 * @extends Input
 */
function SingleTouchInput() {
    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
    this.started = false;

    Input.apply(this, arguments);
}

inherit(SingleTouchInput, Input, {
    handler: function TEhandler(ev) {
        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];

        // should we handle the touch events?
        if (type === INPUT_START) {
            this.started = true;
        }

        if (!this.started) {
            return;
        }

        var touches = normalizeSingleTouches.call(this, ev, type);

        // when done, reset the started state
        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
            this.started = false;
        }

        this.callback(this.manager, type, {
            pointers: touches[0],
            changedPointers: touches[1],
            pointerType: INPUT_TYPE_TOUCH,
            srcEvent: ev
        });
    }
});

/**
 * @this {TouchInput}
 * @param {Object} ev
 * @param {Number} type flag
 * @returns {undefined|Array} [all, changed]
 */
function normalizeSingleTouches(ev, type) {
    var all = toArray(ev.touches);
    var changed = toArray(ev.changedTouches);

    if (type & (INPUT_END | INPUT_CANCEL)) {
        all = uniqueArray(all.concat(changed), 'identifier', true);
    }

    return [all, changed];
}

var TOUCH_INPUT_MAP = {
    touchstart: INPUT_START,
    touchmove: INPUT_MOVE,
    touchend: INPUT_END,
    touchcancel: INPUT_CANCEL
};

var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';

/**
 * Multi-user touch events input
 * @constructor
 * @extends Input
 */
function TouchInput() {
    this.evTarget = TOUCH_TARGET_EVENTS;
    this.targetIds = {};

    Input.apply(this, arguments);
}

inherit(TouchInput, Input, {
    handler: function MTEhandler(ev) {
        var type = TOUCH_INPUT_MAP[ev.type];
        var touches = getTouches.call(this, ev, type);
        if (!touches) {
            return;
        }

        this.callback(this.manager, type, {
            pointers: touches[0],
            changedPointers: touches[1],
            pointerType: INPUT_TYPE_TOUCH,
            srcEvent: ev
        });
    }
});

/**
 * @this {TouchInput}
 * @param {Object} ev
 * @param {Number} type flag
 * @returns {undefined|Array} [all, changed]
 */
function getTouches(ev, type) {
    var allTouches = toArray(ev.touches);
    var targetIds = this.targetIds;

    // when there is only one touch, the process can be simplified
    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
        targetIds[allTouches[0].identifier] = true;
        return [allTouches, allTouches];
    }

    var i,
        targetTouches,
        changedTouches = toArray(ev.changedTouches),
        changedTargetTouches = [],
        target = this.target;

    // get target touches from touches
    targetTouches = allTouches.filter(function(touch) {
        return hasParent(touch.target, target);
    });

    // collect touches
    if (type === INPUT_START) {
        i = 0;
        while (i < targetTouches.length) {
            targetIds[targetTouches[i].identifier] = true;
            i++;
        }
    }

    // filter changed touches to only contain touches that exist in the collected target ids
    i = 0;
    while (i < changedTouches.length) {
        if (targetIds[changedTouches[i].identifier]) {
            changedTargetTouches.push(changedTouches[i]);
        }

        // cleanup removed touches
        if (type & (INPUT_END | INPUT_CANCEL)) {
            delete targetIds[changedTouches[i].identifier];
        }
        i++;
    }

    if (!changedTargetTouches.length) {
        return;
    }

    return [
        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),
        changedTargetTouches
    ];
}

/**
 * Combined touch and mouse input
 *
 * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
 * This because touch devices also emit mouse events while doing a touch.
 *
 * @constructor
 * @extends Input
 */

var DEDUP_TIMEOUT = 2500;
var DEDUP_DISTANCE = 25;

function TouchMouseInput() {
    Input.apply(this, arguments);

    var handler = bindFn(this.handler, this);
    this.touch = new TouchInput(this.manager, handler);
    this.mouse = new MouseInput(this.manager, handler);

    this.primaryTouch = null;
    this.lastTouches = [];
}

inherit(TouchMouseInput, Input, {
    /**
     * handle mouse and touch events
     * @param {Hammer} manager
     * @param {String} inputEvent
     * @param {Object} inputData
     */
    handler: function TMEhandler(manager, inputEvent, inputData) {
        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),
            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);

        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {
            return;
        }

        // when we're in a touch event, record touches to  de-dupe synthetic mouse event
        if (isTouch) {
            recordTouches.call(this, inputEvent, inputData);
        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {
            return;
        }

        this.callback(manager, inputEvent, inputData);
    },

    /**
     * remove the event listeners
     */
    destroy: function destroy() {
        this.touch.destroy();
        this.mouse.destroy();
    }
});

function recordTouches(eventType, eventData) {
    if (eventType & INPUT_START) {
        this.primaryTouch = eventData.changedPointers[0].identifier;
        setLastTouch.call(this, eventData);
    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
        setLastTouch.call(this, eventData);
    }
}

function setLastTouch(eventData) {
    var touch = eventData.changedPointers[0];

    if (touch.identifier === this.primaryTouch) {
        var lastTouch = {x: touch.clientX, y: touch.clientY};
        this.lastTouches.push(lastTouch);
        var lts = this.lastTouches;
        var removeLastTouch = function() {
            var i = lts.indexOf(lastTouch);
            if (i > -1) {
                lts.splice(i, 1);
            }
        };
        setTimeout(removeLastTouch, DEDUP_TIMEOUT);
    }
}

function isSyntheticEvent(eventData) {
    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;
    for (var i = 0; i < this.lastTouches.length; i++) {
        var t = this.lastTouches[i];
        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);
        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {
            return true;
        }
    }
    return false;
}

var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;

// magical touchAction value
var TOUCH_ACTION_COMPUTE = 'compute';
var TOUCH_ACTION_AUTO = 'auto';
var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented
var TOUCH_ACTION_NONE = 'none';
var TOUCH_ACTION_PAN_X = 'pan-x';
var TOUCH_ACTION_PAN_Y = 'pan-y';
var TOUCH_ACTION_MAP = getTouchActionProps();

/**
 * Touch Action
 * sets the touchAction property or uses the js alternative
 * @param {Manager} manager
 * @param {String} value
 * @constructor
 */
function TouchAction(manager, value) {
    this.manager = manager;
    this.set(value);
}

TouchAction.prototype = {
    /**
     * set the touchAction value on the element or enable the polyfill
     * @param {String} value
     */
    set: function(value) {
        // find out the touch-action by the event handlers
        if (value == TOUCH_ACTION_COMPUTE) {
            value = this.compute();
        }

        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {
            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
        }
        this.actions = value.toLowerCase().trim();
    },

    /**
     * just re-set the touchAction value
     */
    update: function() {
        this.set(this.manager.options.touchAction);
    },

    /**
     * compute the value for the touchAction property based on the recognizer's settings
     * @returns {String} value
     */
    compute: function() {
        var actions = [];
        each(this.manager.recognizers, function(recognizer) {
            if (boolOrFn(recognizer.options.enable, [recognizer])) {
                actions = actions.concat(recognizer.getTouchAction());
            }
        });
        return cleanTouchActions(actions.join(' '));
    },

    /**
     * this method is called on each input cycle and provides the preventing of the browser behavior
     * @param {Object} input
     */
    preventDefaults: function(input) {
        var srcEvent = input.srcEvent;
        var direction = input.offsetDirection;

        // if the touch action did prevented once this session
        if (this.manager.session.prevented) {
            srcEvent.preventDefault();
            return;
        }

        var actions = this.actions;
        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];

        if (hasNone) {
            //do not prevent defaults if this is a tap gesture

            var isTapPointer = input.pointers.length === 1;
            var isTapMovement = input.distance < 2;
            var isTapTouchTime = input.deltaTime < 250;

            if (isTapPointer && isTapMovement && isTapTouchTime) {
                return;
            }
        }

        if (hasPanX && hasPanY) {
            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
            return;
        }

        if (hasNone ||
            (hasPanY && direction & DIRECTION_HORIZONTAL) ||
            (hasPanX && direction & DIRECTION_VERTICAL)) {
            return this.preventSrc(srcEvent);
        }
    },

    /**
     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
     * @param {Object} srcEvent
     */
    preventSrc: function(srcEvent) {
        this.manager.session.prevented = true;
        srcEvent.preventDefault();
    }
};

/**
 * when the touchActions are collected they are not a valid value, so we need to clean things up. *
 * @param {String} actions
 * @returns {*}
 */
function cleanTouchActions(actions) {
    // none
    if (inStr(actions, TOUCH_ACTION_NONE)) {
        return TOUCH_ACTION_NONE;
    }

    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);

    // if both pan-x and pan-y are set (different recognizers
    // for different directions, e.g. horizontal pan but vertical swipe?)
    // we need none (as otherwise with pan-x pan-y combined none of these
    // recognizers will work, since the browser would handle all panning
    if (hasPanX && hasPanY) {
        return TOUCH_ACTION_NONE;
    }

    // pan-x OR pan-y
    if (hasPanX || hasPanY) {
        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
    }

    // manipulation
    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
        return TOUCH_ACTION_MANIPULATION;
    }

    return TOUCH_ACTION_AUTO;
}

function getTouchActionProps() {
    if (!NATIVE_TOUCH_ACTION) {
        return false;
    }
    var touchMap = {};
    var cssSupports = window.CSS && window.CSS.supports;
    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {

        // If css.supports is not supported but there is native touch-action assume it supports
        // all values. This is the case for IE 10 and 11.
        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;
    });
    return touchMap;
}

/**
 * Recognizer flow explained; *
 * All recognizers have the initial state of POSSIBLE when a input session starts.
 * The definition of a input session is from the first input until the last input, with all it's movement in it. *
 * Example session for mouse-input: mousedown -> mousemove -> mouseup
 *
 * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
 * which determines with state it should be.
 *
 * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
 * POSSIBLE to give it another change on the next cycle.
 *
 *               Possible
 *                  |
 *            +-----+---------------+
 *            |                     |
 *      +-----+-----+               |
 *      |           |               |
 *   Failed      Cancelled          |
 *                          +-------+------+
 *                          |              |
 *                      Recognized       Began
 *                                         |
 *                                      Changed
 *                                         |
 *                                  Ended/Recognized
 */
var STATE_POSSIBLE = 1;
var STATE_BEGAN = 2;
var STATE_CHANGED = 4;
var STATE_ENDED = 8;
var STATE_RECOGNIZED = STATE_ENDED;
var STATE_CANCELLED = 16;
var STATE_FAILED = 32;

/**
 * Recognizer
 * Every recognizer needs to extend from this class.
 * @constructor
 * @param {Object} options
 */
function Recognizer(options) {
    this.options = assign({}, this.defaults, options || {});

    this.id = uniqueId();

    this.manager = null;

    // default is enable true
    this.options.enable = ifUndefined(this.options.enable, true);

    this.state = STATE_POSSIBLE;

    this.simultaneous = {};
    this.requireFail = [];
}

Recognizer.prototype = {
    /**
     * @virtual
     * @type {Object}
     */
    defaults: {},

    /**
     * set options
     * @param {Object} options
     * @return {Recognizer}
     */
    set: function(options) {
        assign(this.options, options);

        // also update the touchAction, in case something changed about the directions/enabled state
        this.manager && this.manager.touchAction.update();
        return this;
    },

    /**
     * recognize simultaneous with an other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    recognizeWith: function(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
            return this;
        }

        var simultaneous = this.simultaneous;
        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        if (!simultaneous[otherRecognizer.id]) {
            simultaneous[otherRecognizer.id] = otherRecognizer;
            otherRecognizer.recognizeWith(this);
        }
        return this;
    },

    /**
     * drop the simultaneous link. it doesnt remove the link on the other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    dropRecognizeWith: function(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
            return this;
        }

        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        delete this.simultaneous[otherRecognizer.id];
        return this;
    },

    /**
     * recognizer can only run when an other is failing
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    requireFailure: function(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
            return this;
        }

        var requireFail = this.requireFail;
        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        if (inArray(requireFail, otherRecognizer) === -1) {
            requireFail.push(otherRecognizer);
            otherRecognizer.requireFailure(this);
        }
        return this;
    },

    /**
     * drop the requireFailure link. it does not remove the link on the other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    dropRequireFailure: function(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
            return this;
        }

        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        var index = inArray(this.requireFail, otherRecognizer);
        if (index > -1) {
            this.requireFail.splice(index, 1);
        }
        return this;
    },

    /**
     * has require failures boolean
     * @returns {boolean}
     */
    hasRequireFailures: function() {
        return this.requireFail.length > 0;
    },

    /**
     * if the recognizer can recognize simultaneous with an other recognizer
     * @param {Recognizer} otherRecognizer
     * @returns {Boolean}
     */
    canRecognizeWith: function(otherRecognizer) {
        return !!this.simultaneous[otherRecognizer.id];
    },

    /**
     * You should use `tryEmit` instead of `emit` directly to check
     * that all the needed recognizers has failed before emitting.
     * @param {Object} input
     */
    emit: function(input) {
        var self = this;
        var state = this.state;

        function emit(event) {
            self.manager.emit(event, input);
        }

        // 'panstart' and 'panmove'
        if (state < STATE_ENDED) {
            emit(self.options.event + stateStr(state));
        }

        emit(self.options.event); // simple 'eventName' events

        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)
            emit(input.additionalEvent);
        }

        // panend and pancancel
        if (state >= STATE_ENDED) {
            emit(self.options.event + stateStr(state));
        }
    },

    /**
     * Check that all the require failure recognizers has failed,
     * if true, it emits a gesture event,
     * otherwise, setup the state to FAILED.
     * @param {Object} input
     */
    tryEmit: function(input) {
        if (this.canEmit()) {
            return this.emit(input);
        }
        // it's failing anyway
        this.state = STATE_FAILED;
    },

    /**
     * can we emit?
     * @returns {boolean}
     */
    canEmit: function() {
        var i = 0;
        while (i < this.requireFail.length) {
            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
                return false;
            }
            i++;
        }
        return true;
    },

    /**
     * update the recognizer
     * @param {Object} inputData
     */
    recognize: function(inputData) {
        // make a new copy of the inputData
        // so we can change the inputData without messing up the other recognizers
        var inputDataClone = assign({}, inputData);

        // is is enabled and allow recognizing?
        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
            this.reset();
            this.state = STATE_FAILED;
            return;
        }

        // reset when we've reached the end
        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
            this.state = STATE_POSSIBLE;
        }

        this.state = this.process(inputDataClone);

        // the recognizer has recognized a gesture
        // so trigger an event
        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
            this.tryEmit(inputDataClone);
        }
    },

    /**
     * return the state of the recognizer
     * the actual recognizing happens in this method
     * @virtual
     * @param {Object} inputData
     * @returns {Const} STATE
     */
    process: function(inputData) { }, // jshint ignore:line

    /**
     * return the preferred touch-action
     * @virtual
     * @returns {Array}
     */
    getTouchAction: function() { },

    /**
     * called when the gesture isn't allowed to recognize
     * like when another is being recognized or it is disabled
     * @virtual
     */
    reset: function() { }
};

/**
 * get a usable string, used as event postfix
 * @param {Const} state
 * @returns {String} state
 */
function stateStr(state) {
    if (state & STATE_CANCELLED) {
        return 'cancel';
    } else if (state & STATE_ENDED) {
        return 'end';
    } else if (state & STATE_CHANGED) {
        return 'move';
    } else if (state & STATE_BEGAN) {
        return 'start';
    }
    return '';
}

/**
 * direction cons to string
 * @param {Const} direction
 * @returns {String}
 */
function directionStr(direction) {
    if (direction == DIRECTION_DOWN) {
        return 'down';
    } else if (direction == DIRECTION_UP) {
        return 'up';
    } else if (direction == DIRECTION_LEFT) {
        return 'left';
    } else if (direction == DIRECTION_RIGHT) {
        return 'right';
    }
    return '';
}

/**
 * get a recognizer by name if it is bound to a manager
 * @param {Recognizer|String} otherRecognizer
 * @param {Recognizer} recognizer
 * @returns {Recognizer}
 */
function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
    var manager = recognizer.manager;
    if (manager) {
        return manager.get(otherRecognizer);
    }
    return otherRecognizer;
}

/**
 * This recognizer is just used as a base for the simple attribute recognizers.
 * @constructor
 * @extends Recognizer
 */
function AttrRecognizer() {
    Recognizer.apply(this, arguments);
}

inherit(AttrRecognizer, Recognizer, {
    /**
     * @namespace
     * @memberof AttrRecognizer
     */
    defaults: {
        /**
         * @type {Number}
         * @default 1
         */
        pointers: 1
    },

    /**
     * Used to check if it the recognizer receives valid input, like input.distance > 10.
     * @memberof AttrRecognizer
     * @param {Object} input
     * @returns {Boolean} recognized
     */
    attrTest: function(input) {
        var optionPointers = this.options.pointers;
        return optionPointers === 0 || input.pointers.length === optionPointers;
    },

    /**
     * Process the input and return the state for the recognizer
     * @memberof AttrRecognizer
     * @param {Object} input
     * @returns {*} State
     */
    process: function(input) {
        var state = this.state;
        var eventType = input.eventType;

        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
        var isValid = this.attrTest(input);

        // on cancel input and we've recognized before, return STATE_CANCELLED
        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
            return state | STATE_CANCELLED;
        } else if (isRecognized || isValid) {
            if (eventType & INPUT_END) {
                return state | STATE_ENDED;
            } else if (!(state & STATE_BEGAN)) {
                return STATE_BEGAN;
            }
            return state | STATE_CHANGED;
        }
        return STATE_FAILED;
    }
});

/**
 * Pan
 * Recognized when the pointer is down and moved in the allowed direction.
 * @constructor
 * @extends AttrRecognizer
 */
function PanRecognizer() {
    AttrRecognizer.apply(this, arguments);

    this.pX = null;
    this.pY = null;
}

inherit(PanRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof PanRecognizer
     */
    defaults: {
        event: 'pan',
        threshold: 10,
        pointers: 1,
        direction: DIRECTION_ALL
    },

    getTouchAction: function() {
        var direction = this.options.direction;
        var actions = [];
        if (direction & DIRECTION_HORIZONTAL) {
            actions.push(TOUCH_ACTION_PAN_Y);
        }
        if (direction & DIRECTION_VERTICAL) {
            actions.push(TOUCH_ACTION_PAN_X);
        }
        return actions;
    },

    directionTest: function(input) {
        var options = this.options;
        var hasMoved = true;
        var distance = input.distance;
        var direction = input.direction;
        var x = input.deltaX;
        var y = input.deltaY;

        // lock to axis?
        if (!(direction & options.direction)) {
            if (options.direction & DIRECTION_HORIZONTAL) {
                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;
                hasMoved = x != this.pX;
                distance = Math.abs(input.deltaX);
            } else {
                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;
                hasMoved = y != this.pY;
                distance = Math.abs(input.deltaY);
            }
        }
        input.direction = direction;
        return hasMoved && distance > options.threshold && direction & options.direction;
    },

    attrTest: function(input) {
        return AttrRecognizer.prototype.attrTest.call(this, input) &&
            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));
    },

    emit: function(input) {

        this.pX = input.deltaX;
        this.pY = input.deltaY;

        var direction = directionStr(input.direction);

        if (direction) {
            input.additionalEvent = this.options.event + direction;
        }
        this._super.emit.call(this, input);
    }
});

/**
 * Pinch
 * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
 * @constructor
 * @extends AttrRecognizer
 */
function PinchRecognizer() {
    AttrRecognizer.apply(this, arguments);
}

inherit(PinchRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof PinchRecognizer
     */
    defaults: {
        event: 'pinch',
        threshold: 0,
        pointers: 2
    },

    getTouchAction: function() {
        return [TOUCH_ACTION_NONE];
    },

    attrTest: function(input) {
        return this._super.attrTest.call(this, input) &&
            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
    },

    emit: function(input) {
        if (input.scale !== 1) {
            var inOut = input.scale < 1 ? 'in' : 'out';
            input.additionalEvent = this.options.event + inOut;
        }
        this._super.emit.call(this, input);
    }
});

/**
 * Press
 * Recognized when the pointer is down for x ms without any movement.
 * @constructor
 * @extends Recognizer
 */
function PressRecognizer() {
    Recognizer.apply(this, arguments);

    this._timer = null;
    this._input = null;
}

inherit(PressRecognizer, Recognizer, {
    /**
     * @namespace
     * @memberof PressRecognizer
     */
    defaults: {
        event: 'press',
        pointers: 1,
        time: 251, // minimal time of the pointer to be pressed
        threshold: 9 // a minimal movement is ok, but keep it low
    },

    getTouchAction: function() {
        return [TOUCH_ACTION_AUTO];
    },

    process: function(input) {
        var options = this.options;
        var validPointers = input.pointers.length === options.pointers;
        var validMovement = input.distance < options.threshold;
        var validTime = input.deltaTime > options.time;

        this._input = input;

        // we only allow little movement
        // and we've reached an end event, so a tap is possible
        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {
            this.reset();
        } else if (input.eventType & INPUT_START) {
            this.reset();
            this._timer = setTimeoutContext(function() {
                this.state = STATE_RECOGNIZED;
                this.tryEmit();
            }, options.time, this);
        } else if (input.eventType & INPUT_END) {
            return STATE_RECOGNIZED;
        }
        return STATE_FAILED;
    },

    reset: function() {
        clearTimeout(this._timer);
    },

    emit: function(input) {
        if (this.state !== STATE_RECOGNIZED) {
            return;
        }

        if (input && (input.eventType & INPUT_END)) {
            this.manager.emit(this.options.event + 'up', input);
        } else {
            this._input.timeStamp = now();
            this.manager.emit(this.options.event, this._input);
        }
    }
});

/**
 * Rotate
 * Recognized when two or more pointer are moving in a circular motion.
 * @constructor
 * @extends AttrRecognizer
 */
function RotateRecognizer() {
    AttrRecognizer.apply(this, arguments);
}

inherit(RotateRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof RotateRecognizer
     */
    defaults: {
        event: 'rotate',
        threshold: 0,
        pointers: 2
    },

    getTouchAction: function() {
        return [TOUCH_ACTION_NONE];
    },

    attrTest: function(input) {
        return this._super.attrTest.call(this, input) &&
            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
    }
});

/**
 * Swipe
 * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
 * @constructor
 * @extends AttrRecognizer
 */
function SwipeRecognizer() {
    AttrRecognizer.apply(this, arguments);
}

inherit(SwipeRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof SwipeRecognizer
     */
    defaults: {
        event: 'swipe',
        threshold: 10,
        velocity: 0.3,
        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
        pointers: 1
    },

    getTouchAction: function() {
        return PanRecognizer.prototype.getTouchAction.call(this);
    },

    attrTest: function(input) {
        var direction = this.options.direction;
        var velocity;

        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
            velocity = input.overallVelocity;
        } else if (direction & DIRECTION_HORIZONTAL) {
            velocity = input.overallVelocityX;
        } else if (direction & DIRECTION_VERTICAL) {
            velocity = input.overallVelocityY;
        }

        return this._super.attrTest.call(this, input) &&
            direction & input.offsetDirection &&
            input.distance > this.options.threshold &&
            input.maxPointers == this.options.pointers &&
            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
    },

    emit: function(input) {
        var direction = directionStr(input.offsetDirection);
        if (direction) {
            this.manager.emit(this.options.event + direction, input);
        }

        this.manager.emit(this.options.event, input);
    }
});

/**
 * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
 * between the given interval and position. The delay option can be used to recognize multi-taps without firing
 * a single tap.
 *
 * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
 * multi-taps being recognized.
 * @constructor
 * @extends Recognizer
 */
function TapRecognizer() {
    Recognizer.apply(this, arguments);

    // previous time and center,
    // used for tap counting
    this.pTime = false;
    this.pCenter = false;

    this._timer = null;
    this._input = null;
    this.count = 0;
}

inherit(TapRecognizer, Recognizer, {
    /**
     * @namespace
     * @memberof PinchRecognizer
     */
    defaults: {
        event: 'tap',
        pointers: 1,
        taps: 1,
        interval: 300, // max time between the multi-tap taps
        time: 250, // max time of the pointer to be down (like finger on the screen)
        threshold: 9, // a minimal movement is ok, but keep it low
        posThreshold: 10 // a multi-tap can be a bit off the initial position
    },

    getTouchAction: function() {
        return [TOUCH_ACTION_MANIPULATION];
    },

    process: function(input) {
        var options = this.options;

        var validPointers = input.pointers.length === options.pointers;
        var validMovement = input.distance < options.threshold;
        var validTouchTime = input.deltaTime < options.time;

        this.reset();

        if ((input.eventType & INPUT_START) && (this.count === 0)) {
            return this.failTimeout();
        }

        // we only allow little movement
        // and we've reached an end event, so a tap is possible
        if (validMovement && validTouchTime && validPointers) {
            if (input.eventType != INPUT_END) {
                return this.failTimeout();
            }

            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;
            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;

            this.pTime = input.timeStamp;
            this.pCenter = input.center;

            if (!validMultiTap || !validInterval) {
                this.count = 1;
            } else {
                this.count += 1;
            }

            this._input = input;

            // if tap count matches we have recognized it,
            // else it has began recognizing...
            var tapCount = this.count % options.taps;
            if (tapCount === 0) {
                // no failing requirements, immediately trigger the tap event
                // or wait as long as the multitap interval to trigger
                if (!this.hasRequireFailures()) {
                    return STATE_RECOGNIZED;
                } else {
                    this._timer = setTimeoutContext(function() {
                        this.state = STATE_RECOGNIZED;
                        this.tryEmit();
                    }, options.interval, this);
                    return STATE_BEGAN;
                }
            }
        }
        return STATE_FAILED;
    },

    failTimeout: function() {
        this._timer = setTimeoutContext(function() {
            this.state = STATE_FAILED;
        }, this.options.interval, this);
        return STATE_FAILED;
    },

    reset: function() {
        clearTimeout(this._timer);
    },

    emit: function() {
        if (this.state == STATE_RECOGNIZED) {
            this._input.tapCount = this.count;
            this.manager.emit(this.options.event, this._input);
        }
    }
});

/**
 * Simple way to create a manager with a default set of recognizers.
 * @param {HTMLElement} element
 * @param {Object} [options]
 * @constructor
 */
function Hammer(element, options) {
    options = options || {};
    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);
    return new Manager(element, options);
}

/**
 * @const {string}
 */
Hammer.VERSION = '2.0.7';

/**
 * default settings
 * @namespace
 */
Hammer.defaults = {
    /**
     * set if DOM events are being triggered.
     * But this is slower and unused by simple implementations, so disabled by default.
     * @type {Boolean}
     * @default false
     */
    domEvents: false,

    /**
     * The value for the touchAction property/fallback.
     * When set to `compute` it will magically set the correct value based on the added recognizers.
     * @type {String}
     * @default compute
     */
    touchAction: TOUCH_ACTION_COMPUTE,

    /**
     * @type {Boolean}
     * @default true
     */
    enable: true,

    /**
     * EXPERIMENTAL FEATURE -- can be removed/changed
     * Change the parent input target element.
     * If Null, then it is being set the to main element.
     * @type {Null|EventTarget}
     * @default null
     */
    inputTarget: null,

    /**
     * force an input class
     * @type {Null|Function}
     * @default null
     */
    inputClass: null,

    /**
     * Default recognizer setup when calling `Hammer()`
     * When creating a new Manager these will be skipped.
     * @type {Array}
     */
    preset: [
        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
        [RotateRecognizer, {enable: false}],
        [PinchRecognizer, {enable: false}, ['rotate']],
        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],
        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],
        [TapRecognizer],
        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],
        [PressRecognizer]
    ],

    /**
     * Some CSS properties can be used to improve the working of Hammer.
     * Add them to this method and they will be set when creating a new Manager.
     * @namespace
     */
    cssProps: {
        /**
         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
         * @type {String}
         * @default 'none'
         */
        userSelect: 'none',

        /**
         * Disable the Windows Phone grippers when pressing an element.
         * @type {String}
         * @default 'none'
         */
        touchSelect: 'none',

        /**
         * Disables the default callout shown when you touch and hold a touch target.
         * On iOS, when you touch and hold a touch target such as a link, Safari displays
         * a callout containing information about the link. This property allows you to disable that callout.
         * @type {String}
         * @default 'none'
         */
        touchCallout: 'none',

        /**
         * Specifies whether zooming is enabled. Used by IE10>
         * @type {String}
         * @default 'none'
         */
        contentZooming: 'none',

        /**
         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
         * @type {String}
         * @default 'none'
         */
        userDrag: 'none',

        /**
         * Overrides the highlight color shown when the user taps a link or a JavaScript
         * clickable element in iOS. This property obeys the alpha value, if specified.
         * @type {String}
         * @default 'rgba(0,0,0,0)'
         */
        tapHighlightColor: 'rgba(0,0,0,0)'
    }
};

var STOP = 1;
var FORCED_STOP = 2;

/**
 * Manager
 * @param {HTMLElement} element
 * @param {Object} [options]
 * @constructor
 */
function Manager(element, options) {
    this.options = assign({}, Hammer.defaults, options || {});

    this.options.inputTarget = this.options.inputTarget || element;

    this.handlers = {};
    this.session = {};
    this.recognizers = [];
    this.oldCssProps = {};

    this.element = element;
    this.input = createInputInstance(this);
    this.touchAction = new TouchAction(this, this.options.touchAction);

    toggleCssProps(this, true);

    each(this.options.recognizers, function(item) {
        var recognizer = this.add(new (item[0])(item[1]));
        item[2] && recognizer.recognizeWith(item[2]);
        item[3] && recognizer.requireFailure(item[3]);
    }, this);
}

Manager.prototype = {
    /**
     * set options
     * @param {Object} options
     * @returns {Manager}
     */
    set: function(options) {
        assign(this.options, options);

        // Options that need a little more setup
        if (options.touchAction) {
            this.touchAction.update();
        }
        if (options.inputTarget) {
            // Clean up existing event listeners and reinitialize
            this.input.destroy();
            this.input.target = options.inputTarget;
            this.input.init();
        }
        return this;
    },

    /**
     * stop recognizing for this session.
     * This session will be discarded, when a new [input]start event is fired.
     * When forced, the recognizer cycle is stopped immediately.
     * @param {Boolean} [force]
     */
    stop: function(force) {
        this.session.stopped = force ? FORCED_STOP : STOP;
    },

    /**
     * run the recognizers!
     * called by the inputHandler function on every movement of the pointers (touches)
     * it walks through all the recognizers and tries to detect the gesture that is being made
     * @param {Object} inputData
     */
    recognize: function(inputData) {
        var session = this.session;
        if (session.stopped) {
            return;
        }

        // run the touch-action polyfill
        this.touchAction.preventDefaults(inputData);

        var recognizer;
        var recognizers = this.recognizers;

        // this holds the recognizer that is being recognized.
        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
        // if no recognizer is detecting a thing, it is set to `null`
        var curRecognizer = session.curRecognizer;

        // reset when the last recognizer is recognized
        // or when we're in a new session
        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {
            curRecognizer = session.curRecognizer = null;
        }

        var i = 0;
        while (i < recognizers.length) {
            recognizer = recognizers[i];

            // find out if we are allowed try to recognize the input for this one.
            // 1.   allow if the session is NOT forced stopped (see the .stop() method)
            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
            //      that is being recognized.
            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
            //      this can be setup with the `recognizeWith()` method on the recognizer.
            if (session.stopped !== FORCED_STOP && ( // 1
                    !curRecognizer || recognizer == curRecognizer || // 2
                    recognizer.canRecognizeWith(curRecognizer))) { // 3
                recognizer.recognize(inputData);
            } else {
                recognizer.reset();
            }

            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
            // current active recognizer. but only if we don't already have an active recognizer
            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
                curRecognizer = session.curRecognizer = recognizer;
            }
            i++;
        }
    },

    /**
     * get a recognizer by its event name.
     * @param {Recognizer|String} recognizer
     * @returns {Recognizer|Null}
     */
    get: function(recognizer) {
        if (recognizer instanceof Recognizer) {
            return recognizer;
        }

        var recognizers = this.recognizers;
        for (var i = 0; i < recognizers.length; i++) {
            if (recognizers[i].options.event == recognizer) {
                return recognizers[i];
            }
        }
        return null;
    },

    /**
     * add a recognizer to the manager
     * existing recognizers with the same event name will be removed
     * @param {Recognizer} recognizer
     * @returns {Recognizer|Manager}
     */
    add: function(recognizer) {
        if (invokeArrayArg(recognizer, 'add', this)) {
            return this;
        }

        // remove existing
        var existing = this.get(recognizer.options.event);
        if (existing) {
            this.remove(existing);
        }

        this.recognizers.push(recognizer);
        recognizer.manager = this;

        this.touchAction.update();
        return recognizer;
    },

    /**
     * remove a recognizer by name or instance
     * @param {Recognizer|String} recognizer
     * @returns {Manager}
     */
    remove: function(recognizer) {
        if (invokeArrayArg(recognizer, 'remove', this)) {
            return this;
        }

        recognizer = this.get(recognizer);

        // let's make sure this recognizer exists
        if (recognizer) {
            var recognizers = this.recognizers;
            var index = inArray(recognizers, recognizer);

            if (index !== -1) {
                recognizers.splice(index, 1);
                this.touchAction.update();
            }
        }

        return this;
    },

    /**
     * bind event
     * @param {String} events
     * @param {Function} handler
     * @returns {EventEmitter} this
     */
    on: function(events, handler) {
        if (events === undefined) {
            return;
        }
        if (handler === undefined) {
            return;
        }

        var handlers = this.handlers;
        each(splitStr(events), function(event) {
            handlers[event] = handlers[event] || [];
            handlers[event].push(handler);
        });
        return this;
    },

    /**
     * unbind event, leave emit blank to remove all handlers
     * @param {String} events
     * @param {Function} [handler]
     * @returns {EventEmitter} this
     */
    off: function(events, handler) {
        if (events === undefined) {
            return;
        }

        var handlers = this.handlers;
        each(splitStr(events), function(event) {
            if (!handler) {
                delete handlers[event];
            } else {
                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
            }
        });
        return this;
    },

    /**
     * emit event to the listeners
     * @param {String} event
     * @param {Object} data
     */
    emit: function(event, data) {
        // we also want to trigger dom events
        if (this.options.domEvents) {
            triggerDomEvent(event, data);
        }

        // no handlers, so skip it all
        var handlers = this.handlers[event] && this.handlers[event].slice();
        if (!handlers || !handlers.length) {
            return;
        }

        data.type = event;
        data.preventDefault = function() {
            data.srcEvent.preventDefault();
        };

        var i = 0;
        while (i < handlers.length) {
            handlers[i](data);
            i++;
        }
    },

    /**
     * destroy the manager and unbinds all events
     * it doesn't unbind dom events, that is the user own responsibility
     */
    destroy: function() {
        this.element && toggleCssProps(this, false);

        this.handlers = {};
        this.session = {};
        this.input.destroy();
        this.element = null;
    }
};

/**
 * add/remove the css properties as defined in manager.options.cssProps
 * @param {Manager} manager
 * @param {Boolean} add
 */
function toggleCssProps(manager, add) {
    var element = manager.element;
    if (!element.style) {
        return;
    }
    var prop;
    each(manager.options.cssProps, function(value, name) {
        prop = prefixed(element.style, name);
        if (add) {
            manager.oldCssProps[prop] = element.style[prop];
            element.style[prop] = value;
        } else {
            element.style[prop] = manager.oldCssProps[prop] || '';
        }
    });
    if (!add) {
        manager.oldCssProps = {};
    }
}

/**
 * trigger dom event
 * @param {String} event
 * @param {Object} data
 */
function triggerDomEvent(event, data) {
    var gestureEvent = document.createEvent('Event');
    gestureEvent.initEvent(event, true, true);
    gestureEvent.gesture = data;
    data.target.dispatchEvent(gestureEvent);
}

assign(Hammer, {
    INPUT_START: INPUT_START,
    INPUT_MOVE: INPUT_MOVE,
    INPUT_END: INPUT_END,
    INPUT_CANCEL: INPUT_CANCEL,

    STATE_POSSIBLE: STATE_POSSIBLE,
    STATE_BEGAN: STATE_BEGAN,
    STATE_CHANGED: STATE_CHANGED,
    STATE_ENDED: STATE_ENDED,
    STATE_RECOGNIZED: STATE_RECOGNIZED,
    STATE_CANCELLED: STATE_CANCELLED,
    STATE_FAILED: STATE_FAILED,

    DIRECTION_NONE: DIRECTION_NONE,
    DIRECTION_LEFT: DIRECTION_LEFT,
    DIRECTION_RIGHT: DIRECTION_RIGHT,
    DIRECTION_UP: DIRECTION_UP,
    DIRECTION_DOWN: DIRECTION_DOWN,
    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
    DIRECTION_VERTICAL: DIRECTION_VERTICAL,
    DIRECTION_ALL: DIRECTION_ALL,

    Manager: Manager,
    Input: Input,
    TouchAction: TouchAction,

    TouchInput: TouchInput,
    MouseInput: MouseInput,
    PointerEventInput: PointerEventInput,
    TouchMouseInput: TouchMouseInput,
    SingleTouchInput: SingleTouchInput,

    Recognizer: Recognizer,
    AttrRecognizer: AttrRecognizer,
    Tap: TapRecognizer,
    Pan: PanRecognizer,
    Swipe: SwipeRecognizer,
    Pinch: PinchRecognizer,
    Rotate: RotateRecognizer,
    Press: PressRecognizer,

    on: addEventListeners,
    off: removeEventListeners,
    each: each,
    merge: merge,
    extend: extend,
    assign: assign,
    inherit: inherit,
    bindFn: bindFn,
    prefixed: prefixed
});

// this prevents errors when Hammer is loaded in the presence of an AMD
//  style loader but by script tag, not by the loader.
var freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line
freeGlobal.Hammer = Hammer;

if (true) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
        return Hammer;
    }.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else if (typeof module != 'undefined' && module.exports) {
    module.exports = Hammer;
} else {
    window[exportName] = Hammer;
}

})(window, document, 'Hammer');


/***/ })
/******/ ]);
//# sourceMappingURL=jnpr.min.js.map